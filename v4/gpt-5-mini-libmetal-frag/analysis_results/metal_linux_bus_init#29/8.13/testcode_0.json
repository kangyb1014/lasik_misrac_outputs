{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer variable lbus is declared as struct linux_bus * but is only used for read-only access in the loop and passed to metal_linux_probe_bus. If metal_linux_probe_bus does not modify the linux_bus object, then lbus should be declared as const struct linux_bus * (and the probe function should take a const pointer). In that situation the code violates MISRA C 2023 Rule 8.13 because a pointer is not const-qualified even though it can be. If, however, metal_linux_probe_bus or other uses modify the pointed-to linux_bus, then the non-const declaration is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_bus_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_bus_init with it.\n  - Your function must have the exact same signature as metal_linux_bus_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_bus_init to check logs.\n  - Your function MUST preserve the original logic of metal_linux_bus_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_bus_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_linux_bus_init(void)\n{\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n    struct linux_bus *lbus;\n    int valid = 0;\n\n    /* Open log file for append. We include headers above so this function\n     * is self-contained for logging purposes. */\n    FILE *log = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"metal_linux_bus_init: entered\\n\");\n        fflush(log);\n    }\n\n    /* Preserve original control flow but capture per-iteration state. */\n    for_each_linux_bus(lbus)\n    {\n        int probe_rc = metal_linux_probe_bus(lbus);\n\n        if (log)\n        {\n            /* Log the pointer value and probe return code so callers can\n             * determine whether the bus object was treated as read-only\n             * by observing probe behavior (no actual inference done here). */\n            fprintf(log, \"metal_linux_bus_init: iter lbus=%p probe_rc=%d\\n\",\n                    (void *)lbus, probe_rc);\n            fflush(log);\n        }\n\n        /* Preserve original accumulation logic. */\n        valid += probe_rc ? 0 : 1;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"metal_linux_bus_init: exiting valid=%d return=%d\\n\",\n                valid, valid ? 0 : -ENODEV);\n        fclose(log);\n    }\n\n    return valid ? 0 : -ENODEV;\n}\n"
}