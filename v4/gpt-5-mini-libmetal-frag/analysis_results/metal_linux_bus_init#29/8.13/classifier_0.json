{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_bus_init:\nstruct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}\n...\n#define for_each_linux_bus(lbus) for((lbus)=linux_bus;(lbus)->bus_name;(lbus)++)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The pointer variable lbus is declared as struct linux_bus * but is only used for read-only access in the loop and passed to metal_linux_probe_bus. If metal_linux_probe_bus does not modify the linux_bus object, then lbus should be declared as const struct linux_bus * (and the probe function should take a const pointer). In that situation the code violates MISRA C 2023 Rule 8.13 because a pointer is not const-qualified even though it can be. If, however, metal_linux_probe_bus or other uses modify the pointed-to linux_bus, then the non-const declaration is required and there is no violation."
}