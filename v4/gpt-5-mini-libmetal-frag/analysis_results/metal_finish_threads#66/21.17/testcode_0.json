{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen pthread_create fails it returns a positive error number (errnum). The code sets error = -pthread_create(...), so on failure error is negative. The call strerror(error) therefore passes a negative error number to strerror. Implementations of strerror typically index into an internal error-message array or otherwise expect non-negative errno values; passing a negative index can cause out-of-bounds access inside strerror, which violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_finish_threads code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_finish_threads with it.\n  - Your function must have the exact same signature as metal_finish_threads.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_finish_threads to check logs.\n  - Your function MUST preserve the original logic of metal_finish_threads as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_finish_threads will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_finish_threads as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_finish_threads(int threads, void *tids)\n{\n    int i;\n    pthread_t *tid_p = (pthread_t *)tids;\n    FILE *log = NULL;\n    int rc;\n\n    /* Try to open the log file for appending. If this fails, fall back to metal_log. */\n    log = fopen(\"/tmp/logs/493.txt\", \"a\");\n\n    if (!tids) {\n        if (log) {\n            fprintf(log, \"metal_finish_threads: entered with threads=%d, tids=NULL\\n\", threads);\n            fclose(log);\n        }\n\n        /* Preserve original behavior: log error and return. */\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        return;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_finish_threads: entered threads=%d, tids=%p\\n\", threads, (void *)tids);\n    }\n\n    for (i = 0; i < threads; i++) {\n        /* Call pthread_join as before; capture return value for logging but preserve original semantics. */\n        rc = pthread_join(tid_p[i], NULL);\n\n        if (log) {\n            /* Print join index, the pthread_t value (as unsigned long), and the return code. */\n            /* Casting pthread_t to unsigned long for logging purposes; this is only for diagnostics. */\n            fprintf(log, \"  join index=%d, tid=%lu, rc=%d\\n\", i, (unsigned long)tid_p[i], rc);\n        }\n\n        /* Preserve original behavior: the return value is ignored by the original implementation. */\n        (void)rc;\n    }\n\n    if (log)\n        fclose(log);\n}\n"
}