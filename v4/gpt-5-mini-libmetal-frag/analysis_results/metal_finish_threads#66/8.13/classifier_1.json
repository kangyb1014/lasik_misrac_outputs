{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter is declared as void *tids but the function only reads the pointed-to pthread_t objects (casts to pthread_t * and calls pthread_join), so the pointed-to data are not modified. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. The current signature allows (or forces) removing const qualification via the cast. Recommended fix: change the prototype to accept const void *tids or better const pthread_t *tids and use const pthread_t *tid_p = (const pthread_t *)tids."
}