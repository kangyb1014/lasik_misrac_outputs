{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_log(...) expands a macro that uses compiler extensions: the macro is defined with a GCC statement-expression '({ ... })' and also uses the token-pasting '##__VA_ARGS__' (GNU extension to allow swallowing the comma for empty variadic arguments). Because the macro expansion relies on these documented compiler extensions, Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/497.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_finish_threads code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_finish_threads with it.\n  - Your function must have the exact same signature as metal_finish_threads.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_finish_threads to check logs.\n  - Your function MUST preserve the original logic of metal_finish_threads as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_finish_threads will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_finish_threads as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tint join_ret;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\tFILE *logf = NULL;\n\n\t/* Attempt to open the log file. If the directory doesn't exist, fopen may fail. */\n\tlogf = fopen(\"/tmp/logs/497.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_finish_threads entered: threads=%d, tids=%p\\n\", threads, tids);\n\t\tfflush(logf);\n\t}\n\n\tif (!tids) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"tids is NULL -> calling metal_log(METAL_LOG_ERROR, ...)\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\n\t\t/* Preserve original behavior: report error via metal_log and return. */\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_finish_threads returning (invalid tids)\\n\");\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"Starting join loop (threads=%d)\\n\", threads);\n\t\tfflush(logf);\n\t}\n\n\tfor (i = 0; i < threads; i++) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"Joining thread index=%d, tid_array_addr=%p\\n\", i, (void *)&tid_p[i]);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\t/* Preserve original behavior: join each thread. Capture return for logging, but do not change control flow. */\n\t\tjoin_ret = pthread_join(tid_p[i], NULL);\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"pthread_join index=%d returned=%d\\n\", i, join_ret);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_finish_threads completed\\n\");\n\t\tfclose(logf);\n\t}\n}\n"
}