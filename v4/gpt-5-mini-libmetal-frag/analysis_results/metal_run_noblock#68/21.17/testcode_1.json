{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code passes 'error' to strerror after assigning error = -pthread_create(...). On failure pthread_create returns a positive errno; negating it yields a negative value. Passing a negative errnum to strerror is implementation-defined and in some implementations may cause out-of-bounds accesses inside the library (e.g. array indexing of error messages). Therefore this can result in accesses beyond object bounds and violates Rule 21.17. A safe fix is to pass the positive error number (e.g. strerror(-error) or store the pthread_create return in a separate variable and pass that), or use a bounds-checked strerror_r.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run_noblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_run_noblock code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_run_noblock with it.\n  - Your function must have the exact same signature as metal_run_noblock.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_run_noblock to check logs.\n  - Your function MUST preserve the original logic of metal_run_noblock as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_run_noblock will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_run_noblock as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\tFILE *fp = NULL;\n\n\t/* Try to open the log file to record control flow and state. */\n\tfp = fopen(\"/tmp/logs/523.txt\", \"a\");\n\tif (fp) {\n\t\tfprintf(fp, \"ENTER metal_run_noblock: threads=%d, tids=%p, child=%p, arg=%p\\n\",\n\t\t\tthreads, (void *)tids, (void *)child, arg);\n\t\tfflush(fp);\n\t}\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"ERROR: invalid argument, tids is NULL. Returning -EINVAL\\n\");\n\t\t\tfclose(fp);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\tif (fp) fprintf(fp, \"LOOP index=%d: about to call pthread_create()\\n\", i);\n\t\tfflush(fp);\n\n\t\t/* Preserve original behavior: capture pthread_create return and negate it. */\n\t\tint rc = pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"pthread_create returned rc=%d\\n\", rc);\n\t\t\tfflush(fp);\n\t\t}\n\n\t\terror = -rc;\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"Negated error value to pass to strerror(): error=%d\\n\", error);\n\t\t\tfflush(fp);\n\t\t}\n\n\t\tif (error) {\n\t\t\t/* Call strerror with the (negated) error exactly as original code does\n\t\t\t   so we capture the same behavior (including any implementation-defined\n\t\t\t   effects). Log the returned string pointer and content. */\n\t\t\tconst char *errstr = strerror(error);\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"strerror(error) returned pointer=%p, content=\\\"%s\\\"\\n\",\n\t\t\t\t\t(void *)errstr, (errstr ? errstr : \"(null)\"));\n\t\t\t\tfflush(fp);\n\t\t\t}\n\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"Logged metal_log for failure at index=%d, breaking out of loop\\n\", i);\n\t\t\t\tfflush(fp);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\tif (fp) {\n\t\tfprintf(fp, \"EXIT metal_run_noblock: returning error=%d, threads_out=%d\\n\",\n\t\t\terror, i);\n\t\tfclose(fp);\n\t}\n\n\treturn error;\n}\n"
}