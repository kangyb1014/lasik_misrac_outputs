{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(bus->name, name) is evaluated before checking result. If name is NULL (or if bus->name is not a valid NUL-terminated buffer or points to a shorter buffer), strcmp will read via an invalid pointer or past the object bounds, causing out-of-bounds/undefined access. For example, a caller passing name == NULL will make strcmp dereference a NULL pointer. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_bus_find code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_bus_find with it.\n  - Your function must have the exact same signature as metal_bus_find.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_bus_find to check logs.\n  - Your function MUST preserve the original logic of metal_bus_find as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_bus_find will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_bus_find as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\t/* Open a log file to record control flow and state. Append to preserve previous runs. */\n\tFILE *log = fopen(\"/tmp/logs/623.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_bus_find entered: name=%p, result=%p\\n\", (void *)name, (void *)result);\n\t\tfflush(log);\n\t}\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (log) {\n\t\t\tfprintf(log, \"iter: node=%p bus=%p bus->name=%p\\n\",\n\t\t\t\t(void *)node, (void *)bus, (void *)bus->name);\n\t\t\tfflush(log);\n\t\t}\n\n\t\t/* Preserve original behavior: call strcmp exactly as before. This may crash\n\t\t   if `name` is NULL or bus->name is not a valid NUL-terminated string; the\n\t\t   crash is part of the reported violation scenario. */\n\t\tint cmp = strcmp(bus->name, name);\n\t\tif (log) {\n\t\t\tfprintf(log, \"strcmp(bus->name=%p, name=%p) returned %d\\n\",\n\t\t\t\t(void *)bus->name, (void *)name, cmp);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (cmp == 0 && result) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"match found: assigning *result=%p -> bus=%p\\n\", (void *)result, (void *)bus);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"not found: returning -ENOENT\\n\");\n\t\tfclose(log);\n\t}\n\treturn -ENOENT;\n}\n"
}