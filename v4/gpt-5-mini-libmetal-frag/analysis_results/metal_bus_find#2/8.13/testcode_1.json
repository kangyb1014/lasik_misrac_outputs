{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes an out-parameter 'struct metal_bus **result' but only assigns a pointer to an existing bus and does not (and need not) modify the bus object itself. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible; the API could be changed to 'const struct metal_bus **result' (returning a pointer to const) to express that the function does not permit modification of the bus through this returned pointer. As written, the lack of const on the pointed-to type violates Rule 8.13 (unless the API intentionally intends to allow callers to modify the bus contents, in which case no violation would occur).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_bus_find code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_bus_find with it.\n  - Your function must have the exact same signature as metal_bus_find.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_bus_find to check logs.\n  - Your function MUST preserve the original logic of metal_bus_find as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_bus_find will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_bus_find as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_bus_find(const char *name, struct metal_bus **result)\n{\n    /* Logging probe: append control flow and state to /tmp/logs/625.txt */\n    FILE *logf = fopen(\"/tmp/logs/625.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER metal_bus_find: name=%s, result=%p\\n\",\n                (name != NULL) ? name : \"(null)\", (void *)result);\n    }\n\n    struct metal_list *node;\n    struct metal_bus *bus;\n    int ret = -ENOENT;\n    int iter = 0;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n        if (logf) {\n            fprintf(logf, \"  iter=%d: bus=%p, bus->name=%s\\n\",\n                    iter, (void *)bus, (bus && bus->name) ? bus->name : \"(null)\");\n        }\n\n        if (strcmp(bus->name, name) == 0 && result) {\n            *result = bus;\n            if (logf) {\n                fprintf(logf, \"  MATCH at iter=%d: assigned *result=%p, returning 0\\n\",\n                        iter, (void *)bus);\n            }\n            ret = 0;\n            break;\n        }\n\n        iter++;\n    }\n\n    if (ret != 0) {\n        if (logf) {\n            fprintf(logf, \"  NO MATCH: returning -ENOENT\\n\");\n        }\n    }\n\n    if (logf) {\n        fclose(logf);\n    }\n\n    return ret;\n}\n"
}