{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator variable ldrv is declared as a non-const pointer (struct linux_driver *ldrv) and is used only to reference driver data in the loop. If the loop and called functions (e.g. metal_linux_probe_driver) do not modify the pointed-to driver object, then the pointer should be const-qualified. In that case the code violates MISRA C 2023 Rule 8.13. Fix: declare the iterator as const struct linux_driver *ldrv (and update the for_each_linux_driver macro and any callee prototypes to accept a const pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_probe_bus code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_probe_bus with it.\n  - Your function must have the exact same signature as metal_linux_probe_bus.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_probe_bus to check logs.\n  - Your function MUST preserve the original logic of metal_linux_probe_bus as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_probe_bus will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\tFILE *log = NULL;\n\n\t/* Open log file for appending. Non-fatal: if fopen fails, continue silently. */\n\tlog = fopen(\"/tmp/logs/225.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_probe_bus: entered, lbus=%p\\n\", (void *)lbus);\n\t\tfflush(log);\n\t}\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_linux_probe_bus: sysfs_open_bus failed for bus_name=%s, sbus=NULL\\n\",\n\t\t\t\tlbus->bus_name ? lbus->bus_name : \"(null)\");\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_probe_bus: sysfs_open_bus succeeded, sbus=%p\\n\", (void *)lbus->sbus);\n\t\tfflush(log);\n\t}\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\t/* Log the iterator pointer value so other agents can confirm it is a non-const pointer at runtime. */\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_linux_probe_bus: iterating driver, ldrv=%p\\n\", (void *)ldrv);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_linux_probe_bus: metal_linux_probe_driver returned %d for ldrv=%p\\n\", ret, (void *)ldrv);\n\t\t\tfflush(log);\n\t\t}\n\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_linux_probe_bus: no drivers probed successfully, error=%d, closing bus\\n\", error);\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_probe_bus: metal_linux_register_bus returned %d\\n\", error);\n\t\tfflush(log);\n\t\tfclose(log);\n\t}\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n"
}