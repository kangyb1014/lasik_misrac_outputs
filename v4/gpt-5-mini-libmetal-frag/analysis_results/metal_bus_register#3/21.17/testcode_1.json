{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: strlen(bus->name) is called after only a null-pointer check. If bus->name points to a non\u2011terminated character array (for example: char name_buf[3] = {'a','b','c'}; bus.name = name_buf; metal_bus_register(&bus);), strlen will read past the end of the object searching for a '\\0', causing accesses beyond the bounds of the object and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_bus_register code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_bus_register with it.\n  - Your function must have the exact same signature as metal_bus_register.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_bus_register to check logs.\n  - Your function MUST preserve the original logic of metal_bus_register as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_bus_register will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_bus_register as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_bus_register(struct metal_bus *bus)\n{\n    /* Logging to reproduce and capture the violation scenario. */\n    FILE *logf = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"metal_bus_register entered: bus=%p\\n\", (void *)bus);\n        fflush(logf);\n    }\n\n    if (!bus) {\n        if (logf) {\n            fprintf(logf, \"metal_bus_register: bus is NULL -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    if (logf) {\n        fprintf(logf, \"metal_bus_register: bus=%p, bus->name=%p\\n\", (void *)bus, (void *)bus->name);\n        fflush(logf);\n    }\n\n    if (!bus->name) {\n        if (logf) {\n            fprintf(logf, \"metal_bus_register: bus->name is NULL -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    /* Log that strlen will be invoked (this is where a non-terminated array can cause read beyond bounds).\n     * We intentionally perform the same strlen call as in the original code to preserve behavior. */\n    if (logf) {\n        fprintf(logf, \"metal_bus_register: about to call strlen(bus->name) for pointer %p\\n\", (void *)bus->name);\n        fflush(logf);\n    }\n\n    size_t name_len = strlen(bus->name);\n\n    if (logf) {\n        fprintf(logf, \"metal_bus_register: strlen(bus->name) returned %zu\\n\", name_len);\n        fflush(logf);\n    }\n\n    if (!name_len) {\n        if (logf) {\n            fprintf(logf, \"metal_bus_register: name length is zero -> return -EINVAL\\n\");\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    int found = metal_bus_find(bus->name, NULL);\n    if (logf) {\n        fprintf(logf, \"metal_bus_register: metal_bus_find returned %d for name pointer %p\\n\", found, (void *)bus->name);\n        fflush(logf);\n    }\n    if (found == 0) {\n        if (logf) {\n            fprintf(logf, \"metal_bus_register: bus already exists -> return -EEXIST\\n\");\n            fclose(logf);\n        }\n        return -EEXIST;\n    }\n\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    if (logf) {\n        /* Attempt to log the name (this may also read beyond bounds if name is not terminated,\n         * but doing so mirrors the original behavior which already calls strlen/uses the string). */\n        fprintf(logf, \"metal_bus_register: success, registered bus name pointer=%p\\n\", (void *)bus->name);\n        fclose(logf);\n    }\n\n    return 0;\n}\n"
}