{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_for_each_page_size_down(ps) hides the actual for(;;) clauses. If that macro expands to a well-formed for loop that uses only the loop counter identifier ps in the second clause and only modifies ps in the third clause (for example: for (ps = last_page_size; ps >= first_page_size; --ps)) then Rule 14.2 is satisfied. However, a violation occurs if the macro expansion places function calls or uses other objects in the second or third clauses that have persistent side effects or that reference objects modified in the loop body. Concrete violation example: the macro expands to\n  for (ps = page_size_list_last(); page_size_available(ps); ps = page_size_list_prev(ps))\nwhere page_size_available() has side effects (or reads/writes an object that metal_shmem_try_map() modifies). In that case the second clause has persistent side effects and/or uses objects modified in the body, violating MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/191.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_open code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_open with it.\n  - Your function must have the exact same signature as metal_shmem_open.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_open to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_open as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_open will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_open as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\tFILE *log191 = fopen(\"/tmp/logs/191.txt\", \"a\");\n\n\tif (log191) {\n\t\tfprintf(log191, \"ENTER metal_shmem_open: name=%s size=%lu result=%p\\n\",\n\t\t\tname ? name : \"(null)\", (unsigned long)size, (void *)result);\n\t\tfflush(log191);\n\t}\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (log191) {\n\t\tfprintf(log191, \"after metal_shmem_open_generic: error=%d\\n\", error);\n\t\tfflush(log191);\n\t}\n\n\t/* Preserve existing early-return logic */\n\tif (!error) {\n\t\tif (log191) {\n\t\t\tfprintf(log191, \"early return from metal_shmem_open: success (error=0)\\n\");\n\t\t\tfclose(log191);\n\t\t}\n\t\treturn error;\n\t}\n\n\terror = metal_open(name, 1);\n\tif (log191) {\n\t\tfprintf(log191, \"after metal_open: returned %d\\n\", error);\n\t\tfflush(log191);\n\t}\n\n\tif (error < 0) {\n\t\t/* Log the failure, keep original behavior (metal_log and return) */\n\t\tif (log191) {\n\t\t\tfprintf(log191, \"metal_open failed for name=%s error=%d\\n\",\n\t\t\t\tname ? name : \"(null)\", error);\n\t\t\tfclose(log191);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\tif (log191) {\n\t\tfprintf(log191, \"fd acquired: %d, entering page-size loop\\n\", fd);\n\t\tfflush(log191);\n\t}\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (log191) {\n\t\t\tfprintf(log191, \"loop iteration: ps=%p page_size=%lu\\n\",\n\t\t\t\t(void *)ps, (unsigned long)ps->page_size);\n\t\t\tfflush(log191);\n\t\t}\n\n\t\tif (ps->page_size > 2 * size) {\n\t\t\tif (log191) {\n\t\t\t\tfprintf(log191, \"skip: ps->page_size (%lu) > 2*size (%lu)\\n\",\n\t\t\t\t\t(unsigned long)ps->page_size, (unsigned long)(2 * size));\n\t\t\t\tfflush(log191);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (log191) {\n\t\t\tfprintf(log191, \"attempting metal_shmem_try_map: ps=%p fd=%d size=%lu\\n\",\n\t\t\t\t(void *)ps, fd, (unsigned long)size);\n\t\t\tfflush(log191);\n\t\t}\n\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\n\t\tif (log191) {\n\t\t\tfprintf(log191, \"metal_shmem_try_map returned %d\\n\", error);\n\t\t\tfflush(log191);\n\t\t}\n\n\t\tif (!error) {\n\t\t\tif (log191) {\n\t\t\t\tfprintf(log191, \"mapping succeeded with ps=%p; breaking loop\\n\", (void *)ps);\n\t\t\t\tfflush(log191);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tclose(fd);\n\tif (log191) {\n\t\tfprintf(log191, \"exiting metal_shmem_open: closed fd=%d final_error=%d\\n\", fd, error);\n\t\tfclose(log191);\n\t}\n\treturn error;\n}\n"
}