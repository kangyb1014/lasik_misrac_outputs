{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(shmem->name, name) is performed with no prior validation that either pointer is non-NULL and that both strings are NUL-terminated. For example, if metal_shmem_open is called with name == NULL (or with a non NUL-terminated buffer), metal_shmem_open_generic will call strcmp which will read through the invalid/unterminated memory and thus access beyond the bounds of the referenced object(s). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_open code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_open with it.\n  - Your function must have the exact same signature as metal_shmem_open.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_open to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_open as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_open will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_open as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\tFILE *logf = fopen(\"/tmp/logs/193.txt\", \"a\");\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_shmem_open ENTER: name=%p size=%zu result=%p\\n\",\n\t\t\t(const void *)name, size, (void *)result);\n\t\tfflush(logf);\n\t} else {\n\t\t/* If log file cannot be opened, preserve behavior but emit a debug log. */\n\t\tmetal_log(METAL_LOG_DEBUG, \"metal_shmem_open: could not open log file /tmp/logs/193.txt\\n\");\n\t}\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_shmem_open_generic returned %d\\n\", error);\n\t\tfflush(logf);\n\t}\n\n\t/* Preserve original behavior: if generic succeeded (error == 0) return it. */\n\tif (!error) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_shmem_open: generic succeeded, returning %d\\n\", error);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn error;\n\t}\n\n\terror = metal_open(name, 1);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_open returned %d for name=%p\\n\", error, (const void *)name);\n\t\tfflush(logf);\n\t}\n\tif (error < 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_open failed: name=%p error=%d\\n\", (const void *)name, error);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\tif (logf) {\n\t\tfprintf(logf, \"metal_shmem_open: obtained fd=%d\\n\", fd);\n\t\tfflush(logf);\n\t}\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"iterating page_size=%zu (2*size=%zu)\\n\", ps->page_size, (size_t)(2 * size));\n\t\t\tfflush(logf);\n\t\t}\n\t\tif (ps->page_size > 2 * size) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"skipping page_size=%zu because > 2*size=%zu\\n\", ps->page_size, (size_t)(2 * size));\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_shmem_try_map returned %d for page_size=%zu\\n\", error, ps->page_size);\n\t\t\tfflush(logf);\n\t\t}\n\t\tif (!error) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"mapping succeeded with page_size=%zu\\n\", ps->page_size);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_shmem_open: closing fd=%d final_error=%d\\n\", fd, error);\n\t\tfclose(logf);\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n"
}