{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log uses GCC/clang statement-expressions (the '({ ... })' construct) and also uses the GNU variadic-macro comma-swallowing extension ('##__VA_ARGS__'). Both constructs are documented compiler-specific extensions and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/197.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_open code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_open with it.\n  - Your function must have the exact same signature as metal_shmem_open.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_open to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_open as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_open will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_open as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\tFILE *log = NULL;\n\n\t/* Open log file (append). If the preferred path is not writable,\n\t * fall back to a simpler /tmp/197.txt so tests still capture output. */\n\tlog = fopen(\"/tmp/logs/197.txt\", \"a\");\n\tif (!log)\n\t\tlog = fopen(\"/tmp/197.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER: metal_shmem_open(name=%s, size=%zu)\\n\",\n\t\t\tname ? name : \"(null)\", size);\n\t\tfflush(log);\n\t}\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (log)\n\t\tfprintf(log, \"after metal_shmem_open_generic -> error=%d\\n\", error);\n\n\t/* Preserve original behavior: if no error (0), return it. */\n\tif (!error) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"early return: success (error=0)\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn error;\n\t}\n\n\terror = metal_open(name, 1);\n\tif (log)\n\t\tfprintf(log, \"after metal_open -> return=%d\\n\", error);\n\tif (error < 0) {\n\t\t/* Keep original logging behavior as well. */\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_open failed (error=%d). Aborting.\\n\", error);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn error;\n\t}\n\tfd = error;\n\tif (log)\n\t\tfprintf(log, \"open succeeded, fd=%d\\n\", fd);\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (log)\n\t\t\tfprintf(log, \"loop page_size=%zu, requested size=%zu\\n\",\n\t\t\t\t(size_t)ps->page_size, size);\n\t\tif (ps->page_size > 2 * size) {\n\t\t\tif (log)\n\t\t\t\tfprintf(log, \" skipping page_size %zu (> 2*size)\\n\",\n\t\t\t\t\t(size_t)ps->page_size);\n\t\t\tcontinue;\n\t\t}\n\t\tif (log)\n\t\t\tfprintf(log, \" trying metal_shmem_try_map with page_size=%zu\\n\",\n\t\t\t\t(size_t)ps->page_size);\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (log)\n\t\t\tfprintf(log, \" metal_shmem_try_map returned %d\\n\", error);\n\t\tif (!error) {\n\t\t\tif (log)\n\t\t\t\tfprintf(log, \" mapping succeeded with page_size=%zu\\n\",\n\t\t\t\t\t(size_t)ps->page_size);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* Close file descriptor as in original. */\n\tclose(fd);\n\tif (log) {\n\t\tfprintf(log, \"closed fd=%d, final error=%d\\n\", fd, error);\n\t\tfclose(log);\n\t}\n\treturn error;\n}\n"
}