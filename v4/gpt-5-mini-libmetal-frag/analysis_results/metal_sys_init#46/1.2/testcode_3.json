{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler-specific language extensions: it relies on the GCC statement-expression extension '({ ... })' and also uses the GCC/clang extension '##__VA_ARGS__' to swallow the comma for empty variadic arguments. Both are explicit compiler extensions and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/727.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_sys_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_sys_init with it.\n  - Your function must have the exact same signature as metal_sys_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_sys_init to check logs.\n  - Your function MUST preserve the original logic of metal_sys_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_sys_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_sys_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\tFILE *logf = NULL;\n\tint saved_errno = 0;\n\n\t/* Open probe log file (try to create directory if needed). */\n\tlogf = fopen(\"/tmp/logs/727.txt\", \"a\");\n\tif (!logf) {\n\t\t/* attempt to create directory and retry */\n\t\t(void)mkdir(\"/tmp/logs\", 0777);\n\t\tlogf = fopen(\"/tmp/logs/727.txt\", \"a\");\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: entered\\n\");\n\t\tfflush(logf);\n\t}\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: tmp_path='%s'\\n\", tmp_path);\n\t\tfflush(logf);\n\t}\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tsaved_errno = errno;\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(saved_errno));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_sys_init: fopen(/dev/urandom) failed: errno=%d (%s)\\n\",\n\t\t\t\tsaved_errno, strerror(saved_errno));\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -saved_errno;\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: /dev/urandom opened\\n\");\n\t\tfflush(logf);\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_sys_init: fread(/dev/urandom) failed or returned 0\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\t} else {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_sys_init: seed read from /dev/urandom = %u\\n\", seed);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: srand called with seed=%u\\n\", seed);\n\t\tfflush(logf);\n\t}\n\n\tresult = metal_init_page_sizes();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: metal_init_page_sizes() returned %d\\n\", result);\n\t\tfflush(logf);\n\t}\n\tif (result < 0) {\n\t\tif (logf) fclose(logf);\n\t\treturn result;\n\t}\n\n\tresult = metal_linux_bus_init();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: metal_linux_bus_init() returned %d\\n\", result);\n\t\tfflush(logf);\n\t}\n\tif (result < 0) {\n\t\tif (logf) fclose(logf);\n\t\treturn result;\n\t}\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tsaved_errno = errno;\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(saved_errno));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_sys_init: open(/proc/self/pagemap) failed: errno=%d (%s)\\n\",\n\t\t\t\tsaved_errno, strerror(saved_errno));\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\t_metal.pagemap_fd = result;\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: pagemap_fd=%d\\n\", _metal.pagemap_fd);\n\t\tfflush(logf);\n\t}\n\n\tmetal_unused(params);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: params marked unused\\n\");\n\t\tfflush(logf);\n\t}\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_sys_init: metal_linux_irq_init() called, returning 0\\n\");\n\t\tfflush(logf);\n\t\tfclose(logf);\n\t}\n\treturn 0;\n}\n"
}