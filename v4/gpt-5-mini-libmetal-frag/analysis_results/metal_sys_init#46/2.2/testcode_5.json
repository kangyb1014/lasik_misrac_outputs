{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(x) expands to do { (x) = (x); } while (0). In metal_sys_init it is invoked as metal_unused(params) where params is a non-volatile function parameter. The self-assignment (params = params) is executed but has no effect on program state for non-volatile objects, so removing it would not affect program behaviour \u2014 it therefore constitutes dead code and violates MISRA C 2023 Rule 2.2. (Note: if x were volatile or the lvalue evaluation had observable side-effects, the assignment would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/728.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_sys_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_sys_init with it.\n  - Your function must have the exact same signature as metal_sys_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_sys_init to check logs.\n  - Your function MUST preserve the original logic of metal_sys_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_sys_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_sys_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n    FILE *probe = fopen(\"/tmp/logs/728.txt\", \"a\");\n\n    if (probe) {\n        fprintf(probe, \"ENTER metal_sys_init: params=%p\\n\", (void *)params);\n    }\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    if (probe) {\n        fprintf(probe, \"tmp_path set to '%s'\\n\", tmp_path);\n    }\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        if (probe) {\n            fprintf(probe, \"/dev/urandom open failed: errno=%d (%s)\\n\", errno, strerror(errno));\n            fclose(probe);\n        }\n        return -errno;\n    }\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n        if (probe) {\n            fprintf(probe, \"fread from /dev/urandom failed; seed uninitialized\\n\");\n        }\n    } else {\n        if (probe) {\n            fprintf(probe, \"seed read from /dev/urandom: %u\\n\", seed);\n        }\n    }\n    fclose(urandom);\n    srand(seed);\n    if (probe) {\n        fprintf(probe, \"srand called\\n\");\n    }\n\n    result = metal_init_page_sizes();\n    if (probe) {\n        fprintf(probe, \"metal_init_page_sizes returned %d\\n\", result);\n    }\n    if (result < 0) {\n        if (probe) fclose(probe);\n        return result;\n    }\n\n    result = metal_linux_bus_init();\n    if (probe) {\n        fprintf(probe, \"metal_linux_bus_init returned %d\\n\", result);\n    }\n    if (result < 0) {\n        if (probe) fclose(probe);\n        return result;\n    }\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n        if (probe) {\n            fprintf(probe, \"open /proc/self/pagemap failed: errno=%d (%s)\\n\", errno, strerror(errno));\n        }\n    }\n    _metal.pagemap_fd = result;\n    if (probe) {\n        fprintf(probe, \"pagemap_fd set to %d\\n\", result);\n    }\n\n    /* Record state around the suspect self-assignment (metal_unused). */\n    if (probe) {\n        fprintf(probe, \"before metal_unused: params=%p\\n\", (void *)params);\n    }\n\n    metal_unused(params);\n\n    if (probe) {\n        fprintf(probe, \"after metal_unused: params=%p\\n\", (void *)params);\n        fprintf(probe, \"Note: metal_unused expands to '(x) = (x);' so for non-volatile params this is a no-op.\\n\");\n    }\n\n    /* Initialize IRQ handling */\n    if (probe) {\n        fprintf(probe, \"calling metal_linux_irq_init()\\n\");\n    }\n    metal_linux_irq_init();\n\n    if (probe) {\n        fprintf(probe, \"metal_linux_irq_init returned; exiting metal_sys_init with 0\\n\");\n        fclose(probe);\n    }\n    return 0;\n}\n"
}