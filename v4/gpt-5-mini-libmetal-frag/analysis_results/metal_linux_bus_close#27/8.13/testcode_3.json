{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function-pointer field int (*dev_dma_map)(... struct metal_sg *sg_in, ...) declares sg_in as a non-const pointer even though it is an input scatter\u2011gather list and should be a pointer to a const-qualified type (e.g. const struct metal_sg *sg_in). That violates MISRA C 2023 Rule 8.13. (Note: drv_name/mod_name/cls_name are already const and sdrv is intentionally mutable \u2014 metal_linux_bus_close sets it to NULL \u2014 so those do not violate the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_close:\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_bus_close code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_bus_close with it.\n  - Your function must have the exact same signature as metal_linux_bus_close.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_bus_close to check logs.\n  - Your function MUST preserve the original logic of metal_linux_bus_close as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_bus_close will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_bus_close as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\tFILE *log = NULL;\n\n\t/* Attempt to open the log file. If the directory doesn't exist, try to create it. */\n\t/* mkdir may already be available in the translation unit's includes; ignore errors. */\n\t(void)mkdir(\"/tmp/logs\", 0777);\n\tlog = fopen(\"/tmp/logs/175.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_bus_close: entered: bus=%p lbus=%p\\n\", (void *)bus, (void *)lbus);\n\t}\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (log) fprintf(log, \"  iter driver: ldrv=%p sdrv=%p\\n\", (void *)ldrv, (void *)ldrv->sdrv);\n\t\tif (ldrv->sdrv) {\n\t\t\tif (log) fprintf(log, \"    calling sysfs_close_driver(sdrv=%p)\\n\", (void *)ldrv->sdrv);\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\t\tif (log) fprintf(log, \"    returned from sysfs_close_driver(sdrv=%p)\\n\", (void *)ldrv->sdrv);\n\t\t}\n\t\t/* preserve original behavior: clear the sdrv pointer */\n\t\tldrv->sdrv = NULL;\n\t\tif (log) fprintf(log, \"    ldrv->sdrv set to NULL\\n\");\n\t}\n\n\tif (log) fprintf(log, \"  before sysfs_close_bus: sbus=%p\\n\", (void *)lbus->sbus);\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n\tif (log) fprintf(log, \"  after sysfs_close_bus: sbus set to NULL\\n\");\n\n\tif (log) fclose(log);\n}"
}