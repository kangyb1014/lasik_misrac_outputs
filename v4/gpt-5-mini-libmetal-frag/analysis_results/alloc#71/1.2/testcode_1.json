{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC statement-expressions ({ ... }) and the GCC/Clang extension '##__VA_ARGS__' to remove a comma for empty variadic arguments. Both are compiler-specific extensions (documented GNU extensions), so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/597.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified alloc code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original alloc with it.\n  - Your function must have the exact same signature as alloc.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call alloc to check logs.\n  - Your function MUST preserve the original logic of alloc as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, alloc will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of alloc as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int alloc(void)\n{\n    void *ptr;\n    FILE *logf = fopen(\"/tmp/logs/597.txt\", \"a\");\n    if (!logf) {\n        /* fallback if directory doesn't exist */\n        logf = fopen(\"/tmp/597.txt\", \"a\");\n    }\n\n    if (logf) {\n#ifdef __clang__\n        fprintf(logf, \"alloc: compiled with clang: __clang_major__=%d __clang_minor__=%d\\n\", __clang_major__, __clang_minor__);\n#elif defined(__GNUC__)\n        fprintf(logf, \"alloc: compiled with gcc: __GNUC__=%d __GNUC_MINOR__=%d __GNUC_PATCHLEVEL__=%d\\n\", __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);\n#else\n        fprintf(logf, \"alloc: compiler unknown (no __GNUC__ or __clang__)\\n\");\n#endif\n#ifdef __STDC_VERSION__\n        fprintf(logf, \"alloc: __STDC_VERSION__=%ld\\n\", (long) __STDC_VERSION__);\n#else\n        fprintf(logf, \"alloc: __STDC_VERSION__ not defined\\n\");\n#endif\n        fprintf(logf, \"alloc: entering\\n\");\n        fflush(logf);\n    }\n\n    ptr = metal_allocate_memory(1000);\n\n    if (logf) {\n        fprintf(logf, \"alloc: metal_allocate_memory returned %p\\n\", ptr);\n        fflush(logf);\n    }\n\n    if (!ptr) {\n        /* Preserve original behavior: call metal_log as before, then return errno captured after metal_log. */\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n        int ret = errno; /* capture errno after metal_log to match original behavior */\n        if (logf) {\n            fprintf(logf, \"alloc: allocation failed, errno captured=%d\\n\", ret);\n            fprintf(logf, \"alloc: end (failure)\\n\");\n            fclose(logf);\n        }\n        return ret;\n    }\n\n    if (logf) {\n        fprintf(logf, \"alloc: freeing memory at %p\\n\", ptr);\n        fflush(logf);\n    }\n\n    metal_free_memory(ptr);\n\n    if (logf) {\n        fprintf(logf, \"alloc: freed memory, returning 0\\n\");\n        fprintf(logf, \"alloc: end (success)\\n\");\n        fclose(logf);\n    }\n\n    return 0;\n}"
}