{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'cntr' is declared as 'struct metal_irq_controller *cntr;' but in metal_irq_allocate it is only used for read access (e.g. reading cntr->irq_base and cntr->irq_num as in the fragment cntr_irq_end = cntr_irq_base + cntr->irq_num;). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. 'const struct metal_irq_controller *cntr;').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/645.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_irq_allocate:\n```c\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (irq_num == 0) {\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t}\n\t}\n\treturn irq_tocheck;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_irq_allocate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_irq_allocate with it.\n  - Your function must have the exact same signature as metal_irq_allocate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_irq_allocate to check logs.\n  - Your function MUST preserve the original logic of metal_irq_allocate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_irq_allocate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_irq_allocate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_irq_allocate(int irq_base, int irq_num)\n{\n    FILE *fp = fopen(\"/tmp/logs/645.txt\", \"a\");\n\n    if (fp) {\n        fprintf(fp, \"enter metal_irq_allocate: irq_base=%d irq_num=%d\\n\", irq_base, irq_num);\n        fflush(fp);\n    }\n\n    struct metal_list *node;\n    struct metal_irq_controller *cntr;\n    int irq_tocheck = irq_base, irq_end_tocheck;\n\n    if (irq_num == 0) {\n        if (fp) {\n            fprintf(fp, \"irq_num == 0, returning METAL_IRQ_ANY\\n\");\n            fclose(fp);\n        }\n        return METAL_IRQ_ANY;\n    }\n    if (irq_tocheck == METAL_IRQ_ANY) {\n        irq_tocheck = 0;\n        if (fp) {\n            fprintf(fp, \"irq_tocheck was METAL_IRQ_ANY, set irq_tocheck=0\\n\");\n            fflush(fp);\n        }\n    }\n    irq_end_tocheck = irq_tocheck + irq_num;\n    if (fp) {\n        fprintf(fp, \"initial range to check: [%d, %d) (irq_tocheck=%d, irq_end_tocheck=%d)\\n\", irq_tocheck, irq_end_tocheck, irq_tocheck, irq_end_tocheck);\n        fflush(fp);\n    }\n\n    metal_list_for_each(&irq_cntrs, node) {\n        int cntr_irq_base, cntr_irq_end;\n\n        cntr = metal_container_of(node,\n                      struct metal_irq_controller, node);\n        cntr_irq_base = cntr->irq_base;\n        cntr_irq_end = cntr_irq_base + cntr->irq_num;\n\n        if (fp) {\n            fprintf(fp, \"iter: cntr=%p cntr_irq_base=%d cntr_irq_end=%d\\n\", (void *)cntr, cntr_irq_base, cntr_irq_end);\n            fflush(fp);\n        }\n\n        if (irq_tocheck < cntr_irq_end &&\n            irq_end_tocheck > cntr_irq_base) {\n            if (fp) {\n                fprintf(fp, \"overlap detected: request=[%d,%d) vs controller=[%d,%d)\\n\", irq_tocheck, irq_end_tocheck, cntr_irq_base, cntr_irq_end);\n                fflush(fp);\n            }\n            if (irq_base != METAL_IRQ_ANY) {\n                /* IRQ has been allocated */\n                if (fp) {\n                    fprintf(fp, \"requested specific irq (%d) conflicts -> returning METAL_IRQ_ANY\\n\", irq_base);\n                    fclose(fp);\n                }\n                return METAL_IRQ_ANY;\n            }\n            irq_tocheck = cntr_irq_end;\n            irq_end_tocheck = irq_tocheck + irq_num;\n            if (fp) {\n                fprintf(fp, \"bumped irq_tocheck to %d, new end %d\\n\", irq_tocheck, irq_end_tocheck);\n                fflush(fp);\n            }\n        }\n    }\n\n    if (fp) {\n        fprintf(fp, \"no conflict found, returning irq_tocheck=%d\\n\", irq_tocheck);\n        fclose(fp);\n    }\n    return irq_tocheck;\n}"
}