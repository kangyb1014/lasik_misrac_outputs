{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'node' is only used to iterate and compare list nodes (metal_list_for_each and if (node == &cntr->node)) and is not used to modify the pointed-to objects. Therefore it could be declared as 'const struct metal_list *node'. Declaring it as a non-const pointer violates MISRA C 2023 Rule 8.13. (If the metal_list_for_each macro requires a non-const pointer, the macro or its usage should be adjusted so traversal can be done with a pointer to const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register_controller code that contains useful probe functions that print useful logs to a file \"/tmp/logs/105.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_irq_register_controller:\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_irq_register_controller code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_irq_register_controller with it.\n  - Your function must have the exact same signature as metal_irq_register_controller.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_irq_register_controller to check logs.\n  - Your function MUST preserve the original logic of metal_irq_register_controller as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_irq_register_controller will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_irq_register_controller as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n    int irq_base;\n    struct metal_list *node;\n    FILE *log = fopen(\"/tmp/logs/105.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"ENTER metal_irq_register_controller: cntr=%p\\n\", (void *)cntr);\n        fflush(log);\n    }\n\n    if (cntr == NULL) {\n        if (log) {\n            fprintf(log, \"cntr == NULL -> return -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"cntr->node=%p, cntr->irq_base=%d, cntr->irq_num=%d\\n\",\n                (void *)&cntr->node, cntr->irq_base, cntr->irq_num);\n        fflush(log);\n    }\n\n    metal_list_for_each(&irq_cntrs, node) {\n        if (log) {\n            fprintf(log, \"iter node=%p compare with cntr->node=%p\\n\", (void *)node, (void *)&cntr->node);\n            fflush(log);\n        }\n        if (node == &cntr->node) {\n            if (log) {\n                fprintf(log, \"found existing controller (node == &cntr->node) -> return 0\\n\");\n                fclose(log);\n            }\n            return 0;\n        }\n    }\n\n    /*\n     * Allocate IRQ numbers which are not yet used by any IRQ\n     * controllers.\n     */\n    irq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n    if (log) {\n        fprintf(log, \"metal_irq_allocate returned %d\\n\", irq_base);\n        fflush(log);\n    }\n    if (irq_base == METAL_IRQ_ANY) {\n        if (log) {\n            fprintf(log, \"allocate failed (METAL_IRQ_ANY) -> return -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n    cntr->irq_base = irq_base;\n\n    if (log) {\n        fprintf(log, \"assigned cntr->irq_base=%d\\n\", cntr->irq_base);\n        fflush(log);\n    }\n\n    metal_list_add_tail(&irq_cntrs, &cntr->node);\n\n    if (log) {\n        fprintf(log, \"added to irq_cntrs list: node=%p -> return 0\\n\", (void *)&cntr->node);\n        fclose(log);\n    }\n\n    return 0;\n}"
}