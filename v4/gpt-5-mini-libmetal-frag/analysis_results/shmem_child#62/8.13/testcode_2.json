{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function parameter is declared as void *arg (non-const) but is used as a pointer to read-only data (assigned to const char *name). Rule 8.13 expects pointers to be const-qualified when possible \u2014 here the parameter should be declared const void *arg (and then use const char *name = arg). Declaring a const local pointer does not satisfy the rule because the incoming parameter itself lacks the const qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/5.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified shmem_child code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original shmem_child with it.\n  - Your function must have the exact same signature as shmem_child.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call shmem_child to check logs.\n  - Your function MUST preserve the original logic of shmem_child as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, shmem_child will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of shmem_child as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void *shmem_child(void *arg)\n{\n\t/* Probe logging to help reproduce Rule 8.13 scenario. Logs written to /tmp/logs/5.txt */\n\tFILE *log = fopen(\"/tmp/logs/5.txt\", \"a\");\n\n\tconst char *name = arg; /* violation scenario: incoming parameter is non-const void* */\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\tif (log) {\n\t\tfprintf(log, \"ENTER shmem_child: arg=%p (type: void *)\\n\", arg);\n\t\tfprintf(log, \"NOTE: parameter 'arg' is non-const void * but will be used as const char *\\n\");\n\t\tfprintf(log, \"cast to const char *name = %p\\n\", (const void *)name);\n\t\tif (name) {\n\t\t\t/* Print name safely as a string if available */\n\t\t\tfprintf(log, \"name string: '%s'\\n\", name);\n\t\t} else {\n\t\t\tfprintf(log, \"name is NULL\\n\");\n\t\t}\n\t\tfflush(log);\n\t}\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (log) {\n\t\tfprintf(log, \"metal_shmem_open returned: %d, io=%p\\n\", error, (void *)io);\n\t\tfflush(log);\n\t}\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tif (log) {\n\t\t\tfprintf(log, \"ERROR: Failed shmem_open: %d -> increment nb_err and return NULL\\n\", error);\n\t\t\tfflush(log);\n\t\t}\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\tif (log) fclose(log);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (log) {\n\t\tfprintf(log, \"After mappings: virt=%p phys=%lu\\n\", (void *)virt, phys);\n\t\tfflush(log);\n\t}\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"ERROR: virt (%p) != metal_io_phys_to_virt(io, phys) (%p) -> nb_err++\\n\",\n\t\t\t\t\t(void *)virt, (void *)metal_io_phys_to_virt(io, phys));\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"ERROR: phys (%lu) != metal_io_virt_to_phys(io, virt) (%lu) -> nb_err++\\n\",\n\t\t\t\t\tphys, metal_io_virt_to_phys(io, virt));\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\tif (log) {\n\t\tfprintf(log, \"Exiting shmem_child normally.\\n\");\n\t\tfclose(log);\n\t}\n\treturn NULL;\n}\n"
}