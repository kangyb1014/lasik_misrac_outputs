{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code negates the return value of pthread_create: error = -pthread_create(&tid_p[i], NULL, child, arg); If pthread_create fails it returns a positive errno; negating it makes 'error' negative. Later the code calls strerror(error) in the error path (metal_log(..., strerror(error))). strerror() expects a non\u2011negative error number and may index into an internal array; passing a negative value can lead to an out\u2011of\u2011bounds access of the error message table and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified atomic code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original atomic with it.\n  - Your function must have the exact same signature as atomic.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call atomic to check logs.\n  - Your function MUST preserve the original logic of atomic as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, atomic will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of atomic as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\tFILE *log = fopen(\"/tmp/logs/183.txt\", \"a\");\n\n\tif (log) {\n\t\tfprintf(log, \"atomic: entered\\n\");\n\t\tfprintf(log, \"atomic: threads=%d\\n\", threads);\n\t\tfprintf(log, \"atomic: counter initial=%d\\n\", atomic_load(&counter));\n\t\tfflush(log);\n\t}\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\n\tif (log) {\n\t\tfprintf(log, \"atomic: metal_run returned=%d\\n\", error);\n\t\tfflush(log);\n\t}\n\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tif (log) fprintf(log, \"atomic: counter after run=%d\\n\", value);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (log) fprintf(log, \"atomic: expected delta (value)=%d\\n\", value);\n\t\tif (value) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"atomic: counter mismatch, delta=%d, will call metal_log and set error=-EINVAL\\n\", value);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\", value);\n\t\t\terror = -EINVAL;\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"atomic: error set to %d (negative)\\n\", error);\n\t\t\t\t/* Note: do not call strerror() here with a negative value to avoid creating a new violation; */\n\t\t\t\tfprintf(log, \"atomic: NOTE: strerror should not be called on negative error values (would be strerror(%d)).\\n\", error);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (log) {\n\t\t\tfprintf(log, \"atomic: metal_run failed with error=%d\\n\", error);\n\t\t\tif (error < 0) {\n\t\t\t\tfprintf(log, \"atomic: metal_run returned negative error=%d; original positive errno may have been negated elsewhere\\n\", error);\n\t\t\t}\n\t\t\tfflush(log);\n\t\t}\n\t}\n\n\tif (log) fclose(log);\n\n\treturn error;\n}\n"
}