{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_finish_threads(ts_created, (void *)tids) passes a non-const void * for an array that is not modified. If metal_finish_threads does not modify the tids array (i.e. its parameter should be const pthread_t * or const void *), then passing a non-const pointer (and the explicit cast to void *) violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. (If metal_finish_threads actually modifies the tids array, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/185.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified atomic code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original atomic with it.\n  - Your function must have the exact same signature as atomic.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call atomic to check logs.\n  - Your function MUST preserve the original logic of atomic as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, atomic will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of atomic as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int atomic(void)\n{\n    /* Local include to ensure file I/O functions are available when this\n     * translation unit is compiled standalone. The project likely already\n     * includes stdio elsewhere, but including here is safe and scoped to\n     * this function. */\n    #include <stdio.h>\n\n    FILE *logf = fopen(\"/tmp/logs/185.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"atomic(): enter\\n\");\n    }\n\n    const int threads = 10;\n    atomic_int counter = ATOMIC_VAR_INIT(0);\n    int value, error;\n\n    if (logf) {\n        int initial = atomic_load(&counter);\n        /* Log addresses and initial state to help trace control flow and\n         * capture state relevant to the violation scenario. */\n        fprintf(logf, \"atomic(): threads=%d, &counter=%p, initial_counter=%d, atomic_test_count=%d\\n\",\n                threads, (void *)&counter, initial, atomic_test_count);\n        fflush(logf);\n    }\n\n    /* Call the original worker launcher. We log the return value so that\n     * subsequent analysis can check whether downstream functions like\n     * metal_finish_threads were invoked as part of success/failure paths. */\n    error = metal_run(threads, atomic_thread, &counter);\n\n    if (logf) {\n        fprintf(logf, \"atomic(): metal_run returned error=%d\\n\", error);\n        fflush(logf);\n    }\n\n    if (!error) {\n        value = atomic_load(&counter);\n        if (logf) {\n            fprintf(logf, \"atomic(): after run counter=%d\\n\", value);\n            fflush(logf);\n        }\n\n        value -= atomic_test_count * threads;\n\n        if (logf) {\n            fprintf(logf, \"atomic(): computed delta = %d (counter - atomic_test_count*threads)\\n\", value);\n            fflush(logf);\n        }\n\n        if (value) {\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n                      value);\n            error = -EINVAL;\n            if (logf) {\n                fprintf(logf, \"atomic(): mismatch detected, setting error=%d\\n\", error);\n                fflush(logf);\n            }\n        } else {\n            if (logf) {\n                fprintf(logf, \"atomic(): no mismatch detected\\n\");\n                fflush(logf);\n            }\n        }\n    } else {\n        if (logf) {\n            fprintf(logf, \"atomic(): metal_run failed, error=%d\\n\", error);\n            fflush(logf);\n        }\n    }\n\n    if (logf) {\n        fprintf(logf, \"atomic(): exit error=%d\\n\", error);\n        fclose(logf);\n    }\n\n    return error;\n}"
}