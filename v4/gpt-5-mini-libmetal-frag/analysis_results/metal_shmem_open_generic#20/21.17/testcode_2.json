{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf either pointer is NULL or points to a char object that is not NUL-terminated (for example, shmem->name is NULL or shmem->name/name points to a fixed-size buffer lacking a terminating '\\0'), strcmp(shmem->name, name) will read past the object bounds searching for a terminator and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/93.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_open_generic code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_open_generic with it.\n  - Your function must have the exact same signature as metal_shmem_open_generic.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_open_generic to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_open_generic as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_open_generic will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\t#include <stdio.h>\n\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\tFILE *logf = fopen(\"/tmp/logs/93.txt\", \"a\");\n\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: metal_shmem_open_generic(name=%p, size=%zu, result=%p)\\n\",\n\t\t\t(name), size, (void *)result);\n\t\tfflush(logf);\n\t}\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ITER: shmem=%p, shmem->name=%p\\n\", (void *)shmem, (void *)shmem->name);\n\t\t\tif (shmem->name == NULL) {\n\t\t\t\tfprintf(logf, \"WARN: shmem->name is NULL for shmem=%p\\n\", (void *)shmem);\n\t\t\t}\n\t\t\t/* We intentionally do not attempt to print the pointed-to string contents here\n\t\t\t   because doing so may itself read beyond object bounds and introduce new UB.\n\t\t\t   The original code uses strcmp(shmem->name, name) which will perform such reads;\n\t\t\t   we instead log the pointer values and the fact we're about to call strcmp so\n\t\t\t   a crash or misbehavior can be correlated with these logged pointer values. */\n\t\t\tfprintf(logf, \"ACTION: calling strcmp(shmem->name, name) for shmem=%p\\n\", (void *)shmem);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"MATCH: shmem=%p matched name=%p; size_ok (requested=%zu, available=%zu)\\n\",\n\t\t\t\t\t(void *)shmem, (void *)shmem->name, size, metal_io_region_size(&shmem->io));\n\t\t\t\tfflush(logf);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT: no matching shmem found, returning -ENOENT\\n\");\n\t\tfflush(logf);\n\t\tfclose(logf);\n\t}\n\n\treturn -ENOENT;\n}\n"
}