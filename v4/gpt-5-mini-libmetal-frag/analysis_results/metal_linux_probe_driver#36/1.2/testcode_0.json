{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: a statement expression '({ ... })' and the GNU variadic comma-swallowing token paste '##__VA_ARGS__'. Both are documented compiler extensions and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_driver code that contains useful probe functions that print useful logs to a file \"/tmp/logs/297.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_driver:\n```c\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* If all else fails... */\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_probe_driver code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_probe_driver with it.\n  - Your function must have the exact same signature as metal_linux_probe_driver.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_probe_driver to check logs.\n  - Your function MUST preserve the original logic of metal_linux_probe_driver as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_probe_driver will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_probe_driver as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\tFILE *f = fopen(\"/tmp/logs/297.txt\", \"a\");\n\n\t/* Minimal entry log so tests know the function was entered. */\n\tif (f) {\n\t\tfprintf(f, \"ENTER: %s lbus=%p ldrv=%p bus_name='%s' drv_name='%s' mod_name='%s' sdrv=%p\\n\",\n\t\t\t__func__, (void *)lbus, (void *)ldrv,\n\t\t\tlbus ? lbus->bus_name : \"(null)\",\n\t\t\tldrv ? ldrv->drv_name : \"(null)\",\n\t\t\tldrv ? ldrv->mod_name : \"(null)\",\n\t\t\tldrv ? ldrv->sdrv : NULL);\n\t\tfflush(f);\n\t} else {\n\t\t/* If file can't be opened, fall back to metal_log so we still have evidence. */\n\t\tmetal_log(METAL_LOG_INFO, \"%s: could not open /tmp/logs/297.txt for append\\n\", __func__);\n\t}\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (f) {\n\t\t\tfprintf(f, \"BRANCH: initial modprobe prepared command='%s' snprintf_ret=%d\\n\",\n\t\t\t\tcommand, ret);\n\t\t\tfflush(f);\n\t\t}\n\t\tif (ret >= (int)sizeof(command)) {\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"RETURN: overflow detected building modprobe command, ret=%d\\n\", ret);\n\t\t\t\tfclose(f);\n\t\t\t} else {\n\t\t\t\tmetal_log(METAL_LOG_WARNING, \"%s: overflow detected building modprobe command\\n\", __func__);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tret = system(command);\n\t\tif (f) {\n\t\t\tfprintf(f, \"SYSTEM: executed '%s' result=%d\\n\", command, ret);\n\t\t\tfflush(f);\n\t\t}\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"LOG: system returned failure ret=%d for command='%s'\\n\", ret, command);\n\t\t\t\tfflush(f);\n\t\t\t}\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t\tif (f) {\n\t\t\tfprintf(f, \"AFTER_OPEN: sdrv=%p\\n\", ldrv->sdrv);\n\t\t\tfflush(f);\n\t\t}\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (f) {\n\t\t\tfprintf(f, \"BRANCH: sudo modprobe prepared command='%s' snprintf_ret=%d\\n\",\n\t\t\t\tcommand, ret);\n\t\t\tfflush(f);\n\t\t}\n\t\tif (ret >= (int)sizeof(command)) {\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"RETURN: overflow detected building sudo modprobe command, ret=%d\\n\", ret);\n\t\t\t\tfclose(f);\n\t\t\t} else {\n\t\t\t\tmetal_log(METAL_LOG_WARNING, \"%s: overflow detected building sudo modprobe command\\n\", __func__);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tret = system(command);\n\t\tif (f) {\n\t\t\tfprintf(f, \"SYSTEM: executed '%s' result=%d\\n\", command, ret);\n\t\t\tfflush(f);\n\t\t}\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"LOG: sudo system returned failure ret=%d for command='%s'\\n\", ret, command);\n\t\t\t\tfflush(f);\n\t\t\t}\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t\tif (f) {\n\t\t\tfprintf(f, \"AFTER_SUDO_OPEN: sdrv=%p\\n\", ldrv->sdrv);\n\t\t\tfflush(f);\n\t\t}\n\t}\n\n\t/* If all else fails... */\n\tif (f) {\n\t\tfprintf(f, \"EXIT: final sdrv=%p return=%d\\n\", ldrv->sdrv, ldrv->sdrv ? 0 : -ENODEV);\n\t\tfclose(f);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"%s: final sdrv=%p return=%d\\n\",\n\t\t\t__func__, ldrv->sdrv, ldrv->sdrv ? 0 : -ENODEV);\n\t}\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n"
}