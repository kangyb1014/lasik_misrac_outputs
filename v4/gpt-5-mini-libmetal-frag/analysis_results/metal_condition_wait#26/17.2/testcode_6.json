{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion: metal_irq_save_disable() calls metal_mutex_acquire(&irq_lock). If metal_mutex_acquire() (directly or indirectly) calls metal_irq_save_disable() to disable IRQs when acquiring a mutex, this produces an indirect recursive cycle: metal_irq_save_disable -> metal_mutex_acquire -> metal_irq_save_disable, violating Rule 17.2 (would lead to infinite recursion/stack overflow).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_condition_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/210.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_condition_wait:\n```c\nint metal_condition_wait(struct metal_condition *cv,\n\t\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m))\n\t\treturn -EINVAL;\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (tmpmptr != mptr)\n\t\t\treturn -EINVAL;\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tatomic_fetch_add(&cv->waiters, 1);\n\n\t/* Release the mutex before sleeping. */\n\tmetal_mutex_release(m);\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\tatomic_fetch_sub(&cv->waiters, 1);\n\t/* Acquire the mutex after it's waken up. */\n\tmetal_mutex_acquire(m);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_condition_wait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_condition_wait with it.\n  - Your function must have the exact same signature as metal_condition_wait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_condition_wait to check logs.\n  - Your function MUST preserve the original logic of metal_condition_wait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_condition_wait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_condition_wait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_condition_wait(struct metal_condition *cv,\n\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\tFILE *logf = NULL;\n\n\t/* Try to open log file for appending diagnostics. If this fails we continue */\n\tlogf = fopen(\"/tmp/logs/210.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_condition_wait: cv=%p m=%p mptr=0x%lx tmpmptr=0x%lx\\n\",\n\t\t\t (void *)cv, (void *)m, (unsigned long)mptr, (unsigned long)tmpmptr);\n\t\tfflush(logf);\n\t}\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m)) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT metal_condition_wait: invalid args or mutex not acquired (cv=%p m=%p is_acquired=%d)\\n\",\n\t\t\t\t(void *)cv, (void *)m, m ? metal_mutex_is_acquired(m) : 0);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"compare_exchange failed: tmpmptr=0x%lx mptr=0x%lx\\n\",\n\t\t\t\t(unsigned long)tmpmptr, (unsigned long)mptr);\n\t\t\tfflush(logf);\n\t\t}\n\t\tif (tmpmptr != mptr) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"EXIT metal_condition_wait: mptr mismatch -> -EINVAL\\n\");\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tif (logf) {\n\t\tfprintf(logf, \"wakeups before wait = %d\\n\", v);\n\t\tfflush(logf);\n\t}\n\n\tatomic_fetch_add(&cv->waiters, 1);\n\tif (logf) {\n\t\tint waiters_now = atomic_load(&cv->waiters);\n\t\tfprintf(logf, \"waiters incremented, now = %d\\n\", waiters_now);\n\t\tfflush(logf);\n\t}\n\n\t/* Release the mutex before sleeping. */\n\tif (logf) {\n\t\tfprintf(logf, \"releasing mutex %p\\n\", (void *)m);\n\t\tfflush(logf);\n\t}\n\tmetal_mutex_release(m);\n\tif (logf) {\n\t\tfprintf(logf, \"mutex released %p\\n\", (void *)m);\n\t\tfflush(logf);\n\t}\n\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\n\tif (logf) {\n\t\tfprintf(logf, \"futex returned for cv=%p wakeups expected=%d\\n\", (void *)cv, v);\n\t\tfflush(logf);\n\t}\n\n\tatomic_fetch_sub(&cv->waiters, 1);\n\tif (logf) {\n\t\tint waiters_after = atomic_load(&cv->waiters);\n\t\tfprintf(logf, \"waiters decremented, now = %d\\n\", waiters_after);\n\t\tfflush(logf);\n\t}\n\n\t/* Acquire the mutex after it's waken up. */\n\tif (logf) {\n\t\tfprintf(logf, \"acquiring mutex %p\\n\", (void *)m);\n\t\tfflush(logf);\n\t}\n\tmetal_mutex_acquire(m);\n\tif (logf) {\n\t\tfprintf(logf, \"mutex acquired %p\\n\", (void *)m);\n\t\tfprintf(logf, \"EXIT metal_condition_wait: returning 0\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}