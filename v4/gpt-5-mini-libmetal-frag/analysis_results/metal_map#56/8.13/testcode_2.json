{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iteration variable 'instance' is declared as 'char *instance' and used in dlist_for_each_data(dlist, instance, char). The elements returned from the dlist appear to be read-only strings (sysfs instance names) and are only read (e.g. passed to snprintf). Per MISRA C 2023 Rule 8.13, such pointers should be const-qualified when possible. Here the pointer is non-const and should be 'const char *instance' (and the macro invoked with 'const char' if the macro supports it), so this is a Rule 8.13 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/705.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_map code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_map with it.\n  - Your function must have the exact same signature as metal_map.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_map to check logs.\n  - Your function MUST preserve the original logic of metal_map as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_map will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_map as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\tFILE *log = NULL;\n\tint saved_errno = 0; /* capture first errno seen during operations to avoid logging clobbering errno */\n\n\t/* Open log early. We won't treat failure to open the log as fatal. */\n\tlog = fopen(\"/tmp/logs/705.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_map: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x\\n\",\n\t\t\tfd, (long long)offset, size, expand, flags);\n\t\tfflush(log);\n\t}\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tdb_set: ; /* label for easier breakpoint placement when debugging */\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t\tif (log) {\n\t\t\tfprintf(log, \"branch: fd<0 -> fd set to -1, flags set to 0x%x\\n\", flags);\n\t\t\tfflush(log);\n\t\t}\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (error && saved_errno == 0)\n\t\t\tsaved_errno = errno;\n\t\tif (log) {\n\t\t\tfprintf(log, \"after flock(fd=%d, LOCK_EX): error=%d, saved_errno=%d\\n\", fd, error, saved_errno);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (error && saved_errno == 0)\n\t\t\tsaved_errno = errno;\n\t\tif (log) {\n\t\t\tif (!error)\n\t\t\t\tfprintf(log, \"after fstat: st_size=%lld, reqsize=%lld\\n\", (long long)stat.st_size, (long long)reqsize);\n\t\t\telse\n\t\t\t\tfprintf(log, \"fstat failed: error=%d, errno=%d\\n\", error, saved_errno);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (error && saved_errno == 0)\n\t\t\tsaved_errno = errno;\n\t\tif (log) {\n\t\t\tfprintf(log, \"after ftruncate check: error=%d, saved_errno=%d\\n\", error, saved_errno);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (log) {\n\t\t\tfprintf(log, \"after unlock (if taken): error=%d\\n\", error);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (error) {\n\t\t\t/* Preserve original semantics: return -errno. But errno may have been clobbered by logging.\n\t\t\t   Use saved_errno if we captured one earlier; otherwise use errno. */\n\t\t\tint ret_errno = saved_errno ? saved_errno : errno;\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"expand branch failure: returning -%d (errno snapshot=%d)\\n\", ret_errno, ret_errno);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\treturn -ret_errno;\n\t\t}\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED) {\n\t\tint ret_errno = errno; /* capture before doing any logging */\n\t\tif (log) {\n\t\t\tfprintf(log, \"mmap failed: size=%zu, offset=%lld, fd=%d, flags=0x%x, errno=%d\\n\",\n\t\t\t\t size, (long long)offset, fd, flags, ret_errno);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -ret_errno;\n\t}\n\n\t*result = mem;\n\tif (log) {\n\t\tfprintf(log, \"mmap succeeded: result=%p\\n\", mem);\n\t\tfclose(log);\n\t}\n\treturn 0;\n}\n"
}