{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe integer function parameter 'fd' is reassigned inside metal_map by the statement 'fd = -1;'. This modifies a function parameter (not a pointer target) and therefore violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. int local_fd = fd; and modify local_fd) to avoid changing the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_map code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_map with it.\n  - Your function must have the exact same signature as metal_map.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_map to check logs.\n  - Your function MUST preserve the original logic of metal_map as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_map will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_map as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n    FILE *log = NULL;\n\n    /* Try to open log file once. Logging calls will save/restore errno so\n       they don't affect function semantics. */\n    log = fopen(\"/tmp/logs/702.txt\", \"a\");\n    {\n        int errno_save = errno;\n        if (log) {\n            fprintf(log, \"ENTER metal_map: fd=%d offset=%lld size=%llu expand=%d flags=0x%x\\n\",\n                    fd, (long long)offset, (unsigned long long)size, expand, flags);\n            fflush(log);\n        }\n        errno = errno_save;\n    }\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        int errno_save = errno;\n        if (log) {\n            fprintf(log, \"BRANCH: fd < 0 (original fd=%d) - will assign fd = -1 and set anonymous private mapping\\n\", fd);\n            fflush(log);\n        }\n        errno = errno_save;\n\n        /* Violation scenario: reassigning the function parameter 'fd' */\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        errno_save = errno;\n        if (log) {\n            fprintf(log, \"AFTER ASSIGN: fd=%d flags=0x%x\\n\", fd, flags);\n            fflush(log);\n        }\n        errno = errno_save;\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"BRANCH: expand requested, reqsize=%lld\\n\", (long long)reqsize);\n                fflush(log);\n            }\n            errno = errno_save;\n        }\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"After flock: error=%d errno=%d\\n\", error, errno);\n                fflush(log);\n            }\n            errno = errno_save;\n        }\n\n        if (!error)\n            error = fstat(fd, &stat);\n        {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"After fstat: error=%d errno=%d st_size=%lld\\n\",\n                        error, errno, (long long)stat.st_size);\n                fflush(log);\n            }\n            errno = errno_save;\n        }\n\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"After maybe ftruncate: error=%d errno=%d\\n\", error, errno);\n                fflush(log);\n            }\n            errno = errno_save;\n        }\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"After unlock (if any): errno=%d\\n\", errno);\n                fflush(log);\n            }\n            errno = errno_save;\n        }\n\n        if (error) {\n            int errno_save = errno;\n            if (log) {\n                fprintf(log, \"ERROR path in expand: returning -errno=%d\\n\", -errno);\n                fflush(log);\n                fclose(log);\n            }\n            errno = errno_save;\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    {\n        int mmap_errno = errno;\n        if (log) {\n            fprintf(log, \"After mmap: mem=%p errno=%d\\n\", mem, mmap_errno);\n            fflush(log);\n        }\n        errno = mmap_errno; /* restore errno to the mmap result */\n    }\n\n    if (mem == MAP_FAILED) {\n        int errno_save = errno;\n        if (log) {\n            fprintf(log, \"mmap failed: returning -errno=%d\\n\", -errno);\n            fflush(log);\n            fclose(log);\n        }\n        errno = errno_save;\n        return -errno;\n    }\n\n    *result = mem;\n    {\n        int errno_save = errno;\n        if (log) {\n            fprintf(log, \"SUCCESS: result=%p returning 0\\n\", *result);\n            fflush(log);\n            fclose(log);\n        }\n        errno = errno_save;\n    }\n\n    return 0;\n}\n"
}