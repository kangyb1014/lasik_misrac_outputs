{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code can cause out-of-bounds accesses of objects used by string functions. strlen(test_case->name) will scan test_case->name until a NUL; if test_case->name is not NUL-terminated (or its allocated length is less than the scanned characters) strlen reads beyond its object. Also pad = dots + strlen(test_case->name) can point past the end of the dots literal when strlen(test_case->name) > strlen(dots); later passing pad to %s causes reading beyond the bounds of the dots object. Example: if dots is 34 chars and test_case->name is 50 chars, pad = dots + 50 points 16 bytes past dots and the %s format will read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_tests_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_tests_run with it.\n  - Your function must have the exact same signature as metal_tests_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_tests_run to check logs.\n  - Your function MUST preserve the original logic of metal_tests_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_tests_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_tests_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\t/* Open an agent-visible log. Try required path, fall back if needed. */\n\tFILE *alog = fopen(\"/tmp/logs/433.txt\", \"a\");\n\tif (!alog)\n\t\talog = fopen(\"/tmp/433.txt\", \"a\");\n\tif (alog) {\n\t\tfprintf(alog, \"ENTER metal_tests_run params=%p\\n\", (void *)params);\n\t\tfflush(alog);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (alog) {\n\t\tfprintf(alog, \"metal_init returned %d\\n\", error);\n\t\tfflush(alog);\n\t}\n\tif (error) {\n\t\tif (alog) fclose(alog);\n\t\treturn error;\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Capture lengths and pointer arithmetic used by original code.\n\t\t   Note: calling strlen here reproduces the original behavior and\n\t\t   can itself read beyond the object if the test case name is not\n\t\t   NUL-terminated. We log the observed values immediately so\n\t\t   downstream agents have evidence even if the original flow\n\t\t   later crashes. */\n\t\tsize_t name_len = 0;\n\t\tsize_t dots_len = 0;\n\t\tint pad_beyond = 0;\n\t\tlong long pad_offset = 0;\n\n\t\t/* This is the same call as in the original code (potential UB if\n\t\t   test_case->name is not NUL-terminated) \u2014 kept to preserve\n\t\t   original behavior and reproduce the reported violation. */\n\t\tname_len = strlen(test_case->name);\n\t\tdots_len = strlen(dots);\n\t\tpad = dots + name_len;\n\t\tpad_offset = (long long)name_len - (long long)dots_len;\n\t\tpad_beyond = (name_len > dots_len) ? 1 : 0;\n\n\t\tif (alog) {\n\t\t\t/* Log pointer values and computed lengths/offsets. Do NOT\n\t\t\t   print test_case->name as a %s here because that would\n\t\t\t   re-trigger the same potential out-of-bounds read; instead\n\t\t\t   record the pointer and lengths so an external agent can\n\t\t\t   correlate. */\n\t\t\tfprintf(alog,\n\t\t\t\t\"TEST-START name_ptr=%p name_len=%zu dots_len=%zu pad_ptr=%p pad_offset=%lld pad_beyond=%d\\n\",\n\t\t\t\t(void *)test_case->name, name_len, dots_len, (void *)pad, pad_offset, pad_beyond);\n\t\t\tfflush(alog);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\n\t\t/* Log the result and the exact values that are about to be used\n\t\t   in the original result printing (which uses pad as a %s).\n\t\t   This provides evidence of the state before the potentially\n\t\t   unsafe formatted output. */\n\t\tif (alog) {\n\t\t\tfprintf(alog,\n\t\t\t\t\"TEST-END name_ptr=%p name_len=%zu dots_len=%zu pad_ptr=%p pad_offset=%lld pad_beyond=%d result=%d\\n\",\n\t\t\t\t(void *)test_case->name, name_len, dots_len, (void *)pad, pad_offset, pad_beyond, error);\n\t\t\tfflush(alog);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\tif (alog) {\n\t\tfprintf(alog, \"EXIT metal_tests_run returning %d\\n\", errors);\n\t\tfflush(alog);\n\t\tfclose(alog);\n\t}\n\n\treturn errors;\n}\n"
}