{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nWhen the function is called with params == NULL, the statement 'params = &dparams;' assigns a new value to the parameter variable 'params' (i.e. modifies the pointer parameter). MISRA C 2023 Rule 17.8 forbids modifying a function parameter itself (the object referred to by a pointer may be modified, but not the pointer). Therefore this fragment violates Rule 17.8. Suggested fix: use a separate local pointer (e.g. 'struct metal_init_params *p = params ? params : &dparams;') and use p thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_tests_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_tests_run with it.\n  - Your function must have the exact same signature as metal_tests_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_tests_run to check logs.\n  - Your function MUST preserve the original logic of metal_tests_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_tests_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_tests_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\t/* Open a log file to capture control flow and state for the violation scenario */\n\tFILE *logf = fopen(\"/tmp/logs/432.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_tests_run entered: params=%p\\n\", (void *)params);\n\t\tfprintf(logf, \"dparams addr=%p\\n\", (void *)&dparams);\n\t}\n\n\tif (!params) {\n\t\tif (logf) fprintf(logf, \"params is NULL; about to assign params = &dparams (this modifies the pointer parameter)\\n\");\n\t\t/* Original behavior (this is the MISRA-flagged assignment) */\n\t\tparams = &dparams;\n\t\tif (logf) fprintf(logf, \"after assignment: params=%p (points to dparams at %p)\\n\", (void *)params, (void *)&dparams);\n\t} else {\n\t\tif (logf) fprintf(logf, \"params is non-NULL; no reassignment performed. params=%p\\n\", (void *)params);\n\t}\n\n\t/* Preserve original logic: set log level on the params structure */\n\tparams->log_level = METAL_LOG_DEBUG;\n\tif (logf) fprintf(logf, \"params->log_level set to %d\\n\", params->log_level);\n\n\terror = metal_init(params);\n\tif (logf) fprintf(logf, \"metal_init(params=%p) returned %d\\n\", (void *)params, error);\n\tif (error) {\n\t\tif (logf) { fprintf(logf, \"metal_init failed, returning error=%d and closing log\\n\", error); fclose(logf); }\n\t\treturn error;\n\t}\n\n\tif (logf) fprintf(logf, \"entering test loop over test_cases\\n\");\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t   node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\tif (logf) fprintf(logf, \"running test: name=\\\"%s\\\", test_case=%p\\n\", test_case->name, (void *)test_case);\n\t\terror = test_case->test();\n\t\tif (logf) fprintf(logf, \"test %s returned %d\\n\", test_case->name, error);\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (logf) fprintf(logf, \"logged result for %s\\n\", test_case->name);\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tif (logf) fprintf(logf, \"finished tests, calling metal_finish(); total errors=%d\\n\", errors);\n\n\tmetal_finish();\n\n\tif (logf) { fprintf(logf, \"metal_finish done, closing log\\n\"); fclose(logf); }\n\n\treturn errors;\n}\n"
}