{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_list_for_each hides the for-loop clauses. Without its definition compliance cannot be guaranteed. A concrete violating scenario: if metal_list_for_each expands to something like for (node = test_cases.next; node != &test_cases; node = node->next) and the body (or a called function such as test_case->test()) modifies the list head or node links (inserting/removing nodes or changing test_cases), then the second/third clauses use objects that are modified in the loop body -> violation of Rule 14.2. Another violation scenario is if the macro expands to a for-loop that uses more than one loop counter or modifies loop counter(s) in the body. If, however, the macro expands to a single-counter for loop (initializes node, tests node, increments node) and neither the head nor node are modified by the loop body or called functions, then the loop would be compliant.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_tests_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_tests_run with it.\n  - Your function must have the exact same signature as metal_tests_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_tests_run to check logs.\n  - Your function MUST preserve the original logic of metal_tests_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_tests_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_tests_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *logf = NULL;\n\tint iter = 0;\n\n\t/* Minimal entry probe: open probe log file early so that the test harness\n\t * can always observe that this function was entered. */\n\tlogf = fopen(\"/tmp/logs/431.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_tests_run: params=%p dparams=%p &test_cases=%p\\n\",\n\t\t\t(void *)params, (void *)&dparams, (void *)&test_cases);\n\t\tfflush(logf);\n\t} else {\n\t\t/* If we cannot open file, still emit a runtime log so behavior is\n\t\t * visible through existing logging facilities. */\n\t\tmetal_log(METAL_LOG_WARN, \"ENTER metal_tests_run (probe file open failed) params=%p\\n\", (void *)params);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_init failed: error=%d\\n\", error);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn error;\n\t}\n\n\t/* Iterate test cases. We instrument before and after invoking each test to\n\t * capture the control path and state that could indicate modifications to\n\t * the list or loop counters by the test body. */\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t   node);\n\t\tpad = dots + strlen(test_case->name);\n\n\t\t/* Log state before calling test */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ITER %d BEFORE: node=%p test_case=%p name=\\\"%s\\\" &test_cases=%p\\n\",\n\t\t\t\titer, (void *)node, (void *)test_case,\n\t\t\t\t(test_case && test_case->name) ? test_case->name : \"(null)\", (void *)&test_cases);\n\t\t\tfflush(logf);\n\t\t} else {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"ITER %d BEFORE: node=%p test_case=%p name=%s &test_cases=%p\\n\",\n\t\t\t\titer, (void *)node, (void *)test_case,\n\t\t\t\t(test_case && test_case->name) ? test_case->name : \"(null)\", (void *)&test_cases);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\n\t\t/* Log state after calling test to detect unexpected modifications. */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ITER %d AFTER: node=%p test_case=%p name=\\\"%s\\\" result=%d &test_cases=%p\\n\",\n\t\t\t\titer, (void *)node, (void *)test_case,\n\t\t\t\t(test_case && test_case->name) ? test_case->name : \"(null)\", error, (void *)&test_cases);\n\t\t\tfflush(logf);\n\t\t} else {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"ITER %d AFTER: node=%p test_case=%p name=%s result=%d &test_cases=%p\\n\",\n\t\t\t\titer, (void *)node, (void *)test_case,\n\t\t\t\t(test_case && test_case->name) ? test_case->name : \"(null)\", error, (void *)&test_cases);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\n\t\titer++;\n\t}\n\n\tmetal_finish();\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT metal_tests_run: total_iters=%d errors=%d\\n\", iter, errors);\n\t\tfclose(logf);\n\t}\n\n\treturn errors;\n}\n"
}