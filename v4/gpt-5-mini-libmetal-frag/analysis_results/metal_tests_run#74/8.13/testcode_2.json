{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'test_case' is declared as 'struct metal_test_case *test_case;' but within metal_tests_run it is only used for read-only access (reading test_case->name and invoking the test function via test_case->test()). There are no writes through this pointer. Per MISRA C 2023 Rule 8.13 it should therefore be declared as a pointer to a const-qualified type, e.g. 'const struct metal_test_case *test_case;'. Assigning the result of metal_container_of (which yields a non-const pointer) to a const-qualified pointer is allowed, and making this change prevents accidental modification of the pointed-to object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_tests_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_tests_run with it.\n  - Your function must have the exact same signature as metal_tests_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_tests_run to check logs.\n  - Your function MUST preserve the original logic of metal_tests_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_tests_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_tests_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *logf = NULL;\n\n\t/* Try to open log file for append. If it fails, fall back to metal_log. */\n\tlogf = fopen(\"/tmp/logs/435.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_tests_run: params=%p\\n\", (void *)params);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_DEBUG, \"metal_tests_run: could not open /tmp/logs/435.txt for append\\n\");\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\t/* Log params pointer and initial log level if possible */\n\tif (logf) {\n\t\tfprintf(logf, \"metal_tests_run: effective params=%p, setting log_level to METAL_LOG_DEBUG\\n\", (void *)params);\n\t\tfflush(logf);\n\t}\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_init returned %d\\n\", error);\n\t\tfflush(logf);\n\t}\n\tif (error) {\n\t\tif (logf) fclose(logf);\n\t\treturn error;\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\t/* compute the test_case pointer (non-const in original) */\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\n\t\t/* Log node and resolved test_case pointer and name */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ITER: node=%p, test_case=%p, name_ptr=%p, name=\\\"%s\\\"\\n\",\n\t\t\t\t(node), (void *)test_case, (void *)test_case->name,\n\t\t\t\t(test_case->name) ? test_case->name : \"(null)\");\n\t\t\tfflush(logf);\n\t\t} else {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"running test node=%p test_case=%p name=%s\\n\",\n\t\t\t\tnode, (void *)test_case, test_case->name ? test_case->name : \"(null)\");\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\t/* Log that we are about to invoke the test function pointer */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"CALL: test_case->test at %p for name=\\\"%s\\\"\\n\",\n\t\t\t\t(void *)test_case->test, test_case->name ? test_case->name : \"(null)\");\n\t\t\tfflush(logf);\n\t\t}\n\n\t\terror = test_case->test();\n\n\t\t/* Log result and whether we increment errors */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"RESULT: name=\\\"%s\\\", return=%d, pad_ptr=%p\\n\",\n\t\t\t\ttest_case->name ? test_case->name : \"(null)\", error, (void *)pad);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error) {\n\t\t\terrors++;\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"ERROR COUNT INCREMENTED: now errors=%d\\n\", errors);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_finish();\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT metal_tests_run: total errors=%d\\n\", errors);\n\t\tfclose(logf);\n\t}\n\n\treturn errors;\n}\n"
}