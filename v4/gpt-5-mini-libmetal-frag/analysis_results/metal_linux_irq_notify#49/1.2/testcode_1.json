{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct '({ ... })' and the GNU token-pasting comma-swallowing '##__VA_ARGS__' in the variadic macro. Both are documented compiler extensions and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_notify code that contains useful probe functions that print useful logs to a file \"/tmp/logs/557.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_irq_notify code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_irq_notify with it.\n  - Your function must have the exact same signature as metal_linux_irq_notify.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_irq_notify to check logs.\n  - Your function MUST preserve the original logic of metal_linux_irq_notify as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_irq_notify will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_irq_notify as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\tFILE *log = NULL;\n\tFILE *src = NULL;\n\tchar line[1024];\n\tint lineno = 0;\n\tint found_ext = 0;\n\n\t/* Try to open the persistent log file. If it fails, continue silently. */\n\tlog = fopen(\"/tmp/logs/557.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER %s: irq_notify_fd=%d\\n\", __func__, irq_notify_fd);\n\t\tfflush(log);\n\t}\n\n\t/* Scan the source file that compiled this translation unit for GCC/Clang extension tokens.\n\t   This attempts to capture evidence of the violation scenario at runtime by searching\n\t   for the tokens '({' (statement-expression) and '##__VA_ARGS__' (GNU variadic token pasting).\n\t   If the source file is not available at runtime, this will simply be skipped. */\n\tsrc = fopen(__FILE__, \"r\");\n\tif (src) {\n\t\twhile (fgets(line, sizeof(line), src) != NULL) {\n\t\t\tlineno++;\n\t\t\t/* Check for GNU statement-expression token and token-pasting of variadic macros. */\n\t\t\tif (strstr(line, \"({\") != NULL) {\n\t\t\t\tfound_ext = 1;\n\t\t\t\tif (log) fprintf(log, \"DETECTED_EXTENSION: '({' in %s:%d: %s\", __FILE__, lineno, line);\n\t\t\t}\n\t\t\tif (strstr(line, \"##__VA_ARGS__\") != NULL) {\n\t\t\t\tfound_ext = 1;\n\t\t\t\tif (log) fprintf(log, \"DETECTED_EXTENSION: '##__VA_ARGS__' in %s:%d: %s\", __FILE__, lineno, line);\n\t\t\t}\n\t\t}\n\t\tif (log) {\n\t\t\tif (found_ext)\n\t\t\t\tfprintf(log, \"SUMMARY: Found one or more GCC/Clang extension tokens in %s\\n\", __FILE__);\n\t\t\telse\n\t\t\t\tfprintf(log, \"SUMMARY: No GCC/Clang extension tokens found in %s\\n\", __FILE__);\n\t\t\tfflush(log);\n\t\t}\n\t\tfclose(src);\n\t\tsrc = NULL;\n\t}\n\n\t/* Preserve the original behavior: perform the notification write. */\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"%s: write failed ret=%d errno=%d\\n\", __func__, ret, errno);\n\t\t\tfflush(log);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t} else {\n\t\tif (log) {\n\t\t\tfprintf(log, \"%s: write returned %d (wrote %zu bytes)\\n\", __func__, ret, sizeof(val));\n\t\t\tfflush(log);\n\t\t}\n\t}\n\n\tif (log) fclose(log);\n\treturn ret;\n}\n"
}