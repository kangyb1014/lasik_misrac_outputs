{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'addr' is declared as void * but is only read (cast to uintptr_t and used); it should be declared as const void *addr. 'phys' is an output parameter and should remain non-const. Because 'addr' can be const-qualified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/205.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_virt2phys code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_virt2phys with it.\n  - Your function must have the exact same signature as metal_virt2phys.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_virt2phys to check logs.\n  - Your function MUST preserve the original logic of metal_virt2phys as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_virt2phys will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_virt2phys as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\tFILE *logf = NULL;\n\n\t/* Open log file to record control flow and state for analysis */\n\tlogf = fopen(\"/tmp/logs/205.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: metal_virt2phys addr=%p (uintptr_t=0x%llx) phys_ptr=%p pagemap_fd=%d page_shift=%u\\n\",\n\t\t\taddr, (unsigned long long)(uintptr_t)addr, (void *)phys, _metal.pagemap_fd, (unsigned)_metal.page_shift);\n\t\tfflush(logf);\n\t} else {\n\t\t/* If log file cannot be opened, use existing logging mechanism */\n\t\tmetal_log(METAL_LOG_WARN, \"metal_virt2phys: could not open log file /tmp/logs/205.txt\\n\");\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: pagemap_fd < 0 (pagemap_fd=%d) -> return %d\\n\", _metal.pagemap_fd, -EINVAL);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\tif (logf) {\n\t\tfprintf(logf, \"CALC: offset = ((uintptr_t)addr >> %u) * %zu = 0x%llx\\n\",\n\t\t\t(unsigned)_metal.page_shift, sizeof(entry), (unsigned long long)offset);\n\t\tfflush(logf);\n\t}\n\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (logf) {\n\t\tfprintf(logf, \"PREAD: pread returned %d (errno=%d)\\n\", error, errno);\n\t\tfflush(logf);\n\t}\n\n\tif (error < 0) {\n\t\t/* preserve original behavior: log error and return negative errno */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: failed pagemap pread (offset 0x%llx) - %s -> return -%d\\n\",\n\t\t\t\t(unsigned long long)offset, strerror(errno), errno);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t(unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif (logf) {\n\t\tfprintf(logf, \"PAGEMAP: raw entry = 0x%llx\\n\", (unsigned long long)entry);\n\t\tfflush(logf);\n\t}\n\n\tif ((entry >> 62) != 2) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: pagemap page not present, offset=0x%llx entry=0x%llx present_bits=0x%llx -> return %d\\n\",\n\t\t\t\t(unsigned long long)offset, (unsigned long long)entry, (unsigned long long)((entry >> 62) & 0x3ULL), -ENOENT);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t(unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t/* Compute physical address from pagemap entry */\n\t{\n\t\tunsigned long phys_val = (unsigned long)((entry & ((1ULL << 54) - 1)) << _metal.page_shift);\n\t\t*phys = phys_val;\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"SUCCESS: computed phys = 0x%lx assigned to *phys (%p) -> return 0\\n\",\n\t\t\t\tphys_val, (void *)phys);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn 0;\n\t}\n}\n"
}