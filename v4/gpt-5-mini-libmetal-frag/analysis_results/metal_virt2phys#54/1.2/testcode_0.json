{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC language extensions: it employs the statement-expression construct '({ ... })' and the GCC variadic-macro comma-swallowing extension '##__VA_ARGS__'. Both are documented compiler extensions (GCC) and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_virt2phys code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_virt2phys with it.\n  - Your function must have the exact same signature as metal_virt2phys.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_virt2phys to check logs.\n  - Your function MUST preserve the original logic of metal_virt2phys as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_virt2phys will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_virt2phys as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\tFILE *log = NULL;\n\n\t/* Log entry into the function (preserve errno across logging). */\n\t{\n\t\tint _log_errno = errno;\n\t\tlog = fopen(\"/tmp/logs/207.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"ENTER metal_virt2phys: addr=%p phys=%p _metal.pagemap_fd=%d _metal.page_shift=%d\\n\",\n\t\t\t\taddr, (void *)phys, _metal.pagemap_fd, _metal.page_shift);\n\t\t\tfclose(log);\n\t\t}\n\t\terrno = _log_errno;\n\t}\n\n\tif (_metal.pagemap_fd < 0)\n\t{\n\t\t/* Preserve errno while we write our diagnostic log. */\n\t\tint _log_errno = errno;\n\t\tlog = fopen(\"/tmp/logs/207.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"EXIT metal_virt2phys: invalid pagemap_fd=%d -> return=%d\\n\",\n\t\t\t\t_metal.pagemap_fd, -EINVAL);\n\t\t\tfclose(log);\n\t\t}\n\t\terrno = _log_errno;\n\t\treturn -EINVAL;\n\t}\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\t/* Capture errno immediately to preserve the original return semantics. */\n\t\tint pread_errno = errno;\n\n\t\t/* Keep the original metal_log call for existing behavior. */\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(pread_errno));\n\n\t\t/* Also write a compact trace to the reproducibility log (restore errno afterward). */\n\t\t{\n\t\t\tint _log_errno = errno;\n\t\t\tlog = fopen(\"/tmp/logs/207.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"FAILED pread: offset=0x%llx error=%d errno=%d (%s) -> return=%d\\n\",\n\t\t\t\t\t(unsigned long long)offset, error, pread_errno, strerror(pread_errno), -pread_errno);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\terrno = _log_errno;\n\t\t}\n\n\t\t/* Return the negative errno as the original implementation did. */\n\t\treturn -pread_errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\t/* Keep original logging. */\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\n\t\t/* Additional reproducibility log; preserve errno while logging. */\n\t\t{\n\t\t\tint _log_errno = errno;\n\t\t\tlog = fopen(\"/tmp/logs/207.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"PAGE NOT PRESENT: offset=0x%llx entry=0x%llx -> return=%d\\n\",\n\t\t\t\t\t(unsigned long long)offset, (unsigned long long)entry, -ENOENT);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\terrno = _log_errno;\n\t\t}\n\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\n\t/* Final success log (preserve errno while logging). */\n\t{\n\t\tint _log_errno = errno;\n\t\tlog = fopen(\"/tmp/logs/207.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"EXIT metal_virt2phys: addr=%p -> phys=0x%lx entry=0x%llx offset=0x%llx return=0\\n\",\n\t\t\t\taddr, *phys, (unsigned long long)entry, (unsigned long long)offset);\n\t\t\tfclose(log);\n\t\t}\n\t\terrno = _log_errno;\n\t}\n\n\treturn 0;\n}\n"
}