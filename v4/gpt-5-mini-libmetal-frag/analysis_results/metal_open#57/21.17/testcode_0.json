{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(shmem->name, name) has no prior checks that either pointer is non-NULL or that the strings are NUL-terminated. For example, if metal_shmem_open_generic is called with name == NULL, strcmp will be passed a NULL pointer (or if shmem->name is not NUL-terminated, strcmp will scan past the buffer), leading to out-of-bounds access/UB and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_open code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_open with it.\n  - Your function must have the exact same signature as metal_open.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_open to check logs.\n  - Your function MUST preserve the original logic of metal_open as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_open will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_open as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Logging probe: append human-readable trace info to /tmp/logs/473.txt */\n    FILE *log = fopen(\"/tmp/logs/473.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_open: entry path=%p shm=%d\\n\", (const void *)path, shm);\n        fflush(log);\n    }\n\n    /* Preserve original semantics: check NULL or empty using strlen when path is non-NULL */\n    if (!path || !strlen(path)) {\n        if (log) {\n            fprintf(log, \"metal_open: early return -EINVAL (path %s)\\n\", !path ? \"NULL\" : \"empty\");\n            fflush(log);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        /* Log the path string (may be unsafe if not NUL-terminated; this mirrors original behavior) */\n        fprintf(log, \"metal_open: calling %s with path='%s'\\n\", shm ? \"shm_open\" : \"open\", path);\n        fflush(log);\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (log) {\n        if (fd < 0) {\n            fprintf(log, \"metal_open: result fd=%d errno=%d\\n\", fd, errno);\n        } else {\n            fprintf(log, \"metal_open: result fd=%d\\n\", fd);\n        }\n        fflush(log);\n        fclose(log);\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}