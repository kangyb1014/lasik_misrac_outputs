{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls metal_shmem_open_generic() but assigns its integer return value to the pointer parameter 'result' (result = metal_shmem_open_generic(...);) and then immediately tests the unrelated variable 'error' (if (!error) return error;). The value written by the assignment is never inspected by the subsequent test, so the assignment has no effect on the immediate control flow and is effectively unused/incorrect. This is symptomatic of a wrong variable being used (should be 'error = ...'), and the executed assignment is therefore dead (its removal would not affect the subsequent test).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/478.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_open code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_open with it.\n  - Your function must have the exact same signature as metal_open.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_open to check logs.\n  - Your function MUST preserve the original logic of metal_open as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_open will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_open as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\t/* Open a persistent log to capture control flow and state for analysis. */\n\tFILE *log = fopen(\"/tmp/logs/478.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_open: path=%s, shm=%d\\n\", path ? path : \"(NULL)\", shm);\n\t}\n\n\tif (!path || !strlen(path)) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"EARLY RETURN: invalid path (NULL or empty)\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\t/* Save errno immediately so logging operations do not change the reported error. */\n\tint saved_errno = errno;\n\n\tif (log) {\n\t\tfprintf(log, \"AFTER OPEN: fd=%d, errno=%d\\n\", fd, saved_errno);\n\t\tfclose(log);\n\t}\n\n\t/* Preserve original behavior: return fd if non-negative, otherwise -errno (saved). */\n\treturn fd < 0 ? -saved_errno : fd;\n}\n"
}