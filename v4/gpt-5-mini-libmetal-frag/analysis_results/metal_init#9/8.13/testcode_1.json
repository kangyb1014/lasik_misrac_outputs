{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf _metal.tmp_path is declared as a non-const pointer (e.g. 'char *tmp_path'), then assigning the local 'const char *tmp_path' to it discards the const qualifier. This allows a pointer to potentially const data (such as the literal \"/tmp\") to be stored in a non-const pointer, violating MISRA C 2023 Rule 8.13; the fix is to declare _metal.tmp_path as 'const char *'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init:\n```c\nint metal_init(const struct metal_init_params *params)\n{\n\tint error = 0;\n\n\tif (_metal.common.ref_count++ != 0)\n\t\treturn 0;\n\n\tmemset(&_metal, 0, sizeof(_metal));\n\n\t_metal.common.log_handler   = params->log_handler;\n\t_metal.common.log_level     = params->log_level;\n\n\tmetal_list_init(&_metal.common.bus_list);\n\tmetal_list_init(&_metal.common.generic_shmem_list);\n\tmetal_list_init(&_metal.common.generic_device_list);\n\n\terror = metal_sys_init(params);\n\tif (error)\n\t\treturn error;\n\n\t++_metal.common.ref_count;\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init with it.\n  - Your function must have the exact same signature as metal_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init to check logs.\n  - Your function MUST preserve the original logic of metal_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_init(const struct metal_init_params *params)\n{\n\tint error = 0;\n\t/* Open a log file to capture control flow and state for debugging. */\n\tFILE *fp = fopen(\"/tmp/logs/665.txt\", \"a\");\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: entered. params=%p pre_ref_count=%d\\n\", (void *)params, (int)_metal.common.ref_count);\n\t\tfflush(fp);\n\t}\n\n\t/* Preserve original early-exit behavior while logging the evaluated state. */\n\tif (_metal.common.ref_count++ != 0) {\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"metal_init: early return path taken. ref_count_after_increment=%d\\n\",\n\t\t\t        (int)_metal.common.ref_count);\n\t\t\tfclose(fp);\n\t\t}\n\t\treturn 0;\n\t}\n\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: about to memset _metal; ref_count_before_memset=%d\\n\",\n\t\t        (int)_metal.common.ref_count);\n\t\tfflush(fp);\n\t}\n\n\t/* Reset global state as in the original implementation. */\n\tmemset(&_metal, 0, sizeof(_metal));\n\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: after memset _metal. ref_count=%d (expected 0)\\n\",\n\t\t        (int)_metal.common.ref_count);\n\t\tfflush(fp);\n\t}\n\n\t/* Restore log handler and level from params (same as original code). */\n\t_metal.common.log_handler   = params->log_handler;\n\t_metal.common.log_level     = params->log_level;\n\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: assigned log_handler=%p log_level=%d\\n\",\n\t\t        (void *)_metal.common.log_handler, (int)_metal.common.log_level);\n\t\tfflush(fp);\n\t}\n\n\t/* Initialize lists (unchanged). */\n\tmetal_list_init(&_metal.common.bus_list);\n\tmetal_list_init(&_metal.common.generic_shmem_list);\n\tmetal_list_init(&_metal.common.generic_device_list);\n\n\t/* Call system init and log the result. */\n\terror = metal_sys_init(params);\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: metal_sys_init returned %d\\n\", error);\n\t\tfflush(fp);\n\t}\n\n\tif (error) {\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"metal_init: returning early with error=%d\\n\", error);\n\t\t\tfclose(fp);\n\t\t}\n\t\treturn error;\n\t}\n\n\t/* Finalize reference counting as in the original implementation. */\n\t++_metal.common.ref_count;\n\tif (fp) {\n\t\tfprintf(fp, \"metal_init: final ref_count=%d, returning %d\\n\",\n\t\t        (int)_metal.common.ref_count, error);\n\t\tfclose(fp);\n\t}\n\treturn error;\n}\n"
}