{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses a function pointer (cntr->irq_register). If that pointer is set to metal_irq_register itself or to any function that (directly or indirectly) calls metal_irq_register, an indirect recursion occurs: metal_irq_register -> cntr->irq_register -> metal_irq_register -> ... , violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/80.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified irq code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original irq with it.\n  - Your function must have the exact same signature as irq.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call irq to check logs.\n  - Your function MUST preserve the original logic of irq as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, irq will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of irq as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\tFILE *logf = NULL;\n\ttime_t now = time(NULL);\n\tpid_t pid = getpid();\n\tunsigned long tid = (unsigned long)pthread_self();\n\n\t/* Open a persistent log to capture control flow/state for diagnostics */\n\tlogf = fopen(\"/tmp/logs/80.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] pid=%d tid=%lu ENTER %s\\n\", (long)now, (int)pid, tid, __func__);\n\t\tfprintf(logf, \"[%ld] original_log_level=%d\\n\", (long)now, (int)mll);\n\t\tfflush(logf);\n\t} else {\n\t\t/* If file can't be opened, fall back to metal_log so at least something is recorded */\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: could not open /tmp/logs/80.txt for appending\\n\", __func__);\n\t}\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"[%ld] created tst_irq[%d] = %d\\n\", (long)time(NULL), i, tst_irq[i]);\n\t\t\tfflush(logf);\n\t\t} else {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t\t  __func__, i, tst_irq[i]);\n\t\t}\n\t}\n\n\t/* First register */\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] about to call metal_irq_register for irq index 0 (fd=%d). func_ptr=%p\\n\",\n\t\t\t(long)time(NULL), tst_irq[0], (void *)metal_irq_register);\n\t\tfflush(logf);\n\t}\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] returned from metal_irq_register for irq index 0, rc=%d\\n\",\n\t\t\t(long)time(NULL), rc);\n\t\tfflush(logf);\n\t}\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\t/* Second register */\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] about to call metal_irq_register for irq index 1 (fd=%d). func_ptr=%p\\n\",\n\t\t\t(long)time(NULL), tst_irq[1], (void *)metal_irq_register);\n\t\tfflush(logf);\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] returned from metal_irq_register for irq index 1, rc=%d\\n\",\n\t\t\t(long)time(NULL), rc);\n\t\tfflush(logf);\n\t}\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\t/* Unregister and re-register sequence */\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] calling metal_irq_unregister for fd=%d\\n\", (long)time(NULL), tst_irq[0]);\n\t\tfflush(logf);\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] about to re-register irq index 0 (fd=%d)\\n\", (long)time(NULL), tst_irq[0]);\n\t\tfflush(logf);\n\t}\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] returned from re-register metal_irq_register for irq index 0, rc=%d\\n\",\n\t\t\t(long)time(NULL), rc);\n\t\tfflush(logf);\n\t}\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] calling metal_irq_unregister for fd=%d and fd=%d\\n\",\n\t\t\t(long)time(NULL), tst_irq[0], tst_irq[1]);\n\t\tfflush(logf);\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"[%ld] closing tst_irq[%d] = %d\\n\", (long)time(NULL), i, tst_irq[i]);\n\t\t\tfflush(logf);\n\t\t}\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n\tif (logf) {\n\t\tfprintf(logf, \"[%ld] EXIT %s rc=%d err_msg='%s'\\n\", (long)time(NULL), __func__, rc, err_msg);\n\t\tfflush(logf);\n\t\tfclose(logf);\n\t}\n\treturn rc;\n}\n"
}