{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen pthread_create fails it returns a positive errno (e.g. 11). The code stores error = -pthread_create(...), producing a negative value (e.g. -11), then calls strerror(error). strerror expects a non\u2011negative error number; passing a negative value can cause the implementation to index out of bounds of its internal message table or otherwise access memory beyond the bounds of the object returned by strerror, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified spinlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of spinlock:\n```c\nstatic int spinlock(void)\n{\n\tstruct metal_spinlock lock = METAL_SPINLOCK_INIT;\n\tconst int threads = 10;\n\tint value, error;\n\n\terror = metal_run(threads, spinlock_thread, &lock);\n\tif (!error) {\n\t\tvalue = total;\n\t\tvalue -= spinlock_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified spinlock code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original spinlock with it.\n  - Your function must have the exact same signature as spinlock.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call spinlock to check logs.\n  - Your function MUST preserve the original logic of spinlock as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, spinlock will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of spinlock as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int spinlock(void)\n{\n\tstruct metal_spinlock lock = METAL_SPINLOCK_INIT;\n\tconst int threads = 10;\n\tint value, error;\n\tFILE *log = fopen(\"/tmp/logs/443.txt\", \"a\");\n\n\t/* Minimal entry probe */\n\tif (log) {\n\t\tfprintf(log, \"ENTER spinlock(): lock=@%p, threads=%d\\n\", (void *)&lock, threads);\n\t\tfflush(log);\n\t}\n\n\terror = metal_run(threads, spinlock_thread, &lock);\n\n\tif (log) {\n\t\tfprintf(log, \"metal_run returned error=%d\\n\", error);\n\t\tfflush(log);\n\t}\n\n\tif (!error) {\n\t\t/* preserve original logic */\n\t\tvalue = total;\n\t\tif (log) {\n\t\t\tfprintf(log, \"before adjust: total=%d, spinlock_test_count=%d\\n\",\n\t\t\t\tvalue, spinlock_test_count);\n\t\t}\n\n\t\tvalue -= spinlock_test_count * threads;\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"after adjust: computed delta=%d\\n\", value);\n\t\t}\n\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"counter mismatch detected, delta=%d; setting error=-%d\\n\",\n\t\t\t\t\tvalue, EINVAL);\n\t\t\t}\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"EXIT spinlock(): returning error=%d\\n\", error);\n\t\tfclose(log);\n\t}\n\n\treturn error;\n}\n"
}