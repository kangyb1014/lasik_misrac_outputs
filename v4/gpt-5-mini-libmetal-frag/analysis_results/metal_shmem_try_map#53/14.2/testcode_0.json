{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop initialization contains two side-effects: \"virt = mem, page = 0\". Rule 14.2 clause 1 requires the first clause to be empty or an expression that sets or defines/initializes the loop counter only. Initializing a non-loop object (virt) in the first clause violates this requirement. (Clauses 2\u20134 are satisfied: the condition uses the loop counter only and has no persistent side effects, the iteration expression only increments the loop counter, and the loop counter is not modified in the body.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_try_map code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_try_map with it.\n  - Your function must have the exact same signature as metal_shmem_try_map.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_try_map to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_try_map as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_try_map will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n    FILE *log = NULL;\n\n    /* Open log early so all exit paths can record useful information. */\n    log = fopen(\"/tmp/logs/311.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_shmem_try_map entered: fd=%d, requested_size=%zu, page_size=%zu, mmap_flags=0x%x\\n\",\n                fd, size, (size_t)ps->page_size, ps->mmap_flags);\n        fflush(log);\n    }\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    if (log) {\n        fprintf(log, \"aligned_size=%zu, pages=%zu\\n\", size, pages);\n        fflush(log);\n    }\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        if (log) {\n            fprintf(log, \"metal_map failed: error=%d (%s)\\n\", error, strerror(-error));\n            fflush(log);\n            fclose(log);\n        }\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        return error;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_map succeeded: mem=%p\\n\", mem);\n        fflush(log);\n    }\n\n    error = mlock(mem, size);\n    if (error) {\n        if (log) {\n            fprintf(log, \"mlock failed: errno=%d (%s)\\n\", errno, strerror(errno));\n            fflush(log);\n        }\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        if (log) {\n            fprintf(log, \"malloc phys failed: phys_size=%zu\\n\", phys_size);\n            fflush(log);\n            fclose(log);\n        }\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    if (log) {\n        fprintf(log, \"phys array allocated: phys=%p, phys_size=%zu\\n\", (void *)phys, phys_size);\n        fflush(log);\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        if (log) {\n            fprintf(log, \"malloc io failed: freeing phys and unmapping mem\\n\");\n            fflush(log);\n            fclose(log);\n        }\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        if (log) {\n            fprintf(log, \"_metal.pagemap_fd < 0: using offset as pa, phys[0]=0\\n\");\n            fflush(log);\n        }\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        /* Important loop: keep the original for-loop structure to reproduce the scenario.\n         * The first clause assigns two objects: virt = mem, page = 0. This is what the\n         * MISRA report points to. We keep it intact and add logging inside the loop\n         * so the runtime evidence shows virt was assigned from mem in the initialization. */\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            /* Log the initialization evidence on the first iteration. */\n            if (log && page == 0) {\n                fprintf(log, \"for-loop init observed: virt=%p, mem=%p, page=%zu\\n\",\n                        (void *)virt, mem, page);\n                fflush(log);\n            }\n\n            if (log) {\n                fprintf(log, \"iter: page=%zu, offset=%zu, virt+offset=%p\\n\",\n                        page, offset, (void *)(virt + offset));\n                fflush(log);\n            }\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                if (log) {\n                    fprintf(log, \"metal_virt2phys failed for page=%zu: error=%d, phys[%zu]=%llu\\n\",\n                            page, error, page, (unsigned long long)phys[page]);\n                    fflush(log);\n                }\n            } else {\n                if (log) {\n                    fprintf(log, \"metal_virt2phys success: page=%zu, phys[%zu]=%llu\\n\",\n                            page, page, (unsigned long long)phys[page]);\n                    fflush(log);\n                }\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n    }\n\n    *result = io;\n\n    if (log) {\n        fprintf(log, \"metal_shmem_try_map completed successfully: io=%p, result set\\n\", (void *)io);\n        fflush(log);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}