{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC language extensions: it employs the GCC 'statement expression' extension \"({ ... })\" and the GNU token-pasting trick '##__VA_ARGS__' to swallow a comma for empty variadic args. Both are compiler-specific extensions (not standard C) and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/317.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_shmem_try_map code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_shmem_try_map with it.\n  - Your function must have the exact same signature as metal_shmem_try_map.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_shmem_try_map to check logs.\n  - Your function MUST preserve the original logic of metal_shmem_try_map as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_shmem_try_map will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n    FILE *log = NULL;\n\n    /* Attempt to open the preferred log file, fall back if necessary. */\n    log = fopen(\"/tmp/logs/317.txt\", \"a\");\n    if (!log) {\n        log = fopen(\"/tmp/317.txt\", \"a\");\n        if (log) {\n            metal_log(METAL_LOG_WARNING, \"logging: fallback to /tmp/317.txt\\n\");\n        } else {\n            metal_log(METAL_LOG_WARNING, \"logging: cannot open /tmp/logs/317.txt or /tmp/317.txt\\n\");\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"ENTER: metal_shmem_try_map(ps=%p, fd=%d, size=%zu, result=%p)\\n\", (void *)ps, fd, size, (void *)result);\n#ifdef __STDC_VERSION__\n        fprintf(log, \"COMPILE: __STDC_VERSION__=%lld\\n\", (long long) __STDC_VERSION__);\n#else\n        fprintf(log, \"COMPILE: __STDC_VERSION__ not defined\\n\");\n#endif\n#ifdef __GNUC__\n        fprintf(log, \"COMPILE: __GNUC__=%d, __GNUC_MINOR__=%d, __GNUC_PATCHLEVEL__=%d\\n\", __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);\n#else\n        fprintf(log, \"COMPILE: __GNUC__ not defined\\n\");\n#endif\n#ifdef __clang__\n        fprintf(log, \"COMPILE: compiled with clang\\n\");\n#endif\n#ifdef __GNUC__\n        fprintf(log, \"NOTE: Compiler identified as GCC-compatible; this build may support GCC extensions (e.g., statement expressions, token-pasting tricks)\\n\");\n#endif\n        fflush(log);\n    }\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    if (log) {\n        fprintf(log, \"AFTER_ALIGN: aligned_size=%zu, page_size=%zu, pages=%zu\\n\", size, ps->page_size, pages);\n        fflush(log);\n    }\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        if (log) {\n            fprintf(log, \"metal_map FAILED: fd=%d size=%zu mmap_flags=0x%x error=%d strerror=%s\\n\",\n                    fd, size, ps->mmap_flags, error, strerror(-error));\n            fflush(log);\n        }\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n        if (log)\n            fclose(log);\n        return error;\n    }\n\n    if (log) {\n        fprintf(log, \"metal_map SUCCEEDED: mem=%p\\n\", mem);\n        fflush(log);\n    }\n\n    error = mlock(mem, size);\n    if (error) {\n        if (log) {\n            fprintf(log, \"mlock FAILED: errno=%d strerror=%s\\n\", errno, strerror(errno));\n            fflush(log);\n        }\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n    } else {\n        if (log) {\n            fprintf(log, \"mlock SUCCEEDED\\n\");\n            fflush(log);\n        }\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        if (log) {\n            fprintf(log, \"malloc phys FAILED: phys_size=%zu\\n\", phys_size);\n            fflush(log);\n            fclose(log);\n        }\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n    if (log) {\n        fprintf(log, \"malloc phys SUCCEEDED: phys=%p phys_size=%zu\\n\", (void *)phys, phys_size);\n        fflush(log);\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        if (log) {\n            fprintf(log, \"malloc io FAILED: sizeof(io)=%zu\\n\", sizeof(*io));\n            fflush(log);\n            fclose(log);\n        }\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n    if (log) {\n        fprintf(log, \"malloc io SUCCEEDED: io=%p\\n\", (void *)io);\n        fflush(log);\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        if (log) {\n            fprintf(log, \"pagemap_fd < 0: using offset as pa, phys[0]=0\\n\");\n            fflush(log);\n        }\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        if (log) {\n            fprintf(log, \"pagemap_fd >= 0: pagemap_fd=%d looping %zu pages\\n\", _metal.pagemap_fd, pages);\n            fflush(log);\n        }\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                if (log) {\n                    fprintf(log, \"virt2phys FAILED: page=%zu addr=%p error=%d -> phys[%zu]=METAL_BAD_OFFSET\\n\",\n                            page, (void *)(virt + offset), error, page);\n                    fflush(log);\n                }\n            } else {\n                if (log) {\n                    fprintf(log, \"virt2phys SUCCEEDED: page=%zu addr=%p phys[%zu]=0x%llx\\n\",\n                            page, (void *)(virt + offset), page, (unsigned long long) phys[page]);\n                    fflush(log);\n                }\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    if (log) {\n        fprintf(log, \"EXIT: success, result io=%p mem=%p phys=%p size=%zu pages=%zu\\n\",\n                (void *)io, mem, (void *)phys, size, pages);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}