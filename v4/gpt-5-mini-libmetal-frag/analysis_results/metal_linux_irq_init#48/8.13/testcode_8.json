{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator 'node' is declared as a non-const pointer: 'struct metal_list *node;'. In the shown uses (metal_irq_register_controller and metal_irq_allocate) 'node' is only used for iteration/reading (comparison and obtaining the containing controller) and is never used to modify the list node. Therefore it could/should be declared 'const struct metal_list *node' (and related derived pointers adjusted to const) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/545.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_irq_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_irq_init with it.\n  - Your function must have the exact same signature as metal_linux_irq_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_irq_init to check logs.\n  - Your function MUST preserve the original logic of metal_linux_irq_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_irq_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_linux_irq_init(void)\n{\n\tint ret;\n\tFILE *log = NULL;\n\n\t/* Ensure logging directory exists (best-effort). */\n\t(void)mkdir(\"/tmp/logs\", 0777);\n\tlog = fopen(\"/tmp/logs/545.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"---- ENTER metal_linux_irq_init() ----\\n\");\n\t\tfflush(log);\n\t}\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\tif (log) {\n\t\tfprintf(log, \"memset(&irqs,0,%zu) done; irqs addr=%p\\n\", sizeof(irqs), (void *)&irqs);\n\t\tfflush(log);\n\t}\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (log) {\n\t\tfprintf(log, \"eventfd() -> irq_notify_fd=%d\\n\", irq_notify_fd);\n\t\tfflush(log);\n\t}\n\tif (irq_notify_fd < 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"eventfd failed: errno=%d\\n\", errno);\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tif (log) {\n\t\tfprintf(log, \"metal_mutex_init(&irq_lock) called; irq_lock addr=%p\\n\", (void *)&irq_lock);\n\t\tfflush(log);\n\t}\n\n\tirq_handling_stop = false;\n\tif (log) {\n\t\tfprintf(log, \"irq_handling_stop set to false\\n\");\n\t\tfflush(log);\n\t}\n\n\t/* Log information about the controller being registered so other agents\n\t   can correlate behavior inside metal_irq_register_controller(). */\n\tif (log) {\n\t\tfprintf(log, \"About to call metal_irq_register_controller(&linux_irq_cntr) with controller addr=%p\\n\",\n\t\t\t(void *)&linux_irq_cntr);\n\t\tfflush(log);\n\t}\n\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_register_controller returned %d\\n\", ret);\n\t\tfflush(log);\n\t}\n\tif (ret < 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"Linux IRQ controller failed to register (ret=%d)\\n\", ret);\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (log) {\n\t\tfprintf(log, \"pthread_create(&irq_pthread, ...) returned %d; irq_pthread addr=%p\\n\",\n\t\t\tret, (void *)&irq_pthread);\n\t\tfflush(log);\n\t}\n\tif (ret != 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"Failed to create IRQ thread: %d.\\n\", ret);\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"---- EXIT metal_linux_irq_init() -> 0 ----\\n\\n\");\n\t\tfflush(log);\n\t\tfclose(log);\n\t}\n\n\treturn 0;\n}\n"
}