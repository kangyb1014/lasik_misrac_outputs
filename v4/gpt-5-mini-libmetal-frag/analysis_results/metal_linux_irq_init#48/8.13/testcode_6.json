{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_irq_register_controller the loop iterator is declared as a non-const pointer (struct metal_list *node) and used only for read/traversal in the call metal_list_for_each(&irq_cntrs, node). The pointer could be declared as const struct metal_list *node (and the iteration macro adjusted to accept a const pointer) because the list elements are not modified in this function. Therefore the code fails to qualify the pointer with const where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/545.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_irq_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_irq_init with it.\n  - Your function must have the exact same signature as metal_linux_irq_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_irq_init to check logs.\n  - Your function MUST preserve the original logic of metal_linux_irq_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_irq_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_linux_irq_init(void)\n{\n\tint ret;\n\tFILE *logf = fopen(\"/tmp/logs/545.txt\", \"a\");\n\n\t/* Ensure the log directory exists if fopen failed */\n\tif (!logf) {\n\t\t/* try to create the directory and reopen */\n\t\t(void)mkdir(\"/tmp/logs\", 0777);\n\t\tlogf = fopen(\"/tmp/logs/545.txt\", \"a\");\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_linux_irq_init\\n\");\n\t\tfflush(logf);\n\t}\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\tif (logf) {\n\t\tfprintf(logf, \"after memset: irqs at %p, size=%zu\\n\", (void *)&irqs, (size_t)sizeof(irqs));\n\t\tfflush(logf);\n\t}\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (logf) {\n\t\tfprintf(logf, \"eventfd() -> irq_notify_fd=%d\\n\", irq_notify_fd);\n\t\tfflush(logf);\n\t}\n\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: eventfd failed, errno=%d\\n\", errno);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tif (logf) {\n\t\tfprintf(logf, \"mutex initialized, irq_handling_stop=%d\\n\", (int)irq_handling_stop);\n\t\tfflush(logf);\n\t}\n\n\tif (logf) {\n\t\t/* log the address of the controller being registered to aid tracing */\n\t\tfprintf(logf, \"calling metal_irq_register_controller(&linux_irq_cntr=%p)\\n\", (void *)&linux_irq_cntr);\n\t\tfflush(logf);\n\t}\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_irq_register_controller returned %d\\n\", ret);\n\t\tfflush(logf);\n\t}\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: metal_irq_register_controller failed, ret=%d\\n\", ret);\n\t\t\t/* Note: capture pointer/address info to help reproduce traversal/constness issues */\n\t\t\tfprintf(logf, \"controller address: %p\\n\", (void *)&linux_irq_cntr);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"registration successful\\n\");\n\t\tfflush(logf);\n\t}\n\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"pthread_create -> ret=%d\\n\", ret);\n\t\tfflush(logf);\n\t}\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: pthread_create failed, ret=%d\\n\", ret);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EAGAIN;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT metal_linux_irq_init: success\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}"
}