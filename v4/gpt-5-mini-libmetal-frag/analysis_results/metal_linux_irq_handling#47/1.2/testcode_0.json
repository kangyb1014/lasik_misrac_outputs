{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct '({ ... })' and the GNU variadic comma-swallowing idiom '##__VA_ARGS__'. Both are documented compiler extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/247.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_irq_handling code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_irq_handling with it.\n  - Your function must have the exact same signature as metal_linux_irq_handling.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_irq_handling to check logs.\n  - Your function MUST preserve the original logic of metal_linux_irq_handling as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_irq_handling will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\tFILE *logf = NULL;\n\n\t(void)args;\n\n\t/* Open log file for appending probe information to reproduce violation scenario */\n\tlogf = fopen(\"/tmp/logs/247.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_handling: entered, this=%p\\n\", (void *)__func__);\n\t\tfflush(logf);\n\t}\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_handling: malloc failed for pfds (size=%zu)\\n\",\n\t\t\t\t(size_t)(FD_SETSIZE * sizeof(struct pollfd)));\n\t\t\tfflush(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\tif (logf) fclose(logf);\n\t\treturn NULL;\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_handling: allocated pfds=%p\\n\", (void *)pfds);\n\t\tfflush(logf);\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_handling: sched_setscheduler returned %d\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_handling: top of loop, acquiring irq_lock\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: irq_handling_stop set, exiting loop\\n\");\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t  linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_handling: built pfds, count=%d, irq_notify_fd=%d\\n\",\n\t\t\t\tj, irq_notify_fd);\n\t\t\tfor (i = 0; i < j; i++)\n\t\t\t\tfprintf(logf, \"  pfds[%d]: fd=%d events=0x%x\\n\", i, pfds[i].fd, pfds[i].events);\n\t\t\tfflush(logf);\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: poll() failed: errno=%d (%s)\\n\",\n\t\t\t\t\terrno, strerror(errno));\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_linux_irq_handling: poll returned, pfds_total=%d\\n\", pfds_total);\n\t\t\tfflush(logf);\n\t\t}\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tssize_t r = read(pfds[i].fd, (void *)&val, sizeof(uint64_t));\n\t\t\t\tif (r < 0) {\n\t\t\t\t\tif (logf) {\n\t\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: read irq fd %d failed: errno=%d (%s)\\n\",\n\t\t\t\t\t\t\tpfds[i].fd, errno, strerror(errno));\n\t\t\t\t\t\tfflush(logf);\n\t\t\t\t\t}\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t\t} else {\n\t\t\t\t\tif (logf) {\n\t\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: read notification from fd=%d, val=%llu bytes=%zd\\n\",\n\t\t\t\t\t\t\tpfds[i].fd, (unsigned long long)val, (long)r);\n\t\t\t\t\t\tfflush(logf);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: handling irq on fd=%d, dev=%p\\n\",\n\t\t\t\t\t\tfd, (void *)dev);\n\t\t\t\t\tfflush(logf);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: metal_irq_handle returned %d (irq_handled=%d)\\n\",\n\t\t\t\t\t\tirq_handled, irq_handled);\n\t\t\t\t\tfflush(logf);\n\t\t\t\t}\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack) {\n\t\t\t\t\t\tif (logf) {\n\t\t\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: calling dev_irq_ack for dev=%p bus=%p\\n\",\n\t\t\t\t\t\t\t\t(void *)dev, (void *)dev->bus);\n\t\t\t\t\t\t\tfflush(logf);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(dev->bus, dev, fd);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"metal_linux_irq_handling: poll unexpected on fd=%d revents=0x%x\\n\",\n\t\t\t\t\t\tpfds[i].fd, pfds[i].revents);\n\t\t\t\t\tfflush(logf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_handling: freeing pfds=%p and exiting\\n\", (void *)pfds);\n\t\tfflush(logf);\n\t}\n\tfree(pfds);\n\tif (logf) fclose(logf);\n\treturn NULL;\n}\n"
}