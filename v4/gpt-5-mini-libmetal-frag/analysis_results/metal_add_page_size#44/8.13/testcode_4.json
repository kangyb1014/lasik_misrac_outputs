{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nA violation occurs if the string literal is passed to a non-const pointer parameter. For example, if metal_fmt is declared as\n    char *metal_fmt(char *fmt)\nor if the log handler is declared as\n    int (*log_handler)(int, char *, ...)\nthen the literal \"skipped page size %ld - overflow\\n\" is passed (directly or via metal_fmt) to a char * parameter. That makes a pointer to a non-const-qualified type point at a string literal, which contravenes MISRA C 2023 Rule 8.13. If, however, metal_fmt and the log_handler take/return const char * (e.g. const char *metal_fmt(const char *fmt) and int (*log_handler)(int, const char *, ...)), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/455.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_add_page_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_add_page_size with it.\n  - Your function must have the exact same signature as metal_add_page_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_add_page_size to check logs.\n  - Your function MUST preserve the original logic of metal_add_page_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_add_page_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_add_page_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\t/* file for debug logs to reproduce the violation scenario */\n\tFILE *logf = fopen(\"/tmp/logs/455.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_add_page_size: this=%p path=%p path_str=%s shift=%d mmap_flags=%d num_page_sizes=%d\\n\",\n\t\t\t(const void *)&_metal, (const void *)path, (path ? path : \"(null)\"), shift, mmap_flags, _metal.num_page_sizes);\n\t\tfprintf(logf, \"computed: index=%d size=%lu (1UL<<shift)\\n\", index, size);\n\t}\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\t/* capture the exact format literal/info passed to metal_log */\n\t\tconst char *overflow_fmt = \"skipped page size %ld - overflow\\n\";\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"BRANCH overflow: index=%d >= MAX_PAGE_SIZES=%d\\n\", index, (int)MAX_PAGE_SIZES);\n\t\t\tfprintf(logf, \"about to call metal_log with fmt addr=%p fmt_text=%s size=%lu\\n\",\n\t\t\t\t(const void *)overflow_fmt, overflow_fmt, size);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"RETURN -EOVERFLOW (%d)\\n\", -EOVERFLOW);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tconst char *invalid_fmt = \"skipped page size %ld - invalid args\\n\";\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"BRANCH invalid args: path=%p shift=%d\\n\", (const void *)path, shift);\n\t\t\tfprintf(logf, \"about to call metal_log with fmt addr=%p fmt_text=%s size=%lu\\n\",\n\t\t\t\t(const void *)invalid_fmt, invalid_fmt, size);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"RETURN -EINVAL (%d)\\n\", -EINVAL);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\t/* preserve original behavior: populate page size entry */\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tif (logf) {\n\t\t/* log the exact state written into the structure to aid reproduction */\n\t\tfprintf(logf, \"ADDED entry index=%d page_shift=%d page_size=%lu mmap_flags=%d path_stored=%s num_page_sizes=%d\\n\",\n\t\t\tindex, _metal.page_sizes[index].page_shift, _metal.page_sizes[index].page_size,\n\t\t\t_metal.page_sizes[index].mmap_flags, _metal.page_sizes[index].path, _metal.num_page_sizes);\n\t}\n\n\t/* capture the exact format literal/info passed to metal_log on success */\n\t{\n\t\tconst char *added_fmt = \"added page size %ld @%s\\n\";\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"about to call metal_log with fmt addr=%p fmt_text=%s size=%lu path=%s\\n\",\n\t\t\t\t(const void *)added_fmt, added_fmt, size, (path ? path : \"(null)\"));\n\t\t}\n\t\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"RETURN 0 (success)\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}