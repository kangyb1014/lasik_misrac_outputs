{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal through metal_fmt(fmt) into _metal.common.log_handler. If metal_fmt has a non-const parameter or returns (or _metal.common.log_handler is declared to take) a plain char * (for example: void (*log_handler)(int, char *, ...)), then a pointer to a non-const-qualified type is used for a string literal. That is a violation of MISRA C 2023 Rule 8.13 because the pointer should instead point to a const-qualified type (e.g., const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/455.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_add_page_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_add_page_size with it.\n  - Your function must have the exact same signature as metal_add_page_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_add_page_size to check logs.\n  - Your function MUST preserve the original logic of metal_add_page_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_add_page_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_add_page_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n    /* Probe log file for control-flow/state diagnostics (kept minimal and append-only) */\n    FILE *probe = fopen(\"/tmp/logs/455.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"ENTER: metal_add_page_size(path=%p, shift=%d, mmap_flags=%d)\\n\",\n                (void *)path, shift, mmap_flags);\n        if (path) {\n            /* Print a limited preview of the path to avoid overly long output */\n            fprintf(probe, \"  path (preview): '%s'\\n\", path);\n        } else {\n            fprintf(probe, \"  path: (NULL)\\n\");\n        }\n        fflush(probe);\n    }\n\n    int index = _metal.num_page_sizes;\n    unsigned long size = 1UL << shift;\n\n    if (probe) {\n        fprintf(probe, \"  computed: index=%d, size=%lu\\n\", index, size);\n        fflush(probe);\n    }\n\n    if (index >= MAX_PAGE_SIZES) {\n        if (probe) {\n            fprintf(probe, \"  branch: index >= MAX_PAGE_SIZES (%d >= %d) - about to call metal_log WARNING\\n\",\n                    index, MAX_PAGE_SIZES);\n            /* Record the literal format pointer used in metal_log to help reproduce pointer-to-non-const scenarios */\n            fprintf(probe, \"  fmt_ptr=%p -> \\\"skipped page size %ld - overflow\\\\n\\\"\\n\",\n                    (void *)\"skipped page size %ld - overflow\\n\", (unsigned long)size);\n            fflush(probe);\n        }\n\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n                  size);\n\n        if (probe) {\n            fprintf(probe, \"  return: -EOVERFLOW\\n\");\n            fclose(probe);\n        }\n        return -EOVERFLOW;\n    }\n\n    if (!path || shift <= 0) {\n        if (probe) {\n            fprintf(probe, \"  branch: invalid args (path=%p, shift=%d) - about to call metal_log WARNING\\n\",\n                    (void *)path, shift);\n            fprintf(probe, \"  fmt_ptr=%p -> \\\"skipped page size %ld - invalid args\\\\n\\\"\\n\",\n                    (void *)\"skipped page size %ld - invalid args\\n\", (unsigned long)size);\n            fflush(probe);\n        }\n\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n                  size);\n\n        if (probe) {\n            fprintf(probe, \"  return: -EINVAL\\n\");\n            fclose(probe);\n        }\n        return -EINVAL;\n    }\n\n    /* Preserve original behavior: populate page size entry */\n    _metal.page_sizes[index].page_shift = shift;\n    _metal.page_sizes[index].page_size = size;\n    _metal.page_sizes[index].mmap_flags = mmap_flags;\n    strncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n    _metal.num_page_sizes++;\n\n    if (probe) {\n        fprintf(probe, \"  updated _metal.page_sizes[%d]: page_shift=%d, page_size=%lu, mmap_flags=%d, path=%p\\n\",\n                index, _metal.page_sizes[index].page_shift,\n                _metal.page_sizes[index].page_size,\n                _metal.page_sizes[index].mmap_flags,\n                (void *)_metal.page_sizes[index].path);\n        fprintf(probe, \"  about to call metal_log DEBUG with fmt_ptr=%p -> \\\"added page size %ld @%s\\\\n\\\"\\n\",\n                (void *)\"added page size %ld @%s\\n\", (unsigned long)size, path);\n        fflush(probe);\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n    if (probe) {\n        fprintf(probe, \"  return: 0\\n\");\n        fclose(probe);\n    }\n\n    return 0;\n}\n"
}