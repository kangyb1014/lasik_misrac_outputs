{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can write exactly PATH_MAX bytes into the destination. If _metal.page_sizes[index].path is not an array of size PATH_MAX (or larger), this will write beyond the bounds of the destination object and thus violate MISRA C 2023 Rule 21.17. (Also note that if the source length >= PATH_MAX the result will not be NUL-terminated, which is a separate safety/semantic issue.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_add_page_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_add_page_size with it.\n  - Your function must have the exact same signature as metal_add_page_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_add_page_size to check logs.\n  - Your function MUST preserve the original logic of metal_add_page_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_add_page_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_add_page_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\tFILE *logf = fopen(\"/tmp/logs/453.txt\", \"a\");\n\n\t/* Minimal entry log so test harness shows the function was reached. */\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: metal_add_page_size(path=%p, shift=%d, mmap_flags=%d) index=%d num_page_sizes=%d PATH_MAX=%d\\n\",\n\t\t\t(const void *)path, shift, mmap_flags, index, _metal.num_page_sizes, (int)PATH_MAX);\n\t\tif (path) {\n\t\t\tsize_t src_len = strlen(path);\n\t\t\tfprintf(logf, \"  src path: \\\"%s\\\" (strlen=%zu)\\n\", path, src_len);\n\t\t} else {\n\t\t\tfprintf(logf, \"  src path: NULL\\n\");\n\t\t}\n\t\t/* Record compile-time/instance size of the destination member when available. */\n\t\tfprintf(logf, \"  dest buffer address = %p, sizeof(dest_member) = %zu\\n\",\n\t\t\t(void *)_metal.page_sizes[index].path, sizeof(_metal.page_sizes[index].path));\n\t\tfflush(logf);\n\t}\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: skipped - overflow (size=%lu, index=%d >= MAX_PAGE_SIZES=%d)\\n\", size, index, MAX_PAGE_SIZES);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: skipped - invalid args (path=%p, shift=%d)\\n\", (const void *)path, shift);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\n\t/* Log state immediately before the potentially-unsafe strncpy call. */\n\tif (logf) {\n\t\tsize_t src_len = strlen(path);\n\t\tsize_t dest_size = sizeof(_metal.page_sizes[index].path);\n\t\tfprintf(logf, \"BEFORE strncpy: dest=%p dest_size=%zu PATH_MAX=%d src=%p src_len=%zu\\n\",\n\t\t\t(void *)_metal.page_sizes[index].path, dest_size, (int)PATH_MAX, (const void *)path, src_len);\n\t\tfflush(logf);\n\t}\n\n\t/* Original (potentially problematic) call preserved to reproduce scenario. */\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\n\t/* After copy: attempt to observe NUL termination within the bounds we can safely check.\n\t   We only inspect up to min(PATH_MAX, sizeof(dest_member)) to avoid reading beyond the destination\n\t   if sizeof gives a reasonable value. If dest_size is the size of a pointer (i.e., path is a pointer),\n\t   this check will still log that fact. */\n\tif (logf) {\n\t\tsize_t dest_size = sizeof(_metal.page_sizes[index].path);\n\t\tsize_t check_len = (dest_size > 0) ? ((size_t)PATH_MAX < dest_size ? (size_t)PATH_MAX : dest_size) : (size_t)PATH_MAX;\n\t\tint nul_found = 0;\n\t\tif (check_len > 0) {\n\t\t\tif (memchr(_metal.page_sizes[index].path, '\\0', check_len) != NULL) {\n\t\t\t\tnul_found = 1;\n\t\t\t}\n\t\t}\n\t\tfprintf(logf, \"AFTER strncpy: checked_len=%zu nul_within_checked_range=%d final_dest_address=%p\\n\",\n\t\t\tcheck_len, nul_found, (void *)_metal.page_sizes[index].path);\n\t\tfflush(logf);\n\t}\n\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT: success added index=%d size=%lu path=%s num_page_sizes=%d\\n\",\n\t\t\tindex, size, path ? path : \"(null)\", _metal.num_page_sizes);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}"
}