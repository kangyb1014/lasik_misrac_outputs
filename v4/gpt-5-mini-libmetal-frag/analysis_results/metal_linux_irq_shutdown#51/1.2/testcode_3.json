{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__) invokes the macro metal_log which is defined using a GCC/Clang statement-expression extension ({ ... }) and uses the GNU token-pasting form '##__VA_ARGS__'. These constructs are compiler extensions; therefore the use of the macro in this fragment constitutes a violation of MISRA C 2023 Rule 1.2. (Note: __func__ itself is a standard identifier and is not an extension.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/677.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_linux_irq_shutdown code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_linux_irq_shutdown with it.\n  - Your function must have the exact same signature as metal_linux_irq_shutdown.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_linux_irq_shutdown to check logs.\n  - Your function MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_linux_irq_shutdown will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\t/* Try to open log file to record control flow and state. If the directory\n\t * doesn't exist or open fails, continue without failing the shutdown\n\t * sequence so original behavior is preserved. */\n\tFILE *logf = fopen(\"/tmp/logs/677.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER %s: irq_handling_stop=%d, irq_notify_fd=%d\\n\",\n\t\t\t__func__, (irq_handling_stop ? 1 : 0), irq_notify_fd);\n\t\tfflush(logf);\n\t}\n\n\t/* Original debug log (this macro may use compiler extensions). */\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tif (logf) {\n\t\tfprintf(logf, \"Called metal_log(METAL_LOG_DEBUG, \\\"%%s\\\\n\\\", __func__)\\n\");\n\t\tfflush(logf);\n\t}\n\n\tirq_handling_stop = true;\n\tif (logf) {\n\t\tfprintf(logf, \"Set irq_handling_stop = true\\n\");\n\t\tfflush(logf);\n\t}\n\n\tmetal_linux_irq_notify();\n\tif (logf) {\n\t\tfprintf(logf, \"Called metal_linux_irq_notify()\\n\");\n\t\tfflush(logf);\n\t}\n\n\tret = pthread_join(irq_pthread, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"pthread_join(irq_pthread) returned %d\\n\", ret);\n\t\tfflush(logf);\n\t}\n\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_log(METAL_LOG_ERROR): Failed to join IRQ thread: %d\\n\", ret);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\n\t/* Preserve original ordering: close notify FD then deinit mutex. */\n\tint close_ret = close(irq_notify_fd);\n\tif (logf) {\n\t\tfprintf(logf, \"close(irq_notify_fd=%d) returned %d\\n\", irq_notify_fd, close_ret);\n\t\tfflush(logf);\n\t}\n\n\tmetal_mutex_deinit(&irq_lock);\n\tif (logf) {\n\t\tfprintf(logf, \"Called metal_mutex_deinit(&irq_lock) and exiting %s\\n\", __func__);\n\t\tfclose(logf);\n\t}\n}\n"
}