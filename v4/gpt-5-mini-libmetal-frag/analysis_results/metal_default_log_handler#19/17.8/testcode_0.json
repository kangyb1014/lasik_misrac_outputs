{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns to the parameter 'level' (level = METAL_LOG_EMERGENCY;), which modifies a function parameter passed by value. This violates MISRA C 2023 Rule 17.8. Fix by using a local variable (e.g. enum metal_log_level lvl = level; then modify lvl) or perform the range check without assigning to the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_default_log_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/732.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_default_log_handler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_default_log_handler with it.\n  - Your function must have the exact same signature as metal_default_log_handler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_default_log_handler to check logs.\n  - Your function MUST preserve the original logic of metal_default_log_handler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_default_log_handler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_default_log_handler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\t/* Probe: record entry and incoming state */\n\t{\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"ENTER: metal_default_log_handler: initial level=%d, format_ptr=%p\\n\",\n\t\t\t\t(int)level, (const void *)format);\n\t\t\tfclose(probe);\n\t\t}\n\t}\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\t/* Probe: record the formatted message (may be long; keep it safe) */\n\t{\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\t/* Truncate the logged message to avoid enormous log entries */\n\t\t\tchar tmsg[512];\n\t\t\tsnprintf(tmsg, sizeof(tmsg), \"%s\", msg);\n\t\t\tfprintf(probe, \"FORMATTED_MSG: '%s'\\n\", tmsg);\n\t\t\tfclose(probe);\n\t\t}\n\t}\n\n\t/* Range check: this reproduces the original behavior where the parameter 'level' is assigned to. */\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG) {\n\t\t/* Probe: record that an out-of-range value was detected and that an assignment will occur */\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"RANGE_CHECK: level %d out-of-range -> assign METAL_LOG_EMERGENCY (%d)\\n\",\n\t\t\t\t(int)level, (int)METAL_LOG_EMERGENCY);\n\t\t\tfclose(probe);\n\t\t}\n\n\t\tlevel = METAL_LOG_EMERGENCY;\n\t} else {\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"RANGE_CHECK: level %d within valid range\\n\", (int)level);\n\t\t\tfclose(probe);\n\t\t}\n\t}\n\n\t/* Probe: final level and chosen label */\n\t{\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\t/* Guard index access: level should now be within bounds */\n\t\t\tint idx = (int)level;\n\t\t\tif (idx < 0 || idx > METAL_LOG_DEBUG) {\n\t\t\t\tfprintf(probe, \"FINAL: level %d out-of-bounds (unexpected)\\n\", idx);\n\t\t\t} else {\n\t\t\t\tfprintf(probe, \"FINAL: using level=%d label='%s'\\n\", idx, level_strs[idx]);\n\t\t\t}\n\t\t\tfclose(probe);\n\t\t}\n\t}\n\n\t/* Preserve original behavior: write to stderr */\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t/* Even when the default logger is disabled, emit a small probe so coverage shows the function was entered. */\n\t{\n\t\tFILE *probe = fopen(\"/tmp/logs/732.txt\", \"a\");\n\t\tif (probe) {\n\t\t\tfprintf(probe, \"ENTER: metal_default_log_handler (DEFAULT_LOGGER_ON not defined): level=%d, format_ptr=%p\\n\",\n\t\t\t\t(int)level, (const void *)format);\n\t\t\tfclose(probe);\n\t\t}\n\t}\n\t(void)level;\n\t(void)format;\n#endif\n}\n"
}