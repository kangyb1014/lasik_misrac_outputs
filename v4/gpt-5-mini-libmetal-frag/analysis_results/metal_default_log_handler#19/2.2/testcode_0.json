{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)format;' is an expression-statement with no side effects whose removal would not change program behaviour (it only suppresses an unused-parameter warning). Because it is executed when DEFAULT_LOGGER_ON is not defined but has no effect, it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_default_log_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/738.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_default_log_handler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_default_log_handler with it.\n  - Your function must have the exact same signature as metal_default_log_handler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_default_log_handler to check logs.\n  - Your function MUST preserve the original logic of metal_default_log_handler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_default_log_handler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_default_log_handler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n    /* Probe: attempt to record entry and control-flow decisions to a log file\n     * as requested. Keep original behaviour intact as much as possible. */\n    FILE *probe_fp = fopen(\"/tmp/logs/738.txt\", \"a\");\n    if (probe_fp) {\n        fprintf(probe_fp, \"ENTER: metal_default_log_handler called; level=%d, format=%p\\n\",\n                (int)level, (const void *)format);\n        fflush(probe_fp);\n    }\n\n#ifdef DEFAULT_LOGGER_ON\n    char msg[1024];\n    va_list args;\n    static const char * const level_strs[] = {\n        \"metal: emergency: \",\n        \"metal: alert:     \",\n        \"metal: critical:  \",\n        \"metal: error:     \",\n        \"metal: warning:   \",\n        \"metal: notice:    \",\n        \"metal: info:      \",\n        \"metal: debug:     \",\n    };\n\n    if (probe_fp) {\n        fprintf(probe_fp, \"BRANCH: DEFAULT_LOGGER_ON defined - will format and print to stderr\\n\");\n        fflush(probe_fp);\n    }\n\n    va_start(args, format);\n    vsnprintf(msg, sizeof(msg), format, args);\n    va_end(args);\n\n    if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n        level = METAL_LOG_EMERGENCY;\n\n    fprintf(stderr, \"%s%s\", level_strs[level], msg);\n\n    if (probe_fp) {\n        /* Record what was printed (trim to avoid overly large logs). */\n        size_t msg_len = strlen(msg);\n        size_t record_len = msg_len < 512 ? msg_len : 512;\n        fprintf(probe_fp, \"EXIT: printed to stderr; level=%d; msg_len=%zu; msg_prefix=\\\"%.*s\\\"\\n\",\n                (int)level, msg_len, (int)record_len, msg);\n        fclose(probe_fp);\n    }\n#else\n    /* Original code suppressed unused-parameter warnings. We keep that, but\n     * also record that this branch was taken so tools/agents can observe the\n     * presence of the (void)format; expression-statement (which is reported\n     * as dead code by the other agent). */\n    if (probe_fp) {\n        fprintf(probe_fp, \"BRANCH: DEFAULT_LOGGER_ON NOT defined - executing (void)level; (void)format;\\n\");\n        fflush(probe_fp);\n    }\n\n    (void)level;\n    (void)format;\n\n    if (probe_fp) {\n        fprintf(probe_fp, \"EXIT: no stderr output produced in this build configuration.\\n\");\n        fclose(probe_fp);\n    }\n#endif\n}\n"
}