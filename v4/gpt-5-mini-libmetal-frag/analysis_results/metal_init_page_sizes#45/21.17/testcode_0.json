{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can violate Rule 21.17 if the source 'path' is not guaranteed to be a NUL-terminated C string within PATH_MAX bytes. strncpy may read up to PATH_MAX bytes from the source; if the source buffer is shorter and not NUL-terminated within that range, the call can read beyond the bounds of the source object (undefined behavior). Additionally, if the source length is >= PATH_MAX the destination will not be NUL-terminated, which can cause subsequent string accesses to go out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init_page_sizes code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init_page_sizes with it.\n  - Your function must have the exact same signature as metal_init_page_sizes.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init_page_sizes to check logs.\n  - Your function MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init_page_sizes will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *log = fopen(\"/tmp/logs/653.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"==== metal_init_page_sizes entered (pid=%d) ===\\n\", (int)getpid());\n\t\tfflush(log);\n\t}\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (log) {\n\t\tfprintf(log, \"getpagesize() -> %ld\\n\", sizes[0]);\n\t\tfflush(log);\n\t}\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"failed to get page size, returning -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\n\tif (log) {\n\t\tfprintf(log, \"page_size=%ld, page_shift=%d\\n\", _metal.page_size, _metal.page_shift);\n\t\tif (_metal.tmp_path)\n\t\t\tfprintf(log, \"_metal.tmp_path ptr=%p, first_bytes=\\\"\");\n\t\tfflush(log);\n\t}\n\n\t/* Log up to 256 bytes of the tmp path (best-effort; may read memory). */\n\tif (log && _metal.tmp_path) {\n\t\tint i;\n\t\tfor (i = 0; i < 256; i++) {\n\t\t\tunsigned char c = (unsigned char)_metal.tmp_path[i];\n\t\t\tif (c == '\\0') break;\n\t\t\tfputc(c, log);\n\t\t}\n\t\tfprintf(log, \"\\\"\\n\");\n\t\tfflush(log);\n\t}\n\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\tif (log) {\n\t\tfprintf(log, \"called metal_add_page_size(tmp_path, %d, 0)\\n\", _metal.page_shift);\n\t\tfflush(log);\n\t}\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (log) {\n\t\tfprintf(log, \"gethugepagesize() -> %ld\\n\", sizes[0]);\n\t\tfflush(log);\n\t}\n\tif (sizes[0] > 0) {\n\t\tchar *p = hugetlbfs_find_path();\n\t\tif (log) {\n\t\t\tfprintf(log, \"hugetlbfs_find_path() -> %p\\n\", (void *)p);\n\t\t\tif (p) {\n\t\t\t\tint j;\n\t\t\t\tfprintf(log, \"hugetlbfs path first_bytes=\\\"\");\n\t\t\t\tfor (j = 0; j < 256; j++) {\n\t\t\t\t\tunsigned char c = (unsigned char)p[j];\n\t\t\t\t\tif (c == '\\0') break;\n\t\t\t\t\tfputc(c, log);\n\t\t\t\t}\n\t\t\t\tfprintf(log, \"\\\"\\n\");\n\t\t\t}\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t\tmetal_log2(sizes[0]),\n\t\t\t\t\tMAP_HUGETLB);\n\t\tif (log) {\n\t\t\tfprintf(log, \"called metal_add_page_size(hugetlbfs_find_path, %d, MAP_HUGETLB)\\n\", metal_log2(sizes[0]));\n\t\t\tfflush(log);\n\t\t}\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tif (log) {\n\t\t\tfprintf(log, \"gethugepagesizes returned count=%d\\n\", count);\n\t\t\tfflush(log);\n\t\t}\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"sizes[%d]=%ld, shift=%d\\n\", i, sizes[i], shift);\n\t\t\t\tfflush(log);\n\t\t\t}\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\t{\n\t\t\t\tchar *path = hugetlbfs_find_path_for_size(sizes[i]);\n\t\t\t\tunsigned long flags = (MAP_HUGETLB | (shift << MAP_HUGE_SHIFT));\n\t\t\t\tif (log) {\n\t\t\t\t\tfprintf(log, \"hugetlbfs_find_path_for_size(%ld) -> %p\\n\", sizes[i], (void *)path);\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tint k;\n\t\t\t\t\t\tfprintf(log, \"path first_bytes=\\\"\");\n\t\t\t\t\t\tfor (k = 0; k < 256; k++) {\n\t\t\t\t\t\t\tunsigned char c = (unsigned char)path[k];\n\t\t\t\t\t\t\tif (c == '\\0') break;\n\t\t\t\t\t\t\tfputc(c, log);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfprintf(log, \"\\\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tfprintf(log, \"calling metal_add_page_size(path, %d, 0x%lx)\\n\", shift, flags);\n\t\t\t\t\tfflush(log);\n\t\t\t\t}\n\t\t\t\tmetal_add_page_size(\n\t\t\t\t\tpath,\n\t\t\t\t\tshift, flags);\n\t\t\t}\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tif (log) {\n\t\tfprintf(log, \"qsort(_metal.page_sizes, %zu, %zu, metal_pagesize_compare)\\n\",\n\t\t\t_metal.num_page_sizes, sizeof(struct metal_page_size));\n\t\tfflush(log);\n\t}\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\tif (log) {\n\t\tfprintf(log, \"metal_init_page_sizes returning 0, num_page_sizes=%zu\\n\", _metal.num_page_sizes);\n\t\tfclose(log);\n\t}\n\n\treturn 0;\n}\n"
}