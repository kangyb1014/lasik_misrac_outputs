{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to a call to _metal.common.log_handler(...). If that log handler (or any function it calls) invokes metal_log (directly or indirectly), an indirect recursive call chain is created. Example: setting _metal.common.log_handler = my_log_handler where my_log_handler(...) calls metal_log(...) -> log_handler -> my_log_handler ... leads to infinite recursion and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/650.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init_page_sizes code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init_page_sizes with it.\n  - Your function must have the exact same signature as metal_init_page_sizes.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init_page_sizes to check logs.\n  - Your function MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init_page_sizes will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *logf = NULL;\n\n\t/* Log entry to help reproduce indirect recursion via metal_log */\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_init_page_sizes: _metal=%p, max_sizes=%d\\n\",\n\t\t        (void *)&_metal, max_sizes);\n\t\tfclose(logf);\n\t}\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"getpagesize() -> %ld\\n\", sizes[0]);\n\t\tfclose(logf);\n\t}\n\n\tif (sizes[0] <= 0) {\n\t\t/* Log immediately before calling metal_log so that if metal_log's\n\t\t   handler calls back into metal_log (causing recursion) the logs\n\t\t   show where the first call originated. */\n\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"sizes[0] <= 0, about to call metal_log(METAL_LOG_ERROR, \\\"failed to get page size\\\\n\\\")\\n\");\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\n\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\tif (logf) {\n\t\t\t/* If recursion happens inside metal_log, you may never see this line. */\n\t\t\tfprintf(logf, \"returned from metal_log after failed getpagesize handling\\n\");\n\t\t\tfclose(logf);\n\t\t}\n\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"set _metal.page_size=%ld, _metal.page_shift=%d\\n\",\n\t\t        (long)_metal.page_size, (int)_metal.page_shift);\n\t\tfclose(logf);\n\t}\n\n\t/* Record call to metal_add_page_size so we can see ordering before any\n\t   further metal_log calls that may trigger recursion. */\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"calling metal_add_page_size(tmp_path=%s, shift=%d, flags=0)\\n\",\n\t\t        _metal.tmp_path ? _metal.tmp_path : \"(null)\", (int)_metal.page_shift);\n\t\tfclose(logf);\n\t}\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"gethugepagesize() -> %ld (single-size hugepage path)\\n\", sizes[0]);\n\t\tfclose(logf);\n\t}\n\tif (sizes[0] > 0) {\n\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"adding hugetlbfs page size shift=%d, flags=MAP_HUGETLB\\n\",\n\t\t\t        metal_log2(sizes[0]));\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"gethugepagesizes() -> count=%d\\n\", count);\n\t\t\tfclose(logf);\n\t\t}\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"hugepages sizes[%d]=%ld, shift=%d\\n\", i, sizes[i], shift);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift) {\n\t\t\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"skip size %ld: shift & MAP_HUGE_MASK != shift\\n\", sizes[i]);\n\t\t\t\t\tfclose(logf);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"adding hugetlbfs size %ld, shift=%d, flags=%#x\\n\",\n\t\t\t\t        sizes[i], shift, (unsigned int)(MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"about to qsort %d page sizes (struct size=%zu)\\n\",\n\t\t        _metal.num_page_sizes, sizeof(struct metal_page_size));\n\t\tfclose(logf);\n\t}\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\tlogf = fopen(\"/tmp/logs/650.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT metal_init_page_sizes: num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}