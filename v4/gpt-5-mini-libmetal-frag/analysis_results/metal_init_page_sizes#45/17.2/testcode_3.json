{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log macro expands to a call to the function pointer _metal.common.log_handler. If that log handler (for example, my_log_handler) itself calls metal_log (directly or via metal_fmt), the call chain becomes: metal_log -> _metal.common.log_handler (my_log_handler) -> metal_log -> ... which causes my_log_handler to call itself indirectly. This is an indirect recursion and violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/650.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init_page_sizes code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init_page_sizes with it.\n  - Your function must have the exact same signature as metal_init_page_sizes.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init_page_sizes to check logs.\n  - Your function MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init_page_sizes will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n    FILE *logf = NULL;\n    static int entry_counter = 0;\n\n    /* Open probe log (append so multiple runs accumulate evidence). */\n    logf = fopen(\"/tmp/logs/650.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER metal_init_page_sizes: pid=%d time=%ld entry_counter(before)=%d\\n\",\n                (int)getpid(), (long)time(NULL), entry_counter);\n        fflush(logf);\n    }\n\n    /* Track re-entrancy for this function to help detect indirect recursion. */\n    entry_counter++;\n    if (logf) {\n        fprintf(logf, \"metal_init_page_sizes: entry_counter(after)=%d\\n\", entry_counter);\n        fflush(logf);\n    }\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    if (logf) {\n        fprintf(logf, \"got pagesize: sizes[0]=%ld\\n\", sizes[0]);\n        fflush(logf);\n    }\n\n    if (sizes[0] <= 0) {\n        /* Probe: note we are about to call metal_log. This call can trigger\n         * the global log handler, which in turn may call metal_log again and\n         * cause indirect recursion. The probes before/after the call allow\n         * external analysis to detect such nested behavior. */\n        if (logf) {\n            fprintf(logf, \"about to call metal_log(METAL_LOG_ERROR, \\\"failed to get page size\\\\n\\\")\\n\");\n            fflush(logf);\n        }\n\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\n        if (logf) {\n            fprintf(logf, \"returned from metal_log(METAL_LOG_ERROR)\\n\");\n            fflush(logf);\n        }\n\n        entry_counter--;\n        if (logf) {\n            fprintf(logf, \"EXIT metal_init_page_sizes (early return -EINVAL): entry_counter=%d\\n\", entry_counter);\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n\n    if (logf) {\n        fprintf(logf, \"after init: _metal.page_size=%ld _metal.page_shift=%d\\n\",\n                _metal.page_size, _metal.page_shift);\n        fflush(logf);\n    }\n\n    /* Record the add page size call -- this helps determine control flow when\n     * the log handler triggers further logging. */\n    if (logf) {\n        fprintf(logf, \"calling metal_add_page_size(tmp_path=%s, shift=%d, flags=0)\\n\",\n                _metal.tmp_path ? _metal.tmp_path : \"(null)\", _metal.page_shift);\n        fflush(logf);\n    }\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n    if (logf) {\n        fprintf(logf, \"returned from metal_add_page_size(tmp_path)\\n\");\n        fflush(logf);\n    }\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    if (logf) {\n        fprintf(logf, \"HUGETLB no MAP_HUGE_SHIFT: gethugepagesize()=%ld\\n\", sizes[0]);\n        fflush(logf);\n    }\n    if (sizes[0] > 0) {\n        if (logf) {\n            fprintf(logf, \"calling metal_add_page_size(hugetlbfs_find_path(), shift=%d, flags=MAP_HUGETLB)\\n\",\n                    metal_log2(sizes[0]));\n            fflush(logf);\n        }\n        metal_add_page_size(hugetlbfs_find_path(),\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n        if (logf) {\n            fprintf(logf, \"returned from metal_add_page_size(hugetlbfs_find_path)\\n\");\n            fflush(logf);\n        }\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        if (logf) {\n            fprintf(logf, \"HUGETLB multiple: count=%d max_sizes=%d\\n\", count, max_sizes);\n            fflush(logf);\n        }\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            if (logf) {\n                fprintf(logf, \"iter i=%d sizes[i]=%ld shift=%d\\n\", i, sizes[i], shift);\n                fflush(logf);\n            }\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                if (logf) {\n                    fprintf(logf, \"skipping size %ld due to mask check\\n\", sizes[i]);\n                    fflush(logf);\n                }\n                continue;\n            }\n\n            if (logf) {\n                fprintf(logf, \"calling metal_add_page_size(hugetlbfs_find_path_for_size(%ld), shift=%d, flags=MAP_HUGETLB|(...))\\n\",\n                        sizes[i], shift);\n                fflush(logf);\n            }\n            metal_add_page_size(\n                hugetlbfs_find_path_for_size(sizes[i]),\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n            if (logf) {\n                fprintf(logf, \"returned from metal_add_page_size for size %ld\\n\", sizes[i]);\n                fflush(logf);\n            }\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    if (logf) {\n        fprintf(logf, \"about to qsort %d page sizes (num_page_sizes=%d)\\n\",\n                _metal.num_page_sizes, _metal.num_page_sizes);\n        fflush(logf);\n    }\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n    if (logf) {\n        fprintf(logf, \"returned from qsort\\n\");\n        fflush(logf);\n    }\n\n    entry_counter--;\n    if (logf) {\n        fprintf(logf, \"EXIT metal_init_page_sizes: entry_counter=%d time=%ld\\n\",\n                entry_counter, (long)time(NULL));\n        fclose(logf);\n    }\n\n    return 0;\n}\n"
}