{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the result of hugetlbfs_find_path_for_size(sizes[i]) as the path argument to metal_add_page_size. If hugetlbfs_find_path_for_size() returns a pointer to immutable storage (const char *) but metal_add_page_size() is declared to take a non-const char * (i.e. void metal_add_page_size(char *path, ...)), then the code violates MISRA C 2023 Rule 8.13 because a pointer to a non-const-qualified type is used where a const-qualified pointer should be used (the function does not need to modify the path). In that scenario metal_add_page_size should instead accept a const char * to avoid allowing modification of the pointed-to data. Note: if both the finder and metal_add_page_size already use const char * (or the finder returns char * and modification is intended), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init_page_sizes code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init_page_sizes with it.\n  - Your function must have the exact same signature as metal_init_page_sizes.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init_page_sizes to check logs.\n  - Your function MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init_page_sizes will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *log = fopen(\"/tmp/logs/655.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_init_page_sizes\\n\");\n\t}\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (log) fprintf(log, \"getpagesize() = %ld\\n\", (long)sizes[0]);\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"ERROR: failed to get page size -> return -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tif (log) fprintf(log, \"_metal.page_size=%ld, _metal.page_shift=%d, _metal.tmp_path=%p\\n\",\n\t\t\t\t(long)_metal.page_size, _metal.page_shift, (void *)_metal.tmp_path);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\tif (log) fprintf(log, \"called metal_add_page_size(tmp_path, %d, 0)\\n\", _metal.page_shift);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (log) fprintf(log, \"MAP_HUGE_SHIFT undefined, gethugepagesize() = %ld\\n\", (long)sizes[0]);\n\tif (sizes[0] > 0) {\n\t\tchar *path = hugetlbfs_find_path();\n\t\tif (log) {\n\t\t\tfprintf(log, \"hugetlbfs_find_path() -> %p\", (void *)path);\n\t\t\tif (path) fprintf(log, \" \\\"%s\\\"\", path);\n\t\t\tfprintf(log, \"\\n\");\n\t\t}\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t\t  metal_log2(sizes[0]),\n\t\t\t\t  MAP_HUGETLB);\n\t\tif (log) fprintf(log, \"called metal_add_page_size(hugetlbfs_find_path(), %d, MAP_HUGETLB)\\n\",\n\t\t\t\t\tmetal_log2(sizes[0]));\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tif (log) fprintf(log, \"MAP_HUGE_SHIFT defined, gethugepagesizes() returned count=%d\\n\", count);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif (log) fprintf(log, \"sizes[%d]=%ld, shift=%d\\n\", i, (long)sizes[i], shift);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift) {\n\t\t\t\tif (log) fprintf(log, \"skip sizes[%d] because (shift & MAP_HUGE_MASK) != shift\\n\", i);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t/* Probe the path returned for this hugepage size and log it. */\n\t\t\tchar *path_for_size = (char *)hugetlbfs_find_path_for_size(sizes[i]);\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"hugetlbfs_find_path_for_size(%ld) -> %p\", (long)sizes[i], (void *)path_for_size);\n\t\t\t\tif (path_for_size) fprintf(log, \" \\\"%s\\\"\", path_for_size);\n\t\t\t\tfprintf(log, \"\\n\");\n\t\t\t}\n\n\t\t\t/* Call the original function exactly as before. */\n\t\t\tmetal_add_page_size(\n\t\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t\tif (log) fprintf(log, \"called metal_add_page_size(path_for_size, %d, flags=0x%x)\\n\",\n\t\t\t\t\tshift, (unsigned)(MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tif (log) fprintf(log, \"qsort page_sizes num_page_sizes=%zu\\n\", (size_t)_metal.num_page_sizes);\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\tif (log) {\n\t\tfprintf(log, \"EXIT metal_init_page_sizes return 0\\n\");\n\t\tfclose(log);\n\t}\n\n\treturn 0;\n}\n"
}