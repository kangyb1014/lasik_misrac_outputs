{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen both HAVE_HUGETLBFS_H and MAP_HUGE_SHIFT are defined, the call to gethugepagesize() in the guarded if (gethugepagesize() >= 0) is executed only to decide whether to call gethugepagesizes() and its return value is otherwise unused. If gethugepagesizes() already provides the necessary information about available huge page sizes and gethugepagesize() has no side effects, that preliminary gethugepagesize() call is redundant: removing it would not change program behaviour. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_init_page_sizes code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_init_page_sizes with it.\n  - Your function must have the exact same signature as metal_init_page_sizes.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_init_page_sizes to check logs.\n  - Your function MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_init_page_sizes will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\tFILE *log = NULL;\n\n\t/* Open log file to capture control flow and state for analysis. */\n\tlog = fopen(\"/tmp/logs/658.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_init_page_sizes: entered\\n\");\n\t\tfflush(log);\n\t}\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (log) fprintf(log, \"getpagesize() returned %ld\\n\", sizes[0]);\n\tif (sizes[0] <= 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"failed to get page size (<= 0)\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tif (log) fprintf(log, \"page_size=%ld, page_shift=%d\\n\", _metal.page_size, _metal.page_shift);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n\tif (log) fprintf(log, \"HAVE_HUGETLBFS_H defined\\n\");\n#ifndef MAP_HUGE_SHIFT\n\tif (log) fprintf(log, \"MAP_HUGE_SHIFT not defined (single huge page size supported)\\n\");\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (log) fprintf(log, \"gethugepagesize() returned %ld\\n\", sizes[0]);\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t\tmetal_log2(sizes[0]),\n\t\t\t\t\tMAP_HUGETLB);\n\t\tif (log) fprintf(log, \"added single huge page size: %ld (shift=%d)\\n\",\n\t\t\t\t\tsizes[0], metal_log2(sizes[0]));\n\t}\n#else\n\tif (log) fprintf(log, \"MAP_HUGE_SHIFT defined (multiple huge page sizes supported)\\n\");\n\t/* Preserve original behavior: call gethugepagesize() once in order to\n\t   determine whether to call gethugepagesizes().  Log the return value. */\n\t{\n\t\tlong ret_huge = gethugepagesize();\n\t\tif (log) fprintf(log, \"gethugepagesize() returned %ld\\n\", ret_huge);\n\t\tif (ret_huge >= 0) {\n\t\t\tint i, count;\n\n\t\t\t/* System supports multiple huge page sizes. */\n\t\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\t\tif (log) fprintf(log, \"gethugepagesizes() returned count=%d\\n\", count);\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tint shift = metal_log2(sizes[i]);\n\t\t\t\tif (log) fprintf(log, \"gethugepagesizes: sizes[%d]=%ld, shift=%d\\n\", i, sizes[i], shift);\n\n\t\t\t\tif ((shift & MAP_HUGE_MASK) != shift) {\n\t\t\t\t\tif (log) fprintf(log, \"skipping sizes[%d]=%ld due to shift mask mismatch\\n\", i, sizes[i]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmetal_add_page_size(\n\t\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t\t\tif (log) fprintf(log, \"added huge page size: %ld (shift=%d) path logged\\n\", sizes[i], shift);\n\t\t\t}\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\tif (log) {\n\t\tfprintf(log, \"qsort completed, num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\t\t/* Optionally log final page sizes summary if available. */\n\t\tfor (int _i = 0; _i < _metal.num_page_sizes; _i++) {\n\t\t\t/* Avoid dereferencing unknown internals; just log index and any known fields. */\n\t\t\t/* If struct metal_page_size has a size field named 'size' this would be useful\n\t\t\t   but to keep compatibility we avoid assuming internal layout. */\n\t\t\tfprintf(log, \"page_size_index=%d\\n\", _i);\n\t\t}\n\t\tfclose(log);\n\t}\n\n\treturn 0;\n}\n"
}