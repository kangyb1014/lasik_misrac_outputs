{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'Function' is declared as 'void *Function' but is only used to hold the address of a looked-up symbol (it is not used to modify the pointed-to object and is only cast to an integer). According to MISRA C 2023 Rule 8.13 the pointed-to type should be const-qualified when possible; therefore 'Function' should be declared as 'const void *Function' (or otherwise const-qualified) to avoid violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Impl:\n```c\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/27.txt */\nstatic void OS_SymbolLookup_Probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not alter program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n    int              iter_index = 0;\n\n    /* Log entry and incoming parameters */\n    OS_SymbolLookup_Probe(\"ENTER: OS_SymbolLookup_Impl: SymbolName='%s', SymbolAddress_ptr=%p\\n\",\n                          (SymbolName != NULL) ? SymbolName : \"(null)\", (void *)SymbolAddress);\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    OS_SymbolLookup_Probe(\"After OS_GenericSymbolLookup_Impl: status=%d\\n\", (int)status);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_SymbolLookup_Probe(\"Global lookup failed (status=%d). Iterating module symbols...\\n\", (int)status);\n\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            iter_index++;\n            OS_SymbolLookup_Probe(\"Iteration %d: calling OS_ModuleSymbolLookup_Impl for SymbolName='%s'\\n\",\n                                  iter_index, (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n\n            OS_SymbolLookup_Probe(\"Iteration %d: OS_ModuleSymbolLookup_Impl returned %d; SymbolAddress_ptr=%p\\n\",\n                                  iter_index, (int)local_status, (void *)SymbolAddress);\n\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n\n                if ((SymbolAddress != NULL) && (status == OS_SUCCESS))\n                {\n                    /* Print resolved address value for easier debugging evidence */\n                    OS_SymbolLookup_Probe(\"Iteration %d: Symbol '%s' found at address 0x%llx\\n\",\n                                          iter_index,\n                                          (SymbolName != NULL) ? SymbolName : \"(null)\",\n                                          (unsigned long long)(*SymbolAddress));\n                }\n                else\n                {\n                    OS_SymbolLookup_Probe(\"Iteration %d: Symbol '%s' found but SymbolAddress pointer is NULL\\n\",\n                                          iter_index, (SymbolName != NULL) ? SymbolName : \"(null)\");\n                }\n\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        OS_SymbolLookup_Probe(\"Finished module iteration after %d iterations, status=%d\\n\", iter_index, (int)status);\n    }\n\n    OS_SymbolLookup_Probe(\"EXIT: OS_SymbolLookup_Impl: status=%d\\n\", (int)status);\n\n    return status;\n}\n"
}