{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch is unreachable because pthread_mutex_init() returns 0 on success or a positive POSIX error number on failure; it does not return negative values. The code tests if (status < 0), so the if-condition can never be true and the BSP_DEBUG call inside is unreachable. (Same incorrect check appears for earlier pthread_* calls.) Fix: test for non-zero error (if (status != 0)) or compare against documented error values.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/145.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/145.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/145.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    probe_log(\"OS_BSP_Initialize: entry\");\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        probe_log(\"OS_BSP_Initialize: not root, attempting to open /proc/sys/fs/mqueue/msg_max\");\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        probe_log(\"OS_BSP_Initialize: fopen returned %p\", (void *)fp);\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                unsigned long val = strtoul(buffer, NULL, 10);\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(val);\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                probe_log(\"OS_BSP_Initialize: read msg_max='%s' -> %lu; MaxQueueDepth=%u\", buffer, val, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            else\n            {\n                probe_log(\"OS_BSP_Initialize: fgets returned NULL while reading msg_max\");\n            }\n            fclose(fp);\n            probe_log(\"OS_BSP_Initialize: closed /proc file\");\n        }\n        else\n        {\n            probe_log(\"OS_BSP_Initialize: /proc/sys/fs/mqueue/msg_max not available or fopen failed\");\n        }\n    }\n    else\n    {\n        probe_log(\"OS_BSP_Initialize: running as root, skipping /proc/sys/fs/mqueue/msg_max check\");\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    probe_log(\"OS_BSP_Initialize: calling pthread_mutexattr_init\");\n    status = pthread_mutexattr_init(&mutex_attr);\n    probe_log(\"OS_BSP_Initialize: pthread_mutexattr_init returned status=%d; (status<0)=%d\", status, (status < 0));\n    if (status < 0)\n    {\n        /* Preserve original debug behavior */\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n        probe_log(\"OS_BSP_Initialize: pthread_mutexattr_init branch taken; strerror=%s\", strerror(status));\n    }\n    else\n    {\n        probe_log(\"OS_BSP_Initialize: pthread_mutexattr_init branch NOT taken\");\n    }\n\n    probe_log(\"OS_BSP_Initialize: calling pthread_mutexattr_setprotocol with PTHREAD_PRIO_INHERIT\");\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    probe_log(\"OS_BSP_Initialize: pthread_mutexattr_setprotocol returned status=%d; (status<0)=%d\", status, (status < 0));\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n        probe_log(\"OS_BSP_Initialize: pthread_mutexattr_setprotocol branch taken; strerror=%s\", strerror(status));\n    }\n    else\n    {\n        probe_log(\"OS_BSP_Initialize: pthread_mutexattr_setprotocol branch NOT taken\");\n    }\n\n    probe_log(\"OS_BSP_Initialize: calling pthread_mutex_init\");\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    probe_log(\"OS_BSP_Initialize: pthread_mutex_init returned status=%d; (status<0)=%d\", status, (status < 0));\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n        probe_log(\"OS_BSP_Initialize: pthread_mutex_init branch taken; strerror=%s\", strerror(status));\n    }\n    else\n    {\n        probe_log(\"OS_BSP_Initialize: pthread_mutex_init branch NOT taken\");\n    }\n\n    probe_log(\"OS_BSP_Initialize: exit\");\n}\n"
}