{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleTask_Entry:\n```c\nstatic void *OS_ConsoleTask_Entry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t           local_arg;\n    OS_impl_console_internal_record_t *local;\n    OS_object_token_t                  token;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_CONSOLE, local_arg.id, &token) == OS_SUCCESS)\n    {\n        local = OS_OBJECT_TABLE_GET(OS_impl_console_table, token);\n\n        /* Loop forever (unless shutdown is set) */\n        while (OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n        {\n            OS_ConsoleOutput_Impl(&token);\n            sem_wait(&local->data_sem);\n        }\n        OS_ObjectIdRelease(&token);\n    }\n    return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ConsoleTask_Entry:\ntypedef union\n{\n    void *           opaque_arg;\n    OS_ArgCallback_t arg_callback_func;\n    osal_id_t        id;\n    osal_index_t     idx;\n} OS_VoidPtrValueWrapper_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void *OS_ConsoleTask_Entry(void *arg)\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the function parameter 'arg' is only read and assigned to a local union member (local_arg.opaque_arg = arg). The pointer parameter itself is not modified anywhere in the function (no assignment to 'arg'), and only the object referred to (via the union id field) is used. Therefore Rule 17.8 is not violated."
}