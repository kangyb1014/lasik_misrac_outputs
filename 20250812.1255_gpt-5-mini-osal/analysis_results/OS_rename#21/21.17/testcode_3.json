{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a pointer VirtualPath that refers to an object (buffer) smaller than OS_MAX_PATH_LEN and that object does not contain a terminating '\\0' within the first OS_MAX_PATH_LEN bytes, the call OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may read past the end of that object. For example, if OS_MAX_PATH_LEN is 64 and VirtualPath points to a 16-byte buffer without a NUL terminator, strnlen will probe up to 64 bytes and can access memory beyond the 16-byte object \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/175.txt */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Entry probe: log pointer addresses for the provided inputs */\n    probe_log_printf(\"OS_rename ENTRY: old_ptr=%p new_ptr=%p\", (void *)old, (void *)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    probe_log_printf(\"OS_TranslatePath(old) returned %d, old_path_buf=%p\", return_code, (void *)old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Only safe to print old_path contents after a successful translate */\n        probe_log_printf(\"OS_rename: resolved old_path='%s'\", old_path);\n\n        return_code = OS_TranslatePath(new, new_path);\n        probe_log_printf(\"OS_TranslatePath(new) returned %d, new_path_buf=%p\", return_code, (void *)new_path);\n\n        if (return_code == OS_SUCCESS)\n        {\n            probe_log_printf(\"OS_rename: resolved new_path='%s'\", new_path);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        probe_log_printf(\"OS_FileRename_Impl('%s','%s') returned %d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log_printf(\"OS_rename: rename succeeded, iterating open objects\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream pointer, token and domain before string compare */\n            probe_log_printf(\"iter token=%u stream_ptr=%p socket_domain=%d stream_name_buf=%p\",\n                             (unsigned)iter.token, (void *)stream, (int)stream->socket_domain, (void *)stream->stream_name);\n\n            /* Perform the same strcmp as original logic but keep the result to log it */\n            int cmp = strcmp(stream->stream_name, old);\n            probe_log_printf(\"strcmp(stream->stream_name, old) -> %d\", cmp);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && cmp == 0)\n            {\n                /* Log intended copy parameters; do not log the contents of 'old' or 'new' pointers here\n                   because they may originate from caller-provided buffers of unknown lifetime/size. */\n                probe_log_printf(\"Updating stream name for token=%u: dest_buf=%p dest_size=%zu new_ptr=%p\",\n                                 (unsigned)iter.token,\n                                 (void *)stream->stream_name,\n                                 sizeof(stream->stream_name) - 1,\n                                 (void *)new);\n\n                /* Preserve original logic: copy and ensure NUL termination */\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                probe_log_printf(\"stream name updated for token=%u (destination buffer ptr=%p)\",\n                                 (unsigned)iter.token, (void *)stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_log_printf(\"OS_rename: finished iterating objects\");\n    }\n\n    probe_log_printf(\"OS_rename EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}