{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The macro OS_OBJECT_TABLE_GET always yields a pointer to a (non-const) table element (&tbl[index]). In OS_ObjectIdIteratorGetNext this is used to populate a local variable 'record' that is only read (record->active_id) and so could and should be declared as const OS_common_record_t *record; however the macro (and the code) produce/expect a non-const pointer. Therefore the code fails to qualify pointers as const where possible, violating MISRA C 2023 Rule 8.13. A concrete example: in OS_ObjectIdIteratorGetNext the call record = OS_OBJECT_TABLE_GET(iter->base, iter->token); returns a modifiable pointer although the function only reads the object \u2014 the pointer should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/171.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/171.txt */\nstatic void OS_rename_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/171.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    OS_rename_probe_log(\"OS_rename: start old=\\\"%s\\\" new=\\\"%s\\\"\", (old != NULL) ? old : \"(null)\", (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_rename_probe_log(\"OS_rename: OS_TranslatePath(old) returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_rename_probe_log(\"OS_rename: OS_TranslatePath(new) returned %ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_rename_probe_log(\"OS_rename: OS_FileRename_Impl('%s','%s') returned %ld\", old_path, new_path, (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rename_probe_log(\"OS_rename: rename succeeded, beginning object table iteration\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Capture the token and pointer for diagnostic purposes. Do not alter the pointer or logic. */\n            OS_rename_probe_log(\"OS_rename: iterator next token=%lu\", (unsigned long)iter.token);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n            OS_rename_probe_log(\"OS_rename: OS_OBJECT_TABLE_GET returned pointer=%p\", (void *)stream);\n\n            if (stream == NULL)\n            {\n                OS_rename_probe_log(\"OS_rename: stream is NULL for token=%lu\", (unsigned long)iter.token);\n                continue;\n            }\n\n            /* Log the relevant fields that are read by the original logic. */\n            OS_rename_probe_log(\"OS_rename: stream->socket_domain=%d stream->stream_name=\\\"%s\\\"\", (int)stream->socket_domain, stream->stream_name);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                OS_rename_probe_log(\"OS_rename: name match for token=%lu, updating stream_name to '%s'\", (unsigned long)iter.token, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                OS_rename_probe_log(\"OS_rename: stream_name after update=\\\"%s\\\"\", stream->stream_name);\n            }\n            else\n            {\n                int cmp = strcmp(stream->stream_name, old);\n                OS_rename_probe_log(\"OS_rename: no update for token=%lu (socket_domain=%d, strcmp= %d)\", (unsigned long)iter.token, (int)stream->socket_domain, cmp);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_rename_probe_log(\"OS_rename: finished object table iteration\");\n    }\n\n    OS_rename_probe_log(\"OS_rename: exit with return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}