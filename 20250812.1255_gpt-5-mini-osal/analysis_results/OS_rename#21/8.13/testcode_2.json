{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'arg' is declared as 'void *arg' but is used only as a read-only context pointer (it is passed to the match callback as iter->arg and never modified in the iterator code). According to MISRA C 2023 Rule 8.13 this should be 'const void *arg' (and the OS_ObjectMatchFunc_t signature adjusted to take a 'const void *' if appropriate).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/171.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/171.txt */\nstatic void OS_Rename_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/171.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and inputs */\n    OS_Rename_Log(\"OS_rename() entry: old=\"\"%s\"\", new=\"\"%s\"\", old_ptr=%p, new_ptr=%p\", old ? old : \"(null)\", new ? new : \"(null)\", (const void*)old, (const void*)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_Rename_Log(\"After OS_TranslatePath(old): return_code=%d, old_path=\\\"%s\\\"\", return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_Rename_Log(\"After OS_TranslatePath(new): return_code=%d, new_path=\\\"%s\\\"\", return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_Rename_Log(\"After OS_FileRename_Impl(%s -> %s): return_code=%d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Rename_Log(\"About to iterate object table for LOCAL_OBJID_TYPE\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log iterator internal state where available. */\n            OS_Rename_Log(\"Iterator token=%u, iter_ptr=%p, iter.arg=%p\", (unsigned)iter.token, (void*)&iter, (void*)iter.arg);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream != NULL)\n            {\n                OS_Rename_Log(\"Stream record: stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\", (void*)stream, (int)stream->socket_domain, stream->stream_name);\n\n                int name_match = (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0);\n                OS_Rename_Log(\"Name match check: socket_invalid=%d, strcmp==0?=%d\", (int)(stream->socket_domain == OS_SocketDomain_INVALID), name_match);\n\n                if (name_match)\n                {\n                    /* Log before change */\n                    OS_Rename_Log(\"Renaming stream name from \\\"%s\\\" to \\\"%s\\\" for token=%u\", stream->stream_name, new, (unsigned)iter.token);\n\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                    /* Log after change */\n                    OS_Rename_Log(\"After strncpy: stream_name=\\\"%s\\\"\", stream->stream_name);\n                }\n            }\n            else\n            {\n                OS_Rename_Log(\"OS_OBJECT_TABLE_GET returned NULL for token=%u\", (unsigned)iter.token);\n            }\n        }\n\n        OS_Rename_Log(\"Finished iterating; destroying iterator\");\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    OS_Rename_Log(\"OS_rename() exit: return_code=%d\", return_code);\n    return return_code;\n}\n"
}