{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void *opaque_arg' is declared as a non-const pointer but is used only as read-only data (e.g. passed to pthread_setspecific which takes a 'const void *'). According to MISRA C 2023 Rule 8.13 the pointer should be declared to point to a const-qualified type when possible (e.g. 'const void *opaque_arg').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskRegister_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <pthread.h>\n\n/*\n * Probe helper: append structured logs to /tmp/logs/59.txt to capture\n * control flow and state relevant to the MISRA Rule 8.13 scenario.\n * This helper is intentionally non-intrusive and preserves original logic.\n */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified function with probes inserted. Original logic preserved. */\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    /* Log cancel-related state so that the control path is clear. */\n    OS_Probe_Log(\"OS_TaskRegister_Impl: entered - global_task_id=%lu old_state=%d old_type=%d\",\n                 (unsigned long)global_task_id, old_state, old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    /* Probe: record the union state before calling pthread_setspecific.\n     * Important: arg.opaque_arg is declared as a non-const void* in the\n     * code under test. Record the pointer value and note that it is being\n     * passed to pthread_setspecific (which accepts a const void*).\n     */\n    OS_Probe_Log(\"OS_TaskRegister_Impl: before pthread_setspecific - arg.id=%lu arg.opaque_arg=%p (non-const)\",\n                 (unsigned long)arg.id, arg.opaque_arg);\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n\n    /* Log result and provide stringified error information if any. */\n    if (return_code == 0)\n    {\n        OS_Probe_Log(\"OS_TaskRegister_Impl: pthread_setspecific succeeded for id=%lu\", (unsigned long)arg.id);\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        /* Capture the numeric return code and strerror output for debugging. */\n        OS_Probe_Log(\"OS_TaskRegister_Impl: pthread_setspecific failed for id=%lu return=%d strerror=%s\",\n                     (unsigned long)arg.id, return_code, strerror(return_code));\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    OS_Probe_Log(\"OS_TaskRegister_Impl: exiting - final_return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}