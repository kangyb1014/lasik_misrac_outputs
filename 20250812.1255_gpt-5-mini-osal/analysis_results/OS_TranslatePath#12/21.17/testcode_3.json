{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If VirtualPath is a short string (for example \"/dir/file\" with length L much less than OS_MAX_FILE_NAME) then name_ptr points near the end of the VirtualPath buffer and memchr(name_ptr, 0, OS_MAX_FILE_NAME) may read past the end of the actual object. Only pointer non-nullness is checked; the code does not ensure that OS_MAX_FILE_NAME bytes are available from name_ptr. For example, with OS_MAX_FILE_NAME == 20 and VirtualPath == \"/a/b\" the remaining bytes from name_ptr (\"b\\0\") are only 2 bytes, so memchr could access bytes beyond the VirtualPath object \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Helper logging probes for OS_TranslatePath. These open /tmp/logs/103.txt and\n * append information useful to reproduce the violation scenario. They are\n * intentionally conservative and only read within bounds known by the\n * function (VirtPathLen) to avoid introducing new out-of-bounds accesses.\n */\nstatic void OS_TranslatePath_LogPre(const char *VirtualPath, const char *name_ptr, size_t VirtPathLen, size_t os_max_file_name)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_TranslatePath] PRE: VirtualPath=%p \";\n    if (VirtualPath != NULL)\n    {\n        fprintf(f, \"\\\"%s\\\"\", VirtualPath);\n    }\n    else\n    {\n        fprintf(f, \"(null)\");\n    }\n    fprintf(f, \" VirtPathLen=%zu\\n\", VirtPathLen);\n\n    if (name_ptr != NULL && VirtualPath != NULL)\n    {\n        size_t offset = (size_t)(name_ptr - VirtualPath);\n        size_t remaining = (offset <= VirtPathLen) ? (VirtPathLen - offset) : 0;\n\n        fprintf(f, \"  name_ptr=%p offset=%zu remaining_bytes=%zu OS_MAX_FILE_NAME=%zu\\n\",\n                (void *)name_ptr, offset, remaining, os_max_file_name);\n\n        /* Dump the remaining bytes at name_ptr up to remaining (safe) as a visible, escaped hex sequence. */\n        fprintf(f, \"  remaining_bytes_hex:\");\n        for (size_t i = 0; i < remaining; ++i)\n        {\n            unsigned char c = (unsigned char)name_ptr[i];\n            fprintf(f, \" %02X\", c);\n        }\n        fprintf(f, \"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  name_ptr=%p (NULL or VirtualPath NULL)\\n\", (void *)name_ptr);\n    }\n\n    fclose(f);\n}\n\nstatic void OS_TranslatePath_LogPostMemchr(const char *VirtualPath, const char *name_ptr, size_t VirtPathLen, size_t os_max_file_name, const void *memchr_result)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_TranslatePath] POST memchr: name_ptr=%p memchr_result=%p\\n\",\n            (void *)name_ptr, memchr_result);\n\n    if (memchr_result == NULL)\n    {\n        fprintf(f, \"  memchr did NOT find a null terminator within the first %zu bytes\\n\", os_max_file_name);\n\n        if (name_ptr != NULL && VirtualPath != NULL)\n        {\n            size_t offset = (size_t)(name_ptr - VirtualPath);\n            size_t remaining = (offset <= VirtPathLen) ? (VirtPathLen - offset) : 0;\n            fprintf(f, \"  computed remaining_bytes=%zu (based on VirtPathLen) -> memchr may have read beyond object if %zu < %zu\\n\",\n                    remaining, os_max_file_name, remaining);\n        }\n    }\n    else\n    {\n        /* memchr found a null; compute its index relative to name_ptr */\n        const char *found = (const char *)memchr_result;\n        size_t index = (size_t)(found - name_ptr);\n        fprintf(f, \"  memchr found null at index %zu from name_ptr\\n\", index);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to sees if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n\n    /* Log state JUST BEFORE calling memchr to help reproduce the violation */\n    OS_TranslatePath_LogPre(VirtualPath, name_ptr, VirtPathLen, (size_t)OS_MAX_FILE_NAME);\n\n    /* Original memchr check (kept exactly as before) */\n    const void *memchr_res = memchr(name_ptr, 0, OS_MAX_FILE_NAME);\n\n    /* Log the result of memchr to provide evidence whether it found the terminator or not */\n    OS_TranslatePath_LogPostMemchr(VirtualPath, name_ptr, VirtPathLen, (size_t)OS_MAX_FILE_NAME, memchr_res);\n\n    if (memchr_res == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}