{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'filesys' is declared as a non-const pointer (OS_filesys_internal_record_t *filesys) and is assigned from OS_OBJECT_TABLE_GET(...). In the function it is only used for read-only access (reading filesys->flags, filesys->system_mountpt and filesys->virtual_mountpt); there are no writes through this pointer. Therefore the pointer could and should be declared to point to a const-qualified type (const OS_filesys_internal_record_t *filesys). This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted line to /tmp/logs/99.txt */\nstatic void OS_TranslatePath_Probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    OS_TranslatePath_Probe(\"ENTER: VirtualPath=%p LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    OS_TranslatePath_Probe(\"After parameter checks: VirtualPath=%p LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_Probe(\"VirtPathLen=%zu\", VirtPathLen);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_PATH_TOO_LONG (VirtPathLen >= OS_MAX_PATH_LEN)\");\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_PATH_INVALID (no '/')\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_NAME_TOO_LONG (file name too long)\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_PATH_INVALID (does not start with '/')\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_TranslatePath_Probe(\"Calling OS_ObjectIdGetBySearch for VirtualPath='%s'\", VirtualPath);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Probe(\"OS_ObjectIdGetBySearch returned %d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Probe(\"Setting return_code = OS_FS_ERR_PATH_INVALID due to failed lookup\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_TranslatePath_Probe(\"OS_OBJECT_TABLE_GET returned filesys=%p\", (const void *)filesys);\n\n        if (filesys == NULL)\n        {\n            OS_TranslatePath_Probe(\"filesys == NULL -> setting return_code = OS_FS_ERR_PATH_INVALID\");\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            /* Log read-only fields used in this function to capture the violation scenario */\n            OS_TranslatePath_Probe(\"filesys->flags=0x%08x\", (unsigned)filesys->flags);\n\n            /* Safely compute lengths for logging */\n            size_t smp_len = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            size_t vmp_len = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_Probe(\"filesys->system_mountpt(len=%zu)='%.*s'\", smp_len, (int)smp_len, filesys->system_mountpt);\n            OS_TranslatePath_Probe(\"filesys->virtual_mountpt(len=%zu)='%.*s'\", vmp_len, (int)vmp_len, filesys->virtual_mountpt);\n\n            if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n            {\n                SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n                VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n                OS_TranslatePath_Probe(\"Mounted system: SysMountPointLen=%zu VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n\n                if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n                {\n                    memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                    OS_TranslatePath_Probe(\"Copied system_mountpt to LocalPath (len=%zu)\", SysMountPointLen);\n                }\n                else\n                {\n                    OS_TranslatePath_Probe(\"SysMountPointLen >= OS_MAX_LOCAL_PATH_LEN -> no copy performed\");\n                }\n            }\n            else\n            {\n                OS_TranslatePath_Probe(\"filesys not mounted as system -> setting return_code = OS_ERR_INCORRECT_OBJ_STATE\");\n                return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_Probe(\"Released object token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TranslatePath_Probe(\"Proceeding to combine paths: VirtPathLen=%zu VirtPathBegin=%zu SysMountPointLen=%zu\",\n                                VirtPathLen, VirtPathBegin, SysMountPointLen);\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_PATH_INVALID (VirtPathLen < VirtPathBegin)\");\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_Probe(\"Final LocalPath='%s' (total_len=%zu)\", LocalPath, SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                OS_TranslatePath_Probe(\"RETURN: OS_FS_ERR_PATH_TOO_LONG (combined length)\");\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n    else\n    {\n        OS_TranslatePath_Probe(\"Returning with error code %d\", (int)return_code);\n    }\n\n    OS_TranslatePath_Probe(\"EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}