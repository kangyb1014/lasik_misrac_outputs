{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses strncpy(dest, nameval, sizeof(dest_field)-1). While the destination write is bounded (it writes at most sizeof(field)-1 bytes into a field of size sizeof(field) and the preceding memset ensures a trailing NUL), strncpy may read up to sizeof(field)-1 bytes from the source. If the caller does not guarantee that nameval points to a NUL-terminated string at or before that length (for example nameval refers to a smaller object or lacks a NUL within the first sizeof(field)-1 bytes), strncpy will read beyond the bounds of the source object. Concrete violating scenario: ref->namefield is 32 bytes (so n = 31) but nameval points to a separate 8-byte object that is not NUL-terminated within those 31 bytes; strncpy will attempt to read 31 bytes and thus access out-of-bounds of the source object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/* Probe helper: append logs to /tmp/logs/255.txt. Keep logging actions minimal and safe. */\nstatic void OS_FileSys_Probe_LogOpen(const char *tag, const void *ptr, size_t dest_size, size_t copy_len)\n{\n    FILE *f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[PRE] %s: dest_ptr=%p dest_size=%zu copy_len=%zu src_ptr=%p\\n\",\n            tag, (const void *)ptr, dest_size, copy_len, (const void *)ptr); /* src_ptr duplicated as ptr for symmetry */\n    fclose(f);\n}\n\nstatic void OS_FileSys_Probe_LogAfter(const char *tag, const char *dest, size_t dest_size, size_t copy_len)\n{\n    FILE *f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log basic info */\n    fprintf(f, \"[POST] %s: dest_ptr=%p dest_size=%zu copy_len=%zu\\n\", tag, (const void *)dest, dest_size, copy_len);\n\n    /* Hex dump the destination buffer up to dest_size bytes (safe) */\n    fprintf(f, \"[POST] %s: dest hex (up to dest_size bytes):\", tag);\n    for (size_t i = 0; i < dest_size; ++i)\n    {\n        unsigned char c = (unsigned char)dest[i];\n        fprintf(f, \" %02X\", c);\n    }\n    fprintf(f, \"\\n\");\n\n    /* Find first NUL in destination up to dest_size and report its index. */\n    size_t nul_index = (size_t)-1;\n    for (size_t i = 0; i < dest_size; ++i)\n    {\n        if (dest[i] == '\\0')\n        {\n            nul_index = i;\n            break;\n        }\n    }\n    if (nul_index != (size_t)-1)\n    {\n        fprintf(f, \"[POST] %s: first NUL in dest at index %zu\\n\", tag, nul_index);\n        /* Also print the destination as a C-string up to the NUL (safe) */\n        fprintf(f, \"[POST] %s: dest as string: '%s'\\n\", tag, dest);\n    }\n    else\n    {\n        fprintf(f, \"[POST] %s: no NUL found in dest within dest_size (%zu)\\n\", tag, dest_size);\n    }\n\n    fclose(f);\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n\n        /*\n         * Insert probes around the strncpy that is the focus of the reported violation.\n         * The probes do not access the source beyond what the original code would \u2014 they\n         * only log pointer values and then examine the destination buffer after the copy\n         * (the destination buffer is owned and sized by this record so reads are safe).\n         */\n        {\n            size_t dest_size = sizeof(filesys->volume_name);\n            size_t copy_len = dest_size - 1U;\n\n            /* Pre-copy log: record pointers and sizes (safe) */\n            OS_FileSys_Probe_LogOpen(\"OS_FileSys_Initialize/volume_name copy PRE\", (const void *)fsvolname, dest_size, copy_len);\n\n            /* Perform the copy exactly as before */\n            strncpy(filesys->volume_name, fsvolname, copy_len);\n\n            /* Post-copy log: examine destination buffer (safe) */\n            OS_FileSys_Probe_LogAfter(\"OS_FileSys_Initialize/volume_name copy POST\", filesys->volume_name, dest_size, copy_len);\n        }\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n"
}