{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The OS_CHECK_STRING macro expands to LENGTHCHECK(str,maxlen,errcode). If LENGTHCHECK is implemented using a string.h routine such as strlen() (e.g. if (strlen(str) >= maxlen) ...), then passing a char buffer that is not NUL-terminated (or that has length >= maxlen and no terminating NUL within the object) will cause strlen to scan past the bounds of the object and thus violate MISRA C 2023 Rule 21.17. Example: fsvolname points to a name buffer of size OS_FS_VOL_NAME_LEN that is not NUL terminated; OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), ...) -> LENGTHCHECK calls strlen(fsvolname) and may read beyond the object boundary.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdbool.h>\n\n/*\n * Probe/log helper. Appends textual logs to /tmp/logs/255.txt.\n * Kept minimal to avoid changing program behavior.\n */\nstatic void OS_FileSys_Log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void OS_FileSys_LogFmt(const char *label, const void *p1, const void *p2, size_t n1, size_t n2)\n{\n    FILE *f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s: p1=%p p2=%p max1=%zu max2=%zu\\n\", label, p1, p2, n1, n2);\n    fclose(f);\n}\n\n/*\n * Dump the contents of the destination volume_name buffer (safe because this\n * buffer belongs to the filesystem record and is accessed only after that\n * record has been acquired). This helps show whether the copied string was\n * NUL-terminated or not (evidence useful to reproduce the LENGTHCHECK/strlen\n * overrun scenario).\n */\nstatic void OS_FileSys_DumpVolumeName(const char *label, const char *buf, size_t buflen)\n{\n    FILE *f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: buffer=%p buflen=%zu\\n\", label, (const void *)buf, buflen);\n\n    /* Print as ASCII with hex when non-printable, and track whether a NUL was observed. */\n    bool seen_nul = false;\n    fprintf(f, \"%s: contents (index:hex:char)\\n\", label);\n    for (size_t i = 0; i < buflen; ++i)\n    {\n        unsigned char c = (unsigned char)buf[i];\n        if (c == '\\0')\n        {\n            fprintf(f, \"[%zu]:0x%02x:'\\\\0'\\n\", i, c);\n            seen_nul = true;\n            /* Continue printing remainder to show any leftover bytes */\n            continue;\n        }\n        if (c >= 0x20 && c <= 0x7e)\n        {\n            fprintf(f, \"[%zu]:0x%02x:'%c'\\n\", i, c, c);\n        }\n        else\n        {\n            fprintf(f, \"[%zu]:0x%02x:'.'\\n\", i, c);\n        }\n    }\n\n    fprintf(f, \"%s: observed_nul=%s\\n\", label, seen_nul ? \"YES\" : \"NO\");\n    fclose(f);\n}\n\n/*\n * Modified OS_FileSys_Initialize with logging probes inserted. The original\n * logic is preserved; probes only append diagnostic messages to\n * /tmp/logs/255.txt to help reproduce the scenario where a string handling\n * routine (e.g. strlen) may read past the bounds of the source object.\n */\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Probe: log entrance and pointers/sizes involved in the upcoming LENGTHCHECK/OS_CHECK_STRING\n     * The sizeof(...) expressions match the arguments passed to the macro in the original code;\n     * sizeof on member expressions is compile-time and does not dereference filesys.\n     */\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_FileSys_Initialize ENTRY: fsdevname=%p fsvolname=%p\",\n                       (const void *)fsdevname, (const void *)fsvolname);\n        OS_FileSys_Log(buf);\n\n        /* Log the max lengths used by OS_CHECK_STRING as passed in the original code */\n        OS_FileSys_LogFmt(\"OS_CHECK_STRING args\",\n                          (const void *)fsdevname, (const void *)fsvolname,\n                          sizeof(((OS_filesys_internal_record_t *)0)->device_name),\n                          sizeof(((OS_filesys_internal_record_t *)0)->volume_name));\n\n        /* Note: Do NOT attempt to read from fsdevname/fsvolname here. Reading could itself\n         * cause out-of-bounds accesses if the buffers are smaller than the provided max sizes.\n         * The point of these logs is to capture the pointers and max lengths so a reproducer\n         * can create inputs that trigger the unsafe strlen usage inside LENGTHCHECK.\n         */\n    }\n\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        OS_FileSys_Log(\"OS_FileSys_Initialize: name empty -> OS_FS_ERR_PATH_INVALID\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n\n        /* Probe: log that we're about to strncpy into filesys->volume_name */\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"About to strncpy into filesys->volume_name: dest=%p dest_len=%zu src=%p\",\n                           (void *)filesys->volume_name, sizeof(filesys->volume_name) - 1, (const void *)fsvolname);\n            OS_FileSys_Log(buf);\n        }\n\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /* Probe: dump contents of volume_name buffer (safe: this is our object) */\n        OS_FileSys_DumpVolumeName(\"After strncpy(filesys->volume_name)\", filesys->volume_name,\n                                  sizeof(filesys->volume_name));\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_FileSys_Initialize EXIT: return_code=%d\", (int)return_code);\n        OS_FileSys_Log(buf);\n    }\n\n    return return_code;\n}\n"
}