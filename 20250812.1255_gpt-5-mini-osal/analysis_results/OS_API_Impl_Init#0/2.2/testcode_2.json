{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe switch has a default case that contains only a bare \"break;\". For any idtype value that does not match one of the explicit case labels this default branch will be executed but does nothing; removing the default: break; would not change program behaviour. Therefore the break in the default case is an executed no-op (dead code) and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\n/* Probe helper: append a single log line to /tmp/logs/2.txt.\n * This function is intentionally small and non-intrusive so as to\n * preserve the original logic of OS_API_Impl_Init while recording\n * control-flow and state information useful to reproduce the reported\n * scenario. */\nstatic void OS_API_Impl_Log(const char *tag, osal_objtype_t idtype, int32 return_code)\n{\n    /* Ensure the directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *fp = fopen(\"/tmp/logs/2.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Logging must not affect original behavior. */\n    }\n\n    time_t t = time(NULL);\n    fprintf(fp, \"%ld: %s idtype=%ld return_code=%ld\\n\", (long)t, tag, (long)idtype, (long)return_code);\n    fclose(fp);\n}\n\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    /* Log result of table mutex init and the idtype being initialized. */\n    OS_API_Impl_Log(\"TableMutex_Init\", idtype, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_Impl_Log(\"TableMutex_Init_Failed_Return\", idtype, return_code);\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_TASK\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_QUEUE\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_BINSEM\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_COUNTSEM\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_MUTEX\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_MODULE\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_TIMEBASE\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_STREAM\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_DIR\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_FILESYS\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            OS_API_Impl_Log(\"Case_OS_CONDVAR\", idtype, return_code);\n            break;\n        default:\n            /* Log when the default branch is taken. This captures the\n             * executed no-op (bare break) scenario described in the\n             * violation report so other agents can reproduce and gather\n             * evidence. The original behavior (doing nothing) is preserved. */\n            OS_API_Impl_Log(\"Default_case_executed\", idtype, return_code);\n            break;\n    }\n\n    return return_code;\n}\n"
}