{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe empty default: break; in the switch inside OS_API_Init is executed for idtype values that have no case in the switch (e.g. OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_TYPE_OS_CONSOLE and other gaps). That default does nothing, so its execution has no effect and removing it would not change program behaviour \u2014 this is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper: ensure the log directory /tmp/logs exists. Ignore errors if it cannot be created. */\nstatic void ensure_log_dir(void)\n{\n    int rc = mkdir(\"/tmp/logs\", 0777);\n    (void)rc; /* intentionally ignore return value apart from errno check below */\n    /* If mkdir failed for a reason other than EEXIST, don't attempt further action; logging will fail gracefully. */\n}\n\n/* Helper: append a formatted message to /tmp/logs/2.txt with a timestamp. */\nstatic void log_msg(const char *fmt, ...)\n{\n    ensure_log_dir();\n\n    FILE *f = fopen(\"/tmp/logs/2.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_API_Impl_Init with lightweight probes that preserve original logic. */\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    log_msg(\"OS_API_Impl_Init: entry idtype=%d\", (int)idtype);\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    log_msg(\"OS_Posix_TableMutex_Init(idtype=%d) -> %ld\", (int)idtype, (long)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        log_msg(\"OS_API_Impl_Init: early return due to TableMutex init failure: %ld\", (long)return_code);\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            log_msg(\"case OS_TASK: OS_Posix_TaskAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            log_msg(\"case OS_QUEUE: OS_Posix_QueueAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            log_msg(\"case OS_BINSEM: OS_Posix_BinSemAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            log_msg(\"case OS_COUNTSEM: OS_Posix_CountSemAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            log_msg(\"case OS_MUTEX: OS_Posix_MutexAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            log_msg(\"case OS_MODULE: OS_Posix_ModuleAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            log_msg(\"case OS_TIMEBASE: OS_Posix_TimeBaseAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            log_msg(\"case OS_STREAM: OS_Posix_StreamAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            log_msg(\"case OS_DIR: OS_Posix_DirAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            log_msg(\"case OS_FILESYS: OS_Posix_FileSysAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            log_msg(\"case OS_CONDVAR: OS_Posix_CondVarAPI_Impl_Init() -> %ld\", (long)return_code);\n            break;\n        default:\n            /* Probe: record when the default branch is taken (evidence that this path executes). */\n            log_msg(\"default: idtype=%d hit - no implementation provided (no-op)\", (int)idtype);\n            break;\n    }\n\n    log_msg(\"OS_API_Impl_Init: exit idtype=%d return_code=%ld\", (int)idtype, (long)return_code);\n    return return_code;\n}\n"
}