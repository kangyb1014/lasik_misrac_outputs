{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(StaticSym->Module, ModuleName) without validating ModuleName. If ModuleName is NULL (or points to memory without a terminating '\\0'), strcmp will dereference it and read beyond the bounds of the object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Minimal type definitions to allow this test code to compile standalone. */\ntypedef int32_t int32;\n\ntypedef struct\n{\n    const char *Name;\n    const char *Module;\n} OS_static_symbol_record_t;\n\n/* Example static symbol table to allow compilation. The real system provides its own table. */\nstatic OS_static_symbol_record_t OS_STATIC_SYMTABLE_SOURCE[] =\n{\n    { \"SymbolA\", \"ModuleA\" },\n    { \"SymbolB\", \"ModuleB\" },\n    { NULL, NULL } /* sentinel */\n};\n\n/*\n * Modified OS_ModuleLoad_Static with lightweight probes that log control flow and\n * pointer/state information to /tmp/logs/199.txt. The original logic is preserved\n * (strcmp is still called without validating ModuleName) so that the violation\n * scenario (passing NULL or unterminated strings) can be reproduced and evidenced.\n */\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = (int32)-1; /* OS_ERR_NAME_NOT_FOUND */\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    FILE *logf = NULL;\n    size_t iter = 0;\n\n    /* Open log file (append) to record the control path and relevant pointers. */\n    logf = fopen(\"/tmp/logs/199.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ModuleLoad_Static entry: ModuleName pointer=%p\\n\", (const void *)ModuleName);\n        fflush(logf);\n    }\n\n    while (StaticSym != NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  Loop iter=%zu: StaticSym=%p, Name=%p, Module=%p\\n\",\n                    iter, (void *)StaticSym, (const void *)StaticSym->Name, (const void *)StaticSym->Module);\n            fflush(logf);\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  End of static symbol list encountered (Name == NULL). Breaking.\\n\");\n                fflush(logf);\n            }\n            break;\n        }\n\n        /*\n         * NOTE: The original code called strcmp without validating ModuleName.\n         * We preserve that behavior here so that if ModuleName is NULL (or\n         * points to memory without a terminating '\\0'), the resulting crash or\n         * over-read can be observed. We log the intent to call strcmp and the\n         * pointer values immediately before calling it.\n         */\n        if (StaticSym->Module != NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  About to call strcmp(StaticSym->Module=%p, ModuleName=%p)\\n\",\n                        (const void *)StaticSym->Module, (const void *)ModuleName);\n                fflush(logf);\n            }\n\n            /* Original comparison (preserved) */\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                /* found matching module name */\n                return_code = 0; /* OS_SUCCESS */\n\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  strcmp returned 0 -> match found for ModuleName=%p at StaticSym=%p\\n\",\n                            (const void *)ModuleName, (void *)StaticSym);\n                    fflush(logf);\n                }\n\n                break;\n            }\n            else\n            {\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  strcmp did not match for ModuleName=%p with StaticSym->Module=%p\\n\",\n                            (const void *)ModuleName, (const void *)StaticSym->Module);\n                    fflush(logf);\n                }\n            }\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ModuleLoad_Static exit: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}