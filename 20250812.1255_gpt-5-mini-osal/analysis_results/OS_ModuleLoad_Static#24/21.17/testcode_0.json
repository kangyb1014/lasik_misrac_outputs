{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 ++StaticSym can advance the pointer past the last valid table entry so that subsequent dereferences (StaticSym->Name or StaticSym->Module) and the call strcmp(StaticSym->Module, ModuleName) operate on an invalid pointer. If the table is not terminated by a sentinel record with Name == NULL (or the sentinel is missing), incrementing the pointer will produce a one\u2011past\u2011end or out\u2011of\u2011bounds access and strcmp may read beyond the bounds of the referenced object. Therefore this fragment can lead to a violation of Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/199.txt */\nstatic void OS_AppendLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/199.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Modified OS_ModuleLoad_Static with logging probes that record the control\n * flow and the key pointer values. The original logic is preserved.\n */\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    unsigned                   iter         = 0;\n\n    OS_AppendLog(\"OS_ModuleLoad_Static called: ModuleName=%p\", (void *)ModuleName);\n\n    while (StaticSym != NULL)\n    {\n        ++iter;\n        /* Log the pointer addresses only (no string dereference here) */\n        OS_AppendLog(\"iter=%u: StaticSym=%p, StaticSym+1=%p\", iter, (void *)StaticSym, (void *)(StaticSym + 1));\n\n        /* Check for sentinel (this dereferences StaticSym to read the Name field,\n         * which mirrors the original behavior). */\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            OS_AppendLog(\"iter=%u: Name==NULL (end of list). Breaking.\", iter);\n            break;\n        }\n\n        /* Log the Name pointer value (this is reading the field that the original\n         * code also inspects). Avoid printing the string itself to not cause an\n         * extra unbounded read. */\n        OS_AppendLog(\"iter=%u: Name ptr=%p\", iter, (void *)StaticSym->Name);\n\n        /* If Module pointer is non-NULL, attempt the strcmp as original code does.\n         * Log the Module pointer value and the ModuleName pointer prior to the call.\n         */\n        if (StaticSym->Module != NULL)\n        {\n            OS_AppendLog(\"iter=%u: Module ptr=%p, comparing to ModuleName=%p\", iter, (void *)StaticSym->Module, (void *)ModuleName);\n\n            int cmp = strcmp(StaticSym->Module, ModuleName);\n\n            OS_AppendLog(\"iter=%u: strcmp result=%d\", iter, cmp);\n\n            if (cmp == 0)\n            {\n                /* found matching module name */\n                return_code = OS_SUCCESS;\n                OS_AppendLog(\"iter=%u: match found; setting return_code=OS_SUCCESS and breaking.\", iter);\n                break;\n            }\n        }\n        else\n        {\n            OS_AppendLog(\"iter=%u: Module==NULL, skipping strcmp.\", iter);\n        }\n\n        /* Advance to next table entry and log the new pointer value (pointer arithmetic only). */\n        ++StaticSym;\n        OS_AppendLog(\"iter=%u: advanced StaticSym -> %p\", iter, (void *)StaticSym);\n    }\n\n    OS_AppendLog(\"OS_ModuleLoad_Static returning %d\", (int)return_code);\n    return return_code;\n}\n"
}