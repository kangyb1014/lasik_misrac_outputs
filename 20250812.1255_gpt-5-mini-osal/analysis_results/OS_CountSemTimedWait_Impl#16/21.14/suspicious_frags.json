{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait_Impl:\n```c\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait_Impl:\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nvoid OS_Posix_CompAbsDelayTime(uint32 msecs, struct timespec *tm)\n{\n    clock_gettime(CLOCK_REALTIME, tm);\n\n    /* add the delay to the current time */\n    tm->tv_sec += (time_t)(msecs / 1000);\n    /* convert residue ( msecs )  to nanoseconds */\n    tm->tv_nsec += (msecs % 1000) * 1000000L;\n\n    if (tm->tv_nsec >= 1000000000L)\n    {\n        tm->tv_nsec -= 1000000000L;\n        tm->tv_sec++;\n    }\n}\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);"
  ],
  "explanation": "I did not find any use of the standard library function memcmp in the supplied code fragments, nor any strcmp/strncmp or other string-comparison calls that would indicate a Rule 21.14 violation. The time-manipulation code (OS_Posix_CompAbsDelayTime), semaphore wait (sem_timedwait), and token index accessor (OS_ObjectIndexFromToken) contain no string operations.\n\nThe only fragment that warrants investigation is the invocation of the OS_OBJECT_TABLE_GET macro: its definition is not provided here and it could conceivably expand to code that uses memcmp (or other string-comparison functions) to validate or locate the token. Therefore the macro call line should be inspected (by expanding/inspecting the macro and the OS_object_token_t definition) to ensure memcmp is not used to compare null-terminated strings. If the macro expansion and related token/type definitions do not use memcmp, then no further investigation is needed."
}