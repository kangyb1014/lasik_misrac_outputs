{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_Unlock_Impl:\nOS_BSP_GenericLinuxGlobalData_t OS_BSP_GenericLinuxGlobal\n...\n#define BSP_DEBUG(__VA_ARGS__) \n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\npthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL) passes NULL for the second parameter (oldstate) which has type int * in the POSIX API. No pointer is being declared to a non-const-qualified type in this code; the API requires a non-const int * because it may write the previous state, so it cannot be const. Passing NULL is valid and does not violate the guideline."
}