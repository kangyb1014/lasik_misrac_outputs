{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strerror(status) with 'status' that is not a valid errno value (for example if pthread_mutex_unlock returns a negative value or any value outside the range of the implementation's error-message table) can cause strerror to access beyond the bounds of its internal message array or otherwise produce undefined behaviour. In this code the check uses 'status < 0' (but pthread mutex APIs typically return 0 or a positive error number), so an incorrect/negative value could be passed to strerror, risking an out-of-bounds access of the error-message buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <pthread.h>\n\n/*\n * Instrumented version of OS_BSP_Unlock_Impl\n * - Preserves the original control flow and calls\n * - Adds probe logging to /tmp/logs/223.txt so other agents can reproduce\n *   and gather evidence about returned status values and control paths.\n *\n * Notes:\n * - The original call to BSP_DEBUG(\"...\", strerror(status)) is preserved\n *   to keep behavior as close to the original as possible (and thus allow\n *   reproduction of the reported violation). The probe intentionally does\n *   NOT call strerror() itself when status < 0 to avoid introducing an\n *   additional potential out-of-bounds access in the probe code.\n */\n\nextern struct {\n    pthread_mutex_t AccessMutex;\n    int AccessCancelState;\n} OS_BSP_GenericLinuxGlobal;\n\nextern void BSP_DEBUG(const char *fmt, ...);\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    /* Probe: record raw return status and pointer info */\n    {\n        FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_BSP_Unlock_Impl: pthread_mutex_unlock returned %d\\n\", status);\n            fprintf(f, \"OS_BSP_Unlock_Impl: &AccessMutex=%p\\n\", (void *)&OS_BSP_GenericLinuxGlobal.AccessMutex);\n            fclose(f);\n        }\n    }\n\n    if (status < 0)\n    {\n        /* Probe: log that we hit the error branch and what we intend to do. */\n        FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_BSP_Unlock_Impl: ERROR path entered (status=%d)\\n\", status);\n            fprintf(f, \"OS_BSP_Unlock_Impl: Original code will call BSP_DEBUG(..., strerror(%d)) now.\\n\", status);\n            fprintf(f, \"OS_BSP_Unlock_Impl: Probe will NOT call strerror() to avoid additional undefined behavior.\\n\");\n            fclose(f);\n        }\n\n        /* Preserve original behavior (may be the source of the violation) */\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Probe: log cancel state being restored */\n        FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_BSP_Unlock_Impl: OK path entered, restoring cancel state=%d\\n\", OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fclose(f);\n        }\n\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n"
}