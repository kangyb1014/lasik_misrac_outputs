{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe empty macro definition '#define BSP_DEBUG(__VA_ARGS__)' causes calls like 'BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));' in OS_BSP_Unlock_Impl and OS_BSP_Lock_Impl to expand to a null statement (effectively a no-op). Those no-op statements are executed when the error branch is taken but their removal would not affect program behaviour, so they constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/218.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Helper probe function: append timestamped messages to /tmp/logs/218.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/218.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behaviour. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    if (now != (time_t)(-1))\n    {\n        struct tm tm_info;\n        if (localtime_r(&now, &tm_info) != NULL)\n        {\n            char timestr[32];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_info) > 0)\n            {\n                fprintf(f, \"[%s] \", timestr);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    probe_log(\"OS_BSP_Unlock_Impl: attempting pthread_mutex_unlock\");\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    probe_log(\"OS_BSP_Unlock_Impl: pthread_mutex_unlock returned %d\", status);\n\n    if (status < 0)\n    {\n        /* Log the error branch so the no-op (empty BSP_DEBUG) can be observed. */\n        probe_log(\"OS_BSP_Unlock_Impl: error branch taken: pthread_mutex_unlock: %s\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        probe_log(\"OS_BSP_Unlock_Impl: success branch - restoring cancel state %d\", OS_BSP_GenericLinuxGlobal.AccessCancelState);\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n"
}