{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_DoSelect, when msecs <= 0 the else branch executes and calls memset(&ts_end, 0, sizeof(ts_end)). Later in the function ts_end is only referenced in the code path taken when msecs > 0. Therefore the memset is executed but has no effect on observable behaviour for the msecs == 0 or msecs < 0 cases; removing it would not change program behaviour, so this operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\n/* Probe logging helper - appends state information to /tmp/logs/282.txt */\nstatic void OS_SocketAccept_Log(const char *tag, const void *sock_token, const void *conn_token,\n                                int32 timeout, uint32 operation, int32 return_code,\n                                int conn_fd, socklen_t addrlen, int selectable)\n{\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"[%s] sock_token=%p conn_token=%p timeout=%d selectable=%d operation=0x%08x return_code=%d conn_fd=%d addrlen=%u errno=%d\\n\",\n            tag, sock_token, conn_token, timeout, selectable, (unsigned)operation, return_code, conn_fd, (unsigned)addrlen, errno);\n\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log entry state */\n    OS_SocketAccept_Log(\"ENTRY\", sock_token, conn_token, timeout, 0u, -999, -1, 0u, sock_impl ? sock_impl->selectable : 0);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        /* Log before select */\n        OS_SocketAccept_Log(\"BEFORE_SELECT\", sock_token, conn_token, timeout, operation, -999, -1, 0u, sock_impl->selectable);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        /* Log after select */\n        OS_SocketAccept_Log(\"AFTER_SELECT\", sock_token, conn_token, timeout, operation, return_code, -1, 0u, sock_impl->selectable);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n\n        /* Log that select was skipped */\n        OS_SocketAccept_Log(\"SKIP_SELECT\", sock_token, conn_token, timeout, operation, return_code, -1, 0u, sock_impl->selectable);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            /* Log timeout path */\n            OS_SocketAccept_Log(\"TIMEOUT_PATH\", sock_token, conn_token, timeout, operation, OS_ERROR_TIMEOUT, -1, 0u, sock_impl->selectable);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n\n            /* Log before accept */\n            OS_SocketAccept_Log(\"BEFORE_ACCEPT\", sock_token, conn_token, timeout, operation, return_code, -1, addrlen, sock_impl->selectable);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log accept result */\n            OS_SocketAccept_Log(\"AFTER_ACCEPT\", sock_token, conn_token, timeout, operation, return_code, conn_impl->fd, addrlen, sock_impl->selectable);\n\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n\n                /* Log error on accept */\n                OS_SocketAccept_Log(\"ACCEPT_ERROR\", sock_token, conn_token, timeout, operation, return_code, conn_impl->fd, addrlen, sock_impl->selectable);\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                /* Log success path */\n                OS_SocketAccept_Log(\"ACCEPT_SUCCESS\", sock_token, conn_token, timeout, operation, return_code, conn_impl->fd, addrlen, sock_impl->selectable);\n            }\n        }\n    }\n\n    /* Log exit state */\n    OS_SocketAccept_Log(\"EXIT\", sock_token, conn_token, timeout, operation, return_code, conn_impl ? conn_impl->fd : -1, Addr ? Addr->ActualLength : 0u, sock_impl ? sock_impl->selectable : 0);\n\n    return return_code;\n}\n"
}