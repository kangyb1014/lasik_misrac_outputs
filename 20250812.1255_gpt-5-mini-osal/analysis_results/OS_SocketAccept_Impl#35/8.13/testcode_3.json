{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'impl' is declared as OS_impl_file_internal_record_t *impl but in functions such as OS_SelectSingle_Impl it is only used for read-only access (checking impl->selectable and impl->fd). According to MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type (const OS_impl_file_internal_record_t *impl). Likewise, in OS_SocketAccept_Impl the sock_impl is only read and could be const-qualified (conn_impl must remain non-const because it is modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "int32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    /* Probe / logging helper (kept static to limit scope). This only appends\n     * human-readable diagnostics to /tmp/logs/283.txt and does not change\n     * the function logic. */\n    static void OS_SocketAccept_Impl_Log(const char *stage,\n                                         const OS_object_token_t *sock_tok,\n                                         const OS_object_token_t *conn_tok,\n                                         const OS_impl_file_internal_record_t *sock_i,\n                                         const OS_impl_file_internal_record_t *conn_i,\n                                         uint32 op,\n                                         int32 to,\n                                         socklen_t alen,\n                                         int conn_fd,\n                                         int32 ret)\n    {\n        FILE *fp = fopen(\"/tmp/logs/283.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[OS_SocketAccept_Impl] stage=%s\\n\", stage);\n            fprintf(fp, \"  sock_token=%p, conn_token=%p\\n\", (const void *)sock_tok, (const void *)conn_tok);\n            if (sock_i != NULL)\n            {\n                fprintf(fp, \"  sock_impl=%p: fd=%d, selectable=%u\\n\", (const void *)sock_i, (int)sock_i->fd, (unsigned)sock_i->selectable);\n            }\n            else\n            {\n                fprintf(fp, \"  sock_impl=NULL\\n\");\n            }\n            if (conn_i != NULL)\n            {\n                fprintf(fp, \"  conn_impl=%p: fd=%d\\n\", (const void *)conn_i, (int)conn_i->fd);\n            }\n            else\n            {\n                fprintf(fp, \"  conn_impl=NULL\\n\");\n            }\n            fprintf(fp, \"  operation=0x%08x, timeout=%d, addrlen=%lu, conn_fd=%d, return_code=%d\\n\\n\",\n                    (unsigned)op, (int)to, (unsigned long)alen, conn_fd, (int)ret);\n            fclose(fp);\n        }\n    }\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log initial state */\n    OS_SocketAccept_Impl_Log(\"entry\", sock_token, conn_token, sock_impl, conn_impl, 0u, timeout, 0u, -1, -999);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        /* Log decision to call select */\n        OS_SocketAccept_Impl_Log(\"before_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, -999);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        /* Log result from select */\n        OS_SocketAccept_Impl_Log(\"after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, return_code);\n    }\n    else\n    {\n        /* Log path when socket is not selectable */\n        OS_SocketAccept_Impl_Log(\"select_not_applicable\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_SUCCESS);\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            /* Log timeout condition after select */\n            OS_SocketAccept_Impl_Log(\"timeout_after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_ERROR_TIMEOUT);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n\n            /* Log state before calling accept */\n            OS_SocketAccept_Impl_Log(\"before_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log result of accept (conn_impl->fd may be -1 on error) */\n            OS_SocketAccept_Impl_Log(\"after_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            if (conn_impl->fd < 0)\n            {\n                /* Log error branch */\n                OS_SocketAccept_Impl_Log(\"accept_failed\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_ERROR);\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                /* Log successful accept and final state */\n                OS_SocketAccept_Impl_Log(\"accept_success\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n            }\n        }\n    }\n\n    /* Log exit state */\n    OS_SocketAccept_Impl_Log(\"exit\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, Addr->ActualLength, conn_impl->fd, return_code);\n\n    return return_code;\n}\n"
}