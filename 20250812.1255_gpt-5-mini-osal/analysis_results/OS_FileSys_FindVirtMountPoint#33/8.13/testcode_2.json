{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the local variable 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET(iter->base, iter->token). The code only reads from 'record' (e.g. accesses record->active_id and passes it to a match function that takes const OS_common_record_t *), so the pointer could and should be const-qualified (const OS_common_record_t *). Therefore the pointer is not const when it could be, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Minimal stub types and data to make this testable/compilable. */\ntypedef uintptr_t OS_object_token_t;\ntypedef struct OS_common_record { int dummy; } OS_common_record_t;\n\nenum { OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL = 0x01u };\n\ntypedef struct\n{\n    uint32_t flags;\n    char     virtual_mountpt[64];\n} OS_filesys_internal_record_t;\n\n/* A small table to emulate the object table. */\nstatic OS_filesys_internal_record_t OS_filesys_table[10];\n\n/* Provide a function (not a macro) to obtain table entries. */\nstatic OS_filesys_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token)\n{\n    OS_filesys_internal_record_t *arr = (OS_filesys_internal_record_t *)table;\n    size_t idx = (size_t)(token % 10);\n    return &arr[idx];\n}\n\n/* Local safe strnlen implementation to avoid relying on platform-specific strnlen. */\nstatic size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    size_t i;\n    for (i = 0; i < maxlen; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return maxlen;\n}\n\n/* Simple probe logger that appends to the required log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program control flow; just return. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified function with probes inserted. Original logic preserved.\n */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Probe: entry and inputs */\n    probe_log(\"Enter OS_FileSys_FindVirtMountPoint: ref=%p target=\\\"%s\\\" token_ptr=%p token_val=%llu obj=%p\",\n              ref, (target != NULL) ? target : \"(null)\", (const void *)token,\n              (unsigned long long)((token != NULL) ? (unsigned long long)*token : 0ULL), (const void *)obj);\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, (token != NULL) ? *token : (OS_object_token_t)0);\n\n    /* Probe: filesys state after lookup */\n    probe_log(\"filesys=%p flags=0x%08x virtual_mountpt=\\\"%s\\\"\",\n              (const void *)filesys,\n              (unsigned)filesys->flags,\n              filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        probe_log(\"Not mounted virtual: flags=0x%08x returning=false\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    probe_log(\"virtual_mountpt length mplen=%zu (sizeof=%zu)\", mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* Probe: reason for failure of substring check */\n        if (mplen == 0)\n        {\n            probe_log(\"Not a match: mplen == 0 returning=false\");\n        }\n        else if (mplen >= sizeof(filesys->virtual_mountpt))\n        {\n            probe_log(\"Not a match: mplen >= sizeof(virtual_mountpt) returning=false\");\n        }\n        else\n        {\n            probe_log(\"Not a match: strncmp failed (target vs virtual_mountpt) returning=false\");\n        }\n\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    bool result = (target[mplen] == '/' || target[mplen] == 0);\n    probe_log(\"Final check: target[%zu]=%c (0x%02x) returning=%s\",\n              mplen,\n              (target[mplen] != 0) ? target[mplen] : '0',\n              (int)(unsigned char)target[mplen],\n              result ? \"true\" : \"false\");\n\n    return result;\n}\n"
}