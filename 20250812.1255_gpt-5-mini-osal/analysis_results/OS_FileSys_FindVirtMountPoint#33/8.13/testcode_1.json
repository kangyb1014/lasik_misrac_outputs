{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn both OS_ObjectIdFindNextMatch and OS_ObjectIdIteratorGetNext the local variable 'record' is only used for read-only access (assigned from OS_OBJECT_TABLE_GET, its fields are read e.g. record->active_id, and it is passed to match functions). Therefore it could and should be declared as a pointer to const: 'const OS_common_record_t *record;'. As written 'OS_common_record_t *record;' omits the const qualifier and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe helper: append a formatted message to the log file. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Retrieve the filesys record from the object table as in original code. */\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry and basic pointers/strings for reproduction and debugging. */\n    os_probe_log(\"ENTER: OS_FileSys_FindVirtMountPoint token_ptr=%p, filesys_ptr=%p, target_ptr=%p\",\n                 (const void *)token, (const void *)filesys, (const void *)target);\n\n    if (filesys != NULL)\n    {\n        /* Avoid assuming exact types for printing; cast flags to unsigned for human readable form. */\n        os_probe_log(\"filesys->flags=0x%08x, virtual_mountpt=\\\"%s\\\"\",\n                     (unsigned)filesys->flags,\n                     filesys->virtual_mountpt);\n    }\n    else\n    {\n        os_probe_log(\"filesys is NULL -> returning false\");\n        return false;\n    }\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        os_probe_log(\"file system is NOT mounted virtual (flags=0x%08x) -> returning false\",\n                     (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n    os_probe_log(\"computed mplen=%zu, sizeof(virtual_mountpt)=%zu\",\n                 mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * Preserve original short-circuit behaviour: only call strncmp when it is safe.\n     * Log the reason for rejecting the candidate early where applicable.\n     */\n    bool not_a_substring = false;\n\n    if (mplen == 0)\n    {\n        os_probe_log(\"virtual_mountpt length is zero -> not a substring -> returning false\");\n        not_a_substring = true;\n    }\n    else if (mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        os_probe_log(\"mplen (%zu) >= buffer size (%zu) -> invalid -> not a substring -> returning false\",\n                     mplen, sizeof(filesys->virtual_mountpt));\n        not_a_substring = true;\n    }\n    else\n    {\n        int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n        os_probe_log(\"strncmp(target, virtual_mountpt, %zu) returned %d\",\n                     mplen, cmp);\n        if (cmp != 0)\n        {\n            os_probe_log(\"target does not contain virtual_mountpt as prefix -> returning false\");\n            not_a_substring = true;\n        }\n    }\n\n    if (not_a_substring)\n    {\n        return false;\n    }\n\n    /* Confirm substring ends at directory separator or end-of-string. */\n    char follow = target[mplen];\n    bool result = (follow == '/' || follow == 0);\n    os_probe_log(\"character after matched substring target[mplen]=0x%02x ('%c') -> final match=%d\",\n                 (unsigned char)follow,\n                 (follow >= 32 && follow < 127) ? follow : '.',\n                 (int)result);\n\n    os_probe_log(\"EXIT: OS_FileSys_FindVirtMountPoint returning %d\", (int)result);\n    return result;\n}\n"
}