{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from VirtualPath, but VirtualPath is only NULL-checked (OS_CHECK_POINTER) and not guaranteed to point to an object at least OS_MAX_PATH_LEN bytes long or to contain a NUL within that many bytes. If a caller supplies a shorter buffer (or a non-terminated buffer) smaller than OS_MAX_PATH_LEN with no NUL in the first OS_MAX_PATH_LEN bytes, the strnlen wrapper may access memory beyond the bounds of the object, violating Rule 21.17 (e.g. VirtualPath points to char buf[10] with no NUL within the first OS_MAX_PATH_LEN bytes).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/47.txt. Keep this separate so original logic is preserved. */\nstatic void OS_ModuleLoad_LogProbe(const OS_object_token_t *token,\n                                   void *impl_ptr,\n                                   void *module_ptr,\n                                   const char *translated_path)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"--- OS_ModuleLoad_Impl probe: %s\", ctime(&now));\n\n    /* Log tokens and pointers so a reproducer can see where the pointers came from. */\n    fprintf(f, \"  token ptr: %p\\n\", (const void *)token);\n    fprintf(f, \"  impl ptr : %p\\n\", impl_ptr);\n    fprintf(f, \"  module ptr: %p\\n\", module_ptr);\n\n    if (translated_path == NULL)\n    {\n        fprintf(f, \"  translated_path: NULL\\n\");\n    }\n    else\n    {\n        /*\n         * Do NOT dereference or attempt to read beyond the pointer here.  The\n         * purpose of this log is to show that translated_path is non-NULL and\n         * to record its pointer value. Reading contents here could itself\n         * cause out-of-bounds accesses and would introduce new violations.\n         */\n        fprintf(f, \"  translated_path ptr: %p\\n\", (const void *)translated_path);\n        fprintf(f, \"  NOTE: contents NOT read here to avoid introducing new UB.\\n\");\n        fprintf(f, \"  WARNING: callers that use strnlen(translated_path, OS_MAX_PATH_LEN)\\n\");\n        fprintf(f, \"           may read up to OS_MAX_PATH_LEN bytes. If translated_path\\n\");\n        fprintf(f, \"           points to an object smaller than that or lacks a NUL in\\n\");\n        fprintf(f, \"           the first OS_MAX_PATH_LEN bytes, that may access beyond\\n\");\n        fprintf(f, \"           the bounds of the object (MISRA C 2023 Rule 21.17).\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /* Insert probe logging immediately after we obtain the impl/module records. */\n    OS_ModuleLoad_LogProbe(token, (void *)impl, (void *)module, translated_path);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n\n        /* Log success outcome and the dl_handle value. */\n        FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_ModuleLoad_Impl: dlopen success, dl_handle=%p\\n\\n\", impl->dl_handle);\n            fclose(f);\n        }\n    }\n    else\n    {\n        /* Log error outcome including dlerror() message. */\n        const char *err = dlerror();\n        OS_DEBUG(\"Error loading shared library: %s\\n\", err);\n\n        FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_ModuleLoad_Impl: dlopen failed, dlerror: %s\\n\\n\", (err != NULL) ? err : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    return status;\n}\n"
}