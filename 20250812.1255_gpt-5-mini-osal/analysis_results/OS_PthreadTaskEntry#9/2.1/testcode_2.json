{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_TaskEntryPoint(local_arg.id) is annotated/commented as \"Never returns\". If that routine indeed never returns (or is declared noreturn), control cannot reach the following statement return NULL; making it unreachable code. This violates MISRA C 2023 Rule 2.1. (Fix: remove the unreachable return, or annotate the callees/this function appropriately, or use a compiler-supported unreachable marker.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe helper: append timestamped log entries to /tmp/logs/73.txt */\nstatic void os_write_probe_log(const char *stage, void *opaque_arg, uintptr_t id)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        /* Log: timestamp, stage, opaque pointer value, id value (as uintptr_t) */\n        fprintf(f, \"%ld: %s - opaque=%p id=%\" PRIuPTR \"\\n\", (long)t, stage, opaque_arg, id);\n        fclose(f);\n    }\n}\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log just before calling the task entry point. */\n    os_write_probe_log(\"before_OS_TaskEntryPoint\", local_arg.opaque_arg, (uintptr_t)local_arg.id);\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If OS_TaskEntryPoint does return for some reason, log that event. */\n    os_write_probe_log(\"after_OS_TaskEntryPoint_returned\", local_arg.opaque_arg, (uintptr_t)local_arg.id);\n\n    return NULL;\n}\n"
}