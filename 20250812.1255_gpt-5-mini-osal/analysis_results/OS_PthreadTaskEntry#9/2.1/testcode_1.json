{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code contains statements that cannot be reached at run-time. In OS_PthreadTaskEntry the call OS_TaskEntryPoint(local_arg.id) is documented as \u201cNever returns\u201d, therefore the subsequent statement return NULL; is unreachable. Likewise, the fragment OS_TaskExit_Impl(); is documented as non\u2011returning so any code placed after that call would be unreachable. This situation violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void log_state(const char *stage, void *arg, unsigned long long id_val)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: arg=%p id=%llu\\n\", stage, arg, id_val);\n        fclose(f);\n    }\n}\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log state before calling the (documented) non-returning task entry point. */\n    {\n        /* Convert id to an integer-sized value for logging. This preserves original\n           logic and only probes state; it does not change behavior. */\n        unsigned long long id_val = (unsigned long long)(uintptr_t)local_arg.id;\n        log_state(\"OS_PthreadTaskEntry: before OS_TaskEntryPoint\", arg, id_val);\n    }\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If execution reaches here, the documented non-return behavior did not occur.\n       Log that unexpected control path so the unreachable-code situation can be observed. */\n    {\n        unsigned long long id_val = (unsigned long long)(uintptr_t)local_arg.id;\n        log_state(\"OS_PthreadTaskEntry: returned from OS_TaskEntryPoint (unexpected)\", arg, id_val);\n    }\n\n    return NULL;\n}\n"
}