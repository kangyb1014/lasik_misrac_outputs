{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns a void * parameter (arg) into local_arg.opaque_arg, which is a non-const pointer. If the pointed-to data is not intended to be modified, the pointer should be const-qualified. For example, if the caller passes a pointer to data that must not be modified, the function signature should be 'const void *arg' and local_arg.opaque_arg should be 'const void *'; the current assignment therefore risks dropping the const qualifier and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "static void OS_Log_TaskEntry(const char *stage, void *arg, void *opaque_arg)\n{\n    /* Probe: append a concise record to the log file so other agents can reproduce\n       the control flow and inspect pointer values involved in the reported violation.\n       Keep the function minimal and do not change program logic. */\n    FILE *fp = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log the stage, the original argument pointer and the local opaque pointer\n           value after assignment. Use %p so implementation prints pointer values.\n           We avoid dereferencing or modifying the pointed-to data. */\n        fprintf(fp, \"[OS_PthreadTaskEntry] stage=%s, arg=%p, opaque_arg=%p\\n\",\n                stage, arg, opaque_arg);\n        (void)fflush(fp);\n        fclose(fp);\n    }\n}\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* Log entry and incoming argument pointer */\n    OS_Log_TaskEntry(\"entry\", arg, NULL);\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log the assignment so callers can see that a void * was copied into\n       local_arg.opaque_arg (potentially dropping const qualification at the API level).\n       This provides evidence for the reported MISRA Rule 8.13 scenario. */\n    OS_Log_TaskEntry(\"after_assign\", arg, (void *)local_arg.opaque_arg);\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* In the unlikely event OS_TaskEntryPoint returns, log and return NULL as before. */\n    OS_Log_TaskEntry(\"after_taskentry_returned\", arg, (void *)local_arg.opaque_arg);\n\n    return NULL;\n}"
}