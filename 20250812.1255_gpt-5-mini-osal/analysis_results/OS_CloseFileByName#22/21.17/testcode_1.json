{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(stream->stream_name, Filename). If stream_name is not guaranteed to be NUL-terminated (for example it was filled via strncpy(..., OS_MAX_PATH_LEN) or memcpy without explicitly writing a terminating '\\0'), strcmp will scan past the end of stream_name looking for a '\\0' and thus read beyond the bounds of the array. This causes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/183.txt */\nstatic void OS_CloseFileByName_Log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure the directory exists. If it already exists, ignore the error. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging; do not change control flow on failure */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* --- Probe logging: capture state immediately before the strcmp --- */\n        {\n            size_t fname_len = 0;\n            const char *fname_ptr = Filename;\n\n            if (Filename != NULL)\n            {\n                fname_len = strlen(Filename);\n            }\n\n            OS_CloseFileByName_Log(\"[probe] iter.token=%u stream_ptr=%p socket_domain=%d Filename_ptr=%p Filename_len=%zu\",\n                                   (unsigned)iter.token, (void *)stream, (int)stream->socket_domain, (void *)fname_ptr, fname_len);\n\n            /* Check whether stream->stream_name contains a NUL within OS_MAX_PATH_LEN bytes */\n            {\n                const void *nulpos = memchr(stream->stream_name, '\\0', OS_MAX_PATH_LEN);\n                if (nulpos != NULL)\n                {\n                    ptrdiff_t pos = (const char *)nulpos - stream->stream_name;\n                    /* Print the printable portion of stream_name up to the NUL */\n                    OS_CloseFileByName_Log(\"[probe] stream_name is NUL-terminated at offset=%td; content=\\\"%.*s\\\"\",\n                                           pos, (int)pos, stream->stream_name);\n                }\n                else\n                {\n                    /* No NUL found within the assumed buffer size. Log that fact and dump the first bytes as hex to aid debugging. */\n                    int i, dump_len = (OS_MAX_PATH_LEN > 32) ? 32 : OS_MAX_PATH_LEN;\n                    char hexbuf[3 * 32 + 1];\n                    char *hp = hexbuf;\n\n                    for (i = 0; i < dump_len; ++i)\n                    {\n                        int n = snprintf(hp, (size_t)(hexbuf + sizeof(hexbuf) - hp), \"%02X \", (unsigned char)stream->stream_name[i]);\n                        if (n <= 0) break;\n                        hp += n;\n                    }\n                    *hp = '\\0';\n\n                    OS_CloseFileByName_Log(\"[probe] stream_name NOT NUL-terminated within %d bytes; first %d bytes (hex): %s\",\n                                           OS_MAX_PATH_LEN, dump_len, hexbuf);\n                }\n            }\n        }\n\n        /* Original comparison retained to preserve original control flow; the probe logs before this call. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n\n            /* Log the result of the strcmp branch being taken and the close result */\n            OS_CloseFileByName_Log(\"[probe] strcmp matched; close_code=%d return_code=%d\", close_code, return_code);\n        }\n        else\n        {\n            /* Log when the strcmp did not match (or socket_domain not invalid) */\n            OS_CloseFileByName_Log(\"[probe] strcmp did not match or socket_domain != INVALID for token=%u\", (unsigned)iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}