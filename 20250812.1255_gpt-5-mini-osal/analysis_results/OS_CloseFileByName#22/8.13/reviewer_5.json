{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The callback parameter 'arg' is declared as void * but is not modified by OS_FileIteratorClose. Per MISRA C 2023 Rule 8.13, this should be a pointer to a const-qualified type (e.g. const void *arg). As written the function accepts a non-const pointer even though it does not and need not modify the pointed-to object, so the rule is violated. To conform, change the callback prototype and related iterator field to use const void * (or otherwise justify/document why a non-const pointer is required).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* simple timestamp */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n        char ts[64];\n        (void)strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        fprintf(f, \"%s \", ts);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    probe_log(\"OS_CloseFileByName: called with Filename=\\\"%s\\\"\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    probe_log(\"OS_CloseFileByName: iterator initialized\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Defensive check in case table entry is NULL */\n        if (stream == NULL)\n        {\n            probe_log(\"OS_CloseFileByName: iter.token=%p -> stream=NULL\", (void *)&iter.token);\n            continue;\n        }\n\n        /* Log candidate entry details */\n        probe_log(\"OS_CloseFileByName: iter.token=%p, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\",\n                  (void *)&iter.token, (void *)stream, (int)stream->socket_domain, stream->stream_name);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Capture a snapshot of the stream entry state before processing */\n            char before_name[OS_MAX_PATH_LEN];\n            memset(before_name, 0, sizeof(before_name));\n            (void)strncpy(before_name, stream->stream_name, sizeof(before_name) - 1);\n\n            unsigned char before_blob[64];\n            memset(before_blob, 0xAA, sizeof(before_blob));\n            /* copy a small prefix of the stream record to detect modifications */\n            (void)memcpy(before_blob, stream, sizeof(before_blob));\n\n            probe_log(\"OS_CloseFileByName: matched entry; invoking OS_ObjectIdIteratorProcessEntry for token=%p\",\n                      (void *)&iter.token);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            /* Re-fetch the stream pointer in case table was modified */\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream == NULL)\n            {\n                probe_log(\"OS_CloseFileByName: post-process token=%p -> stream=NULL; close_code=%d\",\n                          (void *)&iter.token, (int)close_code);\n            }\n            else\n            {\n                char after_name[OS_MAX_PATH_LEN];\n                memset(after_name, 0, sizeof(after_name));\n                (void)strncpy(after_name, stream->stream_name, sizeof(after_name) - 1);\n\n                unsigned char after_blob[64];\n                memset(after_blob, 0xBB, sizeof(after_blob));\n                (void)memcpy(after_blob, stream, sizeof(after_blob));\n\n                /* Compare snapshots to provide evidence whether the entry pointed-to was modified by the callback */\n                int name_unchanged = (strncmp(before_name, after_name, sizeof(before_name)) == 0);\n                int blob_unchanged = (memcmp(before_blob, after_blob, sizeof(before_blob)) == 0);\n\n                probe_log(\"OS_CloseFileByName: post-process token=%p, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\",\n                          (void *)&iter.token, (void *)stream, (int)stream->socket_domain, after_name);\n\n                probe_log(\"OS_CloseFileByName: post-process comparisons: name_unchanged=%d, blob_unchanged=%d, close_code=%d\",\n                          name_unchanged, blob_unchanged, (int)close_code);\n\n                /* If both unchanged, this provides evidence that the iterator callback did not modify the object */\n                if (name_unchanged && blob_unchanged)\n                {\n                    probe_log(\"OS_CloseFileByName: evidence -> matched entry for token=%p was NOT modified by callback (arg appears read-only)\",\n                              (void *)&iter.token);\n                }\n                else\n                {\n                    probe_log(\"OS_CloseFileByName: evidence -> matched entry for token=%p WAS modified by callback (arg mutated)\",\n                              (void *)&iter.token);\n                }\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                probe_log(\"OS_CloseFileByName: updating return_code from %d to %d (close_code=%d)\", (int)return_code, (int)close_code, (int)close_code);\n                return_code = close_code;\n            }\n            else\n            {\n                probe_log(\"OS_CloseFileByName: return_code remains %d (close_code=%d)\", (int)return_code, (int)close_code);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseFileByName: finished, returning %d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the code shown. MISRA C:2023 Rule 8.13 requires pointer types to be const-qualified where possible \u2014 but that is a property of declarations, not of every use-site. In the supplied OS_CloseFileByName: - The Filename parameter is already const char *. - The local variable stream is declared as OS_stream_internal_record_t * and is only read from in this function; one could argue it could be declared const OS_stream_internal_record_t * here, but that is a local improvement suggestion, not the specific violation A reported. - The agent\u2019s claimed violation concerns the iterator callback prototype (an arg declared as void *). That callback and the iterator type/prototype (OS_ObjectIdIteratorProcessEntry, OS_FileIteratorClose, and any iterator->arg field) are not present in the provided code, so there is no evidence in OS_CloseFileByName itself that a non-const pointer is incorrectly declared or passed. The test harness failed to compile, so it produced no proof. Conclusion: based on the code shown, the report is not correct. To determine a true MISRA 8.13 violation you must inspect the declarations of the iterator callback and the iterator data structure; if the callback does not modify the pointed-to object, then its parameter (and any stored pointer in the iterator) should be changed to point to a const-qualified type (or otherwise documented/justified)."
}