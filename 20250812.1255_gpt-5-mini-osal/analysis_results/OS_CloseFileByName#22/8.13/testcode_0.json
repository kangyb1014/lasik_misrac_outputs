{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET() returns a pointer to a modifiable table element (&tbl[...]) but callers (e.g. OS_CloseFileByName where stream is used only for read access, and OS_ObjectIdIteratorGetNext where record is only read) only need read access. These callers could (and should) use a pointer to const-qualified element type (const OS_stream_internal_record_t * or const OS_common_record_t *) so the pointer should point to a const-qualified type. Therefore the macro's return type enables non-const access where const would be appropriate.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/179.txt */\nstatic void OS_CloseFileByName_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    OS_CloseFileByName_Log(\"OS_CloseFileByName ENTRY: Filename=%p ('%s')\", (const void *)Filename, (Filename ? Filename : \"(null)\"));\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_CloseFileByName_Log(\"Initial return_code=%d (OS_FS_ERR_PATH_INVALID)\", (int)return_code);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_CloseFileByName_Log(\"Iterator initialized: iter token (start)=%u\", (unsigned)iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* capture token before any possible side effects */\n        unsigned iter_token = (unsigned)iter.token;\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        OS_CloseFileByName_Log(\"Iteration: iter.token=%u, stream_ptr=%p\", iter_token, (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log stream fields that are relevant to the decision */\n            const char *sname = stream->stream_name ? stream->stream_name : \"(null)\";\n            OS_CloseFileByName_Log(\" stream->socket_domain=%d, stream->stream_name='%s'\", (int)stream->socket_domain, sname);\n\n            int cmp = 0;\n            /* Protect strcmp in case stream_name is NULL */\n            if (stream->stream_name != NULL && Filename != NULL)\n            {\n                cmp = strcmp(stream->stream_name, Filename);\n            }\n            else if (stream->stream_name == NULL && Filename == NULL)\n            {\n                cmp = 0;\n            }\n            else\n            {\n                /* not equal */\n                cmp = 1;\n            }\n\n            OS_CloseFileByName_Log(\" strcmp(stream->stream_name, Filename) result=%d\", cmp);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n            {\n                OS_CloseFileByName_Log(\" Match found: calling OS_ObjectIdIteratorProcessEntry for token=%u\", iter_token);\n\n                /* call OS_close() on the entry referred to by the iterator */\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                OS_CloseFileByName_Log(\" OS_ObjectIdIteratorProcessEntry returned close_code=%d\", (int)close_code);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    OS_CloseFileByName_Log(\" Updating return_code: old=%d, new=%d\", (int)return_code, (int)close_code);\n                    return_code = close_code;\n                }\n                else\n                {\n                    OS_CloseFileByName_Log(\" return_code unchanged: %d\", (int)return_code);\n                }\n            }\n            else\n            {\n                OS_CloseFileByName_Log(\" No match (socket_domain or name mismatch): socket_domain=%d, cmp=%d\", (int)stream->socket_domain, cmp);\n            }\n        }\n        else\n        {\n            OS_CloseFileByName_Log(\" stream pointer is NULL for token=%u\", iter_token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_CloseFileByName_Log(\"Iterator destroyed; final return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}