{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the local variable 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET(iter->base, iter->token). The iter->base member is declared as OS_common_record_t * but the function only reads from the table (e.g. record->active_id) and does not modify the pointed-to data. According to MISRA C 2023 Rule 8.13, pointers that are used only to access objects should be const-qualified. Therefore iter->base (and correspondingly 'record') should be declared as const OS_common_record_t * (and the macro adjusted if necessary). This constitutes a violation of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/179.txt */\nstatic void os179_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_CloseFileByName with instrumentation probes.\n * The original logic is preserved; probes only log state and control flow. */\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry */\n    os179_log_printf(\"ENTER: OS_CloseFileByName Filename_ptr=%p Filename=\\\"%s\\\"\", (void *)Filename, Filename ? Filename : \"(null)\");\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log iterator initialization state (token value logged; base may be internal and is not dereferenced here) */\n    /* Note: avoid dereferencing internal fields that may not exist in all builds; log token which is used below. */\n    os179_log_printf(\"Iterator initialized: token=%lu\", (unsigned long)iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Obtain the stream record referenced by this iterator token */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log pointer returned from table and some fields that are read by the function */\n        os179_log_printf(\"Iterator next: token=%lu stream_ptr=%p\", (unsigned long)iter.token, (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log the fields that this function reads; guard against NULL names */\n            const char *sname = stream->stream_name ? stream->stream_name : \"(null)\";\n            os179_log_printf(\"Stream state: stream_name=\\\"%s\\\" socket_domain=%d\", sname, (int)stream->socket_domain);\n        }\n        else\n        {\n            os179_log_printf(\"Stream state: stream is NULL for token=%lu\", (unsigned long)iter.token);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            os179_log_printf(\"Match found: token=%lu name=\\\"%s\\\" - invoking close on iterator entry\", (unsigned long)iter.token, stream->stream_name);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            os179_log_printf(\"Close processed: token=%lu close_code=%ld\", (unsigned long)iter.token, (long)close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                os179_log_printf(\"Updating return_code: old=%ld new=%ld\", (long)return_code, (long)close_code);\n                return_code = close_code;\n            }\n        }\n        else\n        {\n            /* Log non-matching entries for traceability */\n            if (stream != NULL)\n            {\n                os179_log_printf(\"No match: token=%lu stream_name=\\\"%s\\\" socket_domain=%d\", (unsigned long)iter.token,\n                                 stream->stream_name ? stream->stream_name : \"(null)\", (int)stream->socket_domain);\n            }\n        }\n    }\n\n    os179_log_printf(\"Iterator exhaustion or termination: destroying iterator token=%lu\", (unsigned long)iter.token);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os179_log_printf(\"EXIT: OS_CloseFileByName returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}