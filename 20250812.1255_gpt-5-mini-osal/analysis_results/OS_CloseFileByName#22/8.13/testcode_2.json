{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the local variable 'record' is only used to read fields (record->active_id) and is passed to a match callback only for inspection. Declaring it as a non-const pointer allows accidental modification of the referenced object. According to MISRA C 2023 Rule 8.13 it should be declared as const OS_common_record_t *record (and associated APIs/signatures adjusted) when the referenced object is not intended to be modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/179.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    probe_log(\"OS_CloseFileByName: entry Filename=\\\"%s\\\"\", Filename ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    probe_log(\"Iterator initialized at %p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Log iterator token if available/meaningful as an integer */\n        probe_log(\"Iterator advanced: iter.token=%llu\", (unsigned long long)iter.token);\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        probe_log(\"Stream entry: ptr=%p, socket_domain=%d, name=\\\"%s\\\"\",\n                  (void *)stream,\n                  (int)stream->socket_domain,\n                  stream->stream_name ? stream->stream_name : \"(null)\");\n\n        /* Pre-calc comparison result to log the decision path */\n        int name_cmp = strcmp(stream->stream_name, Filename);\n        probe_log(\"Name comparison: strcmp(stream->stream_name, Filename) => %d\", name_cmp);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (name_cmp == 0))\n        {\n            probe_log(\"Match found for token=%llu, invoking close\", (unsigned long long)iter.token);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            probe_log(\"OS_ObjectIdIteratorProcessEntry returned close_code=%d\", close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                probe_log(\"Updating return_code: old=%d -> new=%d\", return_code, close_code);\n                return_code = close_code;\n            }\n            else\n            {\n                probe_log(\"No update to return_code (current=%d)\", return_code);\n            }\n        }\n        else\n        {\n            probe_log(\"Entry skipped: token=%llu, socket_domain=%d, name_cmp=%d\",\n                      (unsigned long long)iter.token,\n                      (int)stream->socket_domain,\n                      name_cmp);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseFileByName: exit return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}