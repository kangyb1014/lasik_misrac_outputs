{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator structure holds a non-const pointer to the object table: `OS_common_record_t * base;`. In practice this is used read-only (e.g. OS_ObjectIdIteratorGetNext does `record = OS_OBJECT_TABLE_GET(iter->base, iter->token);` and only reads the record), and the iterator should therefore take a pointer to const data (e.g. `const OS_common_record_t * base`) to prevent accidental modification. Because the pointer is not const-qualified even though it can be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helper: write a single log entry describing iterator and stream state.\n * Appends to /tmp/logs/179.txt. Keeps behavior read-only (no modifications).\n */\nstatic void OS_CloseFileByName_ProbeLog(const char *event,\n                                        const OS_object_iter_t *iter,\n                                        const OS_stream_internal_record_t *stream,\n                                        int32 return_code,\n                                        int32 close_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Log basic event and iterator token/base pointer (if present).\n     * Casts to unsigned long for portability of integer printing and to void* for pointers.\n     */\n    fprintf(fp, \"EVENT=%s\\n\", event);\n\n    /* Some implementations of OS_object_iter_t include token and base members as per usage. */\n    /* Print token if available; otherwise print 0. */\n    #if 1\n    /* We try to access common fields used by the code under test. */\n    fprintf(fp, \"  iter.token=%lu\\n\", (unsigned long)iter->token);\n    fprintf(fp, \"  iter.base=%p\\n\", (void *)iter->base);\n    #endif\n\n    if (stream != NULL)\n    {\n        /* stream_name is used by the original logic; print it safely. */\n        const char *name = stream->stream_name ? stream->stream_name : \"(null)\";\n        fprintf(fp, \"  stream=%p\\n\", (void *)stream);\n        fprintf(fp, \"  stream->stream_name='%s'\\n\", name);\n        fprintf(fp, \"  stream->socket_domain=%d\\n\", (int)stream->socket_domain);\n    }\n    else\n    {\n        fprintf(fp, \"  stream=NULL\\n\");\n    }\n\n    fprintf(fp, \"  return_code=%ld, close_code=%ld\\n\", (long)return_code, (long)close_code);\n    fprintf(fp, \"\\n\");\n\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log entry into iteration */\n    OS_CloseFileByName_ProbeLog(\"iterate_start\", &iter, NULL, return_code, 0);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: record state just after obtaining the table entry */\n        OS_CloseFileByName_ProbeLog(\"after_table_get\", &iter, stream, return_code, 0);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            /* Probe: record the result of attempting to close this entry */\n            OS_CloseFileByName_ProbeLog(\"after_process_entry\", &iter, stream, return_code, close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n\n                /* Probe: log change to return_code when it occurs */\n                OS_CloseFileByName_ProbeLog(\"return_code_updated\", &iter, stream, return_code, close_code);\n            }\n        }\n    }\n\n    /* Probe: log just before destroying iterator */\n    OS_CloseFileByName_ProbeLog(\"iterate_end\", &iter, NULL, return_code, 0);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}