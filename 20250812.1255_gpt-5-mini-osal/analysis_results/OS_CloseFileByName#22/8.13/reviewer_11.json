{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The callback parameter 'int32 (*func)(osal_id_t, void *)' and the iterator member 'void *arg' are not const-qualified. If callbacks do not (and are not intended to) modify the context pointed to by arg (for example OS_FileIteratorClose ignores its arg), then both should be declared as 'const void *' (e.g. int32 (*func)(osal_id_t, const void *) and const void *arg) so that the pointer points to a const-qualified type. As written, this fails MISRA C 2023 Rule 8.13 because a pointer that could be const is not const-qualified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CloseFileByName_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"[%s] \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter */\n    OS_CloseFileByName_Log(\"ENTER OS_CloseFileByName Filename=%s\", (Filename != NULL) ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_CloseFileByName_Log(\"Calling OS_ObjectIdIterateActive for LOCAL_OBJID_TYPE\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator token and stream pointer */\n        OS_CloseFileByName_Log(\"ITER token=%p stream=%p\", (const void *)&iter.token, (void *)stream);\n\n        if (stream != NULL)\n        {\n            const char *sname = (stream->stream_name != NULL) ? stream->stream_name : \"(null)\";\n            OS_CloseFileByName_Log(\"STREAM token=%p domain=%d name=%s\", (const void *)&iter.token, (int)stream->socket_domain, sname);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                OS_CloseFileByName_Log(\"MATCH found for token=%p name=%s - calling OS_ObjectIdIteratorProcessEntry\", (const void *)&iter.token, sname);\n\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                OS_CloseFileByName_Log(\"OS_ObjectIdIteratorProcessEntry returned close_code=%d for token=%p\", close_code, (const void *)&iter.token);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    int32 old = return_code;\n                    return_code = close_code;\n                    OS_CloseFileByName_Log(\"Updating return_code from %d to %d\", old, return_code);\n                }\n            }\n            else\n            {\n                OS_CloseFileByName_Log(\"NO_MATCH for token=%p name=%s (domain=%d, target=%s)\", (const void *)&iter.token, sname, (int)stream->socket_domain, Filename);\n            }\n        }\n        else\n        {\n            OS_CloseFileByName_Log(\"STREAM pointer is NULL for token=%p\", (const void *)&iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_CloseFileByName_Log(\"Iterator destroyed, returning return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the information given. MISRA C 2023 Rule 8.13 concerns pointer declarations \u2014 a pointer should be to a const-qualified type if the pointed-to object is not (and will not be) modified. The snippet you supplied (OS_CloseFileByName) does not itself declare the iterator callback type or the iterator->arg member; it merely calls APIs (OS_ObjectIdIteratorProcessEntry, OS_FileIteratorClose) whose prototypes are defined elsewhere. To demonstrate a true 8.13 violation you must show that (a) a pointer is declared without const qualification and (b) the pointed-to object is actually never modified in any use such that adding const would be safe for all callers. Agent A only observed that one particular callback (OS_FileIteratorClose) ignores its arg \u2014 that is not sufficient evidence: other callbacks or callers may legitimately modify the arg, and the API must accommodate all uses. The test modification failing to compile actually indicates other code expects the non-const signature, so an unannotated pointer may be required by existing callers. Therefore, based on the provided code and evidence, the claim of a MISRA 8.13 violation is not proven and the report is incorrect."
}