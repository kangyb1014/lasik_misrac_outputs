{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'stream' is declared as a mutable pointer (OS_stream_internal_record_t *stream) but is only used for read-only access (socket_domain and stream_name) and is assigned from the table via OS_OBJECT_TABLE_GET. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here it can be const (const OS_stream_internal_record_t *stream) without affecting behavior. Therefore the code fragment violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE                       *logfp = NULL;\n\n    /* Open log file once for the duration of this call. */\n    logfp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (logfp)\n    {\n        fprintf(logfp, \"ENTER: OS_CloseFileByName Filename='%s'\\n\", Filename ? Filename : \"(null)\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    if (logfp)\n    {\n        fprintf(logfp, \"Initial return_code=%d\\n\", (int)return_code);\n    }\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (logfp)\n        {\n            /* Log iterator token and stream pointer + key fields used in the comparison. */\n            /* iter.token is an aggregate in some builds, so print its address instead of casting it to an integer */\n            fprintf(logfp, \"ITER token=%p stream_ptr=%p\", (void *)&iter.token, (void *)stream);\n            if (stream != NULL)\n            {\n                fprintf(logfp, \" socket_domain=%d stream_name='%s'\", (int)stream->socket_domain,\n                        stream->stream_name ? stream->stream_name : \"(null)\");\n            }\n            fprintf(logfp, \"\\n\");\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (logfp)\n            {\n                fprintf(logfp, \"MATCH found for Filename '%s' at token=%p\\n\", Filename, (void *)&iter.token);\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (logfp)\n            {\n                fprintf(logfp, \"close_code=%d\\n\", (int)close_code);\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                if (logfp)\n                {\n                    fprintf(logfp, \"Updating return_code: %d -> %d\\n\", (int)return_code, (int)close_code);\n                }\n                return_code = close_code;\n            }\n        }\n        else\n        {\n            if (logfp)\n            {\n                fprintf(logfp, \"No match for token=%p (socket_domain=%d, name='%s')\\n\",\n                        (void *)&iter.token,\n                        stream ? (int)stream->socket_domain : -1,\n                        stream && stream->stream_name ? stream->stream_name : \"(null)\");\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (logfp)\n    {\n        fprintf(logfp, \"EXIT: OS_CloseFileByName return_code=%d\\n\\n\", (int)return_code);\n        fclose(logfp);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function the local variable stream is only used for read-only accesses (socket_domain and stream_name) and is never modified or passed to an API that requires a mutable pointer. Therefore it can and should be declared as a pointer to a const-qualified type (e.g. const OS_stream_internal_record_t *stream) to satisfy MISRA C:2023 Rule 8.13. Assigning the (non-const) result of OS_OBJECT_TABLE_GET to a pointer-to-const is permitted and is the intended direction of qualification. The only caveat is if some surrounding API/implementation requires a mutable pointer for this particular use (or the macro has unusual semantics), but based on the shown code there is no such constraint, so the agent A report is correct."
}