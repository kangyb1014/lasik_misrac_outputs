{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if either input pointers are NULL: (1) If SymbolName == NULL then strcmp(StaticSym->Name, SymbolName) dereferences a NULL pointer (undefined behavior / access beyond bounds). (2) If ModuleName != NULL but StaticSym->Module == NULL then strcmp(StaticSym->Module, ModuleName) dereferences a NULL pointer. The code only checks StaticSym->Name for NULL (terminator) but does not validate SymbolName or StaticSym->Module before calling strcmp.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/*\n * Probe logging helpers. These functions write detailed state and control-flow\n * information to /tmp/logs/87.txt to help reproduce the reported violation\n * scenario. They are careful not to dereference NULL pointers when printing\n * strings.\n *\n * NOTE: These helpers preserve the original logic of OS_SymbolLookup_Static\n * and only add logging. They do not change the comparisons or control flow.\n */\nstatic void log_ptr_and_str(FILE *f, const char *label, const char *s)\n{\n    fprintf(f, \"%s: ptr=%p\", label, (const void *)s);\n    if (s != NULL)\n    {\n        /* Safe to print when non-NULL */\n        fprintf(f, \" str=\\\"%s\\\"\", s);\n    }\n    else\n    {\n        fprintf(f, \" str=(null)\");\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_log(const char *phase, OS_static_symbol_record_t *sym, const char *SymbolName, const char *ModuleName)\n{\n    FILE *f = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do nothing to avoid changing behavior. */\n        return;\n    }\n\n    fprintf(f, \"=== %s ===\\n\", phase);\n    fprintf(f, \"StaticSym ptr=%p\\n\", (void *)sym);\n    if (sym != NULL)\n    {\n        /* Print fields of the static symbol record safely */\n        log_ptr_and_str(f, \"StaticSym->Name\", sym->Name);\n        log_ptr_and_str(f, \"StaticSym->Module\", sym->Module);\n        fprintf(f, \"StaticSym->Address=%p\\n\", (void *)sym->Address);\n    }\n    log_ptr_and_str(f, \"SymbolName\", SymbolName);\n    log_ptr_and_str(f, \"ModuleName\", ModuleName);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    probe_log(\"entry\", StaticSym, SymbolName, ModuleName);\n\n    while (StaticSym != NULL)\n    {\n        probe_log(\"loop-start\", StaticSym, SymbolName, ModuleName);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            probe_log(\"name-null-end-of-list\", StaticSym, SymbolName, ModuleName);\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* Log immediately before the strcmp comparisons so the exact pointer\n         * state that leads to any undefined behavior (e.g. NULL inputs) is\n         * recorded. We intentionally do NOT change the original strcmp calls\n         * to preserve original behavior. */\n        probe_log(\"before-strcmp\", StaticSym, SymbolName, ModuleName);\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            probe_log(\"found-match\", StaticSym, SymbolName, ModuleName);\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        probe_log(\"no-match-next\", StaticSym, SymbolName, ModuleName);\n\n        ++StaticSym;\n    }\n\n    probe_log(\"exit\", StaticSym, SymbolName, ModuleName);\n\n    return return_code;\n}\n"
}