{
  "user_message": "An agent A claimed that the following OS_API_Init code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_API_Init.\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call site itself is fine, but it violates MISRA C 2023 Rule 8.13 if the OS_DEBUG prototype uses a non-const pointer parameter. Example violating scenario: OS_DEBUG is declared as something like\n    void OS_DEBUG(char *fmt, ...);\nIn that case the format string (a string literal) is being passed to a parameter that is not const-qualified, which violates Rule 8.13 because pointer parameters that do not modify the pointed-to data should be declared pointing to const-qualified types. The fix is to declare the prototype as e.g. void OS_DEBUG(const char *fmt, ...);\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef unsigned int osal_objtype_t;\nenum os_object_type_e\n{\n    OS_OBJECT_TYPE_OS_TASK = 0,\n    OS_OBJECT_TYPE_OS_QUEUE,\n    OS_OBJECT_TYPE_OS_BINSEM,\n    OS_OBJECT_TYPE_OS_COUNTSEM,\n    OS_OBJECT_TYPE_OS_MUTEX,\n    OS_OBJECT_TYPE_OS_MODULE,\n    OS_OBJECT_TYPE_OS_TIMEBASE,\n    OS_OBJECT_TYPE_OS_TIMECB,\n    OS_OBJECT_TYPE_OS_STREAM,\n    OS_OBJECT_TYPE_OS_DIR,\n    OS_OBJECT_TYPE_OS_FILESYS,\n    OS_OBJECT_TYPE_OS_CONSOLE,\n    OS_OBJECT_TYPE_OS_CONDVAR,\n\n    /* Boundary value used by loop in OS_API_Init */\n    OS_OBJECT_TYPE_USER\n};\nstruct OS_SharedGlobalVars_s\n{\n    uint32 GlobalState;\n    int DebugLevel;\n    long MicroSecPerTick;\n    long TicksPerSecond;\n};\nvoid OS_DEBUG(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n}\nstatic void OS_DEBUG_PROBE(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log pointer, string content (if any), and relevant global state */\n        fprintf(fp, \"OS_DEBUG_PROBE invoked. fmt_ptr=%p fmt=\\\"%s\\\" GlobalState=0x%08x DebugLevel=%d MicroSecPerTick=%ld TicksPerSecond=%ld\\n\",\n                (void *)fmt,\n                (fmt != NULL) ? fmt : \"(null)\",\n                (unsigned)OS_SharedGlobalVars.GlobalState,\n                OS_SharedGlobalVars.DebugLevel,\n                OS_SharedGlobalVars.MicroSecPerTick,\n                OS_SharedGlobalVars.TicksPerSecond);\n        fclose(fp);\n    }\n\n    /* Also produce the intended debug output to stderr (preserve behavior) */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n}\nstatic int32 OS_ObjectIdInit(void) { return OS_SUCCESS; }\nstatic int32 OS_API_Impl_Init(osal_objtype_t idtype) { (void)idtype; return OS_SUCCESS; }\nstatic int32 OS_TaskAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_QueueAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_BinSemAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_CountSemAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_MutexAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_ModuleAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_TimeBaseAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_TimerCbAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_FileAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_DirAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_FileSysAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_ConsoleAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_CondVarAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_NetworkAPI_Init(void) { return OS_SUCCESS; }\nstatic int32 OS_SocketAPI_Init(void) { return OS_SUCCESS; }\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /* If OSAL is already initialized, just return */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG_PROBE(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n    /* For the purposes of this test harness we always set DebugLevel */\n    OS_SharedGlobalVars.DebugLevel = 1;\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG_PROBE(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG_PROBE(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /* Confirm that somewhere during initialization, the time variables got set to something valid */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG_PROBE(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = (uint32)OS_SharedGlobalVars.MicroSecPerTick * (uint32)OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG_PROBE(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Some part of init failed, so set global flag that says OSAL is in shutdown state. */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s scenario is plausible but the report as stated is not correct without additional information. MISRA C 2023 Rule 8.13 concerns pointer declarations: pointers that do not modify the referenced data should be declared to point to const-qualified types. The calls in OS_API_Init (e.g. OS_DEBUG(\"...\") and OS_DEBUG_PROBE(\"...\")) by themselves do not constitute a Rule 8.13 violation. A violation would exist only if the OS_DEBUG (or OS_DEBUG_PROBE) prototype is declared to take a non-const pointer (for example void OS_DEBUG(char *fmt, ...)); that non-const parameter declaration would be what violates Rule 8.13. In other words, the problem is in the function declaration, not in the call sites shown. If the implementation already declares the prototype as void OS_DEBUG(const char *fmt, ...), then there is no Rule 8.13 violation. Therefore the agent\u2019s claim is only correct conditional on an incorrect (non-const) prototype; as presented (without the prototype) the report is not justified."
}