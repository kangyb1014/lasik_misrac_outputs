{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the default label the code contains 'return OS_ERR_BAD_ADDRESS;' followed by 'break;'. The 'break' is unreachable because control has already returned from the function, so the 'break' statement can never be executed. This constitutes unreachable code and violates MISRA C 2023 Rule 2.1. (Fix: remove the unreachable 'break'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <arpa/inet.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/113.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: entry Addr=%p PortNum=%p\", (const void *)Addr, (const void *)PortNum);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: sa_family=%d\", Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: case AF_INET sa_in.sin_port=0x%04x\", (unsigned)sa_port);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: case AF_INET6 sa_in6.sin6_port=0x%04x\", (unsigned)sa_port);\n            break;\n#endif\n        default:\n            /* Log the invalid family and that we're returning the error. */\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: default - invalid family %d; returning OS_ERR_BAD_ADDRESS. Note: the following 'break' statement (as in original code) is unreachable.\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break; /* This break is unreachable because of the return above (kept to preserve original code structure). */\n    }\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: before ntohs sa_port=0x%04x\", (unsigned)sa_port);\n\n    *PortNum = ntohs(sa_port);\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: PortNum set to %u, returning OS_SUCCESS\", (unsigned)*PortNum);\n\n    return OS_SUCCESS;\n}\n"
}