{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_Lock_Impl:\nOS_BSP_GenericLinuxGlobalData_t OS_BSP_GenericLinuxGlobal\n...\n#define BSP_DEBUG(__VA_ARGS__) \n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\npthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The pthread_setcancelstate API has signature int pthread_setcancelstate(int, int *), i.e. it writes the previous state into the second argument. Passing &OS_BSP_GenericLinuxGlobal.AccessCancelState (an int lvalue) to that parameter is correct because the function needs a non-const int* to store the old state. A violation would occur if you passed the address of a const-qualified object (e.g. const int) or if the pointed-to object could be declared const because it is never modified; neither applies here."
}