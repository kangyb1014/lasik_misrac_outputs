{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (status < 0)' branch is unreachable: POSIX pthread_mutex_lock returns 0 on success or a positive error number on failure (never negative). Therefore the BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status)) statement cannot be reached; this constitutes unreachable code and violates MISRA C 2023 Rule 2.1. (Note: the BSP_DEBUG macro being empty does not affect reachability.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Lock_Impl code.\n",
  "test_code": "static void OS_BSP_Log_209_File(const char *event, int status)\n{\n    /* This helper writes a single-line probe to the file. It is intended\n     * to be called only after thread cancellation has been disabled to avoid\n     * introducing additional cancellation points before pthread_setcancelstate.\n     */\n    FILE *f = fopen(\"/tmp/logs/209.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Record the event, returned status, strerror for the status, the\n         * address of the global mutex and the calling thread id. This provides\n         * evidence about the path taken and the state returned by pthread_mutex_lock.\n         */\n        fprintf(f, \"OS_BSP_Lock_Impl: event=%s, status=%d, strerror=%s, mutex=%p, thread=%lu\\n\",\n                event,\n                status,\n                strerror(status),\n                (void *)&OS_BSP_GenericLinuxGlobal.AccessMutex,\n                (unsigned long)pthread_self());\n        fclose(f);\n    }\n}\n\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    /* Probe: record the returned status in-memory via BSP_DEBUG as original code\n     * did, then record to file only after disabling cancellation in the success path.\n     */\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n        /* Note: This branch is expected to be unreachable on typical POSIX systems\n         * because pthread_mutex_lock returns 0 on success and a positive error\n         * number on failure. We avoid doing file I/O here to not introduce new\n         * cancellation-point behaviour that differs from the original code.\n         */\n    }\n    else\n    {\n        /* Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        /* Safe to perform logging to file now that cancellation is disabled.\n         * This log records that the non-negative branch was taken and the exact\n         * status value returned by pthread_mutex_lock, providing evidence for\n         * whether the negative branch can be reached.\n         */\n        OS_BSP_Log_209_File(\"lock_acquired\", status);\n    }\n}\n"
}