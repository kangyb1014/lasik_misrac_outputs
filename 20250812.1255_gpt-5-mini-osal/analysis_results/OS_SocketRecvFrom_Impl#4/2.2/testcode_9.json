{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the platform defines EAGAIN and EWOULDBLOCK with the same numeric value (common on many POSIX systems), the second comparison 'errno == EWOULDBLOCK' is redundant. That comparison can be executed but its removal would not change behavior, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom_Impl:\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\n/* Probe logging utility: append messages to /tmp/logs/34.txt */\nstatic void OS_SocketRecvFrom_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    OS_SocketRecvFrom_Log(\"ENTRY: OS_SocketRecvFrom_Impl token=%p buffer=%p buflen=%zu RemoteAddr=%p timeout=%d\\n\",\n                          (const void *)token, buffer, buflen, (const void *)RemoteAddr, (int)timeout);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    OS_SocketRecvFrom_Log(\"impl lookup: impl=%p\\n\", (const void *)impl);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    OS_SocketRecvFrom_Log(\"addr setup: sa=%p addrlen=%u\\n\", (const void *)sa, (unsigned)addrlen);\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        OS_SocketRecvFrom_Log(\"selectable path: fd=%d selectable=%d waitflags=%d operation=0x%08x\\n\",\n                              impl->fd, impl->selectable, waitflags, (unsigned)operation);\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        OS_SocketRecvFrom_Log(\"after select: return_code=%d operation=0x%08x\\n\", return_code, (unsigned)operation);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        OS_SocketRecvFrom_Log(\"non-selectable path: fd=%d selectable=%d timeout=%d waitflags=%d\\n\",\n                              impl->fd, impl->selectable, (int)timeout, waitflags);\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketRecvFrom_Log(\"not readable: operation=0x%08x => TIMEOUT\\n\", (unsigned)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            OS_SocketRecvFrom_Log(\"about to recvfrom: fd=%d buflen=%zu waitflags=%d sa=%p addrlen=%u\\n\",\n                                  impl->fd, buflen, waitflags, (const void *)sa, (unsigned)addrlen);\n\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            if (os_result < 0)\n            {\n                /*\n                 * Capture errno immediately to avoid any logging side-effects\n                 * changing the value of errno used in the subsequent decisions.\n                 */\n                int saved_errno = errno;\n\n                /* log numeric values to help reproduce equality of EAGAIN and EWOULDBLOCK */\n                OS_SocketRecvFrom_Log(\"recvfrom failed: os_result=%d saved_errno=%d (%s) EAGAIN=%d EWOULDBLOCK=%d\\n\",\n                                      os_result, saved_errno, strerror(saved_errno), (int)EAGAIN, (int)EWOULDBLOCK);\n\n                if (saved_errno == EAGAIN || saved_errno == EWOULDBLOCK)\n                {\n                    OS_SocketRecvFrom_Log(\"branch: QUEUE_EMPTY (errno matches EAGAIN/EWOULDBLOCK) saved_errno=%d\\n\",\n                                          saved_errno);\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_SocketRecvFrom_Log(\"branch: ERROR (other errno) saved_errno=%d (%s)\\n\", saved_errno, strerror(saved_errno));\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(saved_errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                OS_SocketRecvFrom_Log(\"recvfrom success: os_result=%d return_code=%d\\n\", os_result, return_code);\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                    OS_SocketRecvFrom_Log(\"RemoteAddr updated: ActualLength=%u\\n\", (unsigned)addrlen);\n                }\n            }\n        }\n    }\n\n    OS_SocketRecvFrom_Log(\"EXIT: OS_SocketRecvFrom_Impl return_code=%d\\n\", return_code);\n\n    return return_code;\n}\n"
}