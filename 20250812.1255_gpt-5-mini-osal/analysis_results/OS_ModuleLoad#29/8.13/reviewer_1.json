{
  "user_message": "An agent A claimed that the following OS_ModuleLoad code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleLoad.\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code casts a const-qualified pointer (const char *name) to a plain void * via (void *)name when calling OS_ObjectIdFindNextMatch. This discards the const qualifier and allows the callee or callback (e.g. OS_ObjectNameMatch) to receive a non-const pointer and potentially modify the pointed-to data. This violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef void *osal_id_t;\ntypedef struct\n{\n    int placeholder;\n} OS_object_token_t;\ntypedef struct\n{\n    uint32 flags;\n    char file_name[128];\n    int module_type;\n    char name[64];\n} OS_module_internal_record_t;\nextern int32 OS_TranslatePath(const char *filename, char *translated_path);\nextern int32 OS_ObjectIdAllocateNew(int type, const char *name, OS_object_token_t *token);\nextern int32 OS_ModuleLoad_Impl(OS_object_token_t *token, const char *translated_path);\nextern int32 OS_ObjectIdFinalizeNew(int32 return_code, OS_object_token_t *token, osal_id_t *id);\nstatic void OS_ModuleLoad_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/235.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb normal logic if logging fails. */\n    }\n\n    /* Timestamp each entry to help reconstruct control flow. */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)gmtime_r(&t, &tm_buf);\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%dT%H:%M:%SZ\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[256];\n    int32                        return_code = -1;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Log entry and parameter state */\n    OS_ModuleLoad_ProbeLog(\"Entered OS_ModuleLoad: module_id=%p, module_name=%p, filename=%p, flags=0x%08X\",\n                           (void *)module_id,\n                           (const void *)module_name,\n                           (const void *)filename,\n                           (unsigned)flags);\n\n    if (module_name != NULL)\n    {\n        /* Print up to a reasonable length to avoid very long messages */\n        char namebuf[128];\n        (void)strncpy(namebuf, module_name, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n        OS_ModuleLoad_ProbeLog(\"Parameter module_name contents: '%s'\", namebuf);\n    }\n    else\n    {\n        OS_ModuleLoad_ProbeLog(\"Parameter module_name is NULL\");\n    }\n\n    if (filename != NULL)\n    {\n        char filebuf[128];\n        (void)strncpy(filebuf, filename, sizeof(filebuf) - 1);\n        filebuf[sizeof(filebuf) - 1] = '\\0';\n        OS_ModuleLoad_ProbeLog(\"Parameter filename contents: '%s'\", filebuf);\n    }\n    else\n    {\n        OS_ModuleLoad_ProbeLog(\"Parameter filename is NULL\");\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    if (module_id == NULL)\n    {\n        return_code = -1; /* emulate pointer check failure */\n        OS_ModuleLoad_ProbeLog(\"module_id is NULL, returning %d\", (int)return_code);\n        return return_code;\n    }\n    if (module_name == NULL)\n    {\n        return_code = -2; /* emulate API name check failure */\n        OS_ModuleLoad_ProbeLog(\"module_name is NULL, returning %d\", (int)return_code);\n        return return_code;\n    }\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    OS_ModuleLoad_ProbeLog(\"After OS_TranslatePath: filename_status=%d, translated_path='%s'\",\n                           (int)filename_status,\n                           (translated_path[0] != '\\0') ? translated_path : \"\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_ModuleLoad_ProbeLog(\"Calling OS_ObjectIdAllocateNew with module_name pointer=%p\", (const void *)module_name);\n    return_code = OS_ObjectIdAllocateNew(0, module_name, &token);\n    OS_ModuleLoad_ProbeLog(\"Returned from OS_ObjectIdAllocateNew: return_code=%d, token=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == 0)\n    {\n        /* In the real code this would obtain the table entry for the token. Here use a local static. */\n        static OS_module_internal_record_t static_module;\n        module = &static_module;\n\n        /* Reset the table entry and save the name (emulating OS_OBJECT_INIT) */\n        (void)memset(module, 0, sizeof(*module));\n        if (module_name != NULL)\n        {\n            (void)strncpy(module->name, module_name, sizeof(module->name) - 1);\n            module->name[sizeof(module->name) - 1] = '\\0';\n        }\n\n        module->flags = flags; /* save user-supplied flags */\n\n        OS_ModuleLoad_ProbeLog(\"Module table entry initialized: module=%p, module->flags=0x%08X\",\n                               (void *)module,\n                               (unsigned)module->flags);\n\n        /*\n         * Check the statically-linked module list.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        OS_ModuleLoad_ProbeLog(\"Returned from OS_ModuleLoad_Static: return_code=%d\", (int)return_code);\n\n        if (return_code == 0)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n            OS_ModuleLoad_ProbeLog(\"Module marked as static: module->module_type=%d\", (int)module->module_type);\n        }\n        else\n        {\n            if (filename_status != 0)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n                OS_ModuleLoad_ProbeLog(\"Filename was not valid: filename_status=%d, setting return_code=%d\",\n                                       (int)filename_status, (int)return_code);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename ? filename : \"\", sizeof(module->file_name) - 1);\n                module->file_name[sizeof(module->file_name) - 1] = '\\0';\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                OS_ModuleLoad_ProbeLog(\"Stored module->file_name='%s', module->module_type=%d\", module->file_name, (int)module->module_type);\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                OS_ModuleLoad_ProbeLog(\"Calling OS_ModuleLoad_Impl with token=%p, translated_path='%s'\", (void *)&token, translated_path);\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n                OS_ModuleLoad_ProbeLog(\"Returned from OS_ModuleLoad_Impl: return_code=%d\", (int)return_code);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_ModuleLoad_ProbeLog(\"Finalizing new object with return_code=%d\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n        OS_ModuleLoad_ProbeLog(\"Returned from OS_ObjectIdFinalizeNew: final return_code=%d, module_id=%p\", (int)return_code, (void *)module_id);\n    }\n\n    OS_ModuleLoad_ProbeLog(\"Exiting OS_ModuleLoad with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the code as provided. The OS_ModuleLoad implementation shown does not perform a (void *) cast of the const char *module_name nor pass a const-qualified string to a callee that takes a plain non-const pointer. All visible calls either accept const char * (e.g. OS_ObjectIdAllocateNew in the test declaration) or copy the string into an internal buffer via strncpy (which expects a const source). The alleged cast to (void *)name when calling OS_ObjectIdFindNextMatch is not present in the supplied code. It could only be a real MISRA 8.13 violation if a macro or another function called from here (for example OS_OBJECT_INIT, OS_ObjectIdFindNextMatch, or related helpers) discards the const qualifier (by taking a non-const parameter or by an explicit cast). Those definitions were not provided, and the test harness the agent supplied failed to compile, so there is no evidence of the const-discarding cast. Conclusion: the report is incorrect based on the provided code. To confirm definitively, inspect the definitions of the macros and the prototypes/implementations of the object-table helpers (OS_OBJECT_INIT, OS_ObjectIdFindNextMatch/OS_ObjectNameMatch, etc.) to ensure they accept const-qualified pointers or do not cast away const."
}