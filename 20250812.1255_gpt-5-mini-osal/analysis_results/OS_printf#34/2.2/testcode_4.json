{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if-branch only invokes OS_DEBUG which is defined as an empty macro. When OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER the code executes a read/compare and then an empty macro expansion (no observable effect). Removing the entire branch (including the read/compare) would not change program behaviour in this project configuration, so the branch constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "#include <stdarg.h>\n#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe helper: append control-flow / state information to the evidence log.\n * This preserves original logic and only records observations to /tmp/logs/274.txt.\n */\nstatic void OS_printf_probe(const char *event, const char *fmt_string, int global_state, int printf_enabled, int actualsz)\n{\n    FILE *f = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t now = time(NULL);\n        fprintf(f, \"%ld: %s: GlobalState=%d, PrintfEnabled=%d, actualsz=%d, fmt='%s'\\n\",\n                (long)now,\n                (event != NULL) ? event : \"(null)\",\n                global_state,\n                printf_enabled,\n                actualsz,\n                (fmt_string != NULL) ? fmt_string : \"(null)\");\n        fclose(f);\n    }\n}\n\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    /* Record entry state (actualsz unknown yet -> use -1) */\n    OS_printf_probe(\"entry\", String, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, -1);\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Log that we took the uninitialized branch and the observed state. */\n        OS_printf_probe(\"uninitialized_branch\", String, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, -1);\n\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n\n        /* Record that the branch executed (after OS_DEBUG) */\n        OS_printf_probe(\"uninitialized_branch_after_debug\", String, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, -1);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Log that we will attempt to format and print */\n        OS_printf_probe(\"format_and_write_enter\", String, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, -1);\n\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /* Record the size actually written and final buffer state */\n        OS_printf_probe(\"format_and_write_exit\", msg_buffer, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, actualsz);\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n    else\n    {\n        /* If PrintfEnabled is false, log that event for evidence */\n        OS_printf_probe(\"printf_disabled\", String, OS_SharedGlobalVars.GlobalState, (int)OS_SharedGlobalVars.PrintfEnabled, -1);\n    }\n}\n"
}