{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nBUGCHECK_VOID(String != NULL) expands to BUGCHECK(String != NULL,). If BUGCHECK is a no-op in the build (for example defined empty or to ((void)0) in release builds), then the statement performs no runtime action and its removal would not change program behaviour \u2014 this constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If, instead, BUGCHECK expands to a runtime check that logs/aborts on failure, then removing it would affect behaviour and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state for the BUGCHECK_VOID(String != NULL)\n * scenario. These functions append human-readable traces to /tmp/logs/274.txt.\n * They intentionally do not alter program control flow or the logic of OS_printf.\n */\nstatic void OS_printf_probe_log(const char *stage, const char *String)\n{\n    FILE *fp = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Print pointer, a short preview of the string (if any), and relevant global state */\n    fprintf(fp, \"OS_printf: %s: String_ptr=%p\", stage, (const void *)String);\n\n    if (String != NULL)\n    {\n        /* Print only a short preview to avoid massive logs */\n        char preview[129];\n        size_t len = strlen(String);\n        if (len > sizeof(preview) - 1)\n            len = sizeof(preview) - 1;\n        memcpy(preview, String, len);\n        preview[len] = '\\0';\n        fprintf(fp, \", String_preview=\\\"%s\\\"\", preview);\n    }\n    else\n    {\n        fprintf(fp, \", String_preview=(null)\");\n    }\n\n    /* Guarded use of OS_SharedGlobalVars members in case they are not defined at link-time\n     * (they should be available in the original compilation unit). Casts keep format predictable.\n     */\n    fprintf(fp, \", GlobalState=%u, PrintfEnabled=%d, PrintfConsoleId=%d\\n\",\n            (unsigned)OS_SharedGlobalVars.GlobalState,\n            (int)OS_SharedGlobalVars.PrintfEnabled,\n            (int)OS_SharedGlobalVars.PrintfConsoleId);\n\n    fclose(fp);\n}\n\nstatic void OS_printf_probe_console_write(const char *msg, int actualsz, int consoleid)\n{\n    FILE *fp = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    int preview_len = actualsz;\n    if (preview_len > 120)\n        preview_len = 120;\n\n    fprintf(fp, \"OS_printf: console_write: consoleid=%d, actualsz=%d, msg_preview=\\\"%.*s\\\"\\n\",\n            consoleid, actualsz, preview_len, (msg != NULL) ? msg : \"(null)\");\n\n    fclose(fp);\n}\n\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    /* Probe BEFORE the BUGCHECK to capture the call-site state even if BUGCHECK aborts/handles the error. */\n    OS_printf_probe_log(\"pre-BUGCHECK\", String);\n\n    BUGCHECK_VOID(String != NULL)\n\n    /* Probe AFTER the BUGCHECK to demonstrate whether execution continues past the macro.\n     * If BUGCHECK is a no-op in the build then both pre- and post- logs will appear.\n     * If BUGCHECK performs a runtime abort on failure then only the pre- log will appear.\n     */\n    OS_printf_probe_log(\"post-BUGCHECK\", String);\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /* Probe the prepared buffer and the console id before writing */\n        OS_printf_probe_console_write(msg_buffer, actualsz, OS_SharedGlobalVars.PrintfConsoleId);\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n"
}