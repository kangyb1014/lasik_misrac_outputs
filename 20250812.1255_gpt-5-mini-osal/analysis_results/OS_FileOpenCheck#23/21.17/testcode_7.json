{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(stream->stream_name, Filename) can read past the bounds of the provided buffers. OS_CHECK_POINTER(Filename) only checks for NULL and does not guarantee that Filename is NUL-terminated or that stream->stream_name contains a terminating '\\0' (e.g. if the name was written earlier occupying all OS_MAX_PATH_LEN bytes without a terminator). In those cases strcmp will continue accessing memory beyond the array bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/191.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable diagnostics to /tmp/logs/191.txt */\nstatic void os_log_probe(const OS_object_iter_t *iter, const OS_stream_internal_record_t *stream, const char *Filename)\n{\n    FILE *f = fopen(\"/tmp/logs/191.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Basic pointers/ids */\n    fprintf(f, \"--- OS_FileOpenCheck probe ---\\n\");\n    fprintf(f, \"iter.token = %llu\\n\", (unsigned long long)iter->token);\n    fprintf(f, \"stream ptr = %p\\n\", (void *)stream);\n    fprintf(f, \"stream->socket_domain = %d\\n\", (int)stream->socket_domain);\n    fprintf(f, \"Filename ptr = %p\\n\", (const void *)Filename);\n\n    /* Inspect stream->stream_name safely using the compile-time size of the member.\n       sizeof does not evaluate the operand, so this is safe even if the member is an array.\n       We only read up to that many bytes from the actual object (which matches how the\n       implementation should have allocated the member when it is an array). */\n    size_t name_bytes = sizeof(stream->stream_name);\n    fprintf(f, \"stream_name member sizeof = %zu\\n\", name_bytes);\n\n    /* Scan for NUL within the member bounds and print the first bytes up to that bound. */\n    size_t i;\n    int nul_found = 0;\n    fprintf(f, \"stream_name contents (index: value):\\n\");\n    for (i = 0; i < name_bytes; ++i)\n    {\n        unsigned char c = (unsigned char)stream->stream_name[i];\n        if (c == '\\0')\n        {\n            fprintf(f, \"  [%zu] = '\\0'\\n\", i);\n            nul_found = 1;\n            break;\n        }\n        if (c >= 32 && c < 127)\n        {\n            fprintf(f, \"  [%zu] = '%c' (0x%02x)\\n\", i, (char)c, c);\n        }\n        else\n        {\n            fprintf(f, \"  [%zu] = 0x%02x\\n\", i, c);\n        }\n    }\n    if (!nul_found)\n    {\n        fprintf(f, \"  [no NUL found within member bounds (possible unterminated name)]\\n\");\n    }\n\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        /* Preserve original short-circuit evaluation: only examine stream_name when\n           socket_domain indicates an open file descriptor (i.e. same condition as before).\n           Insert probe logging immediately before the strcmp so the logs reflect the\n           exact state that leads to the strcmp call. This avoids introducing extra\n           dereferences that weren't present in the original code. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log state that is relevant to reproducing the reported violation. */\n            os_log_probe(&iter, stream, Filename);\n\n            if (strcmp(stream->stream_name, Filename) == 0)\n            {\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}