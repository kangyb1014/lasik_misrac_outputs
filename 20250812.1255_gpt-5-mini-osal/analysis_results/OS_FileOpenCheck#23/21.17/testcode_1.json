{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro only checks that Filename is non-NULL; it does not ensure Filename points to a NUL-terminated character array or that the object is large enough for strcmp to read. For example, if a caller passes a pointer to a non-NUL-terminated buffer (e.g. char buf[4] = {'a','b','c','d'}; OS_FileOpenCheck(buf);) or a pointer into a smaller object without a terminating '\\0', the subsequent strcmp(stream->stream_name, Filename) can read past the bounds of the object referenced by Filename, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/191.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends a line to the specified log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/191.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, silently continue to preserve program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter state */\n    probe_log(\"OS_FileOpenCheck ENTER: Filename=%p\", (const void *)Filename);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator and stream metadata (do not dereference string pointers) */\n        probe_log(\"ITER: token=%u, stream_ptr=%p, stream_name_ptr=%p, socket_domain=%d\",\n                  (unsigned)iter.token,\n                  (const void *)stream,\n                  (const void *)(stream ? stream->stream_name : NULL),\n                  (int)(stream ? stream->socket_domain : -1));\n\n        /* Log that we are about to compare names. This log is critical: if the program\n         * crashes inside strcmp due to Filename not being NUL-terminated or pointing\n         * past its object's bounds, the last log will show the parameters used for the call. */\n        probe_log(\"ABOUT_TO_STRCMP: stream_name=%p, Filename=%p\",\n                  (const void *)(stream ? stream->stream_name : NULL),\n                  (const void *)Filename);\n\n        /* Preserve original logic: perform the strcmp and record its result. */\n        {\n            int cmp_result = 0;\n\n            /* Perform the compare as in the original code. If this call reads out-of-bounds\n             * it may crash; the logs above will help reproduce and diagnose the scenario. */\n            if (stream != NULL)\n            {\n                cmp_result = strcmp(stream->stream_name, Filename);\n                probe_log(\"STRCMP_RESULT: %d (stream_name=%p, Filename=%p)\",\n                          cmp_result,\n                          (const void *)stream->stream_name,\n                          (const void *)Filename);\n            }\n            else\n            {\n                probe_log(\"STRCMP_SKIPPED: stream is NULL\");\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp_result == 0))\n            {\n                probe_log(\"MATCH_FOUND: token=%u, stream_name=%p\", (unsigned)iter.token, (const void *)stream->stream_name);\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_FileOpenCheck EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}