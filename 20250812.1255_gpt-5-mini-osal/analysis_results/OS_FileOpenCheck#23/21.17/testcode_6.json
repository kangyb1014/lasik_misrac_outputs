{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe strcmp(stream->stream_name, Filename) call can read past the end of either operand because neither side is guaranteed to be NUL-terminated or limited to its buffer length. OS_CHECK_POINTER only checks Filename != NULL; it does not ensure the caller-supplied Filename is a valid NUL-terminated string nor does the shown code guarantee stream->stream_name contains a terminating '\\0' (for example if it was previously filled with strncpy without appending a NUL). In such cases strcmp will continue scanning past the bounds of stream->stream_name or past the caller's Filename buffer until a NUL is found, causing an out-of-bounds access. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/191.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "int32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open probe log. It's safe to attempt to open the log file; if it fails the function will continue normally. */\n    log = fopen(\"/tmp/logs/191.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck ENTER: Filename=%p\\n\", (void *)Filename);\n        fflush(log);\n    }\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (log)\n        {\n            /* Log iterator token and stream pointers; do not dereference string contents here to avoid introducing new out-of-bounds reads. */\n            fprintf(log, \"ITER token=%u stream_ptr=%p stream_name_ptr=%p socket_domain=%d\\n\",\n                    (unsigned)iter.token,\n                    (void *)stream,\n                    (void *)stream->stream_name,\n                    (int)stream->socket_domain);\n            fflush(log);\n        }\n\n        /* Preserve original logic: only consider streams in the invalid socket domain\n         * The strcmp call from the original code is preserved; additional logging wraps it\n         * but does not alter the decision semantics. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            int cmp_result = 0;\n\n            if (log)\n            {\n                fprintf(log, \"About to call strcmp(stream->stream_name, Filename) with stream_name=%p Filename=%p\\n\",\n                        (void *)stream->stream_name, (void *)Filename);\n                fflush(log);\n            }\n\n            /* ORIGINAL UNSAFE CALL (preserved): Potentially reads past the end of either operand if not NUL-terminated. */\n            cmp_result = strcmp(stream->stream_name, Filename);\n\n            if (log)\n            {\n                fprintf(log, \"strcmp returned %d for token=%u\\n\", cmp_result, (unsigned)iter.token);\n                fflush(log);\n            }\n\n            if (cmp_result == 0)\n            {\n                if (log)\n                {\n                    fprintf(log, \"MATCH found: token=%u stream_name_ptr=%p Filename=%p\\n\",\n                            (unsigned)iter.token,\n                            (void *)stream->stream_name,\n                            (void *)Filename);\n                    fflush(log);\n                }\n\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}