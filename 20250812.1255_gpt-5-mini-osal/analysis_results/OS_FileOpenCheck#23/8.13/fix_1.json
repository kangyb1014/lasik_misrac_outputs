{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/187.txt\", \"a\");\n\n    /* Log entry and input parameter (avoid dereference if NULL) */\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck called with Filename=%s\\n\", (Filename != NULL) ? Filename : \"(null)\");\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: log iterator token and stream state */\n        if (log)\n        {\n            fprintf(log, \"Iterator token=%u, stream=%p, socket_domain=%d, stream_name=%s\\n\",\n                    (unsigned)iter.token,\n                    (void *)stream,\n                    (int)stream->socket_domain,\n                    (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the strcmp result and the match */\n            if (log)\n            {\n                fprintf(log, \"Match: stream->stream_name == Filename (\\\"%s\\\") for token=%u\\n\",\n                        stream->stream_name, (unsigned)iter.token);\n                fflush(log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* Log no-match decision (explicitly record why) */\n            if (log)\n            {\n                int cmp = strcmp(stream->stream_name, Filename);\n                fprintf(log, \"No match for token=%u: socket_domain=%d, strcmp=%d\\n\",\n                        (unsigned)iter.token, (int)stream->socket_domain, cmp);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Destroying iterator and returning code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fclose(log);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp6z1tpi7i/src/src/os/shared/src/osapi-file.c: In function 'OS_FileOpenCheck':\n/tmp/tmp6z1tpi7i/src/src/os/shared/src/osapi-file.c:551:21: error: aggregate value used where an integer was expected\n  551 |                     (unsigned)iter.token,\n      |                     ^\n/tmp/tmp6z1tpi7i/src/src/os/shared/src/osapi-file.c:564:25: error: aggregate value used where an integer was expected\n  564 |                         stream->stream_name, (unsigned)iter.token);\n      |                         ^~~~~~\n/tmp/tmp6z1tpi7i/src/src/os/shared/src/osapi-file.c:578:25: error: aggregate value used where an integer was expected\n  578 |                         (unsigned)iter.token, (int)stream->socket_domain, cmp);\n      |                         ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "int32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/187.txt\", \"a\");\n\n    /* Log entry and input parameter (avoid dereference if NULL) */\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck called with Filename=%s\\n\", (Filename != NULL) ? Filename : \"(null)\");\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: log iterator token and stream state */\n        if (log)\n        {\n            /* iter.token is an aggregate type in some builds; print its address instead of casting to integer */\n            fprintf(log, \"Iterator token=%p, stream=%p, socket_domain=%d, stream_name=%s\\n\",\n                    (void *)&iter.token,\n                    (void *)stream,\n                    (int)stream->socket_domain,\n                    (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the strcmp result and the match */\n            if (log)\n            {\n                fprintf(log, \"Match: stream->stream_name == Filename (\\\"%s\\\") for token=%p\\n\",\n                        stream->stream_name, (void *)&iter.token);\n                fflush(log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* Log no-match decision (explicitly record why) */\n            if (log)\n            {\n                int cmp = strcmp(stream->stream_name, Filename);\n                fprintf(log, \"No match for token=%p: socket_domain=%d, strcmp=%d\\n\",\n                        (void *)&iter.token, (int)stream->socket_domain, cmp);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Destroying iterator and returning code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fclose(log);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The build errors were caused by treating iter.token as an integer (casting to unsigned) while in some builds it's an aggregate type. I changed the fprintf calls to print the token's address using %p and (void *)&iter.token instead of casting it to an integer. This avoids invalid casts while preserving the original logging and logic of OS_FileOpenCheck."
}