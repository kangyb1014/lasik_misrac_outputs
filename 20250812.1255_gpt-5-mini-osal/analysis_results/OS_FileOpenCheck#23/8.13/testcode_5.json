{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer variable 'stream' is only used for read-only access (checking stream->socket_domain and comparing stream->stream_name via strcmp) and is assigned from the global OS_stream_table. It could be declared as const OS_stream_internal_record_t *stream; therefore it should be const-qualified per MISRA C 2023 Rule 8.13. Change the declaration to: const OS_stream_internal_record_t *stream;\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append logs to /tmp/logs/187.txt */\nstatic void OS_FileOpenCheck_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int                          iter_count = 0;\n\n    /* Log entry and parameter state */\n    OS_FileOpenCheck_log(\"ENTRY: OS_FileOpenCheck called, Filename=%s, Filename_ptr=%p\",\n                         (Filename != NULL) ? Filename : \"(null)\", (void *)Filename);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iter_count++;\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log state of the retrieved stream record */\n        OS_FileOpenCheck_log(\"ITER %d: stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\"\",\n                             iter_count,\n                             (void *)stream,\n                             (int)stream->socket_domain,\n                             (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            OS_FileOpenCheck_log(\"MATCH at ITER %d: stream_ptr=%p matched Filename=\\\"%s\\\"\",\n                                 iter_count,\n                                 (void *)stream,\n                                 Filename);\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* Log why it didn't match (socket domain or name mismatch) */\n            if (stream->socket_domain != OS_SocketDomain_INVALID)\n            {\n                OS_FileOpenCheck_log(\"NO MATCH at ITER %d: socket_domain=%d (not OS_SocketDomain_INVALID)\",\n                                     iter_count,\n                                     (int)stream->socket_domain);\n            }\n            else\n            {\n                int cmp = strcmp(stream->stream_name, Filename);\n                OS_FileOpenCheck_log(\"NO MATCH at ITER %d: name_cmp=%d (stream_name=\\\"%s\\\", Filename=\\\"%s\\\")\",\n                                     iter_count,\n                                     cmp,\n                                     (stream->stream_name != NULL) ? stream->stream_name : \"(null)\",\n                                     Filename);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_log(\"EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}