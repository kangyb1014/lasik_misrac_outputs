{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement ++console->OverflowEvents; is a write-only update to a counter. In the provided code snippets there is no observable use (no reads, no reporting, no export) of console->OverflowEvents, so the increment has no effect on program behaviour. Therefore this operation qualifies as dead code under MISRA C 2023 Rule 2.2. If, however, OverflowEvents is read elsewhere (e.g. logged, inspected, or used in decision logic outside the shown excerpts), then the increment would be live and the rule would not be violated. Recommended fixes: remove the increment if the counter is unused, or ensure the counter is observed/used (or documented as intentionally kept for external inspection) so the write has an observable effect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <unistd.h>\n#include <stddef.h>\n#include <sys/types.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry into the function with initial state */\n    log_probe(\"OS_BSP_ConsoleOutput_Impl ENTER: Str=%p DataLen=%zu\", (const void *)Str, DataLen);\n\n    while (DataLen > 0)\n    {\n        /* prepare a short sample (up to 64 bytes) for logging */\n        {\n            size_t sample_len = (DataLen < 64u) ? DataLen : 64u;\n            char sample[65];\n            if (sample_len > 0u)\n            {\n                memcpy(sample, Str, sample_len);\n                sample[sample_len] = '\\0';\n            }\n            else\n            {\n                sample[0] = '\\0';\n            }\n            log_probe(\"Attempting write: addr=%p DataLen=%zu sample_len=%zu sample=\\\"%s\\\"\",\n                      (const void *)Str, DataLen, sample_len, sample);\n        }\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        log_probe(\"write returned: WriteLen=%zd\", WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            log_probe(\"write failed or returned 0; breaking out. Remaining DataLen=%zu\", DataLen);\n            break;\n        }\n\n        Str += WriteLen;\n        DataLen -= (size_t)WriteLen;\n\n        log_probe(\"After update: new Str=%p Remaining DataLen=%zu\", (const void *)Str, DataLen);\n    }\n\n    log_probe(\"OS_BSP_ConsoleOutput_Impl EXIT: final Str=%p DataLen=%zu\", (const void *)Str, (size_t)0);\n}\n"
}