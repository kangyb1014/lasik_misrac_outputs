{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'DataLen' (a value parameter) is modified by the statement 'DataLen -= WriteLen;'. MISRA C 2023 Rule 17.8 forbids modifying function parameters. This is a violation \u2014 the decrement should be applied to a local copy (e.g. 'size_t remaining = DataLen; remaining -= WriteLen;') rather than to the parameter itself.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/165.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe helper: append a single log entry to /tmp/logs/165.txt.\n * Keeps logging simple to avoid changing program behavior.\n */\nstatic void OS_BSP_LogProbe(const char *label, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    FILE *f = fopen(\"/tmp/logs/165.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    if (WriteLen >= 0)\n    {\n        fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd\\n\", label, (const void *)Str, DataLen, WriteLen);\n    }\n    else\n    {\n        /* Use -1 to indicate no write attempted yet */\n        int err = errno;\n        fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd, errno=%d (%s)\\n\",\n                label, (const void *)Str, DataLen, WriteLen, err, strerror(err));\n    }\n\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    OS_BSP_LogProbe(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* Log before attempting to write */\n        OS_BSP_LogProbe(\"BEFORE_WRITE\", Str, DataLen, -1);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log result of write */\n        OS_BSP_LogProbe(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* Log failure and reason, then stop. */\n            OS_BSP_LogProbe(\"WRITE_FAILED\", Str, DataLen, WriteLen);\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Log state after consuming bytes */\n        OS_BSP_LogProbe(\"ITER_END\", Str, DataLen, WriteLen);\n    }\n\n    /* Log final state */\n    OS_BSP_LogProbe(\"EXIT\", Str, DataLen, -1);\n}\n"
}