{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'add_response_header_connection': {'callees': ['MHD_get_response_element_n_'], 'callers': ['MHD_add_response_header']}, 'MHD_get_response_element_n_': {'callees': [], 'callers': ['add_response_header_connection', 'del_response_header_connection', 'MHD_add_response_header', 'MHD_del_response_header']}, 'MHD_add_response_header': {'callees': ['MHD_str_equal_caseless_', 'add_response_header_connection', 'add_response_entry', 'MHD_get_response_element_n_'], 'callers': ['MHD_create_response_for_upgrade', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'add_session_cookie', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'mark_as_html', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_upgrade_required', 'ahc_cb', 'send_page']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. A pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Response",
    "struct MHD_HTTP_Res_Header",
    "MHD_get_response_element_n_",
    "MHD_str_remove_token_caseless_",
    "MHD_str_remove_tokens_caseless_",
    "MHD_HTTP_HEADER_CONNECTION",
    "MHD_STATICSTR_LEN_",
    "strchr",
    "memcmp",
    "strlen",
    "memcpy",
    "memmove",
    "malloc",
    "free",
    "MHD_calloc_",
    "_MHD_insert_header_first",
    "MHD_HEADER_KIND",
    "MHD_RAF_HAS_CONNECTION_HDR",
    "MHD_RAF_HAS_CONNECTION_CLOSE"
  ],
  "explanation": "For checking MISRA C const-pointer requirements you must know the exact types and const-qualification of all pointers and of the functions that receive them, plus the struct fields those pointers are stored into or read from. Brief reasons per symbol:\n\n- struct MHD_Response: needed to know the types/const-qualification of response->flags_auto and response->upgrade_handler and the exact type of the response object used when inserting/updating headers.\n- struct MHD_HTTP_Res_Header: required to see the declared types of hdr->value, hdr->header, hdr->value_size, hdr->header_size and whether hdr->value/header are char * or const char *, to detect assignments that drop or add const qualification.\n- MHD_get_response_element_n_: prototype (parameter and return types) is needed to know whether the function takes a const key (const char *) and whether it returns a pointer to a header structure (and whether it can modify the passed key), which affects const-qualification analysis for key and hdr pointers.\n- MHD_str_remove_token_caseless_: prototype is required to determine whether it modifies the source 'value' argument or only reads it and writes to the destination buffer; that decides if passing 'const char *value' to it is allowed under MISRA rules.\n- MHD_str_remove_tokens_caseless_: same as above for the variant that mutates the buffer; need parameter constness to know whether buf (char *) usage and any pointer aliasing is safe.\n- MHD_HTTP_HEADER_CONNECTION: the symbol defines key\u2019s storage (string literal or not) and its type (const char[] vs char[]) \u2014 necessary to check whether 'const char *key' is appropriately qualified and whether copying/assigning it violates const rules.\n- MHD_STATICSTR_LEN_: macro semantics (how it computes length) matter to know whether any casts are hidden there or if it's used in contexts that affect pointer/const usage (e.g. when computing sizes for memcpy of string literals).\n- strchr: standard prototype (const char *, int) documents it does not modify the pointed string; needed to prove uses of 'value' with strchr do not require removing const.\n- memcmp: prototype (const void *, const void *, size_t) shows it does not modify its arguments; used in an assertion comparing hdr->value to a literal \u2014 relevant to constness of hdr->value.\n- strlen: prototype (const char *) shows it does not modify its argument; used on 'value' to compute length \u2014 relevant to whether passing const is acceptable.\n- memcpy: prototype (void *dest, const void *src, size_t) documents the src is const-qualified; needed to check copying from 'key' (possibly const) into newly allocated header storage is compliant.\n- memmove: prototype (void *dest, const void *src, size_t) likewise documents src constness for moves used when inserting \"close, \".\n- malloc / free: standard prototypes show ownership and mutability of allocated buffers (malloc returns void * / char *), required to reason about assigning buffers to hdr->value (non-const) and whether const must be removed.\n- MHD_calloc_: prototype/behavior like calloc is needed for the allocation of new_hdr and to confirm returned pointer types for assignment to struct fields.\n- _MHD_insert_header_first: prototype is required to know whether it takes ownership of new_hdr and whether it expects any const-qualification on header/value fields (i.e. whether it will modify them later).\n- MHD_HEADER_KIND: value/type of header kind is needed to understand which header struct fields and conventions apply (not strictly pointer const, but used when creating header entries).\n- MHD_RAF_HAS_CONNECTION_HDR and MHD_RAF_HAS_CONNECTION_CLOSE: definitions (types/values) are necessary to understand how flags_auto is used and whether any implicit casts between pointer/integers occur (mainly for completeness of response structure analysis).\n\nIn short: you need struct field declarations and the prototypes of all non-standard/utility functions called with pointer arguments (and the relevant standard-library prototypes) so you can determine whether pointers are declared const where possible and whether any called function modifies objects through those pointers (which would forbid const qualification)."
}