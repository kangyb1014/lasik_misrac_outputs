{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/549.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of create_response as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function create_response:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_POST \"POST\"\n</additional code>\nJudge whether the above create_response code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "create_response reassigns pointer parameters 'method' and 'url'. Specifically, the code contains 'method = MHD_HTTP_METHOD_GET;' and 'url = request->post_url;'. These statements modify the pointer parameters themselves (the pointer variables), which violates MISRA C 2023 Rule 17.8: a function parameter shall not be modified.",
  "test_code": "static enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  FILE *log = fopen(\"/tmp/logs/549.txt\", \"a\");\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (log != NULL)\n  {\n    fprintf(log, \"ENTER: url=%s method=%s upload_data_size=%zu req_cls=%p\\n\",\n            (url != NULL) ? url : \"(null)\",\n            (method != NULL) ? method : \"(null)\",\n            (upload_data_size != NULL) ? *upload_data_size : (size_t)0,\n            (void *) req_cls);\n    fflush(log);\n  }\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"State: request is NULL, allocating new Request\\n\");\n      fflush(log);\n    }\n\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      if (log != NULL)\n      {\n        fprintf(log, \"ERROR: calloc failed: %s\\n\", strerror (errno));\n        fclose(log);\n      }\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n\n    if (log != NULL)\n    {\n      fprintf(log, \"Allocated request=%p, stored in *req_cls=%p\\n\",\n              (void *) request, (void *) *req_cls);\n      fflush(log);\n    }\n\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      if (log != NULL)\n      {\n        fprintf(log, \"Method is POST: setting up post processor\\n\");\n        fflush(log);\n      }\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        if (log != NULL)\n        {\n          fprintf(log, \"ERROR: failed to create post processor for url=%s\\n\",\n                  (url != NULL) ? url : \"(null)\");\n          fclose(log);\n        }\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    if (log != NULL)\n      fclose(log);\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"State: session is NULL, obtaining session\\n\");\n      fflush(log);\n    }\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      if (log != NULL)\n      {\n        fprintf(log, \"ERROR: failed to get session for url=%s\\n\",\n                (url != NULL) ? url : \"(null)\");\n        fclose(log);\n      }\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (log != NULL)\n    {\n      fprintf(log, \"Processing POST: request=%p pp=%p upload_size=%zu\\n\",\n              (void *) request, (void *) request->pp,\n              (upload_data_size != NULL) ? *upload_data_size : (size_t)0);\n      fflush(log);\n    }\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      if (log != NULL)\n        fclose(log);\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      if (log != NULL)\n      {\n        fprintf(log, \"POST incomplete: remaining upload_data_size=%zu, clearing and returning MHD_YES\\n\",\n                *upload_data_size);\n        fflush(log);\n      }\n      *upload_data_size = 0;\n      if (log != NULL)\n        fclose(log);\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n\n    if (log != NULL)\n    {\n      fprintf(log, \"POST processing done: will fake GET and possibly change url if post_url present\\n\");\n      fflush(log);\n    }\n\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n\n    if (log != NULL)\n    {\n      fprintf(log, \"AFTER_MOD: method now=%s url now=%s\\n\",\n              (method != NULL) ? method : \"(null)\",\n              (url != NULL) ? url : \"(null)\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n\n    if (log == NULL)\n      log = fopen(\"/tmp/logs/549.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"Dispatching to page index=%u page_url=%s\\n\",\n              i, (pages[i].url != NULL) ? pages[i].url : \"(null)\");\n      fflush(log);\n      fclose(log);\n    }\n\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n\n  if (log != NULL)\n  {\n    log = fopen(\"/tmp/logs/549.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"Unsupported method, queued MHD_HTTP_NOT_ACCEPTABLE, ret=%d\\n\", (int) ret);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return ret;\n}\n"
}