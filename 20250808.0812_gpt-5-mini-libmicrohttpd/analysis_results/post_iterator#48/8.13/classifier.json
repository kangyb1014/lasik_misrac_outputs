{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/387.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of post_iterator as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function post_iterator:\nstruct Session\n{\n  /**\n   * We keep all sessions in a linked list.\n   */\n  struct Session *next;\n\n  /**\n   * Unique ID for this session.\n   */\n  char sid[33];\n\n  /**\n   * Reference counter giving the number of connections\n   * currently using this session.\n   */\n  unsigned int rc;\n\n  /**\n   * Time when this session was last active.\n   */\n  time_t start;\n\n  /**\n   * String submitted via form.\n   */\n  char value_1[64];\n\n  /**\n   * Another value submitted via form.\n   */\n  char value_2[64];\n\n}\n...\nstruct Request\n{\n\n  /**\n   * Associated session.\n   */\n  struct Session *session;\n\n  /**\n   * Post processor handling form data (IF this is\n   * a POST request).\n   */\n  struct MHD_PostProcessor *pp;\n\n  /**\n   * URL to serve in response to this POST (if this request\n   * was a 'POST')\n   */\n  const char *post_url;\n\n}\n</additional code>\nJudge whether the above post_iterator code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The local pointer 'request' is declared as a non-const pointer (struct Request *request = cls;) even though post_iterator does not modify the Request object itself. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. const struct Request *request). Thus the code violates Rule 8.13.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <time.h>\n\n/* Minimal definitions to allow this translation unit to compile. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nstruct MHD_PostProcessor;\n\nstruct Session\n{\n  struct Session *next;\n  char sid[33];\n  unsigned int rc;\n  time_t start;\n  char value_1[64];\n  char value_2[64];\n};\n\nstruct Request\n{\n  struct Session *session;\n  struct MHD_PostProcessor *pp;\n  const char *post_url;\n};\n\n/* Helper probe function that logs control path and state to a file. */\nstatic void\nlog_probe (const char *event,\n           const char *key,\n           const struct Session *session,\n           uint64_t off,\n           size_t size)\n{\n  FILE *fp = fopen (\"/tmp/logs/387.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return; /* Best-effort logging only. */\n  }\n\n  fprintf (fp, \"event=%s key=%s off=%\" PRIu64 \" size=%zu sid=%s\\n\",\n           (event != NULL) ? event : \"(null)\",\n           (key != NULL) ? key : \"(null)\",\n           off,\n           size,\n           (session != NULL) ? session->sid : \"(null)\");\n\n  if (session != NULL)\n  {\n    /* Print snapshots of the current buffers (truncated to be safe). */\n    session->value_1[sizeof session->value_1 - 1] = '\\0';\n    session->value_2[sizeof session->value_2 - 1] = '\\0';\n    fprintf (fp, \"  value_1=\\\"%s\\\"\\n  value_2=\\\"%s\\\"\\n\",\n             session->value_1,\n             session->value_2);\n  }\n  fclose (fp);\n}\n\n/* The original post_iterator function, preserved as much as possible.\n   Note: 'request' is intentionally a non-const pointer here which is the\n   subject of the Rule 8.13 violation: it could be declared pointer-to-const\n   because the Request object is not modified by this function. */\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls; /* <-- non-const pointer that could be const */\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  log_probe (\"ENTER\", key, session, off, size);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    log_probe (\"DONE\", key, session, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      log_probe (\"V1_DISCARD_EXTRA\", key, session, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    log_probe (\"V1_WRITTEN\", key, session, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      log_probe (\"V2_DISCARD_EXTRA\", key, session, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    log_probe (\"V2_WRITTEN\", key, session, off, size);\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  log_probe (\"UNSUPPORTED\", key, session, off, size);\n  return MHD_YES;\n}\n"
}