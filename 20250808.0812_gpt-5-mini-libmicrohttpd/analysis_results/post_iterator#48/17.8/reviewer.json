{
  "user_message": "An agent A claimed that the following post_iterator code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of post_iterator.\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function assigns to the parameter 'size' (size = (size_t)(...)) to crop extra data before calling memcpy. Modifying the function parameter variable 'size' violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_state(const char *event, const char *key, uint64_t off, size_t size, const struct Session *session)\n{\n  FILE *f = fopen(\"/tmp/logs/389.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  fprintf(f, \"EVENT: %s\\n\", event);\n  if (key != NULL)\n  {\n    fprintf(f, \"  key=%s\\n\", key);\n  }\n  fprintf(f, \"  off=%llu size=%zu\\n\", (unsigned long long) off, size);\n  if (session != NULL)\n  {\n    fprintf(f, \"  session.sid=%s\\n\", session->sid);\n    fprintf(f, \"  session.value_1='%s'\\n\", session->value_1);\n    fprintf(f, \"  session.value_2='%s'\\n\", session->value_2);\n  }\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               int kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry into the function */\n  log_state(\"enter\", key, off, size, session);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    log_state(\"done_key\", key, off, size, session);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    log_state(\"v1_branch_start\", key, off, size, session);\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      log_state(\"v1_discard_extra\", key, off, size, session);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n    {\n      /* Violation scenario: the parameter 'size' is modified to crop extra data. */\n      log_state(\"v1_crop_before\", key, off, size, session);\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n      log_state(\"v1_crop_after\", key, off, size, session);\n    }\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    log_state(\"v1_done\", key, off, size, session);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    log_state(\"v2_branch_start\", key, off, size, session);\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      log_state(\"v2_discard_extra\", key, off, size, session);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n    {\n      log_state(\"v2_crop_before\", key, off, size, session);\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n      log_state(\"v2_crop_after\", key, off, size, session);\n    }\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    log_state(\"v2_done\", key, off, size, session);\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  log_state(\"unsupported_key\", key, off, size, session);\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The parameter size is a non-pointer function parameter (size_t size) and the code assigns to it (size = (size_t)(...)) to crop extra data. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified; therefore the assignment to size is a violation. \n\nTo fix this while preserving behavior, use a local variable (for example: size_t to_copy = size;) and modify that local variable before calling memcpy, or otherwise compute the adjusted length into a new local variable. Note that the rule still allows modifying the object pointed to by a pointer parameter, but not the parameter variables themselves (including non-pointer parameters and pointer parameters as variables)."
}