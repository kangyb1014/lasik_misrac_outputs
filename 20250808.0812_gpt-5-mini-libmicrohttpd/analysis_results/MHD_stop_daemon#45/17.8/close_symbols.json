{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN void\nMHD_stop_daemon (struct MHD_Daemon *daemon)\n{\n  MHD_socket fd;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n\n  if (NULL == daemon)\n    return;\n  if ( (daemon->shutdown) && (NULL == daemon->master) )\n    MHD_PANIC (_ (\"MHD_stop_daemon() was called twice.\"));\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Slave daemons must be stopped by master daemon. */\n  mhd_assert ( (NULL == daemon->master) || (daemon->shutdown) );\n\n  daemon->shutdown = true;\n  if (daemon->was_quiesced)\n    fd = MHD_INVALID_SOCKET; /* Do not use FD if daemon was quiesced */\n  else\n    fd = daemon->listen_fd;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n  {   /* Master daemon with worker pool. */\n    mhd_assert (1 < daemon->worker_pool_size);\n    mhd_assert (MHD_D_IS_USING_THREADS_ (daemon));\n\n    /* Let workers shutdown in parallel. */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      daemon->worker_pool[i].shutdown = true;\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n        mhd_assert (MHD_INVALID_SOCKET != fd);\n    }\n#ifdef HAVE_LISTEN_SHUTDOWN\n    if (MHD_INVALID_SOCKET != fd)\n    {\n      (void) shutdown (fd,\n                       SHUT_RDWR);\n    }\n#endif /* HAVE_LISTEN_SHUTDOWN */\n    for (i = 0; i < daemon->worker_pool_size; ++i)\n    {\n      MHD_stop_daemon (&daemon->worker_pool[i]);\n    }\n    free (daemon->worker_pool);\n    mhd_assert (MHD_ITC_IS_INVALID_ (daemon->itc));\n#ifdef EPOLL_SUPPORT\n    mhd_assert (-1 == daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    mhd_assert (-1 == daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n  }\n  else\n#endif\n  {   /* Worker daemon or single daemon. */\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    if (MHD_D_IS_USING_THREADS_ (daemon))\n    {     /* Worker daemon or single daemon with internal thread(s). */\n      mhd_assert (0 == daemon->worker_pool_size);\n      /* Separate thread(s) is used for polling sockets. */\n      if (MHD_ITC_IS_VALID_ (daemon->itc))\n      {\n        if (! MHD_itc_activate_ (daemon->itc,\n                                 \"e\"))\n          MHD_PANIC (_ (\"Failed to signal shutdown via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n      else\n      {\n#ifdef HAVE_LISTEN_SHUTDOWN\n        if (MHD_INVALID_SOCKET != fd)\n        {\n          if (NULL == daemon->master)\n            (void) shutdown (fd,\n                             SHUT_RDWR);\n        }\n        else\n#endif /* HAVE_LISTEN_SHUTDOWN */\n        mhd_assert (false); /* Should never happen */\n      }\n\n      if (! MHD_thread_handle_ID_join_thread_ (daemon->tid))\n      {\n        MHD_PANIC (_ (\"Failed to join a thread.\\n\"));\n      }\n      /* close_all_connections() was called in daemon thread. */\n    }\n    else\n#endif\n    {\n      /* No internal threads are used for polling sockets. */\n      close_all_connections (daemon);\n    }\n    mhd_assert (NULL == daemon->connections_head);\n    mhd_assert (NULL == daemon->cleanup_head);\n    mhd_assert (NULL == daemon->suspended_connections_head);\n    mhd_assert (NULL == daemon->new_connections_head);\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n    mhd_assert (NULL == daemon->urh_head);\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n      MHD_itc_destroy_chk_ (daemon->itc);\n\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_fd);\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n    if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n        (-1 != daemon->epoll_upgrade_fd) )\n      MHD_socket_close_chk_ (daemon->epoll_upgrade_fd);\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->cleanup_connection_mutex);\n    MHD_mutex_destroy_chk_ (&daemon->new_connections_mutex);\n#endif\n  }\n\n  if (NULL == daemon->master)\n  {   /* Cleanup that should be done only one time in master/single daemon.\n       * Do not perform this cleanup in worker daemons. */\n\n    if (MHD_INVALID_SOCKET != fd)\n      MHD_socket_close_chk_ (fd);\n\n    /* TLS clean up */\n#ifdef HTTPS_SUPPORT\n    if (daemon->have_dhparams)\n    {\n      gnutls_dh_params_deinit (daemon->https_mem_dhparams);\n      daemon->have_dhparams = false;\n    }\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      gnutls_priority_deinit (daemon->priority_cache);\n      if (daemon->x509_cred)\n        gnutls_certificate_free_credentials (daemon->x509_cred);\n      if (daemon->psk_cred)\n        gnutls_psk_free_server_credentials (daemon->psk_cred);\n    }\n#endif /* HTTPS_SUPPORT */\n\n#ifdef DAUTH_SUPPORT\n    free (daemon->digest_auth_random_copy);\n    free (daemon->nnc);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->nnc_lock);\n#endif\n#endif\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_destroy_chk_ (&daemon->per_ip_connection_mutex);\n#endif\n    free (daemon);\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_stop_daemon': {'callees': ['__builtin_unreachable', 'MHD_stop_daemon', 'close_all_connections'], 'callers': ['MHD_start_daemon_va', 'MHD_stop_daemon', 'main', 'run_mhd']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'close_all_connections': {'callees': ['__builtin_unreachable', 'new_connection_close_', 'resume_suspended_connections', 'MHD_DLOG', 'close_connection', 'MHD_cleanup_connections'], 'callers': ['MHD_polling_thread', 'MHD_stop_daemon']}, 'MHD_start_daemon_va': {'callees': ['parse_options_va', 'process_interim_params', 'MHD_DLOG', '__builtin_unreachable', 'MHD_socket_create_listen_', 'MHD_socket_nonblocking_', 'setup_epoll_to_listen', 'MHD_create_named_thread_', 'MHD_stop_daemon'], 'callers': ['MHD_start_daemon']}, 'main': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_start_daemon', 'MHD_stop_daemon', 'MHD_destroy_response', 'MHD_get_fdset2', 'MHD_get_timeout64', 'MHD_run', 'MHD_get_daemon_info', 'MHD_get_timeout_i', 'MHD_resume_connection', 'expire_sessions', 'ignore_sigpipe', 'mark_as_html', 'update_directory', 'update_cached_response', 'check_params', 'add_new_users', 'init_rand_data', 'set_self_name', 'process_params', 'check_apply_params', 'init_data', 'run_mhd', 'deinit_data'], 'callers': []}, 'run_mhd': {'callees': ['get_num_threads', 'print_perf_warnings', 'get_mhd_response_size', 'MHD_start_daemon', 'MHD_get_daemon_info', 'get_mhd_conn_limit', 'MHD_stop_daemon'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Daemon (full definition / all fields used in MHD_stop_daemon: shutdown, master, options, worker_pool, worker_pool_size, tid, was_quiesced, listen_fd, itc, epoll_fd, epoll_upgrade_fd, connections_head, cleanup_head, suspended_connections_head, new_connections_head, urh_head, have_dhparams, https_mem_dhparams, priority_cache, x509_cred, psk_cred, digest_auth_random_copy, nnc, per_ip_connection_mutex, cleanup_connection_mutex, new_connections_mutex, nnc_lock)",
    "MHD_PANIC (macro/function)",
    "mhd_assert (macro)",
    "_ (translation/localization macro)",
    "MHD_INVALID_SOCKET (constant)",
    "MHD_USE_SELECT_INTERNALLY (option bit)",
    "MHD_USE_POSIX_THREADS, MHD_USE_W32_THREADS (compile-time flags)",
    "HAVE_LISTEN_SHUTDOWN, EPOLL_SUPPORT, HTTPS_SUPPORT, UPGRADE_SUPPORT, DAUTH_SUPPORT (compile-time flags)",
    "MHD_ITC_IS_VALID_ and MHD_ITC_IS_INVALID_ (macros)",
    "MHD_itc_activate_ (function)",
    "MHD_itc_destroy_chk_ (function/macro)",
    "MHD_socket_close_chk_ (function/macro)",
    "MHD_D_IS_USING_THREADS_ (macro)",
    "MHD_thread_handle_ID_is_valid_handle_ (function/macro)",
    "MHD_thread_handle_ID_join_thread_ (function/macro)",
    "MHD_D_IS_USING_EPOLL_ (macro)",
    "MHD_mutex_destroy_chk_ (function/macro)",
    "close_all_connections (function)",
    "shutdown (POSIX syscall)",
    "free (stdlib)",
    "gnutls_dh_params_deinit, gnutls_priority_deinit, gnutls_certificate_free_credentials, gnutls_psk_free_server_credentials (TLS cleanup functions)"
  ],
  "explanation": "Explain why each symbol is required for a MISRA C check that the function parameter 'daemon' is not modified:\n\n- struct MHD_Daemon (full definition and all listed fields): The rule distinguishes modifying the pointer variable (daemon) from modifying the object it points to (daemon->field). The field list is required to verify that all assignments (e.g. daemon->shutdown = true) modify the pointee and not the parameter variable itself, and to ensure no field access macro hides an assignment to the parameter.\n\n- MHD_PANIC: This macro/function could expand to complex code or expressions; its definition is needed to ensure it does not perform an assignment to the local parameter variable 'daemon' (e.g. via macro token pasting or unexpected side effects).\n\n- mhd_assert: Often a macro; its expansion must be inspected to ensure it does not assign to the parameter.\n\n- _ (translation/localization macro): Used inside MHD_PANIC and should be checked in case it expands in a way that affects the parameter.\n\n- MHD_INVALID_SOCKET, MHD_USE_SELECT_INTERNALLY (option bit) and compile-time flags (MHD_USE_POSIX_THREADS, MHD_USE_W32_THREADS, HAVE_LISTEN_SHUTDOWN, EPOLL_SUPPORT, HTTPS_SUPPORT, UPGRADE_SUPPORT, DAUTH_SUPPORT): These constants and flags determine which branches of the function are compiled. To be sure no compiled path assigns to the parameter, you need the value/definition of these symbols or the configured build options.\n\n- MHD_ITC_IS_VALID_, MHD_ITC_IS_INVALID_: Macros testing inter-thread-channel state; their expansions must be checked to ensure they do not perform assignments to the parameter variable.\n\n- MHD_itc_activate_, MHD_itc_destroy_chk_: Function/macro calls that take fields of the daemon; their prototypes/definitions are needed to ensure they do not modify the local parameter variable via macro expansion or by using the name 'daemon' in their own macro wrappers.\n\n- MHD_socket_close_chk_: Called on fds derived from daemon fields; check its definition for side-effects on the parameter variable.\n\n- MHD_D_IS_USING_THREADS_, MHD_D_IS_USING_EPOLL_: Macros used in control flow; inspect expansions to ensure they are pure tests and do not assign to 'daemon'.\n\n- MHD_thread_handle_ID_is_valid_handle_, MHD_thread_handle_ID_join_thread_: Their definitions are needed to confirm they do not perform assignments to the caller's local parameter variable via macros.\n\n- MHD_mutex_destroy_chk_: Macro/function used with addresses of daemon mutex fields; check expansion for unintended assignments to the parameter variable.\n\n- close_all_connections: Called with daemon and potentially manipulating daemon state; include its declaration/definition to ensure it does not rely on or modify the caller's parameter variable (e.g. via macro that rebinds the name 'daemon').\n\n- shutdown (POSIX syscall) and free (stdlib): Included because they are invoked with values derived from daemon; verify no wrapper macros in the build replace them with code that could modify the parameter variable.\n\n- GnuTLS cleanup functions (gnutls_*): These are called with fields from the daemon; include them to ensure no unexpected macro wrappers modify the parameter.\n\nOverall rationale: MISRA rule is about not modifying the function parameter variable (the pointer 'daemon') itself. Any macro or function invoked in this routine might expand to code that could (unexpectedly) assign to the local identifier 'daemon' or otherwise mutate the parameter variable via preprocessor token usage. To confidently conclude compliance, the next analyst needs the struct definition, all macros and called functions (and relevant compile-time flags) used in MHD_stop_daemon to inspect their expansions/definitions and confirm none assign to the parameter variable."
}