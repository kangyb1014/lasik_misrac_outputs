{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the macro _MHD_EXTERN which expands to the GNU compiler attribute __attribute__((visibility(\"default\"))) (a compiler-specific extension). Use of this attribute is a language extension (documented in GCC/clang docs) and thus violates MISRA C 2023 Rule 1.2 that disallows language extensions.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum MHD_ValueKind { MHD_GET_ARGUMENT_KIND = 1, MHD_OTHER_KIND = 2 };\nstatic void log_probe(const char *stage,\n                      enum MHD_ValueKind kind,\n                      const char *key,\n                      size_t key_size,\n                      const char *value,\n                      size_t value_size)\n{\n  FILE *f = fopen(\"/tmp/logs/408.txt\", \"a\");\n  if (f != NULL)\n  {\n    size_t key_len = key ? strlen(key) : 0;\n    size_t value_len = value ? strlen(value) : 0;\n    /* Log pointer values, computed lengths and supplied sizes and stage */\n    fprintf(f,\n            \"%s: kind=%d, key=%p, key_len=%zu, key_size=%zu, value=%p, value_len=%zu, value_size=%zu\\n\",\n            stage,\n            (int)kind,\n            (const void *)key,\n            key_len,\n            key_size,\n            (const void *)value,\n            value_len,\n            value_size);\n    fclose(f);\n  }\n}\n\nenum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Log entry state */\n  log_probe(\"entry\", kind, key, key_size, value, value_size);\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    log_probe(\"return_MHD_NO\", kind, key, key_size, value, value_size);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  /* Before delegating to the nocheck function, log the state */\n  log_probe(\"delegating_to_nocheck\", kind, key, key_size, value, value_size);\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct provided the macro _MHD_EXTERN actually expands to the GNU attribute form (for example __attribute__((visibility(\"default\")))) or any other compiler-specific attribute syntax. The GCC/Clang __attribute__((...)) facility is a compiler language extension (documented as such in compiler manuals), and MISRA C:2023 Rule 1.2 requires that language extensions not be used. Using the attribute via a macro does not avoid the use of a language extension \u2014 the expansion still introduces the compiler-specific construct that Rule 1.2 forbids. \n\nNote: If _MHD_EXTERN is defined only as a standard-specifier (e.g. empty or simply \"extern\") on the target compiler, then there is no violation. The presence or absence of a violation therefore depends on the actual definition of _MHD_EXTERN in the build environment. If it does expand to a GCC/Clang attribute, the report is correct and the code violates MISRA C 2023 Rule 1.2."
}