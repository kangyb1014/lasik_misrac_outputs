{
  "user_message": "Target function code is:\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_send_data_': {'callees': ['pre_send_setopt', 'post_send_setopt'], 'callers': ['MHD_connection_handle_write', 'MHD_send_hdr_and_body_']}, 'pre_send_setopt': {'callees': [], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'post_send_setopt': {'callees': ['MHD_DLOG'], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'MHD_connection_handle_write': {'callees': ['MHD_send_data_', 'MHD_DLOG', 'connection_close_error', 'MHD_update_last_activity_', 'MHD_send_hdr_and_body_', 'str_conn_error_', 'check_write_done', '__builtin_unreachable', 'try_ready_normal_body', 'MHD_send_sendfile_', 'MHD_send_iovec_'], 'callers': ['call_handlers']}, 'MHD_send_hdr_and_body_': {'callees': ['MHD_send_data_', 'pre_send_setopt', 'post_send_setopt'], 'callers': ['MHD_connection_handle_write']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA project shall not contain unreachable code. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "HTTPS_SUPPORT",
    "EPOLL_SUPPORT",
    "MHD_USE_MSG_MORE",
    "MHD_USE_TLS",
    "MHD_INVALID_SOCKET",
    "MHD_CONNECTION_CLOSED",
    "SSIZE_MAX",
    "MHD_SCKT_SEND_MAX_SIZE_",
    "pre_send_setopt",
    "post_send_setopt",
    "gnutls_record_send",
    "GNUTLS_E_AGAIN",
    "GNUTLS_E_INTERRUPTED",
    "GNUTLS_E_ENCRYPTION_FAILED",
    "GNUTLS_E_INVALID_SESSION",
    "GNUTLS_E_COMPRESSION_FAILED",
    "GNUTLS_E_EXPIRED",
    "GNUTLS_E_HASH_FAILED",
    "GNUTLS_E_PUSH_ERROR",
    "GNUTLS_E_INTERNAL_ERROR",
    "GNUTLS_E_CRYPTODEV_IOCTL_ERROR",
    "GNUTLS_E_CRYPTODEV_DEVICE_ERROR",
    "GNUTLS_E_PREMATURE_TERMINATION",
    "GNUTLS_E_UNEXPECTED_PACKET_LENGTH",
    "GNUTLS_E_MEMORY_ERROR",
    "MHD_EPOLL_STATE_WRITE_READY",
    "MHD_EpollState (enum)",
    "MHD_Connection (struct)",
    "connection->epoll_state",
    "MHD_send4_",
    "MHD_socket_get_error_",
    "MHD_SCKT_ERR_IS_EAGAIN_",
    "MHD_SCKT_ERR_IS_EINTR_",
    "MHD_SCKT_ERR_IS_REMOTE_DISCNN_",
    "MHD_SCKT_ERR_IS_",
    "MHD_SCKT_ERR_IS_LOW_RESOURCES_",
    "MHD_SCKT_EPIPE_",
    "MHD_SCKT_EOPNOTSUPP_",
    "MHD_SCKT_ENOTCONN_",
    "MHD_SCKT_EINVAL_",
    "MHD_SCKT_EBADF_",
    "MHD_ERR_NOTCONN_",
    "MHD_ERR_AGAIN_",
    "MHD_ERR_TLS_",
    "MHD_ERR_PIPE_",
    "MHD_ERR_CONNRESET_",
    "MHD_ERR_NOMEM_",
    "MHD_ERR_OPNOTSUPP_",
    "MHD_ERR_INVAL_",
    "MHD_ERR_BADF_"
  ],
  "explanation": "For checking unreachable code you must know which branches can actually exist at compile- and run-time. The items below are required for that reasoning:\n\n- HTTPS_SUPPORT, EPOLL_SUPPORT, MHD_USE_MSG_MORE: compile-time feature macros that make large code regions (TLS handling, epoll-specific statements, MSG_MORE usage) present or absent; their definitions determine whether those blocks are even compiled (thus whether they are unreachable).\n- MHD_USE_TLS and connection->daemon->options: the option bit tested at run-time decides whether the TLS branch is taken; needed to judge reachability of the TLS branch.\n- MHD_INVALID_SOCKET, MHD_CONNECTION_CLOSED and struct MHD_Connection (fields socket_fd, state, tls_session, daemon, epoll_state): the initial early-return condition depends on these symbols/fields; their values/types determine whether the early return (and subsequent code) is reachable.\n- SSIZE_MAX and MHD_SCKT_SEND_MAX_SIZE_: size limits that change control flow (clamping buffer_size and push_data) and therefore influence which later branches execute.\n- pre_send_setopt, post_send_setopt: callees invoked on paths whose presence/side-effects might affect follow-up behaviour; include to see whether calls themselves (or their absence via compilation) affect reachability analysis.\n- gnutls_record_send and all GNUTLS_E_* macros listed: the TLS branch is governed by the return value of gnutls_record_send and the many GNUTLS error codes tested; to decide if specific TLS error-handling branches are reachable you must know which error codes can be returned/are defined.\n- MHD_EPOLL_STATE_WRITE_READY, MHD_EpollState (enum), connection->epoll_state: the code toggles epoll_state under EPOLL_SUPPORT; to decide if those epoll-related statements are reachable you need these symbols/types.\n- MHD_send4_, MHD_socket_get_error_ and MHD_SCKT_* error-test macros/constants (MHD_SCKT_ERR_IS_EAGAIN_, MHD_SCKT_ERR_IS_EINTR_, MHD_SCKT_ERR_IS_REMOTE_DISCNN_, MHD_SCKT_ERR_IS_, MHD_SCKT_ERR_IS_LOW_RESOURCES_, MHD_SCKT_EPIPE_, MHD_SCKT_EOPNOTSUPP_, MHD_SCKT_ENOTCONN_, MHD_SCKT_EINVAL_, MHD_SCKT_EBADF_): the plaintext path's branching on send() return values and subsequent errno tests is determined by these functions/macros; required to establish which plaintext error-handling branches can actually occur.\n- MHD_ERR_* return-code symbols (MHD_ERR_NOTCONN_, MHD_ERR_AGAIN_, MHD_ERR_TLS_, MHD_ERR_PIPE_, MHD_ERR_CONNRESET_, MHD_ERR_NOMEM_, MHD_ERR_OPNOTSUPP_, MHD_ERR_INVAL_, MHD_ERR_BADF_): used as return values in many branches \u2014 include to map branches to distinct outcomes and to detect if multiple branches collapse to the same return (which can affect the notion of unreachable code).\n\nTogether these symbols let an analyzer determine which conditional/compilation blocks are actually present and executable, and therefore whether any statements in MHD_send_data_ are provably unreachable."
}