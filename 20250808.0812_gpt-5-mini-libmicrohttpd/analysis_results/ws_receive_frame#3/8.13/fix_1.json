{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_state_enter(const unsigned char *frame, ssize_t length)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER ws_receive_frame: frame[0]=0x%02X length=%ld\\n\",\n                (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\nstatic void log_state_text_parse(const unsigned char *frame, ssize_t length,\n                                 unsigned char flength,\n                                 unsigned char idx_first_mask,\n                                 unsigned char idx_first_data,\n                                 size_t data_length,\n                                 const unsigned char masks[4])\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"TEXT_FRAME parse: flength=%u idx_first_mask=%u idx_first_data=%u data_length=%zu\\n\",\n                (unsigned int)flength,\n                (unsigned int)idx_first_mask,\n                (unsigned int)idx_first_data,\n                data_length);\n        fprintf(fp, \"Mask bytes: 0x%02X 0x%02X 0x%02X 0x%02X\\n\",\n                (unsigned int)masks[0], (unsigned int)masks[1],\n                (unsigned int)masks[2], (unsigned int)masks[3]);\n        /* log first few bytes of payload if available */\n        if (data_length > 0 && (size_t)length > (size_t)idx_first_data)\n        {\n            size_t to_print = data_length < 8U ? data_length : 8U;\n            fprintf(fp, \"Payload sample (masked): \");\n            for (size_t k = 0U; k < to_print; ++k)\n            {\n                unsigned char b = frame[idx_first_data + (int)k];\n                fprintf(fp, \"0x%02X \", (unsigned int)b);\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n    }\n}\nstatic void log_state_close_or_other(const unsigned char *frame, ssize_t length, int type)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"EXIT ws_receive_frame: chosen type=%d frame0=0x%02X length=%ld\\n\",\n                type, (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  /* Log entry; note frame is passed as const for logging only */\n  log_state_enter((const unsigned char *)frame, *length);\n\n  msg = NULL;\n  /* Literal values used in place of WS_FIN | WS_OPCODE_TEXT_FRAME (0x80 | 1 == 0x81)\n     and WS_FIN | WS_OPCODE_CON_CLOSE_FRAME (0x80 | 8 == 0x88). */\n  if (frame[0] == 0x81U)\n  {\n    *type = 1; /* WS_OPCODE_TEXT_FRAME */\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7FU;\n    if (flength == 126U)\n    {\n      idx_first_mask = 4U;\n    }\n    else if (flength == 127U)\n    {\n      idx_first_mask = 10U;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4U);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    /* Log parsing state for text frame */\n    log_state_text_parse((const unsigned char *)frame, *length,\n                         flength, idx_first_mask, idx_first_data,\n                         data_length, masks);\n\n    msg = malloc (data_length + 1U);\n    if (NULL != msg)\n    {\n      for (i = (int)idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == 0x88U)\n  {\n    *type = 8; /* WS_OPCODE_CON_CLOSE_FRAME */\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  else\n  {\n    *type = frame[0] & 0x0FU;\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  return msg;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpccqi9jwf/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <stddef.h>\n\nstatic void log_state_enter(const unsigned char *frame, ssize_t length)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER ws_receive_frame: frame[0]=0x%02X length=%ld\\n\",\n                (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\nstatic void log_state_text_parse(const unsigned char *frame, ssize_t length,\n                                 unsigned char flength,\n                                 unsigned char idx_first_mask,\n                                 unsigned char idx_first_data,\n                                 size_t data_length,\n                                 const unsigned char masks[4])\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"TEXT_FRAME parse: flength=%u idx_first_mask=%u idx_first_data=%u data_length=%zu\\n\",\n                (unsigned int)flength,\n                (unsigned int)idx_first_mask,\n                (unsigned int)idx_first_data,\n                data_length);\n        fprintf(fp, \"Mask bytes: 0x%02X 0x%02X 0x%02X 0x%02X\\n\",\n                (unsigned int)masks[0], (unsigned int)masks[1],\n                (unsigned int)masks[2], (unsigned int)masks[3]);\n        /* log first few bytes of payload if available */\n        if (data_length > 0 && (size_t)length > (size_t)idx_first_data)\n        {\n            size_t to_print = data_length < 8U ? data_length : 8U;\n            fprintf(fp, \"Payload sample (masked): \");\n            for (size_t k = 0U; k < to_print; ++k)\n            {\n                unsigned char b = frame[idx_first_data + (int)k];\n                fprintf(fp, \"0x%02X \", (unsigned int)b);\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n    }\n}\nstatic void log_state_close_or_other(const unsigned char *frame, ssize_t length, int type)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"EXIT ws_receive_frame: chosen type=%d frame0=0x%02X length=%ld\\n\",\n                type, (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  /* Log entry; note frame is passed as const for logging only */\n  log_state_enter((const unsigned char *)frame, *length);\n\n  msg = NULL;\n  /* Literal values used in place of WS_FIN | WS_OPCODE_TEXT_FRAME (0x80 | 1 == 0x81)\n     and WS_FIN | WS_OPCODE_CON_CLOSE_FRAME (0x80 | 8 == 0x88). */\n  if (frame[0] == 0x81U)\n  {\n    *type = 1; /* WS_OPCODE_TEXT_FRAME */\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7FU;\n    if (flength == 126U)\n    {\n      idx_first_mask = 4U;\n    }\n    else if (flength == 127U)\n    {\n      idx_first_mask = 10U;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4U);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    /* Log parsing state for text frame */\n    log_state_text_parse((const unsigned char *)frame, *length,\n                         flength, idx_first_mask, idx_first_data,\n                         data_length, masks);\n\n    msg = malloc (data_length + 1U);\n    if (NULL != msg)\n    {\n      for (i = (int)idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == 0x88U)\n  {\n    *type = 8; /* WS_OPCODE_CON_CLOSE_FRAME */\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  else\n  {\n    *type = frame[0] & 0x0FU;\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  return msg;\n}\n",
  "explanation": "I added the necessary standard includes (stdio.h, stdlib.h, sys/types.h, stddef.h) so types and functions like FILE, fopen, malloc and ssize_t are defined. No logic of ws_receive_frame or the logging helpers was changed; only includes were added to allow the file to compile successfully."
}