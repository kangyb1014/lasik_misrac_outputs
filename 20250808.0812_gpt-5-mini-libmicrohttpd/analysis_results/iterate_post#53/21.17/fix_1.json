{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nenum MHD_ValueKind { MHD_VAL_KIND = 0 };\nstatic const size_t MAXANSWERSIZE = 512;\nstatic const size_t MAXNAMESIZE = 20;\nstatic const char GREETINGPAGE[] = \"<html><body><h1>Welcome, %s!</center></h1></body></html>\";\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/431.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* Do not abort the original function behavior. */\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputs(\"\\n\", f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log entry and pointers/sizes for diagnostics. */\n  probe_log(\"iterate_post: entry key=%p size=%zu data=%p con_info=%p\", (const void *)key, size, (const void *)data, (const void *)con_info);\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log(\"iterate_post: matched key 'name'\");\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      /* Before calling snprintf, probe whether 'data' contains a '\\0' within the provided size. */\n      void *term = memchr(data, '\\0', size);\n      if (term != NULL)\n      {\n        size_t pos = (size_t)((const char *)term - data);\n        probe_log(\"iterate_post: data appears NUL-terminated within size at offset %zu\", pos);\n      }\n      else\n      {\n        probe_log(\"iterate_post: data NOT NUL-terminated within provided size (%zu). Using %%s in snprintf will read beyond bounds.\", size);\n      }\n\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        probe_log(\"iterate_post: malloc failed for answerstring (size %zu)\", MAXANSWERSIZE);\n        return MHD_NO;\n      }\n\n      probe_log(\"iterate_post: about to call snprintf(answerstring=%p, MAXANSWERSIZE=%zu, GREETINGPAGE, data=%p)\", (void *)answerstring, MAXANSWERSIZE, (const void *)data);\n      /* Original behavior retained: this snprintf may read beyond 'data' if 'data' is not NUL-terminated. */\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n\n      probe_log(\"iterate_post: snprintf completed; answerstring=%p contents_start='%.64s'\", (void *)answerstring, answerstring);\n      con_info->answerstring = answerstring;\n    }\n    else\n    {\n      probe_log(\"iterate_post: size check failed (size=%zu), setting con_info->answerstring = NULL\", size);\n      con_info->answerstring = NULL;\n    }\n\n    probe_log(\"iterate_post: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  probe_log(\"iterate_post: key not matched, returning MHD_YES\");\n  return MHD_YES;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpebnhgbqh/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of iterate_post as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "/* Fixed test code: provides necessary includes and type definitions so the\n   original iterate_post logic compiles standalone. No main() is defined. */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\nenum MHD_ValueKind { MHD_VAL_KIND = 0 };\n\n/* Minimal MHD_Result enum so iterate_post can return MHD_YES / MHD_NO */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\nstatic const size_t MAXANSWERSIZE = 512;\nstatic const size_t MAXNAMESIZE = 20;\nstatic const char GREETINGPAGE[] = \"<html><body><h1>Welcome, %s!</center></h1></body></html>\";\n\n/* Minimal connection_info_struct expected by iterate_post */\nstruct connection_info_struct {\n  char *answerstring;\n};\n\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/431.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* Do not abort the original function behavior. */\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputs(\"\\n\", f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log entry and pointers/sizes for diagnostics. */\n  probe_log(\"iterate_post: entry key=%p size=%zu data=%p con_info=%p\", (const void *)key, size, (const void *)data, (const void *)con_info);\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log(\"iterate_post: matched key 'name'\");\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      /* Before calling snprintf, probe whether 'data' contains a '\\0' within the provided size. */\n      void *term = memchr(data, '\\0', size);\n      if (term != NULL)\n      {\n        size_t pos = (size_t)((const char *)term - data);\n        probe_log(\"iterate_post: data appears NUL-terminated within size at offset %zu\", pos);\n      }\n      else\n      {\n        probe_log(\"iterate_post: data NOT NUL-terminated within provided size (%zu). Using %%s in snprintf will read beyond bounds.\", size);\n      }\n\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        probe_log(\"iterate_post: malloc failed for answerstring (size %zu)\", MAXANSWERSIZE);\n        return MHD_NO;\n      }\n\n      probe_log(\"iterate_post: about to call snprintf(answerstring=%p, MAXANSWERSIZE=%zu, GREETINGPAGE, data=%p)\", (void *)answerstring, MAXANSWERSIZE, (const void *)data);\n      /* Original behavior retained: this snprintf may read beyond 'data' if 'data' is not NUL-terminated. */\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n\n      probe_log(\"iterate_post: snprintf completed; answerstring=%p contents_start='%.64s'\", (void *)answerstring, answerstring);\n      con_info->answerstring = answerstring;\n    }\n    else\n    {\n      probe_log(\"iterate_post: size check failed (size=%zu), setting con_info->answerstring = NULL\", size);\n      con_info->answerstring = NULL;\n    }\n\n    probe_log(\"iterate_post: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  probe_log(\"iterate_post: key not matched, returning MHD_YES\");\n  return MHD_YES;\n}\n",
  "explanation": "I added the necessary includes and minimal type definitions so the file compiles standalone: stdio.h, stdlib.h, stdarg.h, string.h, stdint.h, and stddef.h. I defined enum MHD_Result and a minimal struct connection_info_struct with the answerstring member used by iterate_post. The original iterate_post logic was preserved exactly; only the missing types and includes were added so the code compiles."
}