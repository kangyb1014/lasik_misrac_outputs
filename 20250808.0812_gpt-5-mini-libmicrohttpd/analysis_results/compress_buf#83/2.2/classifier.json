{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified compress_buf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/666.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of compress_buf as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function compress_buf:\n#define CHUNK 16384\n...\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\nstatic ssize_t\nread_cb (void *cls, uint64_t pos, char *mem, size_t size)\n{\n  struct Holder *holder = cls;\n  void *src;\n  void *buf;\n  ssize_t ret;\n  size_t offset;\n  size_t r_size;\n\n  if (pos > SSIZE_MAX)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  offset = (size_t) pos;\n  src = malloc (size);\n  if (NULL == src)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  r_size = fread (src, 1, size, holder->file);\n  if (0 == r_size)\n  {\n    ret = (0 != ferror (holder->file)) ?\n          MHD_CONTENT_READER_END_WITH_ERROR : MHD_CONTENT_READER_END_OF_STREAM;\n    goto done;\n  }\n  if (MHD_YES != compress_buf (&holder->stream, src, r_size, &offset, &buf,\n                               &size, holder->buf))\n    ret = MHD_CONTENT_READER_END_WITH_ERROR;\n  else\n  {\n    memcpy (mem, buf, size);\n    ret = (ssize_t) size;\n  }\n  free (buf); /* Buf may be set even on error return. */\ndone:\n  free (src);\n  return ret;\n}\n</additional code>\nJudge whether the above compress_buf code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The update '*offset += strm->avail_in;' inside compress_buf is never observed by the only shown caller (read_cb passes a local 'offset' that is not used after the call). Therefore that write is an executed operation whose removal would not change program behaviour in the given project context \u2014 it is dead code.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <zlib.h>\n\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  FILE *log = NULL;\n  /* ensure log directory exists so the log file can be written */\n  (void) mkdir(\"/tmp/logs\", 0777);\n  log = fopen(\"/tmp/logs/666.txt\", \"a\");\n\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n\n  if (log)\n  {\n    fprintf(log, \"compress_buf: enter src_size=%zu, offset(before)=%zu, dest=%p, dest_size(before)=%zu\\n\",\n            src_size, (offset != NULL) ? *offset : 0U, *dest, *dest_size);\n    fflush(log);\n  }\n\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      if (log)\n      {\n        fprintf(log, \"  chunk branch: src_size(%zu) > CHUNK(%d)\\n\", src_size, CHUNK);\n        fflush(log);\n      }\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"  final branch: src_size(%zu) <= CHUNK(%d)\\n\", src_size, CHUNK);\n        fflush(log);\n      }\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n\n    if (log)\n    {\n      fprintf(log, \"  before offset increment: offset=%zu, avail_in=%u\\n\",\n              (offset != NULL) ? *offset : 0U, strm->avail_in);\n      fflush(log);\n    }\n\n    /* This update is the operation that is not observed by the shown caller */\n    *offset += strm->avail_in;\n\n    if (log)\n    {\n      fprintf(log, \"  after offset increment: offset=%zu\\n\", *offset);\n      fflush(log);\n    }\n\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n\n      if (log)\n      {\n        fprintf(log, \"    deflate ret=%d, have=%u, dest_size(after)=%zu\\n\", (int)ret, have, *dest_size);\n        fflush(log);\n      }\n\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        if (log)\n        {\n          fprintf(log, \"    realloc failed, freeing dest and returning MHD_NO\\n\");\n          fflush(log);\n        }\n        free (*dest);\n        *dest = NULL;\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n\n      if (log)\n      {\n        fprintf(log, \"    copied %u bytes to dest at offset %zu\\n\", have, (*dest_size) - have);\n        fflush(log);\n      }\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n\n  if (log)\n  {\n    fprintf(log, \"compress_buf: exit ret=%d, final offset=%zu, final dest=%p, final dest_size=%zu\\n\",\n            (int)ret, *offset, *dest, *dest_size);\n    fflush(log);\n    fclose(log);\n  }\n  return ret;\n}\n"
}