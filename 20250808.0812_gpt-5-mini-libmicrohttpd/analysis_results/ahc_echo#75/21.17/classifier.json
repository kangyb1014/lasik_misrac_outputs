{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/607.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n</additional code>\nJudge whether the above ahc_echo code violates the rule 21.17 or not.",
  "is_rule_violated": false,
  "scenario": "No violation. The call to strlen(url) obtains the number of characters excluding the terminating NUL and MHD_create_response_from_buffer_copy copies exactly that many bytes (memcpy(mhd_copy, buffer, size)). Provided url is a valid, null-terminated string (as supplied by the HTTP library), there is no read or write beyond the bounds of the object. Note: if url were NULL (which would make strlen undefined), that would be a separate null-pointer/UB issue, but the shown code as used with a valid URL does not violate Rule 21.17.",
  "test_code": ""
}