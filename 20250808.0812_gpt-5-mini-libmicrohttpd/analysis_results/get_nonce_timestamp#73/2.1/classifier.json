{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/585.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_nonce_timestamp:\n#define MHD_MD5_SUPPORT 1\n...\n#define MHD_SHA256_SUPPORT 1\n...\n#define MHD_SHA512_256_SUPPORT 1\n...\n#define NONCE_STD_LEN(digest_size) ((digest_size)*2+TIMESTAMP_CHARS_LEN)\n...\n#define MD5_DIGEST_SIZE (MD5_DIGEST_SIZE_WORDS*MD5_BYTES_IN_WORD)\n...\n#define SHA256_SHA512_256_DIGEST_SIZE SHA512_256_DIGEST_SIZE\n...\n#define TIMESTAMP_CHARS_LEN (TIMESTAMP_BIN_SIZE*2)\n...\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n</additional code>\nJudge whether the above get_nonce_timestamp code violates the rule 2.1 or not.",
  "is_rule_violated": false,
  "scenario": "No violation: all code paths in get_nonce_timestamp are reachable depending on the runtime value of noncelen and the contents of nonce. The preprocessor may remove some comparisons when support macros are not defined, but that only changes which runtime checks exist \u2014 it does not introduce unreachable code. Both return false and the final return true can be reached at runtime for appropriate inputs, so Rule 2.1 is not violated.",
  "test_code": ""
}