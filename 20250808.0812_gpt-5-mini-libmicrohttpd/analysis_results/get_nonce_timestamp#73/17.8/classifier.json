{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/589.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_nonce_timestamp:\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n...\n#define TIMESTAMP_CHARS_LEN (TIMESTAMP_BIN_SIZE*2)\n...\n#define NONCE_STD_LEN(digest_size) ((digest_size)*2+TIMESTAMP_CHARS_LEN)\n...\n#define MD5_DIGEST_SIZE (MD5_DIGEST_SIZE_WORDS*MD5_BYTES_IN_WORD)\n...\n#define SHA256_SHA512_256_DIGEST_SIZE SHA512_256_DIGEST_SIZE\n...\n#define MHD_MD5_SUPPORT 1\n...\n#define MHD_SHA256_SUPPORT 1\n...\n#define MHD_SHA512_256_SUPPORT 1\n</additional code>\nJudge whether the above get_nonce_timestamp code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs when the incoming noncelen parameter is zero. The function assigns to the parameter (noncelen = strlen(nonce);), i.e. it modifies a function parameter passed by value. This breaks MISRA C 2023 Rule 17.8 (a function parameter should not be modified). The specific control path is: entry -> noncelen == 0 -> assignment to noncelen -> subsequent processing uses the modified noncelen to compute the timestamp substring and parse it.",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* External dependency provided elsewhere in the code base */\nextern size_t MHD_strx_to_uint64_n_(const char *str, size_t maxlen, uint64_t *out_val);\n\n/*\n * Probe function that logs control path and state to /tmp/logs/589.txt.\n * It does not modify any of its parameters.\n */\nstatic void\nlog_nonce_state(const char *stage, const char *nonce, size_t noncelen, const uint64_t *ptimestamp)\n{\n    FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s: nonce=%s noncelen=%zu ptimestamp_ptr=%p\",\n                stage, (nonce != NULL) ? nonce : \"(null)\", noncelen, (const void *)ptimestamp);\n        if (ptimestamp != NULL)\n        {\n            /* print as unsigned long long to avoid needing PRIu64 */\n            fprintf(f, \" ptimestamp_val=%llu\", (unsigned long long)(*ptimestamp));\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  log_nonce_state(\"entry\", nonce, noncelen, ptimestamp);\n\n  if (0 == noncelen)\n  {\n    /* Violation scenario: the function assigns to the parameter 'noncelen' */\n    noncelen = strlen (nonce);\n    log_nonce_state(\"after_len_assigned\", nonce, noncelen, ptimestamp);\n  }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n  {\n    log_nonce_state(\"length_mismatch\", nonce, noncelen, ptimestamp);\n    return false;\n  }\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n  {\n    log_nonce_state(\"timestamp_parse_failed\", nonce, noncelen, ptimestamp);\n    return false;\n  }\n\n  log_nonce_state(\"success\", nonce, noncelen, ptimestamp);\n  return true;\n}\n"
}