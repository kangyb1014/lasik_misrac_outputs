{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic const ssize_t MHD_CONTENT_READER_END_WITH_ERROR = -1;\nstatic const ssize_t MHD_CONTENT_READER_END_OF_STREAM = 0;\nstatic void log_state(const char *stage, uint64_t pos, size_t max, int code)\n{\n  FILE *f = fopen(\"/tmp/logs/621.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* stage: textual description, pos: requested position, max: byte count, code: branch id */\n    fprintf(f, \"%s: pos=%\" PRIu64 \", max=%zu, branch=%d\\n\", stage, pos, max, code);\n    (void) fclose(f);\n  }\n}\n\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  ssize_t n;\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  /* Log entry state */\n  log_state(\"entry\", pos, max, 0);\n\n  if (offset64 < 0)\n  {\n    log_state(\"offset_negative\", pos, max, 1);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (max > SSIZE_MAX)\n  {\n    /* This assignment modifies the parameter 'max' (violation of MISRA C 2023 Rule 17.8). */\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n    log_state(\"clamped_max\", pos, max, 2);\n  }\n\n  /* Attempt seek and read using lseek/read as a generic POSIX path. The logic\n     is preserved from the original implementation. */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    log_state(\"lseek64_fail\", pos, max, 3);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    log_state(\"seek_overflow\", pos, max, 4);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    log_state(\"lseek_fail\", pos, max, 5);\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif\n\n  n = read (response->fd,\n            buf,\n            max);\n\n  if (0 == n)\n  {\n    log_state(\"eof\", pos, max, 6);\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    log_state(\"read_error\", pos, max, 7);\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  }\n\n  log_state(\"read_success\", pos, (size_t) n, 8);\n  return n;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from internal.h:34,\n                 from response.c:50:\n../../src/include/microhttpd.h:182:54: error: expected ')' before '-' token\n  182 | #define MHD_CONTENT_READER_END_WITH_ERROR ((ssize_t) -2)\n      |                                                      ^\nresponse.c:1097:22: note: in expansion of macro 'MHD_CONTENT_READER_END_WITH_ERROR'\n 1097 | static const ssize_t MHD_CONTENT_READER_END_WITH_ERROR = -1;\n      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../../src/include/microhttpd.h:181:53: error: expected ')' before '-' token\n  181 | #define MHD_CONTENT_READER_END_OF_STREAM ((ssize_t) -1)\n      |                                                     ^\nresponse.c:1098:22: note: in expansion of macro 'MHD_CONTENT_READER_END_OF_STREAM'\n 1098 | static const ssize_t MHD_CONTENT_READER_END_OF_STREAM = 0;\n      |                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmake[3]: *** [Makefile:2182: libmicrohttpd_la-response.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of file_reader as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <limits.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n/* Minimal response structure for compilation. In the original project\n   this would be provided by the library. */\nstruct MHD_Response {\n  int fd;\n  uint64_t fd_off;\n};\n\n/* Use different names for the sentinel return values to avoid colliding\n   with any macros defined by external headers (which caused the original\n   build error). */\nstatic const ssize_t CR_END_WITH_ERROR = -1;\nstatic const ssize_t CR_END_OF_STREAM = 0;\n\nstatic void log_state(const char *stage, uint64_t pos, size_t max, int code)\n{\n  FILE *f = fopen(\"/tmp/logs/621.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* stage: textual description, pos: requested position, max: byte count, code: branch id */\n    fprintf(f, \"%s: pos=%\" PRIu64 \", max=%zu, branch=%d\\n\", stage, pos, max, code);\n    (void) fclose(f);\n  }\n}\n\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  ssize_t n;\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  /* Log entry state */\n  log_state(\"entry\", pos, max, 0);\n\n  if (offset64 < 0)\n  {\n    log_state(\"offset_negative\", pos, max, 1);\n    return CR_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (max > SSIZE_MAX)\n  {\n    /* This assignment modifies the parameter 'max' (violation of MISRA C 2023 Rule 17.8). */\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n    log_state(\"clamped_max\", pos, max, 2);\n  }\n\n  /* Attempt seek and read using lseek/read as a generic POSIX path. The logic\n     is preserved from the original implementation. */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    log_state(\"lseek64_fail\", pos, max, 3);\n    return CR_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    log_state(\"seek_overflow\", pos, max, 4);\n    return CR_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    log_state(\"lseek_fail\", pos, max, 5);\n    return CR_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif\n\n  n = read (response->fd,\n            buf,\n            max);\n\n  if (0 == n)\n  {\n    log_state(\"eof\", pos, max, 6);\n    return CR_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    log_state(\"read_error\", pos, max, 7);\n    return CR_END_WITH_ERROR;\n  }\n\n  log_state(\"read_success\", pos, (size_t) n, 8);\n  return n;\n}\n",
  "explanation": "The compile error was caused by redefining identifiers that already exist as macros in included headers. I renamed the two sentinel constants (MHD_CONTENT_READER_END_WITH_ERROR and MHD_CONTENT_READER_END_OF_STREAM) to CR_END_WITH_ERROR and CR_END_OF_STREAM to avoid macro collisions. I also added necessary standard headers and a minimal definition of struct MHD_Response so the file is self-contained and compiles. The file_reader logic is otherwise preserved exactly."
}