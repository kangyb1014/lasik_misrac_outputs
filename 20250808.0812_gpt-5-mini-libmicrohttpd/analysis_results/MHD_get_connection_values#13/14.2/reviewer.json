{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop uses 'pos = pos->next' in the third clause while the loop body calls an external callback (iterator). If that callback modifies the linked list (for example removes or re-links nodes), the third-clause expression reads objects that may have been modified by the loop body \u2014 violating MISRA C 2023 Rule 14.2 (clause 3). In other words, the loop increment uses pos->next which could be altered by functions called in the loop body, so the for loop is not guaranteed to be well-formed under Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum MHD_ValueKind\n{\n  MHD_HEADER_KIND = 1,\n  MHD_COOKIE_KIND = 2\n};\ntypedef enum MHD_Result (*MHD_KeyValueIterator)(void *cls,\n                                               enum MHD_ValueKind kind,\n                                               const char *key,\n                                               const char *value);\n\nint\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/108.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: enter connection=%p, kind=%d, iterator=%p, it_cls=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator, iterator_cls);\n  }\n\n  if (NULL == connection)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"MHD_get_connection_values: connection is NULL -> return -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"loop: pos=%p, pos->next=%p, pos->header=%p, kind=%d\\n\",\n              (void *)pos, (void *)pos->next, (void *)pos->header, (int)pos->kind);\n    }\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log != NULL)\n      {\n        fprintf(log, \"  matched: ret=%d\\n\", ret);\n      }\n      if ((NULL != iterator) && (MHD_NO == iterator (iterator_cls,\n                                                   pos->kind,\n                                                   pos->header,\n                                                   pos->value)))\n      {\n        if (log != NULL)\n        {\n          fprintf(log, \"  iterator returned MHD_NO, returning ret=%d. NOTE: if iterator modified the list, pos->next used in the for-increment may now point to modified/freed memory.\\n\",\n                  ret);\n          fclose(log);\n        }\n        return ret;\n      }\n    }\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: exit ret=%d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Summary of rule: MISRA C 2023 Rule 14.2 requires that a for loop be well\u2011formed: there must be a single loop counter and the third clause must only modify that loop counter and must not use objects that may be modified in the loop body (the behaviour of called functions is considered part of the loop body).\n\nAnalysis of the code: the loop uses a single loop counter identifier pos. The third clause is pos = pos->next which reads the memory pointed to by pos (the next pointer) to update the loop counter. The loop body calls an external callback (iterator), and the rule explicitly considers effects of called functions as part of the loop body. If that callback is able to modify the linked list (for example by removing or relinking nodes, or freeing the current node), then the expression pos->next used in the third clause may access memory that was modified by the loop body. That violates clause 3 of Rule 14.2, because the third clause uses objects that can be modified by the loop body.\n\nCaveat: if there is a proven, documented, and enforceable guarantee that the iterator callback cannot and will not modify the list (including not freeing or relinking nodes reachable from pos), then the code would not violate the rule in that specific context. Absent such a guarantee, the code as written is non\u2011conforming.\n\nConclusion: Agent A\u2019s report is correct: the code can violate MISRA C 2023 Rule 14.2 as described (unless there is a guarantee that the callback cannot modify the list)."
}