{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/107.txt\", \"w\");\n\n  if (NULL == connection)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"MHD_get_connection_values: connection == NULL -> return -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: entering, kind=%d\\n\", (int) kind);\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log != NULL)\n      {\n        fprintf(log, \"  matched header #%d: kind=%d, header=%s, value=%s\\n\",\n                ret,\n                (int) pos->kind,\n                (pos->header != NULL) ? pos->header : \"(null)\",\n                (pos->value != NULL) ? pos->value : \"(null)\");\n      }\n      if ( (NULL != iterator) )\n      {\n        int it_res = (int) iterator (iterator_cls,\n                                     pos->kind,\n                                     pos->header,\n                                     pos->value);\n        if (log != NULL)\n        {\n          fprintf(log, \"    iterator returned: %d\\n\", it_res);\n        }\n        if (MHD_NO == it_res)\n        {\n          if (log != NULL)\n          {\n            fprintf(log, \"    iterator requested early exit -> return %d\\n\", ret);\n            fclose(log);\n          }\n          return ret;\n        }\n      }\n    }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: finished -> return %d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpz020an40/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Minimal supporting types to make the function compile in a test environment. */\nenum MHD_ValueKind {\n  MHD_VALUE_KIND_NONE = 0,\n  MHD_VALUE_KIND_A = 1,\n  MHD_VALUE_KIND_B = 2\n};\n\ntypedef int (*MHD_KeyValueIterator)(void *cls,\n                                    enum MHD_ValueKind kind,\n                                    const char *key,\n                                    const char *value);\n\nstruct MHD_HTTP_Req_Header {\n  enum MHD_ValueKind kind;\n  char *header;\n  char *value;\n  struct MHD_HTTP_Req_Header *next;\n};\n\nstruct MHD_Request {\n  struct MHD_HTTP_Req_Header *headers_received;\n};\n\nstruct MHD_Connection {\n  struct MHD_Request rq;\n};\n\nconst int MHD_NO = 0;\n\nint\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/107.txt\", \"w\");\n\n  if (NULL == connection)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"MHD_get_connection_values: connection == NULL -> return -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: entering, kind=%d\\n\", (int) kind);\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log != NULL)\n      {\n        fprintf(log, \"  matched header #%d: kind=%d, header=%s, value=%s\\n\",\n                ret,\n                (int) pos->kind,\n                (pos->header != NULL) ? pos->header : \"(null)\",\n                (pos->value != NULL) ? pos->value : \"(null)\");\n      }\n      if ( (NULL != iterator) )\n      {\n        int it_res = (int) iterator (iterator_cls,\n                                     pos->kind,\n                                     pos->header,\n                                     pos->value);\n        if (log != NULL)\n        {\n          fprintf(log, \"    iterator returned: %d\\n\", it_res);\n        }\n        if (MHD_NO == it_res)\n        {\n          if (log != NULL)\n          {\n            fprintf(log, \"    iterator requested early exit -> return %d\\n\", ret);\n            fclose(log);\n          }\n          return ret;\n        }\n      }\n    }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_get_connection_values: finished -> return %d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n",
  "explanation": "The original function referenced several project-specific types and a storage-class macro (_MHD_EXTERN) that prevented standalone compilation. To make the code compile while preserving its logic, I removed the _MHD_EXTERN prefix and added minimal, local definitions for the used types: enum MHD_ValueKind, MHD_KeyValueIterator, struct MHD_HTTP_Req_Header, struct MHD_Request, struct MHD_Connection, and the constant MHD_NO. No other logic was changed; the function body remains as in the original."
}