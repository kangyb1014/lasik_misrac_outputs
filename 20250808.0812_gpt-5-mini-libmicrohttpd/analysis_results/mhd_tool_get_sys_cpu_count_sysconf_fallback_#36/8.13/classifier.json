{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified mhd_tool_get_sys_cpu_count_sysconf_fallback_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/291.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_sysconf_fallback_ as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_sysconf_fallback_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysconf_fallback_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SYSCONF) && \\\n  (defined(HAS_DECL__SC_CRAY_NCPU) || defined(HAS_DECL__SC_NPROCESSORS_CONF))\n  long value = -1;\n#ifdef HAS_DECL__SC_CRAY_NCPU\n  if (0 >= value)\n    value = sysconf (_SC_CRAY_NCPU);\n#endif /* HAS_DECL__SC_CRAY_NCPU */\n#ifdef HAS_DECL__SC_NPROCESSORS_CONF\n  if (0 >= value)\n    value = sysconf (_SC_NPROCESSORS_CONF);\n#endif /* HAS_DECL__SC_NPROCESSORS_CONF */\n  if (0 >= value)\n    return -1;\n  ret = (int) value;\n  if ((long) ret != value)\n    return -1; /* Overflow */\n#endif /* HAVE_SYSCONF &&\n          (HAS_DECL__SC_CRAY_NCPU || HAS_DECL__SC_NPROCESSORS_CONF) */\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function mhd_tool_get_sys_cpu_count_sysconf_fallback_:\n#define HAVE_SYSCONF 1\n...\n#define HAS_DECL__SC_NPROCESSORS_CONF 1\n</additional code>\nJudge whether the above mhd_tool_get_sys_cpu_count_sysconf_fallback_ code violates the rule 8.13 or not.",
  "is_rule_violated": false,
  "scenario": "No violation: the function mhd_tool_get_sys_cpu_count_sysconf_fallback_ does not use any pointers. Rule 8.13 concerns pointer const-qualification; because there are no pointer variables or pointer parameters in this function (only int and long scalars and calls to sysconf which takes an integer argument and returns a long), there is no opportunity or need to apply const-qualification to a pointer. Therefore the rule is not violated.",
  "test_code": ""
}