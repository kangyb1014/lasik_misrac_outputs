{
  "user_message": "An agent A claimed that the following MHD_MD5_update code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_update.\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function modifies the pointer parameter 'data' (e.g. data += bytes_left; data += MD5_BLOCK_SIZE). MISRA C 2023 Rule 17.8 requires that a pointer parameter itself shall not be modified (though the object pointed to may be). Thus incrementing the parameter 'data' inside MHD_MD5_update violates the rule. A concrete violation path: when bytes_have != 0 and length >= bytes_left the code does data += bytes_left; or when there are full blocks the code does data += MD5_BLOCK_SIZE in the while loop \u2014 both modify the pointer parameter.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nconst size_t MD5_BLOCK_SIZE = 64;\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /* Number of bytes in the context buffer */\n  FILE *log = fopen(\"/tmp/logs/661.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"ENTER: ctx=%p data=%p length=%zu\\n\", (void *)ctx, (const void *)data, length);\n    fflush(log);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"SHORTCUT: length == 0 -> return\\n\");\n      fclose(log);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (log != NULL)\n  {\n    fprintf(log, \"AFTER_COUNT_UPDATE: bytes_have=%u new_count=%zu\\n\", bytes_have, ctx->count);\n    fflush(log);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (log != NULL)\n    {\n      fprintf(log, \"BRANCH: bytes_have!=0, bytes_left=%u, length=%zu\\n\", bytes_left, length);\n      fflush(log);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      if (log != NULL)\n      {\n        fprintf(log, \"ACTION: copying %u bytes from data (%p) into ctx->buffer+%u\\n\",\n                bytes_left, (const void *)data, bytes_have);\n        fflush(log);\n      }\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log pointer and length state just before modification */\n      if (log != NULL)\n      {\n        fprintf(log, \"BEFORE_MODIFY: data=%p length=%zu\\n\", (const void *)data, length);\n        fflush(log);\n      }\n\n      /* Move the data pointer forward locally (it's a local parameter variable)\n         to reflect the consumed bytes. This matches the original logic. */\n      data += bytes_left;\n      length -= bytes_left;\n\n      if (log != NULL)\n      {\n        fprintf(log, \"AFTER_MODIFY: data=%p length=%zu\\n\", (const void *)data, length);\n        fflush(log);\n      }\n\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n\n      if (log != NULL)\n      {\n        fprintf(log, \"POST_TRANSFORM: bytes_have reset to %u\\n\", bytes_have);\n        fflush(log);\n      }\n    }\n    else\n    {\n      if (log != NULL)\n      {\n        fprintf(log, \"NOT_ENOUGH_TO_FILL: length < bytes_left -> copy only and return\\n\");\n        fflush(log);\n      }\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (log != NULL)\n    {\n      fprintf(log, \"WHILE_LOOP: processing full block at data=%p length=%zu\\n\", (const void *)data, length);\n      fflush(log);\n    }\n\n    md5_transform (ctx->H, data);\n\n    /* Log pointer and length state just before modification */\n    if (log != NULL)\n    {\n      fprintf(log, \"BEFORE_MODIFY_LOOP: data=%p length=%zu\\n\", (const void *)data, length);\n      fflush(log);\n    }\n\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n\n    if (log != NULL)\n    {\n      fprintf(log, \"AFTER_MODIFY_LOOP: data=%p length=%zu\\n\", (const void *)data, length);\n      fflush(log);\n    }\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log != NULL)\n    {\n      fprintf(log, \"TAIL_COPY: copying %zu bytes from data=%p into ctx->buffer+%u\\n\",\n              length, (const void *)data, bytes_have);\n      fprintf(log, \"EXIT: final data=%p final_length=%zu\\n\", (const void *)data, length);\n      fclose(log);\n    }\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n  else\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"EXIT: no tail to copy, final data=%p final_length=%zu\\n\", (const void *)data, length);\n      fclose(log);\n    }\n  }\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The function parameter 'data' is a pointer parameter (declared as const uint8_t *data) and the code performs pointer arithmetic on it (data += bytes_left; data += MD5_BLOCK_SIZE;). That modifies the pointer parameter itself rather than the object it points to, which is exactly what MISRA C 2023 Rule 17.8 forbids. To comply, make a local copy of the pointer (for example: const uint8_t *p = data;) and modify the local copy instead of the parameter."
}