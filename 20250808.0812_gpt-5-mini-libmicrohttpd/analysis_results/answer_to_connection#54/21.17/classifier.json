{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/439.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function answer_to_connection:\nstruct connection_info_struct\n{\n  int connectiontype;\n  char *answerstring;\n  struct MHD_PostProcessor *postprocessor;\n}\n...\n#define POSTBUFFERSIZE 512\n...\nstatic const char *askpage =\n  \"<html><body>\\n\"\n  \"What's your name, Sir?<br>\\n\"\n  \"<form action=\\\"/namepost\\\" method=\\\"post\\\">\\n\"\n  \"<input name=\\\"name\\\" type=\\\"text\\\">\\n\"\n  \"<input type=\\\"submit\\\" value=\\\" Send \\\"></form>\\n\"\n  \"</body></html>\"\n...\nstatic const char *errorpage =\n  \"<html><body>This doesn't seem to be right.</body></html>\"\n</additional code>\nJudge whether the above answer_to_connection code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Calling strcmp(method, ...) without ensuring 'method' is a valid, null-terminated string can read past the bounds of the object referenced by 'method' (or dereference a NULL pointer). For example, if the HTTP library passes a non-null pointer that does not point to a NUL-terminated buffer (or passes NULL), the strcmp calls (strcmp(method, \"POST\") and strcmp(method, \"GET\")) can access memory beyond the object bounds, violating MISRA C 2023 Rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* Log entry and some pointers/state; do not dereference method here. */\n  FILE *log = fopen(\"/tmp/logs/439.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"enter answer_to_connection: cls=%p, connection=%p, url=%p, method=%p, version=%p, req_cls_ptr=%p, *req_cls=%p, upload_data_size=%p\\n\",\n            cls, (void *) connection, (const void *) url, (const void *) method, (const void *) version,\n            (void *) req_cls, (void *) (req_cls ? *req_cls : NULL), (void *) upload_data_size);\n    fclose(log);\n  }\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  /* Log just prior to strcmp usages to capture the pointer value and note potential issue. */\n  log = fopen(\"/tmp/logs/439.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"about to compare method (pointer=%p) with \\\"GET\\\" and \\\"POST\\\"\\n\", (const void *) method);\n    fclose(log);\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n"
}