{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If a caller passes a NULL header pointer (header == NULL) to MHD_add_response_header, the function immediately calls MHD_str_equal_caseless_(header, ...). MHD_str_equal_caseless_ dereferences str1 (header) without a NULL check, causing an access through a NULL pointer (out-of-bounds/undefined behavior). Similarly, add_response_entry uses strlen(header) without validating header != NULL. Therefore use of standard string functions can result in accesses beyond the bounds of the object referenced by the pointer parameters \u2014 violation of MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const char *MHD_HTTP_HEADER_CONNECTION = \"Connection\";\nstatic const char *MHD_HTTP_HEADER_TRANSFER_ENCODING = \"Transfer-Encoding\";\nstatic const char *MHD_HTTP_HEADER_DATE = \"Date\";\nstatic const char *MHD_HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\nstatic const int MHD_RAF_HAS_TRANS_ENC_CHUNKED = 0x01;\nstatic const int MHD_RAF_HAS_CONTENT_LENGTH = 0x02;\nstatic const int MHD_RAF_HAS_DATE_HDR = 0x04;\nstatic const int MHD_RF_INSANITY_HEADER_CONTENT_LENGTH = 0x10;\nstatic const int MHD_RF_HEAD_ONLY_RESPONSE = 0x20;\nstatic void mhd_assert(int cond)\n{\n  if (!cond)\n    abort();\n}\nstatic void _MHD_remove_header(struct MHD_Response *response,\n                               struct MHD_HTTP_Res_Header *hdr)\n{\n  (void) response;\n  (void) hdr;\n  /* In the real library this would unlink the header from a list. */\n}\n\nstatic enum MHD_Result add_response_header_connection(struct MHD_Response *response,\n                                                      const char *content)\n{\n  /* Simplified behavior: accept the header and set a flag if \"keep-alive\" */\n  (void) response;\n  (void) content;\n  return MHD_YES;\n}\nstatic enum MHD_Result add_response_entry(struct MHD_Response *response,\n                                         int kind,\n                                         const char *header,\n                                         const char *content)\n{\n  (void) kind;\n  (void) response;\n  (void) header;\n  (void) content;\n  /* Pretend we always succeed adding a generic header */\n  return MHD_YES;\n}\nstatic struct MHD_HTTP_Res_Header *MHD_get_response_element_n_(struct MHD_Response *response,\n                                                               int kind,\n                                                               const char *name,\n                                                               size_t name_len)\n{\n  (void) response;\n  (void) kind;\n  (void) name_len;\n  /* Return a simple allocated header object. Caller is expected to free it. */\n  struct MHD_HTTP_Res_Header *hdr = malloc(sizeof(*hdr));\n  if (!hdr)\n    return NULL;\n  hdr->header = strdup(name);\n  hdr->value = strdup(\"\");\n  return hdr;\n}\nenum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Probe logging: record entry state (do not dereference header/content) */\n  FILE *log = fopen(\"/tmp/logs/55.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"enter: response=%p header=%p content=%p\\n\",\n            (void *) response, (void *) header, (void *) content);\n    fclose(log);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    log = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"branch: Connection header (header=%p)\\n\", (void *) header);\n      fclose(log);\n    }\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    log = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"branch: Transfer-Encoding (header=%p, content=%p)\\n\",\n              (void *) header, (void *) content);\n      fclose(log);\n    }\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      /* kind */ 0,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    log = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"branch: Date header (header=%p)\\n\", (void *) header);\n      fclose(log);\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, /* kind */ 0,\n                                         MHD_HTTP_HEADER_DATE,\n                                         strlen(MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      /* kind */ 0,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    log = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"branch: Content-Length header (header=%p)\\n\", (void *) header);\n      fclose(log);\n    }\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        /* kind */ 0,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  log = fopen(\"/tmp/logs/55.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"fallthrough: generic header add (header=%p, content=%p)\\n\",\n            (void *) header, (void *) content);\n    fclose(log);\n  }\n\n  return add_response_entry (response,\n                             /* kind */ 0,\n                             header,\n                             content);\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 Rule 21.17 concerns the Standard Library string.h functions (memcpy, strlen, strcpy, etc.) being used in a way that can access beyond the bounds of the objects passed to them. The snippet you provided does not call any standard string.h functions directly \u2014 it calls library helpers such as MHD_str_equal_caseless_ and add_response_entry. Those helpers might internally use standard string functions, but agent A gave no implementation showing that they call strlen/strcmp/etc. with a potentially NULL pointer.\n\nAgent A\u2019s hypothetical (header == NULL) describes undefined behavior if the implementation of MHD_str_equal_caseless_ or add_response_entry dereferences header or calls strlen(header) without a NULL check. That would be a real bug (and could violate MISRA rules), but you cannot conclude Rule 21.17 is violated from the shown code alone. To demonstrate a 21.17 violation you must show a direct call to a string.h routine with a pointer that can be NULL/out-of-bounds or show the implementation of the helper that does so. In addition, many APIs document preconditions (header must be non-NULL); if that precondition exists, lack of a NULL check in the caller is not a 21.17 fault.\n\nFinally, the test code provided by agent A used strlen in a helper and attempted to build, but it failed to compile and produced no runtime evidence. In summary: the report is not supported by the provided code and therefore is not correct as stated."
}