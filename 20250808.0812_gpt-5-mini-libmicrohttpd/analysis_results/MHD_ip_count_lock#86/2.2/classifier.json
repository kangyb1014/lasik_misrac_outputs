{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/690.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_ip_count_lock:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n</additional code>\nJudge whether the above MHD_ip_count_lock code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "When the project is built without thread support, the function body reduces to a no-op: the assertion is a no-op and the cast (void) daemon; has no effect on behaviour. Those executed operations (the no-op assertion and the void cast) can be removed without changing program behaviour, i.e. they are dead code. Specifically, given the provided macro definitions (mhd_assert expands to ((void)0)), the mhd_assert line is a no-op and therefore dead; similarly the (void) daemon; statement is an executed no-op in the non-thread build, and its removal would not affect behaviour.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Minimal daemon structure matching the fields used by the target function. */\nstruct MHD_Daemon\n{\n  void *master;\n  int per_ip_connection_mutex;\n};\n\n/* Provide a no-op assertion function to reflect the project definition\n   where mhd_assert expands to ((void)0). This keeps the original\n   source call-site unchanged while making the test code compilable. */\nstatic void mhd_assert(int ignored)\n{\n  (void)ignored; /* no-op: mirrors ((void)0) behaviour */\n}\n\n/* Probe helper: write control-path and state info to /tmp/logs/690.txt.\n   This function is a passive logger used only to demonstrate the\n   executed-but-useless operations (the violation scenario). */\nstatic void probe_log(const char *tag, const struct MHD_Daemon *d)\n{\n  FILE *f = fopen(\"/tmp/logs/690.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s: daemon=%p, master=%p\\n\", tag, (const void *)d,\n            (const void *)((d != NULL) ? d->master : NULL));\n    fclose(f);\n  }\n}\n\n/* The original function, preserved as closely as possible. The function\n   will log the control path and the daemon state so that a test run can\n   demonstrate that certain operations are executed but have no effect. */\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  /* Original call-site kept: in the real project this macro expands to\n     ((void)0). Here it is a no-op function to keep the test code\n     compilable. */\n  mhd_assert (NULL == daemon->master);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* When thread support is enabled, the real mutex lock is executed. */\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n  probe_log(\"after_mutex_lock\", daemon);\n#else\n  /* In the non-threaded build the only statement referencing the\n     parameter is a void-cast; this is an executed no-op. */\n  (void) daemon;\n  probe_log(\"no_threads_void_cast_executed\", daemon);\n#endif\n}\n"
}