{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_fs_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/81.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_fs_traverse as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse:\n```c\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_fs_traverse:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n</additional code>\nJudge whether the above lfs_fs_traverse code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The LFS_LOCK macro is defined as '((void)cfg,0)', so LFS_LOCK(lfs->cfg) always returns 0. Therefore the conditional branch 'if (err) { return err; }' can never be taken at runtime and is unreachable in this project configuration.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Minimal type declarations to compile in isolation. These mirror the\n   signatures used by the original code and do not replace project\n   definitions. */\ntypedef uint32_t lfs_block_t;\ntypedef struct lfs {\n    void *cfg;\n} lfs_t;\n\n/* External traversal helper declared (defined elsewhere in the project). */\nextern int lfs_fs_traverse_(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data, int flag);\n\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    /* Preserve original logic: call lock first and keep err variable. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: append detailed control-flow/state logs to /tmp/logs/81.txt. */\n    FILE *fp = fopen(\"/tmp/logs/81.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"ENTER lfs_fs_traverse: lfs=%p cb=%p data=%p\\n\",\n                (void*)lfs, (void*)(uintptr_t)cb, data);\n        fprintf(fp, \"AFTER LFS_LOCK: err=%d\\n\", err);\n    }\n\n    /* Original early-return branch retained (this is the unreachable branch\n       for the scenario because LFS_LOCK is defined to return 0 in this\n       project). We log if it would be taken. */\n    if (err) {\n        if (fp != NULL) {\n            fprintf(fp, \"UNEXPECTED: taking early return due to err=%d\\n\", err);\n            fclose(fp);\n        }\n        return err;\n    }\n\n    if (fp != NULL) {\n        fprintf(fp, \"PROCEED: calling lfs_fs_traverse_\\n\");\n    }\n\n    /* Preserve original call and semantics (pass 'true' as 1). */\n    err = lfs_fs_traverse_(lfs, cb, data, 1);\n\n    if (fp != NULL) {\n        fprintf(fp, \"RETURN from lfs_fs_traverse_: err=%d\\n\", err);\n    }\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    if (fp != NULL) {\n        fprintf(fp, \"AFTER LFS_UNLOCK\\n\");\n        fprintf(fp, \"EXIT lfs_fs_traverse -> %d\\n\", err);\n        fclose(fp);\n    }\n\n    return err;\n}\n"
}