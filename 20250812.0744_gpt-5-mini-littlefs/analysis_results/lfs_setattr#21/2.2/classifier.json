{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_setattr:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_setattr_(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    if (size > lfs->attr_max) {\n        return LFS_ERR_NOSPC;\n    }\n\n    return lfs_commitattr(lfs, path, type, buffer, size);\n}\n...\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n</additional code>\nJudge whether the above lfs_setattr code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "In the provided project configuration LFS_LOCK, LFS_UNLOCK and LFS_TRACE expand to no-ops. The lock/unlock and trace operations are executed (the code assigns err = LFS_LOCK(...), calls LFS_UNLOCK(...)) but produce no effect \u2014 removing those operations would not change program behaviour in this configuration. Therefore the project contains dead code in lfs_setattr (violates MISRA C 2023 Rule 2.2). The concrete violation scenario: LFS_LOCK always returns 0 and the subsequent 'if (err) return err;' never triggers; LFS_TRACE expands to nothing; LFS_UNLOCK is a no-op. These executed no-op operations are dead code.",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Preserve original logic */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe logging for violation scenario */\n    FILE *log = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (log != NULL) {\n        fprintf(log, \"ENTRY lfs_setattr: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%\" PRIu32 \"\\n\",\n                (void*)lfs, path ? path : \"(null)\", (unsigned)type, buffer, (uint32_t)size);\n        fprintf(log, \"LFS_LOCK returned: %d\\n\", err);\n    }\n\n    if (err) {\n        if (log) {\n            fprintf(log, \"Early return due to LFS_LOCK -> %d\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    if (log) {\n        fprintf(log, \"lfs_setattr_ returned: %d\\n\", err);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    if (log) {\n        fprintf(log, \"LFS_UNLOCK called (no-op in this configuration). Returning: %d\\n\", err);\n        fclose(log);\n    }\n\n    return err;\n}\n"
}