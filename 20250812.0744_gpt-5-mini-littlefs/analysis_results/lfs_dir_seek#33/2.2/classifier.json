{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_seek:\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (err) {\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    off -= dir->pos;\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n\n    while (off > 0) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n    }\n\n    return 0;\n}\n...\nstatic int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir) {\n    // reload the head dir\n    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n    if (err) {\n        return err;\n    }\n\n    dir->id = 0;\n    dir->pos = 0;\n    return 0;\n}\n...\nstatic inline int lfs_pair_cmp(\n        const lfs_block_t paira[2],\n        const lfs_block_t pairb[2]) {\n    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||\n             paira[0] == pairb[1] || paira[1] == pairb[0]);\n}\n...\nstatic int lfs_dir_fetch(lfs_t *lfs,\n        lfs_mdir_t *dir, const lfs_block_t pair[2]) {\n    // note, mask=-1, tag=-1 can never match a tag since this\n    // pattern has the invalid bit set\n    return (int)lfs_dir_fetchmatch(lfs, dir, pair,\n            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);\n}\n...\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\ntypedef struct lfs {\n    lfs_cache_t rcache;\n    lfs_cache_t pcache;\n\n    lfs_block_t root[2];\n    struct lfs_mlist {\n        struct lfs_mlist *next;\n        uint16_t id;\n        uint8_t type;\n        lfs_mdir_t m;\n    } *mlist;\n    uint32_t seed;\n\n    lfs_gstate_t gstate;\n    lfs_gstate_t gdisk;\n    lfs_gstate_t gdelta;\n\n    struct lfs_lookahead {\n        lfs_block_t start;\n        lfs_block_t size;\n        lfs_block_t next;\n        lfs_block_t ckpoint;\n        uint8_t *buffer;\n    } lookahead;\n\n    const struct lfs_config *cfg;\n    lfs_size_t block_count;\n    lfs_size_t name_max;\n    lfs_size_t file_max;\n    lfs_size_t attr_max;\n    lfs_size_t inline_max;\n\n#ifdef LFS_MIGRATE\n    struct lfs1 *lfs1;\n#endif\n} lfs_t\n...\ntypedef struct lfs_dir {\n    struct lfs_dir *next;\n    uint16_t id;\n    uint8_t type;\n    lfs_mdir_t m;\n\n    lfs_off_t pos;\n    lfs_block_t head[2];\n} lfs_dir_t\n...\ntypedef uint32_t lfs_off_t\n</additional code>\nJudge whether the above lfs_dir_seek code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The lock/unlock operations are implemented as no-ops (LFS_LOCK(cfg) expands to ((void)cfg,0) and LFS_UNLOCK(cfg) expands to ((void)cfg)). They are executed (err = LFS_LOCK(...); and LFS_UNLOCK(...);) but have no effect on program state; removing these operations would not change behavior. Therefore these executed operations constitute dead code and violate MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logger that records control path and key state to /tmp/logs/266.txt\n   Keeps side-effects minimal and preserves original logic of lfs_dir_seek. */\nstatic void lfs_log_probe(const char *event, void *lfs, void *dir, uint32_t off, int err) {\n    FILE *f = fopen(\"/tmp/logs/266.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"EVENT=%s lfs=%p dir=%p off=%\" PRIu32 \" err=%d\\n\",\n            event, lfs, dir, off, err);\n    /* Attempt to log some dir internal state if available (guarded by dir != NULL).\n       Accessing these fields mirrors the original data layout but only when dir is\n       non-null to avoid altering control flow or causing undefined behaviour. */\n    if (dir) {\n        /* It's unsafe to dereference unknown types in a strictly portable way here;\n           but in the real build these types exist. We perform a conditional cast\n           and guarded access to mirror internal state for debugging. */\n        struct probe_dir {\n            void *next;\n            uint16_t id;\n            uint8_t type;\n            /* skip m */\n            uint32_t pos;\n            uint32_t head0;\n            uint32_t head1;\n        } *p = (struct probe_dir*)dir;\n\n        fprintf(f, \"  dir.id=%u dir.type=%u dir.pos=%u head[0]=%u head[1]=%u\\n\",\n                (unsigned)p->id, (unsigned)p->type, (unsigned)p->pos,\n                (unsigned)p->head0, (unsigned)p->head1);\n    }\n    fclose(f);\n}\n\n/* Modified lfs_dir_seek that preserves original logic but adds probes. */\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_probe(\"after_lock\", (void*)lfs, (void*)dir, off, err);\n\n    if (err) {\n        lfs_log_probe(\"lock_failed_return\", (void*)lfs, (void*)dir, off, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    lfs_log_probe(\"before_seek_\", (void*)lfs, (void*)dir, off, 0);\n    err = lfs_dir_seek_(lfs, dir, off);\n    lfs_log_probe(\"after_seek_\", (void*)lfs, (void*)dir, off, err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"after_unlock\", (void*)lfs, (void*)dir, off, err);\n    return err;\n}\n"
}