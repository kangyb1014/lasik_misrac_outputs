{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_tell:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_ASSERT(test) assert(test)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n    return file->pos;\n}\n...\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n</additional code>\nJudge whether the above lfs_file_tell code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The early-return branch 'if (err) { return err; }' in lfs_file_tell is unreachable because, in the project configuration shown, the LFS_LOCK(cfg) macro is defined as '((void)cfg,0)', so err is always 0 and the conditional can never be true. This creates unreachable code (violating MISRA C 2023 Rule 2.1).",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe log to record control path and state for the unreachable-branch scenario. */\n    FILE *log = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_file_tell: lfs=%p file=%p lock_err=%d\\n\",\n                (void*)lfs, (void*)file, err);\n    }\n\n    /* Original early-return branch which is unreachable given LFS_LOCK(cfg) -> 0. */\n    if (err) {\n        if (log) {\n            fprintf(log, \"PATH: early_return due to err=%d\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Preserve original assertion semantics but capture the check result for logging. */\n    bool isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    if (log) {\n        fprintf(log, \"mlist_isopen=%d\\n\", (int)isopen);\n    }\n    LFS_ASSERT(isopen);\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    if (log) {\n        fprintf(log, \"RESULT: res=%lld file->pos=%lld\\n\",\n                (long long)res, (long long)file->pos);\n    }\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    if (log) {\n        fprintf(log, \"EXIT lfs_file_tell: unlocked\\n\");\n        fclose(log);\n    }\n\n    return res;\n}\n"
}