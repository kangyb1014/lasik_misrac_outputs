{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/74.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_tell:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_ASSERT(test) assert(test)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n    return file->pos;\n}\n...\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n</additional code>\nJudge whether the above lfs_file_tell code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The lock/unlock operations (LFS_LOCK/LFS_UNLOCK) are defined as no-ops in this project. They are executed but have no effect on program behaviour (LFS_LOCK always returns 0, LFS_UNLOCK does nothing). Removing these calls would not change the observable behaviour of lfs_file_tell in this project, so these operations are dead code under MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/74.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original locking check */\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"[enter] lfs_file_tell: lfs=%p file=%p LFS_LOCK() -> %d\",\n              (void*)lfs, (void*)file, err);\n    if (err) {\n        probe_log(\"[exit] lfs_file_tell: early return due to lock error=%d\",\n                  err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n    probe_log(\"[assert] mlist_isopen passed for file=%p\", (void*)file);\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n    probe_log(\"[compute] lfs_file_tell_ returned pos=%lld\",\n              (long long)res);\n\n    LFS_TRACE(\"lfs_file_tell -> %lld\", (long long)res);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"[exit] lfs_file_tell: LFS_UNLOCK() called, returning %lld\",\n              (long long)res);\n\n    return res;\n}\n"
}