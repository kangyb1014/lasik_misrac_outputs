{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/162.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_unmount as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_unmount:\n```c\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_unmount:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_unmount_(lfs_t *lfs) {\n    return lfs_deinit(lfs);\n}\n...\nstatic int lfs_deinit(lfs_t *lfs) {\n    // free allocated memory\n    if (!lfs->cfg->read_buffer) {\n        lfs_free(lfs->rcache.buffer);\n    }\n\n    if (!lfs->cfg->prog_buffer) {\n        lfs_free(lfs->pcache.buffer);\n    }\n\n    if (!lfs->cfg->lookahead_buffer) {\n        lfs_free(lfs->lookahead.buffer);\n    }\n\n    return 0;\n}\n</additional code>\nJudge whether the above lfs_unmount code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "LFS_LOCK and LFS_UNLOCK are implemented as no-ops in the provided build (#define LFS_LOCK(cfg) ((void)cfg,0) and #define LFS_UNLOCK(cfg) ((void)cfg)). These lock/unlock operations are executed in lfs_unmount but have no effect and always return 0. Because they produce no side-effects and their removal would not affect program behaviour in this configuration, they constitute dead code per MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n\nint lfs_unmount(lfs_t *lfs) {\n    /* Preserve original locking semantics */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry and lock result */\n    {\n        FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER: lfs_unmount lfs=%p lock_err=%d\\n\", (void*)lfs, err);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EARLY RETURN: lock returned non-zero: %d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Log state before calling internal unmount */\n    {\n        FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"BEFORE unmount_: rcache=%p pcache=%p lookahead=%p\\n\",\n                    (void*)lfs->rcache.buffer, (void*)lfs->pcache.buffer, (void*)lfs->lookahead.buffer);\n            fclose(f);\n        }\n    }\n\n    /* Preserve original logic */\n    err = lfs_unmount_(lfs);\n\n    /* Log result and note the no-op locks which demonstrate the violation scenario */\n    {\n        FILE *f = fopen(\"/tmp/logs/162.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"AFTER: lfs_unmount_ returned %d\\n\", err);\n            fprintf(f, \"INFO: In this build, LFS_LOCK/LFS_UNLOCK are no-ops. Their removal would not change behavior -> dead code (Rule 2.2)\\n\");\n            fclose(f);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}