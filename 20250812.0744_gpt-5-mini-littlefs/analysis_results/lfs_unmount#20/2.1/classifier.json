{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/161.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_unmount as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_unmount:\n```c\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_unmount(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    LFS_TRACE(\"lfs_unmount -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_unmount:\nstatic int lfs_unmount_(lfs_t *lfs) {\n    return lfs_deinit(lfs);\n}\n...\nstatic int lfs_deinit(lfs_t *lfs) {\n    // free allocated memory\n    if (!lfs->cfg->read_buffer) {\n        lfs_free(lfs->rcache.buffer);\n    }\n\n    if (!lfs->cfg->prog_buffer) {\n        lfs_free(lfs->pcache.buffer);\n    }\n\n    if (!lfs->cfg->lookahead_buffer) {\n        lfs_free(lfs->lookahead.buffer);\n    }\n\n    return 0;\n}\n...\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n</additional code>\nJudge whether the above lfs_unmount code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The early-return branch if (err) { return err; } in lfs_unmount is unreachable because LFS_LOCK is defined as the constant expression ((void)cfg,0). Thus LFS_LOCK(lfs->cfg) always yields 0, making the condition false and the return path unreachable at runtime (the unreachable code is the body of the if immediately after the LFS_LOCK invocation).",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Minimal types to allow compilation of this translation unit. */\nstruct lfs_config {\n    void *read_buffer;\n    void *prog_buffer;\n    void *lookahead_buffer;\n};\n\ntypedef struct lfs_s {\n    struct lfs_config *cfg;\n    struct { void *buffer; } rcache;\n    struct { void *buffer; } pcache;\n    struct { void *buffer; } lookahead;\n} lfs_t;\n\n/* External symbols provided by the project. We declare them as extern\n   functions here so this file is independently compilable without\n   introducing new macros. */\nextern int lfs_unmount_(lfs_t *lfs);\nextern int LFS_LOCK(const void *cfg);\nextern void LFS_UNLOCK(const void *cfg);\n\n/* Probe function that appends control-path/state information to the\n   requested log file. Kept simple and local to avoid introducing\n   further dependencies. */\nstatic void lfs_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/161.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    (void)fprintf(f, \"\\n\");\n    va_end(ap);\n    (void)fclose(f);\n}\n\n/* Modified lfs_unmount that preserves the original logic but adds\n   probes to demonstrate the unreachable branch scenario. */\nint lfs_unmount(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    lfs_probe(\"lfs_unmount: after LFS_LOCK, err=%d, lfs=%p, cfg=%p\",\n              err, (void*)lfs, (void*)lfs->cfg);\n\n    if (err) {\n        /* This branch is unreachable given the project's definition of\n           LFS_LOCK as a constant-zero expression ((void)cfg,0). The\n           probe records the (hypothetical) early return if it ever\n           occurred in another configuration. */\n        lfs_probe(\"lfs_unmount: early return due to lock failure, err=%d\", err);\n        return err;\n    }\n\n    lfs_probe(\"lfs_unmount: calling lfs_unmount_(%p)\", (void*)lfs);\n\n    err = lfs_unmount_(lfs);\n\n    lfs_probe(\"lfs_unmount: lfs_unmount_ returned %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe(\"lfs_unmount: after LFS_UNLOCK\");\n\n    return err;\n}\n"
}