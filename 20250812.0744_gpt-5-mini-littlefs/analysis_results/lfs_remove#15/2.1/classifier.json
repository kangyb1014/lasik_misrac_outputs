{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/121.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_remove:\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n...\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n</additional code>\nJudge whether the above lfs_remove code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The 'if (err) { return err; }' branch in lfs_remove is unreachable in this translation unit because LFS_LOCK is defined as ((void)cfg,0). Thus err is always 0 after the call to LFS_LOCK(lfs->cfg), making the early-return path impossible to take. This is a violation of MISRA C 2023 Rule 2.1 (no unreachable code).",
  "test_code": "#include <stdio.h>\n\nint lfs_remove_(lfs_t *lfs, const char *path); /* existing function */\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry and lock result */\n    {\n        FILE *fp = fopen(\"/tmp/logs/121.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_remove: enter, lfs=%p, path=\\\"%s\\\", LFS_LOCK returned=%d\\n\",\n                    (void*)lfs, (path != (const char*)0) ? path : \"(null)\", err);\n            fclose(fp);\n        }\n    }\n\n    if (err) {\n        /* Probe: log unreachable early-return path if taken */\n        FILE *fp = fopen(\"/tmp/logs/121.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_remove: early return due to lock error=%d\\n\", err);\n            fclose(fp);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Probe: log result of lfs_remove_ and control flow */\n    {\n        FILE *fp = fopen(\"/tmp/logs/121.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_remove: lfs_remove_ returned=%d\\n\", err);\n            fclose(fp);\n        }\n    }\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: final state before return */\n    {\n        FILE *fp = fopen(\"/tmp/logs/121.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_remove: unlock done, returning=%d\\n\", err);\n            fclose(fp);\n        }\n    }\n\n    return err;\n}\n"
}