{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_size:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_ASSERT(test) assert(test)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n...\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n</additional code>\nJudge whether the above lfs_file_size code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The check for LFS_LOCK failure is effectively unreachable in the provided project configuration because LFS_LOCK(cfg) is defined to always return 0. Therefore the 'if (err) { return err; }' branch in lfs_file_size can never be executed in this build, which constitutes unreachable code under MISRA C:2023 Rule 2.1.",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper that appends a short message to the log file. */\nstatic void probe_log(const char *msg) {\n    FILE *f = fopen(\"/tmp/logs/41.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the lock result and the control decision so callers can see\n       that the error branch is never taken under the current configuration. */\n    char buf[128];\n    (void)snprintf(buf, sizeof(buf), \"lfs_file_size: LFS_LOCK returned %d\", err);\n    probe_log(buf);\n\n    if (err) {\n        (void)snprintf(buf, sizeof(buf), \"lfs_file_size: error branch taken, returning %d\", err);\n        probe_log(buf);\n        return err;\n    }\n\n    probe_log(\"lfs_file_size: proceeding to LFS_TRACE and assertion\");\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    (void)snprintf(buf, sizeof(buf), \"lfs_file_size -> %"
}