{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct metal_bus declares name as a non-const pointer (e.g. char *name;) then passing bus->name only for read-only use (as here, to a printf-style %s in metal_log) indicates the pointer should be const-qualified (const char *). In that case the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "int metal_bus_register(struct metal_bus *bus)\n{\n    /* Local includes for logging helpers */\n    #include <stdio.h>\n    #include <string.h>\n\n    FILE *log = fopen(\"/tmp/logs/33.txt\", \"a\");\n    size_t name_len = 0U;\n\n    if (bus && bus->name) {\n        /* compute once to preserve behavior while avoiding repeated calls */\n        name_len = strlen(bus->name);\n    }\n\n    if (log) {\n        fprintf(log, \"ENTRY: metal_bus_register(bus=%p)\\n\", (void *)bus);\n        fprintf(log, \"STATE: bus->name_ptr=%p\\n\", (void *)(bus ? bus->name : NULL));\n        if (bus && bus->name) {\n            fprintf(log, \"STATE: bus->name=\\\"%s\\\"\\n\", bus->name);\n            fprintf(log, \"STATE: strlen(bus->name)=%zu\\n\", name_len);\n        } else {\n            fprintf(log, \"STATE: bus or bus->name is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Preserve original validation logic */\n    if (!bus || !bus->name || !name_len)\n    {\n        if (log) {\n            fprintf(log, \"DECISION: invalid parameter, returning -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"ACTION: calling metal_bus_find(name=\\\"%s\\\")\\n\", bus->name);\n        fflush(log);\n    }\n\n    int find_ret = metal_bus_find(bus->name, NULL);\n\n    if (log) {\n        fprintf(log, \"RESULT: metal_bus_find returned %d\\n\", find_ret);\n        fflush(log);\n    }\n\n    if (find_ret == 0)\n    {\n        if (log) {\n            fprintf(log, \"DECISION: bus already exists, returning -EEXIST\\n\");\n            fclose(log);\n        }\n        return -EEXIST;\n    }\n\n    /* Preserve original list initialization and insertion */\n    metal_list_init(&bus->devices);\n    if (log) {\n        fprintf(log, \"ACTION: metal_list_init(&bus->devices) done\\n\");\n        fflush(log);\n    }\n\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    if (log) {\n        fprintf(log, \"ACTION: metal_list_add_tail(&_metal.common.bus_list, &bus->node) done\\n\");\n        fprintf(log, \"EXIT: registered %s bus, returning 0\\n\", bus->name);\n        fclose(log);\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    return 0;\n}\n"
}