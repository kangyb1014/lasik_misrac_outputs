{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment uses bus->name only for read-only operations (strlen, metal_bus_find, metal_log). If struct metal_bus declares name as 'char *name;', that is a violation: the pointer should be declared as 'const char *name' since it is only read and passed to functions taking const char*. Thus Rule 8.13 is violated in the common case where bus->name is not const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append a textual log line to /tmp/logs/33.txt. */\nstatic void probe_log(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/33.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", line);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    char buf[512];\n\n    /* Entry log */\n    snprintf(buf, sizeof(buf), \"ENTER metal_bus_register: bus=%p\", (void *)bus);\n    probe_log(buf);\n\n    if (!bus) {\n        probe_log(\"EXIT metal_bus_register: bus is NULL -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Log pointer to name without dereferencing yet */\n    snprintf(buf, sizeof(buf), \"bus=%p, bus->name_ptr=%p\", (void *)bus, (void *)bus->name);\n    probe_log(buf);\n\n    if (!bus->name) {\n        probe_log(\"EXIT metal_bus_register: bus->name is NULL -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Safe to compute length now */\n    size_t name_len = strlen(bus->name);\n    snprintf(buf, sizeof(buf), \"bus=%p, bus->name=\"\"%s\"\", length=%zu\", (void *)bus, bus->name, name_len);\n    probe_log(buf);\n\n    if (!name_len) {\n        probe_log(\"EXIT metal_bus_register: bus->name length is 0 -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Check for existing bus */\n    int find_res = metal_bus_find(bus->name, NULL);\n    snprintf(buf, sizeof(buf), \"metal_bus_find('%s') returned %d\", bus->name, find_res);\n    probe_log(buf);\n\n    if (find_res == 0) {\n        probe_log(\"EXIT metal_bus_register: bus already exists -> -EEXIST\");\n        return -EEXIST;\n    }\n\n    /* Initialize and add to list (preserve original logic) */\n    snprintf(buf, sizeof(buf), \"Initializing device list for bus=%p\", (void *)bus);\n    probe_log(buf);\n    metal_list_init(&bus->devices);\n    probe_log(\"Device list initialized\");\n\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    probe_log(\"Bus node added to _metal.common.bus_list\");\n\n    /* Original logging retained */\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    snprintf(buf, sizeof(buf), \"Called metal_log for bus '%s'\", bus->name);\n    probe_log(buf);\n\n    probe_log(\"EXIT metal_bus_register: success -> 0\");\n    return 0;\n}\n"
}