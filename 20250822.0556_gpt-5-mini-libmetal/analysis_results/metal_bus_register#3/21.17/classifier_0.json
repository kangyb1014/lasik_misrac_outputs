{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The metal_log call uses \"%s\" which reads characters from bus->name until a NUL terminator. In the surrounding function bus->name is already checked for non-NULL and strlen(bus->name) > 0, so under that validation this log line does not itself cause an out-of-bounds access and therefore does not violate MISRA C 2023 Rule 21.17. A concrete violation scenario would be if bus->name pointed to a non\u2011NUL\u2011terminated buffer (or an invalid address); in that case the earlier strlen(bus->name) and this metal_log(\"%s\", bus->name) would read past the object bounds and violate the rule."
}