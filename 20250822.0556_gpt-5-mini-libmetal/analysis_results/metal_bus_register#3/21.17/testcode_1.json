{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf bus != NULL and bus->name != NULL but the character array pointed to by bus->name is not NUL-terminated within its allocated bounds (for example: char name[4] = {'A','B','C','D'}), calling strlen(bus->name) will scan past the buffer and cause out-of-bounds access, violating MISRA C 2023 Rule 21.17. Use of strnlen with the known buffer size or ensuring NUL termination before calling strlen would avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: write logs to /tmp/logs/39.txt about control flow and state.\n * This helper avoids dereferencing bus unless bus is non-NULL to prevent\n * introducing new undefined behavior. It intentionally logs before the\n * strlen() call so that if strlen() scans out-of-bounds and crashes, there\n * will be evidence that the call was about to be made and what the pointers\n * were.\n */\nstatic void probe_log_pre(const struct metal_bus *bus)\n{\n    FILE *f = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"ENTER metal_bus_register\\n\");\n    fprintf(f, \"bus ptr = %p\\n\", (void *)bus);\n    if (bus) {\n        fprintf(f, \"bus->name ptr = %p\\n\", (void *)bus->name);\n    } else {\n        fprintf(f, \"bus is NULL\\n\");\n    }\n    fprintf(f, \"About to evaluate strlen(bus->name) (this may scan the buffer)\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_post(const struct metal_bus *bus, const char *stage, int retcode, size_t name_len)\n{\n    FILE *f = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_bus_register: stage=%s\\n\", stage);\n    fprintf(f, \"bus ptr = %p\\n\", (void *)bus);\n    if (bus)\n        fprintf(f, \"bus->name ptr = %p\\n\", (void *)bus->name);\n    else\n        fprintf(f, \"bus is NULL\\n\");\n    if (name_len != (size_t)-1)\n        fprintf(f, \"observed name length = %zu\\n\", name_len);\n    fprintf(f, \"returning %d\\n\", retcode);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    /* Log pre-state before any potential out-of-bounds scanning by strlen. */\n    probe_log_pre(bus);\n\n    /* Preserve original logic as much as possible. Compute name length only\n     * if bus and bus->name are non-NULL. If strlen causes out-of-bounds access\n     * it will occur here (as in the original code) and the pre-log will\n     * provide evidence leading up to that call.\n     */\n    size_t name_len = (size_t)-1;\n    if (bus && bus->name) {\n        /* This mirrors the original code's use of strlen and is the point\n         * where the reported violation can manifest if bus->name is not\n         * NUL-terminated within its allocated bounds.\n         */\n        name_len = strlen(bus->name);\n    }\n\n    if (!bus || !bus->name || !name_len) {\n        probe_log_post(bus, \"invalid_input\", -EINVAL, name_len == (size_t)-1 ? (size_t)-1 : name_len);\n        return -EINVAL;\n    }\n    if (metal_bus_find(bus->name, NULL) == 0) {\n        probe_log_post(bus, \"already_exists\", -EEXIST, name_len);\n        return -EEXIST;\n    }\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    probe_log_post(bus, \"registered\", 0, name_len);\n    return 0;\n}\n"
}