{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (metal_bus_find(bus->name, NULL) == 0)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation for this fragment as written: bus->name is checked for non-NULL and strlen(bus->name) > 0 before the call, so a well-formed, null-terminated non-empty string is being passed to metal_bus_find. Therefore calling metal_bus_find(bus->name, NULL) will not, by itself, cause string.h functions to access beyond the bounds provided metal_bus_find only reads the string. A violation scenario would be if bus->name were not a null-terminated buffer (in which case the earlier strlen(bus->name) already would read out-of-bounds) or if metal_bus_find used string.h functions that write into or read beyond the storage for bus->name (for example using strcpy into a destination derived from bus->name without checking sizes)."
}