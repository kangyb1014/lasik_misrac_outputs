{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_bus_find(bus->name, NULL) can never return 0 because metal_bus_find only returns 0 when a matching name is found AND the 'result' pointer is non-NULL (the implementation uses 'if (strcmp(...) == 0 && result) { *result = bus; return 0; }'). Since NULL is passed, the '&& result' condition is always false and metal_bus_find will fall through and return -ENOENT. Therefore the if condition '== 0' is always false and the subsequent 'return -EEXIST;' is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append a line to /tmp/logs/31.txt capturing timestamp and message. */\nstatic void probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    probe_write(\"enter metal_bus_register: bus=%p\", (void *)bus);\n\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        probe_write(\"invalid input: bus=%p name=%p name_len=%zu\",\n                    (void *)bus,\n                    (void *)(bus ? bus->name : NULL),\n                    (size_t)(bus ? strlen(bus->name) : 0));\n        probe_write(\"exit metal_bus_register: return=%d\", -EINVAL);\n        return -EINVAL;\n    }\n\n    probe_write(\"calling metal_bus_find(name=\\\"%s\\\", result=NULL)\", bus->name);\n    int rc = metal_bus_find(bus->name, NULL);\n    probe_write(\"metal_bus_find returned: %d\", rc);\n\n    if (rc == 0) {\n        probe_write(\"branch: rc==0 -> name '%s' exists; returning -EEXIST\", bus->name);\n        return -EEXIST;\n    }\n\n    probe_write(\"branch: rc!=0 -> continue registration for '%s'\", bus->name);\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    probe_write(\"registered '%s' successfully: return=0\", bus->name);\n    return 0;\n}\n"
}