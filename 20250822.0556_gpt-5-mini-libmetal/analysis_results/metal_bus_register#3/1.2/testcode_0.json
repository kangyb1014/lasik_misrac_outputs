{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log invocation expands a macro defined using GCC language extensions: the macro uses the GNU statement-expression construct '({ ... })' and the GCC token-pasting trick '##__VA_ARGS__' to swallow a trailing comma. These are compiler-specific extensions, so calling metal_log(...) violates Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/30.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append human-readable traces to /tmp/logs/30.txt. */\nstatic void metal_bus_register_probe(const char *event, struct metal_bus *bus, int find_result)\n{\n    FILE *f = fopen(\"/tmp/logs/30.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[metal_bus_register] event=%s, bus_ptr=%p\\n\", event, (void *)bus);\n    if (bus) {\n        const char *name = bus->name ? bus->name : \"(null)\";\n        size_t name_len = bus->name ? strlen(bus->name) : 0;\n        fprintf(f, \"  name_ptr=%p, name=\\\"%s\\\", name_len=%zu\\n\",\n                (void *)bus->name, name, name_len);\n        fprintf(f, \"  devices_addr=%p, node_addr=%p\\n\",\n                (void *)&bus->devices, (void *)&bus->node);\n    }\n    fprintf(f, \"  metal_bus_find_result=%d\\n\", find_result);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    metal_bus_register_probe(\"entry\", bus, -1);\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        metal_bus_register_probe(\"invalid_bus_or_name\", bus, -1);\n        return -EINVAL;\n    }\n    int find_res = metal_bus_find(bus->name, NULL);\n    metal_bus_register_probe(\"after_metal_bus_find\", bus, find_res);\n    if (find_res == 0) {\n        metal_bus_register_probe(\"name_already_exists\", bus, find_res);\n        return -EEXIST;\n    }\n    metal_list_init(&bus->devices);\n    metal_bus_register_probe(\"after_list_init\", bus, find_res);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_bus_register_probe(\"after_list_add_tail\", bus, find_res);\n    /* Original logging call retained so the original behavior and potential\n       macro expansion (the subject of the Rule 1.2 report) still occurs. */\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    metal_bus_register_probe(\"after_metal_log\", bus, find_res);\n    return 0;\n}"
}