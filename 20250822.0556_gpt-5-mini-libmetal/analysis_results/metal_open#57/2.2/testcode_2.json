{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strerror(-result) is evaluated as an extra argument to metal_log, but the format string \"failed to open device %s\\n\" contains only one %s. strerror(-result) is therefore executed but its result is never used \u2014 removing that call would not affect program behavior, so this is dead code. Fix by adding a matching format specifier (e.g. \"%s: %s\\n\") or remove the strerror() call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/572.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\n/* Probe logger: append control flow and state to /tmp/logs/572.txt */\nstatic void probe_metal_open(const char *path, int shm_flag, int fd, int saved_errno, int result)\n{\n    FILE *f = fopen(\"/tmp/logs/572.txt\", \"a\");\n    if (!f)\n        return; /* Do not change program behavior if logging fails */\n\n    /* Log inputs and outcomes. We capture strerror only when there's an error. */\n    if (!path) {\n        fprintf(f, \"metal_open: path=NULL, shm=%d, fd=%d, result=%d\\n\",\n                shm_flag, fd, result);\n    } else {\n        fprintf(f, \"metal_open: path=\\\"%s\\\", shm=%d, fd=%d, result=%d\\n\",\n                path, shm_flag, fd, result);\n    }\n\n    if (saved_errno != 0) {\n        /* safe: saved_errno captured by caller before further syscalls */\n        const char *errstr = strerror(saved_errno);\n        fprintf(f, \"metal_open: errno=%d, strerror=\\\"%s\\\"\\n\",\n                saved_errno, errstr ? errstr : \"(null)\");\n    } else {\n        fprintf(f, \"metal_open: errno=0 (no error)\\n\");\n    }\n\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    if (!path || !strlen(path)) {\n        /* Log the invalid-path control path before returning */\n        probe_metal_open(path, shm, -1, 0, -EINVAL);\n        return -EINVAL;\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    /* Capture errno immediately if an error occurred so that logging does not\n       change it and we preserve original behavior. */\n    int saved_errno = fd < 0 ? errno : 0;\n    int result = fd < 0 ? -saved_errno : fd;\n\n    /* Log the result and relevant state to help reproduce the reported issue. */\n    probe_metal_open(path, shm, fd, saved_errno, result);\n\n    return result;\n}\n"
}