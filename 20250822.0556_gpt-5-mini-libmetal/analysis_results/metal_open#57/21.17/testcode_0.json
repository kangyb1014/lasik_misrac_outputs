{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(path) is only guarded against path == NULL, but not against path pointing to a non\u2011terminated buffer. If path != NULL but does not contain a terminating '\\0' within its object bounds (for example a fixed-size buffer filled without a terminator), strlen(path) may read past the object\u2019s bounds causing an out\u2011of\u2011bounds access \u2014 violating MISRA C 2023 Rule 21.17. The short\u2011circuit check prevents a NULL dereference but does not ensure the string is null\u2011terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Probe: log entry and parameters */\n    FILE *log = fopen(\"/tmp/logs/579.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"metal_open: entry path=%p shm=%d\\n\", (const void *)path, shm);\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Original guard: NULL and empty-string check */\n    if (!path || !strlen(path))\n    {\n        /* Log the reason for early return. Note: calling strlen(path) here is the original behavior\n           and may read beyond object bounds if the buffer is not null-terminated. We log that\n           strlen was invoked and its result to help reproduce the violation scenario. */\n        FILE *log2 = fopen(\"/tmp/logs/579.txt\", \"a\");\n        if (log2 != NULL)\n        {\n            if (!path)\n            {\n                fprintf(log2, \"metal_open: path is NULL -> returning -EINVAL\\n\");\n            }\n            else\n            {\n                /* strlen was called as part of the condition above; report that we observed empty string */\n                fprintf(log2, \"metal_open: path non-NULL but strlen(path) == 0 -> returning -EINVAL\\n\");\n            }\n            fflush(log2);\n            fclose(log2);\n        }\n\n        return -EINVAL;\n    }\n\n    /* Log that strlen was invoked and capture its returned length to provide evidence of the call. */\n    size_t len = strlen(path);\n    FILE *log3 = fopen(\"/tmp/logs/579.txt\", \"a\");\n    if (log3 != NULL)\n    {\n        fprintf(log3, \"metal_open: after strlen(path) -> length=%zu, path=%p\\n\", len, (const void *)path);\n        fflush(log3);\n        fclose(log3);\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (fd < 0)\n    {\n        FILE *log4 = fopen(\"/tmp/logs/579.txt\", \"a\");\n        if (log4 != NULL)\n        {\n            fprintf(log4, \"metal_open: open failed, errno=%d -> returning -%d\\n\", errno, errno);\n            fflush(log4);\n            fclose(log4);\n        }\n        return -errno;\n    }\n\n    FILE *log5 = fopen(\"/tmp/logs/579.txt\", \"a\");\n    if (log5 != NULL)\n    {\n        fprintf(log5, \"metal_open: opened fd=%d -> returning fd\\n\", fd);\n        fflush(log5);\n        fclose(log5);\n    }\n\n    return fd;\n}\n"
}