{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang statement-expression syntax '({ ... })' and the GNU token\u2011pasting trick '##__VA_ARGS__' to swallow the comma. Both constructs are documented compiler extensions (GCC/Clang) and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/710.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <stddef.h>\n\n/* Lightweight probe logger that appends human-readable records to /tmp/logs/710.txt.\n   It preserves errno across logging to avoid affecting caller semantics. */\nstatic void write_log(const char *fmt, ...)\n{\n    int saved_errno = errno;\n\n    /* Ensure directory exists; ignore error if it already exists. */\n    if (mkdir(\"/tmp/logs\", 0755) != 0) {\n        if (errno != EEXIST) {\n            /* Non-critical: if mkdir fails for another reason, continue and let fopen fail. */\n        }\n    }\n\n    FILE *f = fopen(\"/tmp/logs/710.txt\", \"a\");\n    if (!f) {\n        errno = saved_errno;\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info) {\n        char tbuf[64];\n        if (strftime(tbuf, sizeof(tbuf), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0) {\n            fprintf(f, \"[%s] \", tbuf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n\n    errno = saved_errno;\n}\n\n/* Minimal stubs so this code is compilable/executable standalone.  These mimic the\n   external APIs used by the original alloc function. They are intentionally simple\n   and do not change the alloc function's logic. */\nstatic const int METAL_LOG_DEBUG = 0; /* not a macro; used by the existing call */\n\nvoid *metal_allocate_memory(size_t size);\nvoid metal_free_memory(void *ptr);\nvoid metal_log(int level, const char *fmt, ...);\n\nvoid *metal_allocate_memory(size_t size)\n{\n    /* Simple allocator wrapper for testing */\n    return malloc(size);\n}\n\nvoid metal_free_memory(void *ptr)\n{\n    free(ptr);\n}\n\nvoid metal_log(int level, const char *fmt, ...)\n{\n    /* Minimal implementation that writes to stderr; keep behaviour lightweight. */\n    int saved_errno = errno;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n    errno = saved_errno;\n}\n\n/* Modified alloc with probes that log control-flow and state to /tmp/logs/710.txt.\n   Original logic is preserved: calls metal_allocate_memory(1000), logs failure via\n   metal_log and returns errno on failure, frees memory on success. */\nstatic int alloc(void)\n{\n    void *ptr;\n\n    write_log(\"alloc: entry\");\n    write_log(\"alloc: about to call metal_allocate_memory(1000)\");\n\n    ptr = metal_allocate_memory(1000);\n\n    write_log(\"alloc: metal_allocate_memory returned %p\", ptr);\n\n    if (!ptr) {\n        /* Preserve original ordering: the original code called metal_log before\n           reading/returning errno. Capture errno immediately after that call so\n           our additional logging does not change the returned value. */\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\n        /* Capture errno as it would be returned by the original code. */\n        int ret = errno;\n\n        /* Additional probe logging (may modify errno internally, but we already\n           captured the return value). */\n        write_log(\"alloc: allocation failed; captured_errno=%d (%s)\", ret, strerror(ret));\n\n        return ret;\n    }\n\n    write_log(\"alloc: freeing allocated memory at %p\", ptr);\n    metal_free_memory(ptr);\n    write_log(\"alloc: freed memory; exiting with 0\");\n\n    return 0;\n}\n"
}