{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe token '##__VA_ARGS__' is the GNU/C preprocessor extension used to elide a preceding comma when no variadic arguments are supplied. This usage (and the surrounding statement-expression '({ ... })' in the macro) is a compiler-specific extension (GCC/Clang) and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/710.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified alloc code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <time.h>\n#include <stddef.h>\n\n/* External functions from the original environment. */\nextern void *metal_allocate_memory(size_t size);\nextern void metal_free_memory(void *ptr);\nextern void metal_log(int level, const char *fmt, ...);\n\n/* Provide a symbol for the log level used in the original code. */\nstatic const int METAL_LOG_DEBUG = 0;\n\n/*\n * Probe helper: append a simple timestamped record of important state to\n * /tmp/logs/710.txt. This captures the control path and errno/ptr state\n * so other agents can reproduce and inspect the flow.\n */\nstatic void probe_log(const char *event, void *ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/710.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t == (time_t)(-1)) {\n        fprintf(f, \"event=%s ptr=%p errno=%d ts=\\n\", event, ptr, err);\n    } else {\n        fprintf(f, \"event=%s ptr=%p errno=%d ts=%ld\\n\", event, ptr, err, (long)t);\n    }\n\n    fclose(f);\n}\n\nstatic int alloc(void)\n{\n    void *ptr;\n\n    /* Log entry into alloc and current errno snapshot */\n    probe_log(\"alloc_enter\", NULL, errno);\n\n    ptr = metal_allocate_memory(1000);\n\n    if (!ptr) {\n        int err = errno; /* capture errno before any I/O that may modify it */\n\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\n        /* record the failure and errno for reproducibility */\n        probe_log(\"alloc_failed\", NULL, err);\n\n        return err;\n    }\n\n    /* record successful allocation (pointer value) */\n    probe_log(\"alloc_succeeded\", ptr, 0);\n\n    metal_free_memory(ptr);\n\n    /* record that the memory was freed */\n    probe_log(\"alloc_freed\", ptr, 0);\n\n    probe_log(\"alloc_exit\", NULL, 0);\n\n    return 0;\n}\n"
}