{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nalloc calls metal_log (macro) which invokes _metal.common.log_handler. If that log_handler function calls alloc (directly) or calls a function that eventually calls alloc (for example, if the handler calls metal_allocate_memory which in turn calls alloc), then an indirect recursion occurs: alloc -> metal_log -> log_handler -> ... -> alloc, violating Rule 17.2. In short, if the installed log_handler (or functions it invokes) calls alloc, the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/716.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of alloc as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of alloc:\n```c\nstatic int alloc(void)\n{\n\tvoid *ptr;\n\n\tptr = metal_allocate_memory(1000);\n\tif (!ptr) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\t\treturn errno;\n\t}\n\n\tmetal_free_memory(ptr);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified alloc code.\n",
  "test_code": "static void probe_write(const char *msg)\n{\n    /* Write probe messages to the file used for evidence collection. Use append mode. */\n    FILE *f = fopen(\"/tmp/logs/716.txt\", \"a\");\n    if (f) {\n        (void)fputs(msg, f);\n        (void)fclose(f);\n    }\n}\n\nstatic void probe_fmt(const char *stage, void *ptr, int err)\n{\n    char buf[256];\n\n    /* Compose a compact single-line record describing the control point and relevant state. */\n    (void)snprintf(buf, sizeof(buf), \"[alloc probe] %s: ptr=%p errno=%d\\n\", stage, ptr, err);\n    probe_write(buf);\n}\n\nstatic int alloc(void)\n{\n    void *ptr;\n\n    /* Log entry */\n    probe_fmt(\"entry\", NULL, 0);\n\n    ptr = metal_allocate_memory(1000);\n\n    /* Log result of allocation attempt */\n    probe_fmt(\"after metal_allocate_memory\", ptr, errno);\n\n    if (!ptr) {\n        /* Log that we are about to call metal_log for the failure path. This helps reproduce\n           the potential indirect recursion: alloc -> metal_log -> installed handler -> ... -> alloc */\n        probe_fmt(\"allocation failed; about to call metal_log\", NULL, errno);\n\n        metal_log(METAL_LOG_DEBUG, \"failed to allocate memory\\n\");\n\n        /* Log after calling metal_log to capture that we returned from it */\n        probe_fmt(\"returned from metal_log after failure\", NULL, errno);\n        return errno;\n    }\n\n    /* Log before freeing the allocated memory */\n    probe_fmt(\"allocated; about to free\", ptr, 0);\n\n    metal_free_memory(ptr);\n\n    /* Log after freeing */\n    probe_fmt(\"freed memory; returning success\", NULL, 0);\n\n    return 0;\n}"
}