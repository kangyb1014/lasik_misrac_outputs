{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)args;' in metal_linux_irq_handling is an executed no-op whose removal would not change program behaviour. It merely suppresses an unused-parameter warning; it has no side effects, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "int metal_linux_irq_init(void)\n{\n\tint ret;\n\tFILE *logf = NULL;\n\n\t/* Probe: open log file for appending control-flow/state information */\n\tlogf = fopen(\"/tmp/logs/482.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init: entry\\n\");\n\t}\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\tif (logf) fprintf(logf, \"irqs cleared\\n\");\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (logf) fprintf(logf, \"eventfd returned %d\\n\", irq_notify_fd);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"Failed to create eventfd: %d\\n\", irq_notify_fd);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tif (logf) fprintf(logf, \"mutex init, irq_handling_stop=%d\\n\", (int)irq_handling_stop);\n\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (logf) fprintf(logf, \"metal_irq_register_controller returned %d\\n\", ret);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"registration failed: %d\\n\", ret);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\t/* Log thread routine address and that args is NULL (relevant to the reported violation)\n\t * This documents that the thread is started with a NULL argument, which in the\n\t * handling routine may lead to the use of '(void)args;' to silence unused-parameter\n\t * warnings. */\n\tif (logf) fprintf(logf, \"starting thread: routine=%p, args=NULL\\n\", (void *)metal_linux_irq_handling);\n\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (logf) fprintf(logf, \"pthread_create returned %d, thread id %lu\\n\", ret, (unsigned long)irq_pthread);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"pthread_create failed: %d\\n\", ret);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EAGAIN;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init: success\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}"
}