{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset call zeroes the whole pfds buffer on each loop: memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));. Immediately afterwards the code sets pfds[0] and then populates pfds[1..j-1] for the entries actually used, and then calls poll(pfds, j, -1) where j is the number of initialized entries. Because poll only examines the first j entries and those entries are explicitly initialized, removing the memset would not change program behaviour. Therefore the memset is an executed operation whose removal would not affect behaviour (dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe helpers to log control flow and small memory dumps to /tmp/logs/482.txt */\nstatic void probe_ensure_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors except for debugging info. */\n    if (mkdir(\"/tmp/logs\", 0755) != 0) {\n        if (errno != EEXIST) {\n            /* best-effort: write to stderr if we can't create the directory */\n            /* Do not call probe_log here to avoid recursion */\n            (void)fprintf(stderr, \"probe: mkdir /tmp/logs failed: %s\\n\", strerror(errno));\n        }\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_ensure_dir();\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Timestamp + PID for easier correlation */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm)) {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm))\n            fprintf(f, \"%s \", timestr);\n    }\n    fprintf(f, \"pid=%d: \", (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_dump_bytes(const void *buf, size_t n)\n{\n    probe_ensure_dir();\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"pid=%d: dump %zu bytes at %p: \", (int)getpid(), n, buf);\n    const unsigned char *p = (const unsigned char *)buf;\n    for (size_t i = 0; i < n; ++i) {\n        fprintf(f, \"%02x\", p[i]);\n        if (i + 1 < n)\n            fprintf(f, \" \");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    /* Log entry and snapshot of irqs before memset */\n    probe_log(\"enter metal_linux_irq_init\");\n    probe_log(\"sizeof(irqs) = %zu\", sizeof(irqs));\n    /* Dump up to the first 32 bytes to show whether the buffer is zeroed before/after */\n    if (sizeof(irqs) > 0)\n        probe_dump_bytes(&irqs, (sizeof(irqs) < 32) ? sizeof(irqs) : 32);\n\n    memset(&irqs, 0, sizeof(irqs));\n\n    /* Dump after memset to provide evidence that memset actually zeroed the area */\n    probe_dump_bytes(&irqs, (sizeof(irqs) < 32) ? sizeof(irqs) : 32);\n    probe_log(\"memset(&irqs, 0, %zu) completed\", sizeof(irqs));\n\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    probe_log(\"eventfd returned fd=%d\", irq_notify_fd);\n    if (irq_notify_fd < 0) {\n        probe_log(\"Failed to create eventfd for IRQ handling: %s\", strerror(errno));\n        metal_log(METAL_LOG_ERROR,\n              \"Failed to create eventfd for IRQ handling.\\n\");\n        return  -EAGAIN;\n    }\n\n    metal_mutex_init(&irq_lock);\n    probe_log(\"metal_mutex_init done\");\n    irq_handling_stop = false;\n    probe_log(\"irq_handling_stop set to false\");\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"metal_irq_register_controller returned %d\", ret);\n    if (ret < 0) {\n        probe_log(\"Linux IRQ controller failed to register (ret=%d)\", ret);\n        metal_log(METAL_LOG_ERROR,\n              \"Linux IRQ controller failed to register.\\n\");\n        return -EINVAL;\n    }\n    ret = pthread_create(&irq_pthread, NULL,\n                 metal_linux_irq_handling, NULL);\n    probe_log(\"pthread_create returned %d\", ret);\n    if (ret != 0) {\n        probe_log(\"Failed to create IRQ thread: %d\", ret);\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n              ret);\n        return -EAGAIN;\n    }\n\n    probe_log(\"exit metal_linux_irq_init success\");\n    return 0;\n}\n"
}