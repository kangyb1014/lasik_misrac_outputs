{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC-specific extensions: the statement-expression construct '({ ... })' and the token-pasting/comma-elision use of '##__VA_ARGS__' (both documented as GNU extensions). These are not standard C and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/480.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_init:\n```c\nint metal_linux_irq_init(void)\n{\n\tint ret;\n\n\tmemset(&irqs, 0, sizeof(irqs));\n\n\tirq_notify_fd = eventfd(0, EFD_CLOEXEC);\n\tif (irq_notify_fd < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Failed to create eventfd for IRQ handling.\\n\");\n\t\treturn  -EAGAIN;\n\t}\n\n\tmetal_mutex_init(&irq_lock);\n\tirq_handling_stop = false;\n\tret = metal_irq_register_controller(&linux_irq_cntr);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"Linux IRQ controller failed to register.\\n\");\n\t\treturn -EINVAL;\n\t}\n\tret = pthread_create(&irq_pthread, NULL,\n\t\t\t     metal_linux_irq_handling, NULL);\n\tif (ret != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <errno.h>\n#include <stdbool.h>\n\n/* Simple probe logger that appends timestamps and messages to /tmp/logs/480.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/480.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL) {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n            fprintf(f, \"[%s] \", timestr);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_linux_irq_init(void)\n{\n    int ret;\n\n    probe_log(\"ENTER: metal_linux_irq_init\");\n\n    probe_log(\"memset(&irqs, 0, %zu) -> starting\", (size_t)sizeof(irqs));\n    memset(&irqs, 0, sizeof(irqs));\n    probe_log(\"memset(&irqs) -> done\");\n\n    probe_log(\"calling eventfd(0, EFD_CLOEXEC)\");\n    irq_notify_fd = eventfd(0, EFD_CLOEXEC);\n    probe_log(\"eventfd returned irq_notify_fd=%d errno=%d (%s)\",\n              irq_notify_fd, errno, strerror(errno));\n    if (irq_notify_fd < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"Failed to create eventfd for IRQ handling.\\n\");\n        probe_log(\"FAIL: eventfd creation failed, returning -EAGAIN\");\n        return  -EAGAIN;\n    }\n\n    probe_log(\"initializing irq_lock\");\n    metal_mutex_init(&irq_lock);\n    irq_handling_stop = false;\n    probe_log(\"irq_handling_stop set to false\");\n\n    probe_log(\"registering linux IRQ controller (linux_irq_cntr)\");\n    ret = metal_irq_register_controller(&linux_irq_cntr);\n    probe_log(\"metal_irq_register_controller returned %d errno=%d (%s)\",\n              ret, errno, strerror(errno));\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"Linux IRQ controller failed to register.\\n\");\n        probe_log(\"FAIL: controller registration failed (ret=%d), returning -EINVAL\", ret);\n        return -EINVAL;\n    }\n\n    probe_log(\"creating IRQ handling pthread\");\n    ret = pthread_create(&irq_pthread, NULL,\n                         metal_linux_irq_handling, NULL);\n    probe_log(\"pthread_create returned %d (%s)\", ret, ret ? strerror(ret) : \"OK\");\n    if (ret != 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create IRQ thread: %d.\\n\",\n                  ret);\n        probe_log(\"FAIL: pthread creation failed (ret=%d), returning -EAGAIN\", ret);\n        return -EAGAIN;\n    }\n\n    probe_log(\"EXIT: metal_linux_irq_init -> success\");\n    return 0;\n}\n"
}