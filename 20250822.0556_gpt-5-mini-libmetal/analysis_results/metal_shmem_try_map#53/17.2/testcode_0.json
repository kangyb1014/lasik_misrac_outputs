{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion: metal_shmem_try_map calls metal_io_init(io, ..., &metal_shmem_io_ops). metal_io_init calls metal_sys_io_mem_map(io). If metal_shmem_io_ops contains a callback (e.g. mem_map) that is implemented by metal_shmem_try_map and metal_sys_io_mem_map invokes that callback during initialization, the call chain becomes metal_shmem_try_map -> metal_io_init -> metal_sys_io_mem_map -> ops->mem_map (metal_shmem_try_map), producing indirect recursion and violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/536.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/536.txt */\nstatic void shmem_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/536.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                   struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    shmem_log_probe(\"ENTRY: metal_shmem_try_map(ps=%p, page_size=%zu, fd=%d, size=%zu, result=%p)\\n\",\n                    (void *)ps, ps ? ps->page_size : 0, fd, size, (void *)result);\n\n    size = metal_align_up(size, ps->page_size);\n    shmem_log_probe(\"aligned size -> %zu (page_size=%zu)\\n\", size, ps->page_size);\n\n    pages = size / ps->page_size;\n    shmem_log_probe(\"pages computed -> %zu\\n\", pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    shmem_log_probe(\"metal_map returned error=%d, mem=%p\\n\", error, mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n        shmem_log_probe(\"EXIT: metal_shmem_try_map -> metal_map failed with %d\\n\", error);\n        return error;\n    }\n\n    error = mlock(mem, size);\n    shmem_log_probe(\"mlock returned %d (errno=%d: %s)\\n\", error, errno, strerror(errno));\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    shmem_log_probe(\"malloc phys: requested %zu bytes -> phys=%p\\n\", phys_size, (void *)phys);\n    if (!phys) {\n        metal_unmap(mem, size);\n        shmem_log_probe(\"EXIT: metal_shmem_try_map -> malloc(phys) failed\\n\");\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    shmem_log_probe(\"malloc io: requested %zu bytes -> io=%p\\n\", sizeof(*io), (void *)io);\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        shmem_log_probe(\"EXIT: metal_shmem_try_map -> malloc(io) failed\\n\");\n        return -ENOMEM;\n    }\n\n    shmem_log_probe(\"_metal.pagemap_fd = %d\\n\", _metal.pagemap_fd);\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        shmem_log_probe(\"Branch: pagemap missing -> calling metal_io_init(io=%p, mem=%p, phys=%p, size=%zu, page_shift=%d, flags=0, ops=%p)\\n\",\n                        (void *)io, mem, (void *)phys, size, -1, (void *)&metal_shmem_io_ops);\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n        shmem_log_probe(\"Returned from metal_io_init (pagemap absent). io=%p\\n\", (void *)io);\n    } else {\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            shmem_log_probe(\"metal_virt2phys page=%zu addr=%p -> error=%d phys[%zu]=%llu\\n\",\n                            page, (void *)(virt + offset), error, page,\n                            (unsigned long long)phys[page]);\n            if (error < 0)\n                phys[page] = METAL_BAD_OFFSET;\n        }\n        shmem_log_probe(\"Branch: pagemap present -> calling metal_io_init(io=%p, mem=%p, phys=%p, size=%zu, page_shift=%u, flags=0, ops=%p)\\n\",\n                        (void *)io, mem, (void *)phys, size, ps->page_shift,\n                        (void *)&metal_shmem_io_ops);\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n        shmem_log_probe(\"Returned from metal_io_init (pagemap present). io=%p\\n\", (void *)io);\n    }\n    *result = io;\n\n    shmem_log_probe(\"EXIT: metal_shmem_try_map -> success, io=%p, phys=%p, mem=%p, pages=%zu\\n\",\n                    (void *)io, (void *)phys, mem, pages);\n\n    return 0;\n}\n"
}