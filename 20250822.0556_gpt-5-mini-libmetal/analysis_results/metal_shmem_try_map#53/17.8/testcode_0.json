{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'size' is overwritten by the assignment `size = metal_align_up(size, ps->page_size);` in metal_shmem_try_map. Modifying a function parameter (even a value parameter) violates MISRA C 2023 Rule 17.8. Recommended fix: do not assign to the parameter\u2014use a local variable, e.g. `size_t aligned_size = metal_align_up(size, ps->page_size);` and use aligned_size thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/537.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Simple probe logging helper that appends human-readable traces to /tmp/logs/537.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/537.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* prefix with pid for easier correlation */\n    fprintf(f, \"[pid:%ld] \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    /* Log entry and original parameter values */\n    probe_log(\"enter metal_shmem_try_map: ps=%p fd=%d size=%zu page_size=%zu mmap_flags=0x%x\",\n              (void *)ps, fd, size, (ps ? ps->page_size : 0U), (ps ? ps->mmap_flags : 0));\n\n    /* Capture original size to demonstrate the parameter modification */\n    {\n        size_t original_size = size;\n        probe_log(\"original size before align: %zu\", original_size);\n    }\n\n    /* This assignment modifies the function parameter 'size' (evidence for Rule 17.8 violation) */\n    size = metal_align_up(size, ps->page_size);\n    probe_log(\"size after metal_align_up: %zu (page_size=%zu)\", size, ps->page_size);\n\n    pages = size / ps->page_size;\n    probe_log(\"computed pages: %zu (size=%zu page_size=%zu)\", pages, size, ps->page_size);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        probe_log(\"metal_map failed: size=%zu mmap_flags=0x%x error=%d strerror=%s\",\n                  size, ps->mmap_flags, error, strerror(-error));\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        return error;\n    }\n\n    probe_log(\"metal_map succeeded: mem=%p size=%zu\", mem, size);\n\n    error = mlock(mem, size);\n    if (error) {\n        probe_log(\"mlock failed: errno=%d strerror=%s\", errno, strerror(errno));\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n    } else {\n        probe_log(\"mlock succeeded: mem=%p size=%zu\", mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    probe_log(\"allocating phys array: phys_size=%zu pages=%zu sizeof(*phys)=%zu\",\n              phys_size, pages, sizeof(*phys));\n\n    phys = malloc(phys_size);\n    if (!phys) {\n        probe_log(\"malloc failed for phys (size=%zu). Unmapping and returning -ENOMEM\", phys_size);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n    probe_log(\"phys allocated: %p\", (void *)phys);\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        probe_log(\"malloc failed for io (size=%zu). Freeing phys and unmapping mem\", sizeof(*io));\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n    probe_log(\"io allocated: %p\", (void *)io);\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        probe_log(\"_metal.pagemap_fd < 0: using offset as pa. phys[0]=%llu\", (unsigned long long)phys[0]);\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        probe_log(\"_metal.pagemap_fd >= 0: attempting virt2phys for each page (pages=%zu)\", pages);\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                probe_log(\"virt2phys failed for page %zu offset=%zu: error=%d set phys[%zu]=METAL_BAD_OFFSET\",\n                          page, offset, error, page);\n            } else {\n                probe_log(\"virt2phys succeeded for page %zu offset=%zu phys[%zu]=%llu\",\n                          page, offset, page, (unsigned long long)phys[page]);\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n                      &metal_shmem_io_ops);\n    }\n    *result = io;\n    probe_log(\"returning success: result=%p io=%p mem=%p size=%zu pages=%zu\",\n              (void *)result, (void *)io, mem, size, pages);\n\n    return 0;\n}\n"
}