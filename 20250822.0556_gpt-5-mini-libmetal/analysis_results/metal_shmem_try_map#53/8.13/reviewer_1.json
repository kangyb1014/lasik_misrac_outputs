{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_page_size *ps' is only read (ps->page_size, ps->mmap_flags, ps->page_shift) and is not modified in the function, so it could and should be declared as 'const struct metal_page_size *ps'. Therefore the function signature violates MISRA C 2023 Rule 8.13. (The output parameter 'struct metal_io_region **result' is modified and need not be const.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=9, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=7, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=6, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=8, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=13, requested_size=1048576\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=16, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=17, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=19, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=22, requested_size=1048576\nENTER metal_shmem_try_map: ps=0x55f719412800, ps->page_size=4096, ps->mmap_flags=0x0, ps->page_shift=12, fd=24, requested_size=1048576\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nmetal_map succeeded: mem=0x7f7c98569000, size=1048576\nafter align: aligned_size=1048576, page_size=4096, pages=256\nmetal_map succeeded: mem=0x7f7c98469000, size=1048576\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nafter align: aligned_size=1048576, page_size=4096, pages=256\nmetal_map succeeded: mem=0x7f7c98369000, size=1048576\nmlock succeeded: mem=0x7f7c98569000, size=1048576\nmetal_map succeeded: mem=0x7f7c98269000, size=1048576\nmlock succeeded: mem=0x7f7c98369000, size=1048576\nmlock succeeded: mem=0x7f7c98469000, size=1048576\nmetal_map succeeded: mem=0x7f7c98169000, size=1048576\nmetal_map succeeded: mem=0x7f7c98069000, size=1048576\nmlock succeeded: mem=0x7f7c98169000, size=1048576\nmetal_map succeeded: mem=0x7f7c906f9000, size=1048576\nmetal_map succeeded: mem=0x7f7c905f9000, size=1048576\nmetal_map succeeded: mem=0x7f7c904f9000, size=1048576\nmlock succeeded: mem=0x7f7c905f9000, size=1048576\nalloc phys: phys_size=2048, phys=0x7f7c84000d50\nalloc phys: phys_size=2048, phys=0x7f7c68000d50\nalloc phys: phys_size=2048, phys=0x7f7c80000d50\nalloc phys: phys_size=2048, phys=0x7f7c7c000d50\nalloc phys: phys_size=2048, phys=0x7f7c8c000d50\nmetal_map succeeded: mem=0x7f7c903f9000, size=1048576\nalloc io: sizeof(io)=112, io=0x7f7c84001560\nalloc io: sizeof(io)=112, io=0x7f7c68001560\nalloc io: sizeof(io)=112, io=0x7f7c80001560\nalloc io: sizeof(io)=112, io=0x7f7c7c001560\nalloc io: sizeof(io)=112, io=0x7f7c8c001560\npagemap_fd=4\npagemap_fd=4\npagemap_fd=4\npagemap_fd=4\npagemap_fd=4\nmlock succeeded: mem=0x7f7c906f9000, size=1048576\nmlock succeeded: mem=0x7f7c98269000, size=1048576\nmlock succeeded: mem=0x7f7c98069000, size=1048576\nmlock succeeded: mem=0x7f7c904f9000, size=1048576\nalloc phys: phys_size=2048, phys=0x7f7c88000d50\nalloc phys: phys_size=2048, phys=0x7f7c70000d50\nalloc phys: phys_size=2048, phys=0x7f7c64000d50\nalloc io: sizeof(io)=112, io=0x7f7c88001560\nalloc phys: phys_size=2048, phys=0x7f7c74000d50\nvirt2phys: page=0, virt=0x7f7c905f9000, offset=0, error=0, phys[0]=0\nalloc io: sizeof(io)=112, io=0x7f7c70001560\nalloc io: sizeof(io)=112, io=0x7f7c64001560\nvirt2phys: page=0, virt=0x7f7c98169000, offset=0, error=0, phys[0]=0\nvirt2phys: page=0, virt=0x7f7c98369000, offset=0, error=0, phys[0]=0\npagemap_fd=4\npagemap_fd=4\nalloc io: sizeof(io)=112, io=0x7f7c74001560\nvirt2phys: page=0, virt=\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_try_map:\ntypedef unsigned long metal_phys_addr_t\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 recommends that pointer parameters that are not used to modify the pointed-to object should be declared to point to a const-qualified type. In metal_shmem_try_map the parameter ps is only dereferenced for reads (ps->page_size, ps->mmap_flags, ps->page_shift) and never modified or passed to any call that requires a non-const pointer. Therefore the parameter type could and should be changed to const struct metal_page_size *ps to comply with Rule 8.13.\n\nNote: This assessment assumes there is no requirement to match some external non-const API or callback signature that forces the current prototype. If such an external constraint exists, the function signature cannot be changed and the rule would be an acknowledged deviation; otherwise the change is straightforward and advisable."
}