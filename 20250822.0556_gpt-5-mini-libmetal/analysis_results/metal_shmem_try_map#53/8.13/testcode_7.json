{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'virt' is declared as uint8_t * but is only used for read-only address computation and passed to metal_virt2phys; it could/should be declared as const uint8_t * (or the called function should take a pointer-to-const) so the pointer points to a const-qualified type. Thus the code fragment violates Rule 8.13 unless metal_virt2phys requires a non-const pointer (in which case the violation would be in that API).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/533.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "static int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\t/* Open log file for probes - best-effort. */\n\tFILE *probe_log = fopen(\"/tmp/logs/533.txt\", \"a\");\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"enter metal_shmem_try_map: ps->page_size=%zu fd=%d requested_size=%zu\\n\",\n\t\t\tps->page_size, fd, size);\n\t\tfflush(probe_log);\n\t}\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"aligned size=%zu pages=%zu\\n\", size, pages);\n\t\tfflush(probe_log);\n\t}\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"metal_map failed: error=%d strerror=%s\\n\", error, strerror(-error));\n\t\t\tfflush(probe_log);\n\t\t}\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\tif (probe_log) fclose(probe_log);\n\t\treturn error;\n\t}\n\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"metal_map succeeded: mem=%p\\n\", mem);\n\t\tfflush(probe_log);\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"mlock failed: errno=%d (%s)\\n\", errno, strerror(errno));\n\t\t\tfflush(probe_log);\n\t\t}\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"malloc(phys) failed for size=%zu\\n\", phys_size);\n\t\t\tfflush(probe_log);\n\t\t\tfclose(probe_log);\n\t\t}\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"allocated phys array=%p phys_size=%zu\\n\", (void *)phys, phys_size);\n\t\tfflush(probe_log);\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"malloc(io) failed\\n\");\n\t\t\tfflush(probe_log);\n\t\t\tfclose(probe_log);\n\t\t}\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"allocated io=%p\\n\", (void *)io);\n\t\tfflush(probe_log);\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"_metal.pagemap_fd < 0: using offset as pa, phys[0]=0\\n\");\n\t\t\tfflush(probe_log);\n\t\t}\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\t/* Probe: log mapping activity. */\n\t\tif (probe_log) {\n\t\t\tfprintf(probe_log, \"_metal.pagemap_fd >= 0: computing phys per page\\n\");\n\t\t\tfprintf(probe_log, \"mem=%p pages=%zu page_size=%zu\\n\", mem, pages, ps->page_size);\n\t\t\tfflush(probe_log);\n\t\t}\n\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\tif (probe_log) {\n\t\t\t\tfprintf(probe_log, \"page=%zu offset=%zu virt_base=%p virt_plus_offset=%p\\n\",\n\t\t\t\t\tpage, offset, (void *)virt, (void *)(virt + offset));\n\t\t\t\tfflush(probe_log);\n\t\t\t}\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (probe_log) {\n\t\t\t\tfprintf(probe_log, \"metal_virt2phys returned error=%d phys[%zu]=0x%llx\\n\",\n\t\t\t\t\terror, page, (unsigned long long)phys[page]);\n\t\t\t\tfflush(probe_log);\n\t\t\t}\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\t/* After loop, dump a few phys entries for verification. */\n\t\tif (probe_log) {\n\t\t\tsize_t dump = (pages < 8) ? pages : 8;\n\t\t\tfprintf(probe_log, \"dumping first %zu phys entries:\\n\", dump);\n\t\t\tfor (page = 0; page < dump; page++)\n\t\t\t\tfprintf(probe_log, \"  phys[%zu]=0x%llx\\n\", page, (unsigned long long)phys[page]);\n\t\t\tfflush(probe_log);\n\t\t}\n\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\tif (probe_log) {\n\t\tfprintf(probe_log, \"exiting metal_shmem_try_map: result io=%p\\n\", (void *)io);\n\t\tfflush(probe_log);\n\t\tfclose(probe_log);\n\t}\n\n\treturn 0;\n}\n"
}