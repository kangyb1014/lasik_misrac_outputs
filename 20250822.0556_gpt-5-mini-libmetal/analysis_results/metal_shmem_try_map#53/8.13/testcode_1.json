{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct metal_page_size *ps' is only read (ps->page_size, ps->mmap_flags, ps->page_shift) and is not modified in the function, so it could and should be declared as 'const struct metal_page_size *ps'. Therefore the function signature violates MISRA C 2023 Rule 8.13. (The output parameter 'struct metal_io_region **result' is modified and need not be const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/533.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/533.txt */\nstatic void metal_shmem_probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/533.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    /* Entry probe: record incoming parameter values and pointers */\n    metal_shmem_probe_logf(\"ENTER metal_shmem_try_map: ps=%p, ps->page_size=%zu, ps->mmap_flags=0x%x, ps->page_shift=%u, fd=%d, requested_size=%zu\\n\",\n                          (void *)ps,\n                          (ps ? ps->page_size : 0UL),\n                          (ps ? ps->mmap_flags : 0),\n                          (ps ? ps->page_shift : 0U),\n                          fd,\n                          size);\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    metal_shmem_probe_logf(\"after align: aligned_size=%zu, page_size=%zu, pages=%zu\\n\",\n                          size, ps->page_size, pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        metal_shmem_probe_logf(\"metal_map failed: error=%d, strerror=%s\\n\",\n                              error, strerror(-error));\n        return error;\n    }\n\n    metal_shmem_probe_logf(\"metal_map succeeded: mem=%p, size=%zu\\n\", mem, size);\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n        metal_shmem_probe_logf(\"mlock failed: errno=%d, strerror=%s\\n\", errno, strerror(errno));\n    } else {\n        metal_shmem_probe_logf(\"mlock succeeded: mem=%p, size=%zu\\n\", mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    metal_shmem_probe_logf(\"alloc phys: phys_size=%zu, phys=%p\\n\", phys_size, (void *)phys);\n    if (!phys) {\n        metal_unmap(mem, size);\n        metal_shmem_probe_logf(\"malloc phys failed: returning -ENOMEM\\n\");\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    metal_shmem_probe_logf(\"alloc io: sizeof(io)=%zu, io=%p\\n\", sizeof(*io), (void *)io);\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        metal_shmem_probe_logf(\"malloc io failed: freeing phys and unmapping mem, returning -ENOMEM\\n\");\n        return -ENOMEM;\n    }\n\n    metal_shmem_probe_logf(\"pagemap_fd=%d\\n\", _metal.pagemap_fd);\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_shmem_probe_logf(\"no pagemap: using offset as pa, phys[0]=%llu\\n\", (unsigned long long)phys[0]);\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0)\n                phys[page] = METAL_BAD_OFFSET;\n\n            metal_shmem_probe_logf(\"virt2phys: page=%zu, virt=%p, offset=%zu, error=%d, phys[%zu]=%llu\\n\",\n                                  page, (void *)(virt + offset), offset, error, page,\n                                  (unsigned long long)phys[page]);\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n                      &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    metal_shmem_probe_logf(\"EXIT metal_shmem_try_map: result_io=%p, phys=%p, final_size=%zu, pages=%zu\\n\",\n                          (void *)io, (void *)phys, size, pages);\n\n    return 0;\n}\n"
}