{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop first clause uses the comma expression 'virt = mem, page = 0'. Clause 1 of MISRA C 2023 Rule 14.2 requires the first clause to be empty or to set/define the loop counter (or initialize it). Here the clause also assigns 'virt' (a non-loop-counter object), so the first clause does more than initialize the loop counter and therefore violates Rule 14.2. (Fix: move 'virt = mem;' before the for and write 'for (page = 0; page < pages; page++)'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/534.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/534.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    int mkdir_ret = mkdir(\"/tmp/logs\", 0777);\n    (void)mkdir_ret; /* ignore errors, directory may already exist */\n\n    FILE *f = fopen(\"/tmp/logs/534.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        probe_log(\"metal_map failed: fd=%d size=%zu mmap_flags=0x%x error=%d (%s)\",\n                  fd, size, ps->mmap_flags, error, strerror(-error));\n        return error;\n    }\n\n    /* Log mapping result and derived values */\n    probe_log(\"mapped: mem=%p size=%zu page_size=%zu pages=%zu\",\n              mem, size, ps->page_size, pages);\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n        probe_log(\"mlock failed: errno=%d (%s)\", errno, strerror(errno));\n    } else {\n        probe_log(\"mlock succeeded: mem=%p size=%zu\", mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        metal_unmap(mem, size);\n        probe_log(\"malloc(phys) failed: phys_size=%zu\", phys_size);\n        return -ENOMEM;\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        probe_log(\"malloc(io) failed\");\n        return -ENOMEM;\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        probe_log(\"no pagemap available: pagemap_fd=%d. using offset as pa\", _metal.pagemap_fd);\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        /* Log that we are about to execute the for-loop header.\n         * The original code uses the comma expression in the first clause:\n         *     for (virt = mem, page = 0; page < pages; page++)\n         * We keep that clause intact (to preserve original logic) but record\n         * the relevant state inside the loop body so that observers can\n         * see that 'virt' was set in the first clause.\n         */\n        probe_log(\"entering pagemap loop: mem=%p pages=%zu pagemap_fd=%d\",\n                  mem, pages, _metal.pagemap_fd);\n\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            /* Log the values immediately on entering the body of the loop.\n             * This shows the effect of the for-loop first clause (virt = mem)\n             * and the initialized loop counter (page = 0) for the first\n             * iteration, reproducing the control-flow evidence for the\n             * reported violation scenario.\n             */\n            probe_log(\"for-body-entry: iteration=%zu virt=%p mem=%p pages=%zu\",\n                      page, (void *)virt, mem, pages);\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                probe_log(\"virt2phys failed: iteration=%zu offset=%zu virt=%p error=%d -> phys[%zu]=BAD\",\n                          page, offset, (void *)(virt + offset), error, page);\n            } else {\n                /* Log the successful mapping for this page */\n                probe_log(\"virt2phys succeeded: iteration=%zu offset=%zu virt=%p phys[%zu]=%llu\",\n                          page, offset, (void *)(virt + offset), page,\n                          (unsigned long long)phys[page]);\n            }\n        }\n        probe_log(\"finished pagemap loop: pages=%zu\", pages);\n\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n                      &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    probe_log(\"metal_shmem_try_map completed: result_io=%p\", (void *)io);\n\n    return 0;\n}\n"
}