{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for-loop first clause uses the comma expression 'virt = mem, page = 0'. Clause 1 of MISRA C 2023 Rule 14.2 requires the first clause to be empty or to set/define the loop counter (or initialize it). Here the clause also assigns 'virt' (a non-loop-counter object), so the first clause does more than initialize the loop counter and therefore violates Rule 14.2. (Fix: move 'virt = mem;' before the for and write 'for (page = 0; page < pages; page++)'.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmapped: mem=0x7f9afae96000 size=1048576 page_size=4096 pages=256\nmapped: mem=0x7f9afaf96000 size=1048576 page_size=4096 pages=256\nmapped: mem=0x7f9afac96000 size=1048576 page_size=4096 pages=256\nmapped: mem=0x7f9afad96000 size=1048576 page_size=4096 pages=256\nmlock succeeded: mem=0x7f9afae96000 size=1048576\nmlock succeeded: mem=0x7f9afaf96000 size=1048576\nmlock succeeded: mem=0x7f9afac96000 size=1048576\nmlock succeeded: mem=0x7f9afad96000 size=1048576\nentering pagemap loop: mem=0x7f9afad96000 pages=256 pagemap_fd=4\nentering pagemap loop: mem=0x7f9afae96000 pages=256 pagemap_fd=4\nentering pagemap loop: mem=0x7f9afaf96000 pages=256 pagemap_fd=4\nfor-body-entry: iteration=0 virt=0x7f9afad96000 mem=0x7f9afad96000 pages=256\nfor-body-entry: iteration=0 virt=0x7f9afae96000 mem=0x7f9afae96000 pages=256\nfor-body-entry: iteration=0 virt=0x7f9afaf96000 mem=0x7f9afaf96000 pages=256\nentering pagemap loop: mem=0x7f9afac96000 pages=256 pagemap_fd=4\nvirt2phys succeeded: iteration=0 offset=0 virt=0x7f9afaf96000 phys[0]=0\nfor-body-entry: iteration=0 virt=0x7f9afac96000 mem=0x7f9afac96000 pages=256\nfor-body-entry: iteration=1 virt=0x7f9afaf96000 mem=0x7f9afaf96000 pages=256\nvirt2phys succeeded: iteration=0 offset=0 virt=0x7f9afad96000 phys[0]=0\nfor-body-entry: iteration=1 virt=0x7f9afad96000 mem=0x7f9afad96000 pages=256\nvirt2phys succeeded: iteration=0 offset=0 virt=0x7f9afae96000 phys[0]=0\nmapped: mem=0x7f9afa395000 size=1048576 page_size=4096 pages=256\nvirt2phys succeeded: iteration=1 offset=4096 virt=0x7f9afad97000 phys[1]=0\nfor-body-entry: iteration=1 virt=0x7f9afae96000 mem=0x7f9afae96000 pages=256\nvirt2phys succeeded: iteration=1 offset=4096 virt=0x7f9afaf97000 phys[1]=0\nfor-body-entry: iteration=2 virt=0x7f9afad96000 mem=0x7f9afad96000 pages=256\nvirt2phys succeeded: iteration=0 offset=0 virt=0x7f9afac96000 phys[0]=0\nfor-body-entry: iteration=2 virt=0x7f9afaf96000 mem=0x7f9afaf96000 pages=256\nvirt2phys succeeded: iteration=1 offset=4096 virt=0x7f9afae97000 phys[1]=0\nvirt2phys succeeded: iteration=2 offset=8192 virt=0x7f9afad98000 phys[2]=0\nmapped: mem=0x7f9afa295000 size=1048576 page_size=4096 pages=256\nmlock succeeded: mem=0x7f9afa395000 size=1048576\nmapped: mem=0x7f9afa195000 size=1048576 page_size=4096 pages=256\nfor-body-entry: iteration=1 virt=0x7f9afac96000 mem=0x7f9afac96000 pages=256\nfor-body-entry: iteration=2 virt=0x7f9afae96000 mem=0x7f9afae96000 pages=256\nfor-body-entry: iteration=3 virt=0x7f9afad96000 mem=0x7f9afad96000 pages=256\nvirt2phys succeeded: iteration=2 offset=8192 virt=0x7f9afaf98000 phys[2]=0\nentering pagemap loop: mem=0x7f9afa395000 pages=256 pagemap_fd=4\nvirt2phys succeeded: iteration=1 offset=4096 virt=0x7f9afac97000 phys[1]=0\nfor-body-entry: iteration=3 virt=0x7f9afaf96000 mem=0x7f9afaf96000 pages=256\nfor-body-entry: iteration=0 virt=0x7f9afa395000 mem=0x7f9afa395000 pages=256\nfor-body-entry: iteration=2 virt=0x7f9afac96000 mem=0x7f9afac96000 pages=256\nmlock succeeded: mem=0x7f9afa295000 size=1048576\nmlock succeeded: mem=0x7f9afa195000 size=1048576\nentering pagemap loop: mem=0x7f9afa195000 pages=256 pagemap_fd=4\nentering pagemap loop: mem=0x7f9afa295000 pages=256 pagemap_fd=4\nvirt2phys succeeded: iteration=3 offset=12288 virt=0x7f9afad99000 phys[3]=0\nvirt2phys succeeded: iteration=0 offset=0 virt=0x7f9afa395000 phys[0]=0\nfor-body-entry: iteration=0 virt=0x7f9afa195000 mem=0x7f9afa195000 pages=256\nvirt2phys succeeded: iteration=2 offset=8192 virt=0x7f9afae98000 phys[2]=0\nvirt2phys succeeded: iteration=3 offset=12288 virt=0x7f9afaf99000 phys[3]=0\nfor-body-entry: iteration=0 virt=0x7f9afa295000 mem=0x7f9afa295000 pages=256\nmapped: mem=0x7f9afa095000 size=1048576 page_size=4096 pages=256\nfor-body-entry: iteration=4 virt=0x7f9afad96000 mem=0x7f9afad96000 pages=256\nvirt2phys succeeded: iteration=2 offset=8192 virt=0x7f9afac98000 phys[2]=0\nfor-body-entry: iteration=1 virt=0x7f9afa395000 mem=0x7f9afa395000 pages=256\nfor-body-entry: iteration=3 virt=0x7f9afae96000 mem=0x7f9afae96000 pages=256\nfor-body-entry: iteration=4 virt=0x7f9afaf96000 mem=0x7f9afaf96000 pages=256\nfor-body-entry: iteration=3 virt=0x7f9afac96000 m\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_try_map:\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n...\n#define METAL_BAD_OFFSET ((unsignedlong)-1)\n...\nstruct metal_page_size {\n\t/** Page size. */\n\tsize_t\tpage_size;\n\n\t/** Page shift. */\n\tunsigned long page_shift;\n\n\t/** Path to hugetlbfs (or tmpfs) mount point. */\n\tchar path[PATH_MAX];\n\n\t/** Flags to use for mmap. */\n\tint mmap_flags;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The for statement uses the comma expression \"virt = mem, page = 0\" in the first clause, which assigns both 'virt' and the loop counter 'page'. MISRA C 2023 Rule 14.2 requires the first clause to be empty or to set/define and initialize the loop counter only. Initialising a non-loop object (virt) in that clause violates the rule. The suggested fix\u2014assign virt = mem before the loop and write for (page = 0; page < pages; page++)\u2014complies with the rule."
}