{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If device->name is non-NULL but not guaranteed to be NUL-terminated within the bounds of the object it points to, strlen(device->name) may read past the object\u2019s bounds. Example: char name[3] = {'A','B','C'}; device->name = name; the strlen call will scan past name[] until a '\\0' is found, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "int metal_register_generic_device(struct metal_device *device)\n{\n    /* Probe: open log file to record control flow and state. */\n    FILE *logf = fopen(\"/tmp/logs/89.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"metal_register_generic_device called: device=%p, name_ptr=%p, num_regions=%d\\n\",\n                (void *)device, (void *)device->name, device->num_regions);\n        fflush(logf);\n    }\n\n    /*\n     * Preserve original logic: check device->name, length, and num_regions.\n     * To capture evidence around strlen (the potential out-of-bounds read),\n     * evaluate strlen only when device->name is non-NULL and log the result.\n     * This intentionally performs the same strlen call as the original code\n     * so callers can reproduce the reported violation scenario.\n     */\n    size_t name_len = 0;\n    if (device->name) {\n        if (logf) {\n            fprintf(logf, \"device->name is non-NULL; calling strlen(device->name)\\n\");\n            fflush(logf);\n        }\n\n        /* This is the same potentially unsafe call the original code made. */\n        name_len = strlen(device->name);\n\n        if (logf) {\n            fprintf(logf, \"strlen(device->name) returned %zu\\n\", name_len);\n            fflush(logf);\n        }\n    } else {\n        if (logf) {\n            fprintf(logf, \"device->name is NULL\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (!device->name || !name_len || device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        if (logf) {\n            fprintf(logf, \"Condition to reject device met: name_ptr=%p, name_len=%zu, num_regions=%d, max_regions=%d\\n\",\n                    (void *)device->name, name_len, device->num_regions, METAL_MAX_DEVICE_REGIONS);\n            fclose(logf);\n        }\n        return -EINVAL;\n    }\n\n    if (logf) {\n        fprintf(logf, \"Proceeding to register device: setting bus and adding to generic_device_list\\n\");\n        fclose(logf);\n    }\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    /* Final log to indicate success */\n    logf = fopen(\"/tmp/logs/89.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"Device %p registered successfully\\n\", (void *)device);\n        fclose(logf);\n    }\n\n    return 0;\n}"
}