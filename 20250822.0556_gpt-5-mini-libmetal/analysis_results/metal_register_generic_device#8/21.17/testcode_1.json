{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(device->name) only checks for a non-NULL pointer but does not ensure the character array is null-terminated within its bounds. If device->name points to a char buffer that lacks a terminating '\\0' (or points into memory such that no '\\0' exists before the end of the object), strlen will read past the object\u2019s bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "int metal_register_generic_device(struct metal_device *device)\n{\n    FILE *log = fopen(\"/tmp/logs/89.txt\", \"a\");\n    if (log) {\n        /* Log entry header and key pointers/state before any risky operations */\n        fprintf(log, \"[metal_register_generic_device] entry: device=%p\\n\", (void *)device);\n        if (device) {\n            fprintf(log, \"[metal_register_generic_device] device->name=%p\\n\", (void *)device->name);\n            fprintf(log, \"[metal_register_generic_device] device->num_regions=%d\\n\", device->num_regions);\n            fflush(log);\n        } else {\n            fprintf(log, \"[metal_register_generic_device] device is NULL\\n\");\n            fflush(log);\n        }\n    }\n\n    /* Preserve original logic: evaluate strlen once and reuse the result in the condition. */\n    size_t name_len = 0;\n    if (device && device->name) {\n        /* This call mirrors the original behavior (the potential source of the reported issue).\n         * We flush logs above so that if strlen overruns and crashes, the pre-call state is recorded.\n         */\n        name_len = strlen(device->name);\n        if (log) {\n            fprintf(log, \"[metal_register_generic_device] strlen(device->name) -> %zu\\n\", name_len);\n            fflush(log);\n        }\n    }\n\n    if (!device->name || !name_len || device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        if (log) {\n            fprintf(log, \"[metal_register_generic_device] rejection: name_present=%d, name_len=%zu, num_regions=%d\\n\",\n                    (int)(device && device->name ? 1 : 0), name_len,\n                    device ? device->num_regions : -1);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"[metal_register_generic_device] accepted: registering device %p\\n\", (void *)device);\n        fclose(log);\n    }\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n    return 0;\n}\n"
}