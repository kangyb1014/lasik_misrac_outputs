{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 strlen(device->name) can read beyond the bounds of the object if device->name is non-NULL but not guaranteed to point to a null\u2011terminated array within its allocated bounds. Example violation: device->name points to a fixed-size buffer char buf[4] that is filled completely with non\u2011zero bytes (no '\\0' present); calling strlen(device->name) will scan past buf into adjacent memory causing an out\u2011of\u2011bounds access and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "int metal_register_generic_device(struct metal_device *device)\n{\n    /* Probe/logging variables */\n    size_t name_len = 0;\n    FILE *log = fopen(\"/tmp/logs/89.txt\", \"a\");\n\n    /* Log entry and state information useful to reproduce the strlen-based violation */\n    if (log) {\n        fprintf(log, \"metal_register_generic_device called: device=%p\\n\", (void *)device);\n        /* Note: preserve original behavior as much as possible; we still dereference device->name as the\n           original code did (no explicit NULL-device guard to avoid changing behavior). */\n        fprintf(log, \"  device->name=%p\\n\", (void *)device->name);\n        fprintf(log, \"  device->num_regions=%d\\n\", device->num_regions);\n\n        if (device->name) {\n            /* Call strlen once (as original code used strlen) and capture the result for both logging\n               and for re-using in the subsequent original condition to avoid additional string scans. */\n            name_len = strlen(device->name);\n            fprintf(log, \"  strlen(device->name)=%zu\\n\", name_len);\n\n            /* Dump up to the first 64 bytes as hex/printable characters (bounded by strlen result).\n               This will show whether a buffer contains no NUL within that range (evidence of the violation).\n               Note: we limit the dump to name_len (which we obtained above) to avoid extra reads beyond\n               what strlen already performed in this invocation. */\n            size_t dump = name_len < 64 ? name_len : 64;\n            if (dump > 0) {\n                fprintf(log, \"  device->name[0..%zu]:\", dump - 1);\n                for (size_t i = 0; i < dump; ++i) {\n                    unsigned char c = (unsigned char)device->name[i];\n                    if (c >= 32 && c <= 126)\n                        fprintf(log, \" '%c'(0x%02X)\", c, c);\n                    else\n                        fprintf(log, \" 0x%02X\", c);\n                }\n                fprintf(log, \"\\n\");\n            } else {\n                fprintf(log, \"  device->name is empty (length 0)\\n\");\n            }\n        } else {\n            fprintf(log, \"  device->name is NULL\\n\");\n        }\n\n        fclose(log);\n    }\n\n    /* Preserve original logic. Reuse name_len (calculated above if name was non-NULL) so we do not\n       perform extra scans beyond the single strlen call already done for logging. */\n    if (!device->name || !name_len ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS)\n        return -EINVAL;\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                &device->node);\n    return 0;\n}\n"
}