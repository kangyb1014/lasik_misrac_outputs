{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_list_add_tail(&_metal.common.generic_device_list, &device->node)\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation evident in the fragment: metal_register_generic_device simply calls metal_list_add_tail. Rule 17.2 would only be violated if there is recursion (direct or indirect) in the call graph. A concrete violating scenario would be if metal_list_add_tail (or a function it calls) calls back into metal_register_generic_device (for example: metal_list_add_tail -> metal_notify -> metal_register_generic_device), or if metal_list_add_tail calls itself recursively; in either case an indirect or direct recursion would violate Rule 17.2."
}