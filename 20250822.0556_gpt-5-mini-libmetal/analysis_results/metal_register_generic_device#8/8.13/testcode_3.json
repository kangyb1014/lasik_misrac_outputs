{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member device->bus has type 'struct metal_bus *' (non-const) and is assigned the address of the shared global metal_generic_bus. Since the bus object is a shared, read-only descriptor (contains function pointers and is not intended to be modified per-instance), the pointer should be to a const-qualified type (for example 'const struct metal_bus *bus' or make metal_generic_bus const) to prevent modification through the pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Probe: append logs to /tmp/logs/83.txt to capture control flow and state */\n    FILE *log = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: entry device=%p\\n\", (void *)device);\n        if (device) {\n            fprintf(log, \"  device->name=%p\", (void *)device->name);\n            if (device->name)\n                fprintf(log, \" (\\\"%s\\\")\", device->name);\n            fprintf(log, \"\\n\");\n            fprintf(log, \"  device->num_regions=%d\\n\", device->num_regions);\n        }\n        fclose(log);\n    }\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Log reason for failure */\n        log = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"metal_register_generic_device: validation failed\\n\");\n            if (!device->name)\n                fprintf(log, \"  reason: device->name is NULL\\n\");\n            else if (!strlen(device->name))\n                fprintf(log, \"  reason: device->name is empty\\n\");\n            if (device->num_regions > METAL_MAX_DEVICE_REGIONS)\n                fprintf(log, \"  reason: device->num_regions (%d) > METAL_MAX_DEVICE_REGIONS (%d)\\n\",\n                        device->num_regions, METAL_MAX_DEVICE_REGIONS);\n            fprintf(log, \"metal_register_generic_device: returning -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* Log state before assignment */\n    log = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: before assignment\\n\");\n        fprintf(log, \"  device=%p\\n\", (void *)device);\n        fprintf(log, \"  device->bus (before)=%p\\n\", (void *)device->bus);\n        fprintf(log, \"  &metal_generic_bus=%p\\n\", (void *)&metal_generic_bus);\n        fclose(log);\n    }\n\n    device->bus = &metal_generic_bus;\n\n    /* Log state after assignment */\n    log = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: after assignment\\n\");\n        fprintf(log, \"  device->bus (after)=%p\\n\", (void *)device->bus);\n        fclose(log);\n    }\n\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    /* Log completion */\n    log = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: added to generic_device_list\\n\");\n        fprintf(log, \"  device->node=%p\\n\", (void *)&device->node);\n        fprintf(log, \"metal_register_generic_device: returning 0\\n\");\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}