{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct metal_bus::name is declared as a non-const pointer (e.g. char *name), then initializing .name = \"generic\" makes the pointer refer to a string literal without const qualification. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (i.e. const char *name). Thus this initialization violates Rule 8.13. If, however, metal_bus::name is already declared as const char *name, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and relevant state to /tmp/logs/83.txt */\nstatic void metal_register_generic_device_log(const struct metal_device *device,\n                                              const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"device_ptr=%p\\n\", (void *)device);\n    if (device) {\n        fprintf(f, \"device->name_ptr=%p\", (void *)device->name);\n        if (device->name) {\n            /* Print up to a reasonable length to avoid huge logs */\n            size_t len = strlen(device->name);\n            fprintf(f, \" name=\\\"%s\\\" len=%zu\", device->name, len);\n        } else {\n            fprintf(f, \" name=(null)\");\n        }\n        fprintf(f, \"\\n\");\n\n        fprintf(f, \"device->num_regions=%d\\n\", device->num_regions);\n    }\n\n    /* Log the compile-time constant used in the validation check as well */\n    fprintf(f, \"METAL_MAX_DEVICE_REGIONS=%d\\n\", METAL_MAX_DEVICE_REGIONS);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Log entry and initial state */\n    metal_register_generic_device_log(device, \"entry\");\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Log the failing validation so agents can reproduce the scenario */\n        metal_register_generic_device_log(device, \"validation_failed\");\n        return -EINVAL;\n    }\n\n    device->bus = &metal_generic_bus;\n    /* Log after bus assignment */\n    metal_register_generic_device_log(device, \"assigned_bus\");\n\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    /* Final success log */\n    metal_register_generic_device_log(device, \"registered_success\");\n    return 0;\n}"
}