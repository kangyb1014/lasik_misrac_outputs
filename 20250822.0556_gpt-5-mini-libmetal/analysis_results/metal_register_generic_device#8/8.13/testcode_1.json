{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field irq_info is declared as a modifiable void * but represents an IRQ identifier that is typically only read/observed (e.g. passed to handlers or compared) and never modified through this pointer. In such use the pointer should be declared const void * so the pointed-to data is const-qualified. As written, irq_info is not const-qualified and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/83.txt. Keeps original logic intact. */\nstatic void __attribute__((always_inline)) log_device_state(const struct metal_device *device,\n                                                            const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"EVENT: %s\\n\", event ? event : \"(null)\");\n    fprintf(f, \"  device ptr: %p\\n\", (const void *)device);\n    if (device)\n    {\n        const char *name = device->name;\n        if (name)\n        {\n            size_t len = strlen(name);\n            fprintf(f, \"  name ptr: %p\\n\", (const void *)name);\n            fprintf(f, \"  name (len=%zu): '%s'\\n\", len, name);\n        }\n        else\n        {\n            fprintf(f, \"  name: (null)\\n\");\n        }\n\n        fprintf(f, \"  num_regions: %d\\n\", device->num_regions);\n        fprintf(f, \"  METAL_MAX_DEVICE_REGIONS: %d\\n\", METAL_MAX_DEVICE_REGIONS);\n        fprintf(f, \"  bus ptr before assignment (if any): %p\\n\", (const void *)device->bus);\n        fprintf(f, \"  node ptr: %p\\n\", (const void *)&device->node);\n    }\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Log entry and initial state */\n    log_device_state(device, \"enter_metal_register_generic_device\");\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS)\n    {\n        log_device_state(device, \"validation_failed\");\n        return -EINVAL;\n    }\n\n    device->bus = &metal_generic_bus;\n    log_device_state(device, \"bus_assigned\");\n\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    log_device_state(device, \"device_registered_success\");\n    return 0;\n}\n"
}