{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member is declared as a mutable pointer: 'struct metal_bus *bus;'. In the shown code the device->bus is only assigned to point at the global metal_generic_bus and there is no modification of the bus object via this pointer, so the pointer could be declared as pointing to a const-qualified type (const struct metal_bus *bus) to prevent unintended modification and satisfy MISRA C 2023 Rule 8.13. Change to 'const struct metal_bus *bus;' would allow the assignment device->bus = &metal_generic_bus; and improve const-correctness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append logs about control flow/state to /tmp/logs/83.txt */\nstatic void metal_register_generic_device_log(const struct metal_device *device,\n                                             const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Safely print basic device state; avoid dereferencing NULL beyond checks */\n    const char *name = \"(null)\";\n    int num_regions = -1;\n    const void *bus_ptr = NULL;\n    const void *node_ptr = NULL;\n\n    if (device) {\n        if (device->name && device->name[0])\n            name = device->name;\n        num_regions = device->num_regions;\n        bus_ptr = (const void *)device->bus;\n        node_ptr = (const void *)&device->node;\n    }\n\n    fprintf(f, \"%s: stage=%s device=%p name=%s num_regions=%d bus=%p node=%p\\n\",\n            __func__, stage, (const void *)device, name, num_regions, bus_ptr, node_ptr);\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Log entry state */\n    metal_register_generic_device_log(device, \"entry\");\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Log the failed-validation path and reason */\n        FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"%s: validation failed device=%p name=%s num_regions=%d max=%d ret=%d\\n\",\n                    __func__, (const void *)device,\n                    device && device->name ? device->name : \"(null)\",\n                    device ? device->num_regions : -1,\n                    METAL_MAX_DEVICE_REGIONS, -EINVAL);\n            fclose(f);\n        }\n        return -EINVAL;\n    }\n\n    /* Log before assignment */\n    {\n        extern struct metal_bus metal_generic_bus; /* declared elsewhere in the project */\n        FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"%s: about to assign device->bus (was %p) = &metal_generic_bus (%p)\\n\",\n                    __func__, (const void *)device->bus, (const void *)&metal_generic_bus);\n            fclose(f);\n        }\n    }\n\n    /* Preserve original logic: assign the generic bus */\n    device->bus = &metal_generic_bus;\n\n    /* Log after assignment */\n    metal_register_generic_device_log(device, \"after_assign_bus\");\n\n    /* Perform original list addition and log around it */\n    {\n        FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"%s: about to add device->node to generic_device_list: node=%p\\n\",\n                    __func__, (const void *)&device->node);\n            fclose(f);\n        }\n    }\n\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    metal_register_generic_device_log(device, \"exit_success\");\n    return 0;\n}\n"
}