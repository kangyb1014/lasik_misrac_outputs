{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of irq_cntrs (type struct metal_list *) to metal_list_for_each even though the list is only being traversed/inspected and not modified. If neither the macro nor the loop modifies the list head or nodes, the pointer should be to a const-qualified type (e.g. const struct metal_list *), so passing a non-const pointer violates MISRA C 2023 Rule 8.13. A concrete violating situation is: irq_cntrs is a global struct metal_list used only for iteration here; node is only read (no write to the list or nodes). In that case &irq_cntrs should have been passed as const struct metal_list * (and node declared as const struct metal_list *), but the code uses non-const pointers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_allocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_allocate:\n```c\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (irq_num == 0) {\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t}\n\t}\n\treturn irq_tocheck;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_allocate code.\n",
  "test_code": "#include <stdio.h>\n\nstatic int metal_irq_allocate(int irq_base, int irq_num)\n{\n\tFILE *log = fopen(\"/tmp/logs/153.txt\", \"a\");\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\tint irq_tocheck = irq_base, irq_end_tocheck;\n\n\tif (log) {\n\t\tfprintf(log, \"metal_irq_allocate called: irq_base=%d, irq_num=%d, irq_cntrs_addr=%p\\n\",\n\t\t\tirq_base, irq_num, (void *)&irq_cntrs);\n\t\tfflush(log);\n\t}\n\n\tif (irq_num == 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"early return: irq_num == 0 -> METAL_IRQ_ANY\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn METAL_IRQ_ANY;\n\t}\n\tif (irq_tocheck == METAL_IRQ_ANY) {\n\t\tirq_tocheck = 0;\n\t}\n\tirq_end_tocheck = irq_tocheck + irq_num;\n\n\tif (log) {\n\t\tfprintf(log, \"initial irq_tocheck=%d, irq_end_tocheck=%d\\n\", irq_tocheck, irq_end_tocheck);\n\t\tfflush(log);\n\t}\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint cntr_irq_base, cntr_irq_end;\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"iterating node=%p\\n\", (void *)node);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tcntr = metal_container_of(node,\n\t\t\t\t\t  struct metal_irq_controller, node);\n\t\tcntr_irq_base = cntr->irq_base;\n\t\tcntr_irq_end = cntr_irq_base + cntr->irq_num;\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"found controller at %p: irq_base=%d, irq_num=%d, irq_end=%d\\n\",\n\t\t\t\t(void *)cntr, cntr_irq_base, cntr->irq_num, cntr_irq_end);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (irq_tocheck < cntr_irq_end &&\n\t\t    irq_end_tocheck > cntr_irq_base) {\n\t\t\tif (irq_base != METAL_IRQ_ANY) {\n\t\t\t\t/* IRQ has been allocated */\n\t\t\t\tif (log) {\n\t\t\t\t\tfprintf(log, \"conflict: requested range [%d,%d) overlaps controller [%d,%d) -> returning METAL_IRQ_ANY\\n\",\n\t\t\t\t\t\tirq_tocheck, irq_end_tocheck, cntr_irq_base, cntr_irq_end);\n\t\t\t\t\tfclose(log);\n\t\t\t\t}\n\t\t\t\treturn METAL_IRQ_ANY;\n\t\t\t}\n\t\t\tirq_tocheck = cntr_irq_end;\n\t\t\tirq_end_tocheck = irq_tocheck + irq_num;\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"bumped irq_tocheck to %d, irq_end_tocheck to %d\\n\", irq_tocheck, irq_end_tocheck);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"final return irq_tocheck=%d\\n\", irq_tocheck);\n\t\tfclose(log);\n\t}\n\treturn irq_tocheck;\n}\n"
}