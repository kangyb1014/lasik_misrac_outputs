{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression `vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;` performs pointer arithmetic on a void * (vaddr_sg_lo). Arithmetic on void * is a documented GNU/Clang language extension (void has incomplete object type so standard C does not allow adding an integer to void *). This is an explicit compiler extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/390.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe function to log control flow and state for debugging.\n * Writes logs to /tmp/logs/390.txt. Keeps behavior side-effects minimal.\n */\nstatic void metal_uio_log_probe(const char *stage, int i, int j,\n                                void *vaddr_sg_lo, void *vaddr_sg_hi,\n                                size_t sg_len,\n                                void *vaddr_lo, void *vaddr_hi,\n                                int num_regions, const char *dev_name)\n{\n    FILE *f = fopen(\"/tmp/logs/390.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_uio_dev_dma_map] %s: i=%d, j=%d, dev=%s\\n\",\n            stage, i, j, dev_name ? dev_name : \"(null)\");\n    fprintf(f, \"    sg: vaddr_sg_lo=%p, sg_len=%zu, computed vaddr_sg_hi=%p\\n\",\n            vaddr_sg_lo, sg_len, vaddr_sg_hi);\n    fprintf(f, \"    region: vaddr_lo=%p, region_size/hi=%p\\n\",\n            vaddr_lo, vaddr_hi);\n\n    if (vaddr_lo && vaddr_sg_lo) {\n        fprintf(f, \"    comparisons: vaddr_sg_lo >= vaddr_lo: %s\\n\",\n                (vaddr_sg_lo >= vaddr_lo) ? \"true\" : \"false\");\n    }\n    if (vaddr_hi && vaddr_sg_hi) {\n        fprintf(f, \"    comparisons: vaddr_sg_hi <= vaddr_hi: %s\\n\",\n                (vaddr_sg_hi <= vaddr_hi) ? \"true\" : \"false\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                                 struct linux_device *ldev,\n                                 uint32_t dir,\n                                 struct metal_sg *sg_in,\n                                 int nents_in,\n                                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Log entry into the function */\n    metal_uio_log_probe(\"entry\", -1, -1, NULL, NULL, 0, NULL, NULL,\n                        (int)ldev->device.num_regions, ldev->dev_name);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        /* The following line uses pointer arithmetic on void * (compiler extension).\n         * We keep it as-is to preserve original logic, but we log the values to\n         * provide evidence of the operation and its operands.\n         */\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        /* Log computed sg entry info before region scan */\n        metal_uio_log_probe(\"sg_entry_start\", i, -1, vaddr_sg_lo, vaddr_sg_hi,\n                            (size_t)sg_in[i].len, NULL, NULL,\n                            (int)ldev->device.num_regions, ldev->dev_name);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            /* Log each region comparison */\n            metal_uio_log_probe(\"region_compare\", i, j, vaddr_sg_lo, vaddr_sg_hi,\n                                (size_t)sg_in[i].len, vaddr_lo, vaddr_hi,\n                                (int)ldev->device.num_regions, ldev->dev_name);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                /* Log successful match */\n                metal_uio_log_probe(\"region_match\", i, j, vaddr_sg_lo, vaddr_sg_hi,\n                                    (size_t)sg_in[i].len, vaddr_lo, vaddr_hi,\n                                    (int)ldev->device.num_regions, ldev->dev_name);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\n            /* Log the failure case with details to the file as well. */\n            metal_uio_log_probe(\"no_region_found\", i, j, vaddr_sg_lo, vaddr_sg_hi,\n                                (size_t)sg_in[i].len, NULL, NULL,\n                                (int)ldev->device.num_regions, ldev->dev_name);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    /* Log successful exit */\n    metal_uio_log_probe(\"exit\", -1, -1, NULL, NULL, 0, NULL, NULL,\n                        (int)ldev->device.num_regions, ldev->dev_name);\n    return nents_in;\n}\n"
}