{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sg_out is different from sg_in but does not point to a buffer large enough for nents_in elements (or is NULL), the memcpy call will read/write beyond the bounds of the sg_out/sg_in objects. Example: nents_in == 10 but sg_out was allocated/contains space for only 5 struct metal_sg elements (or sg_out == NULL) \u2014 memcpy(sg_out, sg_in, 10 * sizeof(struct metal_sg)) will overflow, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Simple probe logger that appends to /tmp/logs/399.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                                 struct linux_device *ldev,\n                                 uint32_t dir,\n                                 struct metal_sg *sg_in,\n                                 int nents_in,\n                                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    /* Log entry state */\n    probe_log(\"ENTER: %s: lbus=%p, ldev=%p, dev_name=%s, dir=0x%x, sg_in=%p, nents_in=%d, sg_out=%p\",\n              __func__, (void *)lbus, (void *)ldev,\n              (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\", dir,\n              (void *)sg_in, nents_in, (void *)sg_out);\n\n    (void)lbus;\n    (void)dir;\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        probe_log(\"ENTRY_CHECK: index=%d, sg_in[%d].virt=%p, len=%zu, range=[%p-%p]\",\n                  i, i, vaddr_sg_lo, (size_t)sg_in[i].len, vaddr_sg_lo, vaddr_sg_hi);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            probe_log(\"  REGION_CHECK: idx=%d, io=%p, virt=%p, size=%zu, region_range=[%p-%p]\",\n                      j, (void *)io, vaddr_lo, (size_t)io->size, vaddr_lo, vaddr_hi);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                probe_log(\"  MATCH: sg_in[%d] within region %d (io=%p)\", i, j, (void *)io);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            probe_log(\"MISMATCH_WARNING: %s,%s: input address isn't MMIO addr: %p,%zu.\",\n                      __func__, (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n                      vaddr_sg_lo, (size_t)sg_in[i].len);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n              __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            probe_log(\"EXIT: returning -EINVAL (index %d failed MMIO check)\", i);\n            return -EINVAL;\n        }\n    }\n\n    if (sg_out != sg_in) {\n        size_t bytes = (size_t)nents_in * (sizeof(struct metal_sg));\n        probe_log(\"BEFORE_MEMCPY: sg_out=%p, sg_in=%p, nents_in=%d, sizeof(struct metal_sg)=%zu, total_bytes=%zu\",\n                  (void *)sg_out, (void *)sg_in, nents_in, (size_t)sizeof(struct metal_sg), bytes);\n        if (sg_out == NULL) {\n            probe_log(\"BEFORE_MEMCPY_WARNING: sg_out is NULL \u2014 memcpy will likely crash\");\n        }\n        /* Preserve original behavior: perform memcpy as before */\n        memcpy(sg_out, sg_in, bytes);\n        probe_log(\"AFTER_MEMCPY: memcpy completed (no further validation performed)\");\n    } else {\n        probe_log(\"SKIP_MEMCPY: sg_out == sg_in \u2014 no copy performed\");\n    }\n\n    probe_log(\"EXIT: returning nents_in=%d\", nents_in);\n    return nents_in;\n}\n"
}