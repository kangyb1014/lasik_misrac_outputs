{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment uses io->virt (declared as void * in struct metal_io_region) via vaddr_lo (declared as void *), and only performs read/inspection (pointer arithmetic) on it. Since the pointer is not used to modify the pointee, it should be const-qualified (e.g. const void *io->virt and const void *vaddr_lo/vaddr_hi). Because the pointee is not modified here but the declarations are non-const, this violates MISRA C 2023 Rule 8.13 (pointer should point to a const-qualified type whenever possible). Note: if other code legitimately needs to modify the region through io->virt, making it const would be impossible and no violation would exist; based on the provided code the pointer appears read-only, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <errno.h>\n#include <stdarg.h>\n\n/* Probe helper: append a structured log line to /tmp/logs/393.txt */\nstatic void probe_log_state(const char *stage, int i, int j,\n                            void *vaddr_sg_lo, size_t sg_len, void *vaddr_sg_hi,\n                            void *vaddr_lo, void *vaddr_hi,\n                            int matched, int num_regions)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"stage=%s i=%d j=%d num_regions=%d sg_lo=%p sg_len=%zu sg_hi=%p lo=%p hi=%p matched=%d\\n\",\n            stage, i, j, num_regions,\n            vaddr_sg_lo, sg_len, vaddr_sg_hi,\n            vaddr_lo, vaddr_hi, matched);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Log entry state */\n    probe_log_state(\"entry\", -1, -1, NULL, 0, NULL, NULL, NULL, 0,\n                    (int)ldev->device.num_regions);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        /* Log sg entry */\n        probe_log_state(\"sg_entry\", i, -1, vaddr_sg_lo, sg_in[i].len, vaddr_sg_hi,\n                        NULL, NULL, 0, (int)ldev->device.num_regions);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            /* Log region being tested */\n            probe_log_state(\"region_test\", i, j, vaddr_sg_lo, sg_in[i].len, vaddr_sg_hi,\n                            vaddr_lo, vaddr_hi, 0, (int)ldev->device.num_regions);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                /* Log match and the fact we will break */\n                probe_log_state(\"region_match\", i, j, vaddr_sg_lo, sg_in[i].len, vaddr_sg_hi,\n                                vaddr_lo, vaddr_hi, 1, (int)ldev->device.num_regions);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            probe_log_state(\"no_region_found\", i, j, vaddr_sg_lo, sg_in[i].len, vaddr_sg_hi,\n                            NULL, NULL, 0, (int)ldev->device.num_regions);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in) {\n        probe_log_state(\"memcpy_before\", -1, -1, NULL, nents_in, NULL, NULL, NULL, 0,\n                        (int)ldev->device.num_regions);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n        probe_log_state(\"memcpy_after\", -1, -1, NULL, nents_in, NULL, NULL, NULL, 0,\n                        (int)ldev->device.num_regions);\n    }\n\n    probe_log_state(\"return\", -1, -1, NULL, nents_in, NULL, NULL, NULL, 0,\n                    (int)ldev->device.num_regions);\n    return nents_in;\n}\n"
}