{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code reads addresses from sg_in[i].virt into vaddr_sg_lo (declared as void *) and only uses them for address arithmetic and comparisons. The pointer does not get used to modify the pointed-to object, so it should be const-qualified. The fragment vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len; therefore uses non-const pointers where const void * (or const char *) would be appropriate. This violates MISRA C 2023 Rule 8.13. (Fix: declare vaddr_sg_lo/vaddr_sg_hi as const void * (and preferably change metal_sg.virt to const void *), and use pointer arithmetic via const char * for standard-compliant arithmetic.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/393.txt */\nstatic void probe_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe helper: log pointer and region comparison details */\nstatic void probe_log_region_check(int i, int j,\n    void *vaddr_sg_lo, void *vaddr_sg_hi,\n    void *vaddr_lo, void *vaddr_hi, size_t len, const char *dev_name)\n{\n    probe_log_append(\"[probe] entry=%d region_check idx=%d dev=%s sg_lo=0x%\" PRIxPTR \" sg_hi=0x%\" PRIxPTR \" len=%zu\",\n        i, j, dev_name ? dev_name : \"(null)\", (uintptr_t)vaddr_sg_lo, (uintptr_t)vaddr_sg_hi, len);\n    probe_log_append(\"[probe] region idx=%d lo=0x%\" PRIxPTR \" hi=0x%\" PRIxPTR,\n        j, (uintptr_t)vaddr_lo, (uintptr_t)vaddr_hi);\n\n    /* Log the boolean outcomes of the comparisons explicitly */\n    probe_log_append(\"[probe] compare: (sg_lo >= lo)=%d, (sg_hi <= hi)=%d\",\n        (vaddr_sg_lo >= vaddr_lo) ? 1 : 0, (vaddr_sg_hi <= vaddr_hi) ? 1 : 0);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Log function entry and parameters */\n    probe_log_append(\"[probe] %s called dev=%s nents_in=%d\", __func__, ldev ? ldev->dev_name : \"(null)\", nents_in);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        /* Log computed sg addresses */\n        probe_log_append(\"[probe] sg[%d].virt=0x%\" PRIxPTR \" len=%d => sg_lo=0x%\" PRIxPTR \" sg_hi=0x%\" PRIxPTR,\n            i, (uintptr_t)sg_in[i].virt, sg_in[i].len, (uintptr_t)vaddr_sg_lo, (uintptr_t)vaddr_sg_hi);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            /* Detailed per-region logging */\n            probe_log_region_check(i, j, vaddr_sg_lo, vaddr_sg_hi, vaddr_lo, vaddr_hi, sg_in[i].len, ldev->dev_name);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                probe_log_append(\"[probe] sg[%d] matched region %d\", i, j);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            probe_log_append(\"[probe] sg[%d] not inside any region, returning -EINVAL\", i);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    probe_log_append(\"[probe] %s returning nents_in=%d\", __func__, nents_in);\n    return nents_in;\n}\n"
}