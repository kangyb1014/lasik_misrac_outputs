{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'io' is declared as 'struct metal_io_region *io' and is initialized from 'ldev->device.regions' but is only used for read-only accesses (io->virt and io->size). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible. Here 'io' could and should be declared as 'const struct metal_io_region *io' (or the regions member made const) since the function does not modify the pointed-to objects.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/393.txt. */\nstatic void metal_uio_probe_log(const char *stage,\n                                int i, int j,\n                                void *vaddr_sg_lo, void *vaddr_sg_hi,\n                                struct linux_device *ldev,\n                                struct metal_io_region *io)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Basic context */\n    fprintf(f, \"[metal_uio_dev_dma_map] %s: i=%d j=%d\\n\", stage, i, j);\n\n    /* Device information (if available) */\n    if (ldev) {\n        /* dev_name and device.num_regions are accessed as in the original code */\n        fprintf(f, \"  dev_name=%s num_regions=%u\\n\",\n                ldev->dev_name ? ldev->dev_name : \"(null)\",\n                (unsigned)ldev->device.num_regions);\n    } else {\n        fprintf(f, \"  ldev=(null)\\n\");\n    }\n\n    /* Addresses and region info */\n    fprintf(f, \"  vaddr_sg_lo=%p vaddr_sg_hi=%p\\n\", vaddr_sg_lo, vaddr_sg_hi);\n    if (io) {\n        fprintf(f, \"  io(ptr)=%p io->virt=%p io->size=%zu\\n\",\n                (void *)io, io->virt, (size_t)io->size);\n    } else {\n        fprintf(f, \"  io=(null)\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                                 struct linux_device *ldev,\n                                 uint32_t dir,\n                                 struct metal_sg *sg_in,\n                                 int nents_in,\n                                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Log entry to function */\n    metal_uio_probe_log(\"enter\", -1, -1, NULL, NULL, ldev, NULL);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        /* Log before scanning regions for this SG entry */\n        metal_uio_probe_log(\"outer_loop_start\", i, -1, vaddr_sg_lo, vaddr_sg_hi, ldev, NULL);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            /* Log each inner-loop iteration with the current io region */\n            metal_uio_probe_log(\"inner_loop_iter\", i, j, vaddr_sg_lo, vaddr_sg_hi, ldev, io);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                /* Found a containing region: log and break */\n                metal_uio_probe_log(\"region_found\", i, j, vaddr_sg_lo, vaddr_sg_hi, ldev, io);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the failure case before returning */\n            metal_uio_probe_log(\"no_region_match\", i, j, vaddr_sg_lo, vaddr_sg_hi, ldev, NULL);\n\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    /* Log successful exit and number of entries returned */\n    metal_uio_probe_log(\"exit_success\", -1, nents_in, NULL, NULL, ldev, NULL);\n    return nents_in;\n}\n"
}