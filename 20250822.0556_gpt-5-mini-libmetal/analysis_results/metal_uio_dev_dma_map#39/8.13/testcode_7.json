{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes non-const pointers that are only read: sg_in (struct metal_sg *), ldev (struct linux_device *), and lbus (struct linux_bus *) are not const-qualified even though the function only reads the objects they point to. In particular sg_in is only read and used as the memcpy source (so it should be declared const struct metal_sg *sg_in), and ldev is only queried (so it could be const struct linux_device *ldev). lbus is unused and could be const as well. sg_out must remain non-const because it is written to. These omissions violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/393.txt\n * These helpers only read the passed-in objects and do not modify program state.\n */\nstatic void probe_log_entry(const struct linux_bus *lbus,\n                            const struct linux_device *ldev,\n                            uint32_t dir,\n                            const struct metal_sg *sg_in,\n                            int nents_in,\n                            struct metal_sg *sg_out)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"ENTRY: metal_uio_dev_dma_map called\\n\");\n        fprintf(f, \"  lbus=%p, dir=%u, ldev=%p, dev_name=%s\\n\",\n                (void *)lbus,\n                (unsigned)dir,\n                (void *)ldev,\n                (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\");\n        fprintf(f, \"  nents_in=%d, sg_in=%p, sg_out=%p\\n\",\n                nents_in, (void *)sg_in, (void *)sg_out);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_iteration(int idx,\n                                const void *vaddr_sg_lo,\n                                const void *vaddr_sg_hi,\n                                int region_idx,\n                                const void *vaddr_lo,\n                                const void *vaddr_hi,\n                                size_t sg_len,\n                                int num_regions)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"ITER[%d]: sg_lo=%p, sg_hi=%p, len=%zu\\n\",\n                idx, vaddr_sg_lo, vaddr_sg_hi, sg_len);\n        fprintf(f, \"  checked region[%d/%d]: reg_lo=%p, reg_hi=%p\\n\",\n                region_idx, num_regions, vaddr_lo, vaddr_hi);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_nomatch(int idx, const void *vaddr_sg_lo, size_t sg_len)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"NOMATCH: input address isn't MMIO addr for entry %d: sg_lo=%p, len=%zu\\n\",\n                idx, vaddr_sg_lo, sg_len);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_memcpy(const struct metal_sg *sg_in, int nents_in, struct metal_sg *sg_out)\n{\n    FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"MEMCPY: copying %d entries from %p to %p (size=%zu)\\n\",\n                nents_in, (void *)sg_in, (void *)sg_out,\n                (size_t)(nents_in * (int)sizeof(struct metal_sg)));\n        fclose(f);\n    }\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                                 struct linux_device *ldev,\n                                 uint32_t dir,\n                                 struct metal_sg *sg_in,\n                                 int nents_in,\n                                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    /* Preserve original unused parameter annotations */\n    (void)lbus;\n    (void)dir;\n\n    /* Log entry and initial parameters */\n    probe_log_entry(lbus, ldev, dir, sg_in, nents_in, sg_out);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            /* Log each region check for this scatter-gather entry */\n            probe_log_iteration(i, vaddr_sg_lo, vaddr_sg_hi, j,\n                                vaddr_lo, vaddr_hi, (size_t)sg_in[i].len,\n                                (int)ldev->device.num_regions);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                /* Found a matching MMIO region for this entry */\n                FILE *f = fopen(\"/tmp/logs/393.txt\", \"a\");\n                if (f != NULL) {\n                    fprintf(f, \"MATCH: sg[%d] is within region[%d]\\n\", i, j);\n                    fclose(f);\n                }\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the no-match condition and return error as before */\n            probe_log_nomatch(i, vaddr_sg_lo, (size_t)sg_in[i].len);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in) {\n        /* Log the impending memcpy, then perform it (original behavior) */\n        probe_log_memcpy(sg_in, nents_in, sg_out);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    }\n    return nents_in;\n}\n"
}