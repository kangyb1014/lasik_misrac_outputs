{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)dir;' is an expression-statement that only discards the value of the parameter dir. It is executed but has no effect on program behaviour; removing it would not change the observable behaviour (it exists solely to suppress an unused-parameter warning). Therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/392.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append a simple log line to /tmp/logs/392.txt. */\nstatic void metal_uio_probe_log(const char *event,\n                                const char *func,\n                                const struct linux_device *ldev,\n                                uint32_t dir,\n                                const struct metal_sg *sg_in,\n                                int nents)\n{\n    FILE *f = fopen(\"/tmp/logs/392.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log basic state: event tag, function, dir value, ldev pointer and name, nents */\n    fprintf(f, \"%s: func=%s dir=%u ldev=%p nents=%d\\n\",\n            event, func, (unsigned)dir, (const void *)ldev, nents);\n    if (ldev) {\n        /* Attempt to print the device name if available */\n        fprintf(f, \"%s: dev_name=%s\\n\", event, ldev->dev_name ? ldev->dev_name : \"(null)\");\n    }\n    /* Close log file; keep probes simple to avoid changing semantics. */\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    /* Preserve original unused-parameter suppression */\n    (void)lbus;\n    (void)dir;\n\n    /* Probe: record that the (void)dir; discard point was reached and record dir value. */\n    metal_uio_probe_log(\"DISCARD_PARAM\", __func__, ldev, dir, sg_in, nents_in);\n\n    /* Entry probe: capture initial call state */\n    metal_uio_probe_log(\"ENTRY\", __func__, ldev, dir, sg_in, nents_in);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the exact failing address/length to aid reproducing the scenario */\n            FILE *f = fopen(\"/tmp/logs/392.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"MMIO_CHECK_FAIL: func=%s index=%d vaddr=%p len=%u num_regions=%u\\n\",\n                        __func__, i, vaddr_sg_lo, (unsigned)sg_in[i].len,\n                        (unsigned)ldev->device.num_regions);\n                fclose(f);\n            }\n\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n\n    if (sg_out != sg_in) {\n        /* Log that we will copy the scatter-gather list */\n        metal_uio_probe_log(\"COPY_SG\", __func__, ldev, dir, sg_in, nents_in);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    }\n\n    /* Exit probe: report successful mapping and return value */\n    metal_uio_probe_log(\"EXIT_OK\", __func__, ldev, dir, sg_in, nents_in);\n    return nents_in;\n}\n"
}