{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro for_each_linux_driver(lbus, ldrv) hides the for-statement clauses. If it expands to a single-counter loop that uses only ldrv in the test and the iteration expressions (for example: for (ldrv = first_driver(lbus); ldrv != NULL; ldrv = ldrv->next)), then Rule 14.2 is satisfied. However, if the expansion uses lbus (or any other object) in the second or third clause and that object is modified (directly or via called functions) in the loop body, or if it employs more than one loop counter, the rule is violated. Example violating expansion: for (ldrv = first_driver(lbus); ldrv != NULL && bus_active(lbus); ldrv = next_driver(lbus, ldrv)) where bus_active(lbus) or next_driver(lbus,\u2026) depend on lbus which is modified in the loop body \u2014 this breaches clauses 2/3 and the single-counter requirement. Without the macro definition compliance cannot be proven; check the macro expansion. \n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/354.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper logging functions to capture control flow and state for analysis. */\nstatic FILE *open_probe_log(void)\n{\n    /* Ensure directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    return fopen(\"/tmp/logs/354.txt\", \"a\");\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = open_probe_log();\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n\n    probe_log(\"ENTER metal_linux_probe_bus: lbus=%p, bus_name=%s\\n\",\n              (void *)lbus, lbus ? (lbus->bus_name ? lbus->bus_name : \"(null)\") : \"(null)\");\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    probe_log(\"sysfs_open_bus returned sbus=%p for bus_name=%s\\n\",\n              (void *)lbus->sbus, lbus->bus_name ? lbus->bus_name : \"(null)\");\n\n    if (!lbus->sbus) {\n        probe_log(\"sysfs_open_bus failed: returning -ENODEV\\n\");\n        return -ENODEV;\n    }\n\n    /* Iterate drivers. The macro for_each_linux_driver hides the for clauses. */\n    probe_log(\"BEGIN for_each_linux_driver loop for lbus=%p\\n\", (void *)lbus);\n    for_each_linux_driver(lbus, ldrv) {\n        probe_log(\"  LOOP ITERATION: ldrv=%p, lbus->sbus=%p\\n\",\n                  (void *)ldrv, (void *)lbus->sbus);\n\n        ret = metal_linux_probe_driver(lbus, ldrv);\n\n        probe_log(\"    metal_linux_probe_driver returned ret=%d for ldrv=%p\\n\",\n                  ret, (void *)ldrv);\n\n        /* Clear the error if any driver is available */\n        if (!ret) {\n            probe_log(\"    driver probe succeeded, clearing error (was %d)\\n\", error);\n            error = ret;\n        }\n    }\n    probe_log(\"END for_each_linux_driver loop for lbus=%p, error=%d\\n\",\n              (void *)lbus, error);\n\n    if (error) {\n        probe_log(\"Error after driver loop: %d. Closing bus %p\\n\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n        probe_log(\"Closed bus %p, returning error %d\\n\", (void *)&lbus->bus, error);\n        return error;\n    }\n\n    error = metal_linux_register_bus(lbus);\n    probe_log(\"metal_linux_register_bus returned %d for lbus=%p\\n\", error, (void *)lbus);\n    if (error) {\n        probe_log(\"Registration failed (%d). Closing bus %p\\n\", error, (void *)&lbus->bus);\n        metal_linux_bus_close(&lbus->bus);\n    } else {\n        probe_log(\"Registration succeeded for lbus=%p\\n\", (void *)lbus);\n    }\n\n    probe_log(\"EXIT metal_linux_probe_bus: lbus=%p, returning %d\\n\", (void *)lbus, error);\n    return error;\n}\n"
}