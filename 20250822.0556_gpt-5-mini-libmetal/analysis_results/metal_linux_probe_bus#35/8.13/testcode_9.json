{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'ldrv' is declared as 'struct linux_driver *ldrv;' but is only used for read-only access (e.g. iterated by for_each_linux_driver and passed to metal_linux_probe_driver which does not modify the driver). In that case the pointer could and should be declared 'const struct linux_driver *ldrv;', so the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_bus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_bus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_bus code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Helper logging function: append a single string to the log file. */\nstatic void metal_log_str(const char *s)\n{\n    FILE *f = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (f) {\n        (void)fputs(s, f);\n        (void)fclose(f);\n    }\n}\n\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n    struct linux_driver *ldrv;\n    int ret, error = -ENODEV;\n    char buf[256];\n\n    /* Log entry and bus name */\n    snprintf(buf, sizeof(buf), \"metal_linux_probe_bus: enter for bus '%s'\\n\",\n             lbus && lbus->bus_name ? lbus->bus_name : \"(null)\");\n    metal_log_str(buf);\n\n    lbus->sbus = sysfs_open_bus(lbus->bus_name);\n    if (!lbus->sbus) {\n        metal_log_str(\"metal_linux_probe_bus: sysfs_open_bus failed, returning -ENODEV\\n\");\n        return -ENODEV;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n        /* Log driver pointer and (if available) any identifying info we can safely access */\n        snprintf(buf, sizeof(buf), \"metal_linux_probe_bus: probing driver ptr=%p on bus '%s'\\n\",\n                 (void *)ldrv, lbus && lbus->bus_name ? lbus->bus_name : \"(null)\");\n        metal_log_str(buf);\n\n        ret = metal_linux_probe_driver(lbus, ldrv);\n\n        snprintf(buf, sizeof(buf), \"metal_linux_probe_bus: metal_linux_probe_driver returned %d for driver ptr=%p\\n\",\n                 ret, (void *)ldrv);\n        metal_log_str(buf);\n\n        /* Clear the error if any driver is available */\n        if (!ret)\n            error = ret;\n    }\n\n    if (error) {\n        metal_log_str(\"metal_linux_probe_bus: no driver succeeded, closing bus and returning error\\n\");\n        metal_linux_bus_close(&lbus->bus);\n        return error;\n    }\n\n    error = metal_linux_register_bus(lbus);\n    if (error) {\n        snprintf(buf, sizeof(buf), \"metal_linux_probe_bus: metal_linux_register_bus failed with %d, closing bus\\n\", error);\n        metal_log_str(buf);\n        metal_linux_bus_close(&lbus->bus);\n    } else {\n        metal_log_str(\"metal_linux_probe_bus: bus registered successfully\\n\");\n    }\n\n    return error;\n}\n"
}