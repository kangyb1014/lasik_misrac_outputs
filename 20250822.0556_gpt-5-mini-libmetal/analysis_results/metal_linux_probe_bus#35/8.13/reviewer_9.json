{
  "user_message": "An agent A claimed that the following metal_linux_probe_bus code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_linux_probe_bus.\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'ldrv' is declared as 'struct linux_driver *ldrv;' but is only used for read-only access (e.g. iterated by for_each_linux_driver and passed to metal_linux_probe_driver which does not modify the driver). In that case the pointer could and should be declared 'const struct linux_driver *ldrv;', so the current declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_linux_probe_bus: enter for bus 'platform'\nmetal_linux_probe_bus: probing driver ptr=0x7fb8738c1bc0 on bus 'platform'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x7fb8738c1bc0\nmetal_linux_probe_bus: probing driver ptr=0x7fb8738c1c08 on bus 'platform'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x7fb8738c1c08\nmetal_linux_probe_bus: bus registered successfully\nmetal_linux_probe_bus: enter for bus 'pci'\nmetal_linux_probe_bus: probing driver ptr=0x7fb8738c2e28 on bus 'pci'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x7fb8738c2e28\nmetal_linux_probe_bus: probing driver ptr=0x7fb8738c2e70 on bus 'pci'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x7fb8738c2e70\nmetal_linux_probe_bus: bus registered successfully\nmetal_linux_probe_bus: enter for bus 'platform'\nmetal_linux_probe_bus: probing driver ptr=0x55ba66bea2c0 on bus 'platform'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x55ba66bea2c0\nmetal_linux_probe_bus: probing driver ptr=0x55ba66bea308 on bus 'platform'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x55ba66bea308\nmetal_linux_probe_bus: bus registered successfully\nmetal_linux_probe_bus: enter for bus 'pci'\nmetal_linux_probe_bus: probing driver ptr=0x55ba66beb528 on bus 'pci'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x55ba66beb528\nmetal_linux_probe_bus: probing driver ptr=0x55ba66beb570 on bus 'pci'\nmetal_linux_probe_bus: metal_linux_probe_driver returned 0 for driver ptr=0x55ba66beb570\nmetal_linux_probe_bus: bus registered successfully\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the evidence shown. MISRA 8.13 says a pointer should point to a const-qualified type whenever it is possible to do so, i.e. when the pointed-to object is not modified through that pointer. In this snippet the pointer ldrv is passed to metal_linux_probe_driver and iterated by the for_each_linux_driver macro, but the code sample and log do not show the prototypes/definitions of for_each_linux_driver or metal_linux_probe_driver. If metal_linux_probe_driver (or other callees/macros) expect or may modify a non-const struct linux_driver * (i.e. its prototype is struct linux_driver * or takes a non-const pointer), then changing ldrv to const would be impossible (or would require casts) and MISRA 8.13 would not be violated. Only if you can prove that none of the uses (including the called function and the iteration macro) require a mutable pointer and that the APIs accept a pointer-to-const, would the declaration be required to use const. Because that proof is not present, the claim of a definite MISRA 8.13 violation is incorrect."
}