{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_bus:\n```c\nstatic int metal_linux_probe_bus(struct linux_bus *lbus)\n{\n\tstruct linux_driver *ldrv;\n\tint ret, error = -ENODEV;\n\n\tlbus->sbus = sysfs_open_bus(lbus->bus_name);\n\tif (!lbus->sbus)\n\t\treturn -ENODEV;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tret = metal_linux_probe_driver(lbus, ldrv);\n\t\t/* Clear the error if any driver is available */\n\t\tif (!ret)\n\t\t\terror = ret;\n\t}\n\n\tif (error) {\n\t\tmetal_linux_bus_close(&lbus->bus);\n\t\treturn error;\n\t}\n\n\terror = metal_linux_register_bus(lbus);\n\tif (error)\n\t\tmetal_linux_bus_close(&lbus->bus);\n\n\treturn error;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = metal_linux_probe_driver(lbus, ldrv);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call itself does not violate MISRA C 2023 Rule 8.13. Rule 8.13 concerns pointer declarations (a pointer should point to a const-qualified type whenever possible), not the call site. However, a violation would exist if the prototype/definition of metal_linux_probe_driver is declared as\n\n    int metal_linux_probe_driver(struct linux_bus *lbus, struct linux_driver *ldrv)\n\nand the function does not modify the object pointed to by ldrv \u2014 in that case the parameter should be declared as const struct linux_driver *ldrv (and the local ldrv could be const) to comply with Rule 8.13. If the function actually modifies *ldrv then the non-const pointer is justified."
}