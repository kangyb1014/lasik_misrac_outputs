{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator variable is declared as a mutable pointer: 'struct metal_list *node;'. In the metal_list_for_each(&irq_cntrs, node) loop it is only used for read-only traversal/inspection (comparison with &cntr->node) and not modified through the pointer, so per MISRA C 2023 Rule 8.13 it should be a pointer to const (e.g. 'const struct metal_list *node'). Thus the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register_controller code that contains useful probe functions that print useful logs to a file \"/tmp/logs/183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register_controller as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register_controller:\n```c\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n\tint irq_base;\n\tstruct metal_list *node;\n\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tif (node == &cntr->node) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/*\n\t * Allocate IRQ numbers which are not yet used by any IRQ\n\t * controllers.\n\t */\n\tirq_base = metal_irq_allocate(cntr->irq_base, cntr->irq_num);\n\tif (irq_base == METAL_IRQ_ANY) {\n\t\treturn -EINVAL;\n\t}\n\tcntr->irq_base = irq_base;\n\n\tmetal_list_add_tail(&irq_cntrs, &cntr->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register_controller code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/183.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_irq_register_controller(struct metal_irq_controller *cntr)\n{\n    int irq_base;\n    struct metal_list *node;\n\n    probe_log(\"enter: metal_irq_register_controller(cntr=%p)\", (void *)cntr);\n\n    if (cntr == NULL) {\n        probe_log(\"early return: cntr is NULL -> -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"start list scan: cntr->node=%p\", (void *)&cntr->node);\n    metal_list_for_each(&irq_cntrs, node) {\n        probe_log(\"iter: node=%p, comparing to cntr->node=%p\", (void *)node, (void *)&cntr->node);\n        if (node == &cntr->node) {\n            probe_log(\"match found: node == &cntr->node -> returning 0\");\n            return 0;\n        }\n    }\n\n    /*\n     * Allocate IRQ numbers which are not yet used by any IRQ\n     * controllers.\n     */\n    {\n        int requested_base = cntr->irq_base;\n        int requested_num = cntr->irq_num;\n        probe_log(\"allocating IRQs: requested_base=%d requested_num=%d\", requested_base, requested_num);\n        irq_base = metal_irq_allocate(requested_base, requested_num);\n        probe_log(\"metal_irq_allocate returned irq_base=%d\", irq_base);\n    }\n\n    if (irq_base == METAL_IRQ_ANY) {\n        probe_log(\"allocation failed: irq_base == METAL_IRQ_ANY -> -EINVAL\");\n        return -EINVAL;\n    }\n    cntr->irq_base = irq_base;\n    probe_log(\"assigned cntr->irq_base=%d\", cntr->irq_base);\n\n    probe_log(\"adding controller node %p to irq_cntrs list\", (void *)&cntr->node);\n    metal_list_add_tail(&irq_cntrs, &cntr->node);\n    probe_log(\"added node, returning 0\");\n    return 0;\n}\n"
}