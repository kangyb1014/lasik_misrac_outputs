{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'test_case' is only used for read-only access in this function (reading test_case->name and calling test_case->test()), and there are no writes through it. Therefore it could be declared as 'const struct metal_test_case *test_case;' to express immutability. As written (non-const pointer) it violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *probe = NULL;\n\n\t/* Probe: try to open log file for appending. If this fails, fall back to metal_log. */\n\tprobe = fopen(\"/tmp/logs/743.txt\", \"a\");\n\tif (probe)\n\t{\n\t\tfprintf(probe, \"metal_tests_run: enter params=%p\\n\", (void *)params);\n\t\tfflush(probe);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t{\n\t\tif (probe)\n\t\t{\n\t\t\tfprintf(probe, \"metal_tests_run: metal_init failed error=%d\\n\", error);\n\t\t\tfclose(probe);\n\t\t}\n\t\treturn error;\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Probe: record pointer and name state before calling test */\n\t\tif (probe)\n\t\t{\n\t\t\tfprintf(probe, \"-- iteration start --\\n\");\n\t\t\tfprintf(probe, \"node=%p\\n\", (void *)node);\n\t\t\tfprintf(probe, \"test_case=%p\\n\", (void *)test_case);\n\t\t\tif (test_case)\n\t\t\t{\n\t\t\t\tconst char *name = test_case->name;\n\t\t\t\tsize_t namelen = name ? strlen(name) : 0U;\n\t\t\t\tfprintf(probe, \"test_case->name=%p name=\\\"%s\\\" namelen=%zu\\n\",\n\t\t\t\t\t(void *)name, name ? name : \"(null)\", namelen);\n\t\t\t\tfprintf(probe, \"test_case->test=%p\\n\", (void *)(test_case->test));\n\t\t\t}\n\t\t\tfflush(probe);\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\n\t\t/* Probe: record pad computation */\n\t\tif (probe)\n\t\t{\n\t\t\tfprintf(probe, \"pad computed: dots=%p pad=%p (offset=%zu)\\n\",\n\t\t\t\t(void *)dots, (void *)pad, (size_t)(pad - dots));\n\t\t\tfflush(probe);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\t/* Probe: record invocation */\n\t\tif (probe)\n\t\t{\n\t\t\tfprintf(probe, \"invoking test_case->test() for name=\\\"%s\\\"\\n\",\n\t\t\t\ttest_case->name ? test_case->name : \"(null)\");\n\t\t\tfflush(probe);\n\t\t}\n\n\t\terror = test_case->test();\n\n\t\t/* Probe: record return and result decision */\n\t\tif (probe)\n\t\t{\n\t\t\tfprintf(probe, \"test_case->test() returned error=%d\\n\", error);\n\t\t\tfprintf(probe, \"interpreted result: %s\\n\", (error ? \"fail\" : \"pass\"));\n\t\t\tfflush(probe);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\t/* Probe: final summary */\n\tif (probe)\n\t{\n\t\tfprintf(probe, \"metal_tests_run: exit errors=%d\\n\", errors);\n\t\tfclose(probe);\n\t}\n\n\treturn errors;\n}\n"
}