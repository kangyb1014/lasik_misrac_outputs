{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'test_case' is only used for read-only access in this function (reading test_case->name and calling test_case->test()), and there are no writes through it. Therefore it could be declared as 'const struct metal_test_case *test_case;' to express immutability. As written (non-const pointer) it violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_tests_run: enter params=(nil)\n-- iteration start --\nnode=0x55bd2ab860e0\ntest_case=0x55bd2ab860e0\ntest_case->name=0x55bd2ab82082 name=\"atomic\" namelen=6\ntest_case->test=0x55bd2ab7c881\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d6 (offset=6)\ninvoking test_case->test() for name=\"atomic\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab86260\ntest_case=0x55bd2ab86260\ntest_case->name=0x55bd2ab820ec name=\"mutex\" namelen=5\ntest_case->test=0x55bd2ab7ce8e\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d5 (offset=5)\ninvoking test_case->test() for name=\"mutex\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab86620\ntest_case=0x55bd2ab86620\ntest_case->name=0x55bd2ab8219d name=\"shmem\" namelen=5\ntest_case->test=0x55bd2ab7d745\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d5 (offset=5)\ninvoking test_case->test() for name=\"shmem\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab869a0\ntest_case=0x55bd2ab869a0\ntest_case->name=0x55bd2ab8224f name=\"condition\" namelen=9\ntest_case->test=0x55bd2ab7dddf\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d9 (offset=9)\ninvoking test_case->test() for name=\"condition\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab86e40\ntest_case=0x55bd2ab86e40\ntest_case->name=0x55bd2ab82382 name=\"spinlock\" namelen=8\ntest_case->test=0x55bd2ab7e7d2\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d8 (offset=8)\ninvoking test_case->test() for name=\"spinlock\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab870a0\ntest_case=0x55bd2ab870a0\ntest_case->name=0x55bd2ab8240b name=\"alloc\" namelen=5\ntest_case->test=0x55bd2ab7ea49\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d5 (offset=5)\ninvoking test_case->test() for name=\"alloc\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab87300\ntest_case=0x55bd2ab87300\ntest_case->name=0x55bd2ab8250a name=\"irq\" namelen=3\ntest_case->test=0x55bd2ab7ec0f\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d3 (offset=3)\ninvoking test_case->test() for name=\"irq\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55bd2ab874c0\ntest_case=0x55bd2ab874c0\ntest_case->name=0x55bd2ab82577 name=\"version\" namelen=7\ntest_case->test=0x55bd2ab7f05a\npad computed: dots=0x55bd2ab825d0 pad=0x55bd2ab825d7 (offset=7)\ninvoking test_case->test() for name=\"version\"\ntest_case->test() returned error=0\ninterpreted result: pass\nmetal_tests_run: exit errors=0\nmetal_tests_run: enter params=(nil)\n-- iteration start --\nnode=0x55c7a53470e0\ntest_case=0x55c7a53470e0\ntest_case->name=0x55c7a5341082 name=\"atomic\" namelen=6\ntest_case->test=0x55c7a5332c41\npad computed: dots=0x55c7a53415d0 pad=0x55c7a53415d6 (offset=6)\ninvoking test_case->test() for name=\"atomic\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55c7a5347260\ntest_case=0x55c7a5347260\ntest_case->name=0x55c7a53410ec name=\"mutex\" namelen=5\ntest_case->test=0x55c7a533324e\npad computed: dots=0x55c7a53415d0 pad=0x55c7a53415d5 (offset=5)\ninvoking test_case->test() for name=\"mutex\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55c7a5347620\ntest_case=0x55c7a5347620\ntest_case->name=0x55c7a534119d name=\"shmem\" namelen=5\ntest_case->test=0x55c7a5333b05\npad computed: dots=0x55c7a53415d0 pad=0x55c7a53415d5 (offset=5)\ninvoking test_case->test() for name=\"shmem\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55c7a53479a0\ntest_case=0x55c7a53479a0\ntest_case->name=0x55c7a534124f name=\"condition\" namelen=9\ntest_case->test=0x55c7a533419f\npad computed: dots=0x55c7a53415d0 pad=0x55c7a53415d9 (offset=9)\ninvoking test_case->test() for name=\"condition\"\ntest_case->test() returned error=0\ninterpreted result: pass\n-- iteration start --\nnode=0x55c7a5347e40\ntest_case=0x55c7a5347e40\ntest_case->name=0x55c7a5341382 name=\"spinlock\" namelen=8\ntes\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_tests_run the local pointer test_case is only used for read-only accesses (reading test_case->name and invoking the function pointer test_case->test()). There are no writes through test_case, so it can and should be declared to point to a const-qualified type to satisfy MISRA C 2023 Rule 8.13. Assigning the non-const result of the metal_container_of macro to a const struct metal_test_case * is allowed (adding const is a qualification conversion). Calling a function via a function-pointer member of a const-qualified object is also permitted (the call itself does not require the object to be non-const). If there were later code that needed to modify the object through test_case, const could not be used; but in the shown function there is no such modification. Recommended remedy: change the declaration to\n\nconst struct metal_test_case *test_case;\n\n(Optionally review other pointers used here to see if they also can be const.)"
}