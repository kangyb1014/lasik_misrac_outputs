{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable test_case is declared as 'struct metal_test_case *test_case' but is only used for read-only access (calling the test function and reading test_case->name). It could be declared as 'const struct metal_test_case *test_case' so the pointer points to a const-qualified type. Therefore the code as shown violates MISRA C 2023 Rule 8.13. (Fix: declare test_case as 'const struct metal_test_case *test_case' and ensure the iterator/container APIs support const-correct access.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *log = NULL;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\t/* Open a probe log to capture control flow and state for analysis */\n\tlog = fopen(\"/tmp/logs/743.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: started. params=%p, log_level=%d\\n\", (void *)params, params->log_level);\n\t\tfflush(log);\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Log current iteration details: node and test_case pointers and the test name */\n\t\tif (log) {\n\t\t\tfprintf(log, \"iter: node=%p, test_case=%p, name_ptr=%p, name=\\\"%s\\\"\\n\",\n\t\t\t\t(void *)node, (void *)test_case, (void *)test_case->name,\n\t\t\t\ttest_case->name ? test_case->name : \"(null)\");\n\t\t\tfflush(log);\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"computed pad offset=%zu (name_len=%zu)\\n\",\n\t\t\t\t(size_t)(pad - dots), strlen(test_case->name));\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"about to invoke test_case->test (exists=%s)\\n\",\n\t\t\t\t(test_case->test != NULL) ? \"yes\" : \"no\");\n\t\t\tfflush(log);\n\t\t}\n\n\t\terror = test_case->test();\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"returned from test(): error=%d, strerror=%s\\n\",\n\t\t\t\terror, error ? strerror(-error) : \"0\");\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error) {\n\t\t\terrors++;\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"test failed, cumulative_errors=%d\\n\", errors);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t} else {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"test passed, cumulative_errors=%d\\n\", errors);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_finish();\n\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: finished, total_errors=%d\\n\", errors);\n\t\tfclose(log);\n\t}\n\n\treturn errors;\n}\n"
}