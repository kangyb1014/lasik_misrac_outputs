{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional expression combines the result of strerror (type char *) and a string literal (decays to char *), producing a non-const char * result that is used as a read-only message. Both operands point to static, read-only storage and thus should be treated as pointers to const char. The pointer resulting from error ? strerror(-error) : \"\" could be const-qualified but is not, violating Rule 8.13. A fix is to use a const-qualified type, e.g. (error ? (const char *)strerror(-error) : \"\") or assign the result to a const char * variable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\n\t\t/* Probe logging: capture control-flow and state relevant to the\n\t\t   conditional expression that selects the error message.\n\t\t   Writes trace data to /tmp/logs/743.txt for later inspection. */\n\t\t{\n\t\t\tconst char *msg;\n\t\t\tconst void *strerr_ptr = NULL;\n\t\t\tconst void *lit_ptr = (const void *)\"\";\n\t\t\t/* Only call strerror when error is non-zero to match original\n\t\t\t   conditional behaviour and avoid unnecessary calls. */\n\t\t\tif (error) {\n\t\t\t\tchar *tmp = strerror(-error);\n\t\t\t\tmsg = (const char *)tmp; /* treat as read-only for logging */\n\t\t\t\tstrerr_ptr = (const void *)tmp;\n\t\t\t} else {\n\t\t\t\tmsg = \"\";\n\t\t\t}\n\n\t\t\tFILE *f = fopen(\"/tmp/logs/743.txt\", \"a\");\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"TEST CASE: %s\\n\", test_case->name);\n\t\t\t\tfprintf(f, \"  error = %d\\n\", error);\n\t\t\t\tfprintf(f, \"  strerror pointer = %p\\n\", strerr_ptr);\n\t\t\t\tfprintf(f, \"  literal pointer = %p\\n\", lit_ptr);\n\t\t\t\tfprintf(f, \"  selected msg pointer = %p\\n\", (const void *)msg);\n\t\t\t\t/* Print the actual selected message so reviewers can see the\n\t\t\t\t   runtime text chosen by the conditional expression. */\n\t\t\t\tfprintf(f, \"  selected msg = \\\"%s\\\"\\n\", msg);\n\t\t\t\t/* Indicate whether the selected pointer equals the literal's\n\t\t\t\t   address. This helps reveal whether the empty-string operand\n\t\t\t\t   was chosen at runtime. */\n\t\t\t\tfprintf(f, \"  selected_is_literal = %s\\n\\n\",\n\t\t\t\t\t(msg == (const char *)lit_ptr) ? \"true\" : \"false\");\n\t\t\t\tfclose(f);\n\t\t\t}\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n"
}