{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local loop iterator 'node' is only used to read list elements (passed to metal_container_of and used for traversal), so it could and should be declared as pointing to a const-qualified type: use 'const struct metal_list *node;'. As written ('struct metal_list *node;') it fails MISRA C 2023 Rule 8.13 unless the used macros/APIs require a mutable pointee. If metal_list_for_each or metal_container_of modify the list elements through the pointer, then const cannot be applied; otherwise this is a rule violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "int metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *log = fopen(\"/tmp/logs/743.txt\", \"a\");\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: enter params=%p dparams=%p\\n\", (void *)params, (void *)&dparams);\n\t\tfflush(log);\n\t}\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (log) {\n\t\tfprintf(log, \"metal_init returned %d\\n\", error);\n\t\tfflush(log);\n\t}\n\tif (error) {\n\t\tif (log)\n\t\t\tfclose(log);\n\t\treturn error;\n\t}\n\n\t/* Iterate through test cases and log control flow and state to /tmp/logs/743.txt */\n\tmetal_list_for_each(&test_cases, node) {\n\t\tif (log)\n\t\t\tfprintf(log, \"loop: node=%p\\n\", (void *)node);\n\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\t\tif (log) {\n\t\t\tfprintf(log, \"container_of: test_case=%p name=%s\\n\",\n\t\t\t\t(void *)test_case,\n\t\t\t\t(test_case && test_case->name) ? test_case->name : \"(null)\");\n\t\t\tfflush(log);\n\t\t}\n\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n\t\tif (log)\n\t\t\tfprintf(log, \"calling test_case->test for %s (test_case=%p)\\n\", test_case->name, (void *)test_case);\n\n\t\terror = test_case->test();\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"test returned: name=%s error=%d\\n\", test_case->name, error);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\tif (log) {\n\t\tfprintf(log, \"metal_tests_run: exit errors=%d\\n\", errors);\n\t\tfclose(log);\n\t}\n\n\treturn errors;\n}\n"
}