{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'params' is reassigned in the fragment `if (!params) params = &dparams;`. This modifies the pointer parameter itself (making it point to the local variable 'dparams'), which violates MISRA C 2023 Rule 17.8 (the pointer parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/747.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/747.txt to capture control flow and state. */\nstatic void metal_tests_probe_log(const char *event,\n                                  struct metal_init_params *params,\n                                  struct metal_init_params *dparams,\n                                  int errors)\n{\n    FILE *fp = fopen(\"/tmp/logs/747.txt\", \"a\");\n    if (!fp)\n        return;\n\n    fprintf(fp, \"EVENT: %s\\n\", event ? event : \"(null)\");\n    fprintf(fp, \"  params pointer: %p\\n\", (void *)params);\n    fprintf(fp, \"  dparams pointer: %p\\n\", (void *)dparams);\n\n    if (params) {\n        /* Safely print a few recognizable fields if available. */\n        /* Avoid dereferencing unknown fields beyond log_level to be safe. */\n        fprintf(fp, \"  params->log_level (numeric): %d\\n\", params->log_level);\n    } else {\n        fprintf(fp, \"  params is NULL\\n\");\n    }\n\n    fprintf(fp, \"  current errors count: %d\\n\", errors);\n    fprintf(fp, \"----\\n\");\n    fclose(fp);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    /* Log entry into the function and initial params state. */\n    metal_tests_probe_log(\"entry\", params, &dparams, errors);\n\n    if (!params) {\n        /* Log just before the pointer parameter is reassigned. */\n        metal_tests_probe_log(\"before reassignment (params is NULL)\", params, &dparams, errors);\n        params = &dparams;\n        /* Log immediately after reassignment to capture the violation scenario. */\n        metal_tests_probe_log(\"after reassignment (params now points to dparams)\", params, &dparams, errors);\n    } else {\n        /* Log that params was provided by caller. */\n        metal_tests_probe_log(\"params provided by caller (no reassignment)\", params, &dparams, errors);\n    }\n\n    params->log_level = METAL_LOG_DEBUG;\n    /* Log state before calling metal_init. */\n    metal_tests_probe_log(\"before metal_init\", params, &dparams, errors);\n    error = metal_init(params);\n    /* Log result of metal_init. */\n    metal_tests_probe_log(\"after metal_init\", params, &dparams, errors);\n    if (error)\n        return error;\n\n    metal_list_for_each(&test_cases, node) {\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n        pad = dots + strlen(test_case->name);\n        metal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n        error = test_case->test();\n        metal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n               test_case->name, pad,\n               error ? \"fail\" : \"pass\",\n               error ? \" - error: \" : \"\",\n               error ? strerror(-error) : \"\");\n        if (error)\n            errors++;\n\n        /* Log each test completion and current error count for traceability. */\n        metal_tests_probe_log(\"test completed\", params, &dparams, errors);\n    }\n\n    metal_finish();\n\n    /* Final log before returning the total number of errors. */\n    metal_tests_probe_log(\"exit\", params, &dparams, errors);\n\n    return errors;\n}\n"
}