{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler extensions: the use of GCC statement-expressions '({ ... })' is a non-standard language extension, and the token-pasting form '##__VA_ARGS__' to swallow a trailing comma is a GNU CPP extension. Both are documented compiler extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/740.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append logs to /tmp/logs/740.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/740.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_tests_run(struct metal_init_params *params)\n{\n    struct metal_init_params dparams = METAL_INIT_DEFAULTS;\n    struct metal_test_case *test_case;\n    struct metal_list *node;\n    int error, errors = 0;\n    const char *dots = \"..................................\";\n    const char *pad;\n\n    probe_log(\"ENTER: metal_tests_run(params=%p)\\n\", (void *)params);\n\n    if (!params) {\n        probe_log(\"params is NULL, switching to dparams (%p)\\n\", (void *)&dparams);\n        params = &dparams;\n    } else {\n        probe_log(\"params provided at %p\\n\", (void *)params);\n    }\n\n    probe_log(\"setting params->log_level = METAL_LOG_DEBUG\\n\");\n    params->log_level = METAL_LOG_DEBUG;\n\n    probe_log(\"calling metal_init(params=%p)\\n\", (void *)params);\n    error = metal_init(params);\n    probe_log(\"metal_init returned %d\\n\", error);\n    if (error) {\n        probe_log(\"EXIT: metal_tests_run (init error=%d)\\n\", error);\n        return error;\n    }\n\n    metal_list_for_each(&test_cases, node) {\n        test_case = metal_container_of(node, struct metal_test_case,\n                                       node);\n        if (test_case) {\n            size_t name_len = strlen(test_case->name ? test_case->name : \"(null)\");\n            pad = dots + name_len;\n            probe_log(\"LOOP: test_case=%p name=\\\"%s\\\" name_len=%zu pad=%p test_fn=%p\\n\",\n                      (void *)test_case,\n                      test_case->name ? test_case->name : \"(null)\",\n                      name_len,\n                      (void *)pad,\n                      (void *)test_case->test);\n        } else {\n            probe_log(\"LOOP: test_case is NULL (node=%p)\\n\", (void *)node);\n            pad = dots; /* keep original behavior stable */\n        }\n\n        metal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\n        probe_log(\"calling test function for [%s] (fn=%p)\\n\",\n                  test_case->name ? test_case->name : \"(null)\",\n                  (void *)test_case->test);\n        error = test_case->test();\n        probe_log(\"test function for [%s] returned %d\\n\",\n                  test_case->name ? test_case->name : \"(null)\",\n                  error);\n\n        probe_log(\"about to call metal_log for result of [%s]\\n\",\n                  test_case->name ? test_case->name : \"(null)\");\n        metal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n               test_case->name, pad,\n               error ? \"fail\" : \"pass\",\n               error ? \" - error: \" : \"\",\n               error ? strerror(-error) : \"\");\n\n        if (error) {\n            probe_log(\"incrementing errors counter (was %d) due to test [%s]\\n\",\n                      errors, test_case->name ? test_case->name : \"(null)\");\n            errors++;\n        }\n    }\n\n    probe_log(\"calling metal_finish()\\n\");\n    metal_finish();\n\n    probe_log(\"EXIT: metal_tests_run returning errors=%d\\n\", errors);\n    return errors;\n}\n"
}