{
  "user_message": "An agent A claimed that the following metal_tests_run code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_tests_run.\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code computes pad = dots + strlen(test_case->name). If strlen(test_case->name) is greater than or equal to the length of the dots string, pad will point to one-past-the-end (or beyond) of the dots object. Passing pad to metal_log as a \"%s\" causes the logger/printf to dereference that pointer and read until a terminating NUL, producing an out-of-bounds access and undefined behavior. This violates MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n---- metal_tests_run START (params=(nil)) ----\ntest_case name='atomic' name_len=6 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d6 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=6)\nafter test(): name='atomic' pad_ptr=0x555c2bc255d6 error=0\ntest_case name='mutex' name_len=5 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d5 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=5)\nafter test(): name='mutex' pad_ptr=0x555c2bc255d5 error=0\ntest_case name='shmem' name_len=5 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d5 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=5)\nafter test(): name='shmem' pad_ptr=0x555c2bc255d5 error=0\ntest_case name='condition' name_len=9 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d9 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=9)\nafter test(): name='condition' pad_ptr=0x555c2bc255d9 error=0\ntest_case name='spinlock' name_len=8 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d8 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=8)\nafter test(): name='spinlock' pad_ptr=0x555c2bc255d8 error=0\ntest_case name='alloc' name_len=5 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d5 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=5)\nafter test(): name='alloc' pad_ptr=0x555c2bc255d5 error=0\ntest_case name='irq' name_len=3 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d3 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=3)\nafter test(): name='irq' pad_ptr=0x555c2bc255d3 error=0\ntest_case name='version' name_len=7 dots_len=34\naddresses: dots=0x555c2bc255d0 pad=0x555c2bc255d7 (&dots[0]=0x555c2bc255d0)\npad is within dots (offset=7)\nafter test(): name='version' pad_ptr=0x555c2bc255d7 error=0\nmetal_tests_run finished, total errors=0\n---- metal_tests_run END ----\n\n---- metal_tests_run START (params=(nil)) ----\ntest_case name='atomic' name_len=6 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d6 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=6)\nafter test(): name='atomic' pad_ptr=0x5556b93155d6 error=0\ntest_case name='mutex' name_len=5 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d5 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=5)\nafter test(): name='mutex' pad_ptr=0x5556b93155d5 error=0\ntest_case name='shmem' name_len=5 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d5 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=5)\nafter test(): name='shmem' pad_ptr=0x5556b93155d5 error=0\ntest_case name='condition' name_len=9 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d9 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=9)\nafter test(): name='condition' pad_ptr=0x5556b93155d9 error=0\ntest_case name='spinlock' name_len=8 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d8 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=8)\nafter test(): name='spinlock' pad_ptr=0x5556b93155d8 error=0\ntest_case name='alloc' name_len=5 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d5 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=5)\nafter test(): name='alloc' pad_ptr=0x5556b93155d5 error=0\ntest_case name='irq' name_len=3 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d3 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=3)\nafter test(): name='irq' pad_ptr=0x5556b93155d3 error=0\ntest_case name='version' name_len=7 dots_len=34\naddresses: dots=0x5556b93155d0 pad=0x5556b93155d7 (&dots[0]=0x5556b93155d0)\npad is within dots (offset=7)\nafter test(): name='version' pad_ptr=0x5556b93155d7 error=0\nmetal_tests_run finished, total errors=0\n---- metal_tests_run END ----\n\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for MISRA C 2023 Rule 21.17. That rule restricts the use of the string handling functions from <string.h> so that those functions do not access beyond the bounds of the objects referenced by their pointer parameters. In the code shown the only <string.h> function used is strlen(test_case->name). The pointer parameter to strlen is test_case->name, so Rule 21.17 only concerns whether strlen can read beyond the bounds of test_case->name. The agent's scenario describes an out\u2011of\u2011bounds read of the dots object when metal_log/printf prints pad, but that read (by printf/vsnprintf internals) is not an invocation of a <string.h> function on the dots object and therefore does not fall under Rule 21.17 as stated.\n\nThat said, the code can still be unsafe: pad = dots + strlen(test_case->name) can produce a pointer that points at or beyond the terminating NUL of the dots literal if test_case->name is long, and passing such a pointer to a %s consumer can cause an out\u2011of\u2011bounds read (undefined behaviour) at runtime. This is a correctness/safety issue and should be fixed by bounding/clamping the offset (or using a safe formatting approach), but it is not a direct violation of MISRA C 2023 Rule 21.17 as reported."
}