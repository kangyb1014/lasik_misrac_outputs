{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes pad = dots + strlen(test_case->name). If strlen(test_case->name) is greater than or equal to the length of the dots string, pad will point to one-past-the-end (or beyond) of the dots object. Passing pad to metal_log as a \"%s\" causes the logger/printf to dereference that pointer and read until a terminating NUL, producing an out-of-bounds access and undefined behavior. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_tests_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/749.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_tests_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_tests_run:\n```c\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error)\n\t\treturn error;\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t\t       node);\n\t\tpad = dots + strlen(test_case->name);\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\treturn errors;\n}\n```\n</target_code>\nPlease provide the modified metal_tests_run code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_tests_run(struct metal_init_params *params)\n{\n\tstruct metal_init_params dparams = METAL_INIT_DEFAULTS;\n\tstruct metal_test_case *test_case;\n\tstruct metal_list *node;\n\tint error, errors = 0;\n\tconst char *dots = \"..................................\";\n\tconst char *pad;\n\tFILE *logf = NULL;\n\n\t/* Open log for probes. Keep append mode to preserve previous runs. */\n\tlogf = fopen(\"/tmp/logs/749.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"---- metal_tests_run START (params=%p) ----\\n\", (void *)params);\n\t}\n\n\tif (!params)\n\t\tparams = &dparams;\n\n\tparams->log_level = METAL_LOG_DEBUG;\n\terror = metal_init(params);\n\tif (error) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_init failed with error=%d\\n\", error);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn error;\n\t}\n\n\tmetal_list_for_each(&test_cases, node) {\n\t\ttest_case = metal_container_of(node, struct metal_test_case,\n\t\t\t\t       node);\n\n\t\t/* Probe state BEFORE using pad (to catch potential out-of-bounds) */\n\t\tsize_t name_len = strlen(test_case->name);\n\t\tsize_t dots_len = strlen(dots);\n\t\tpad = dots + name_len;\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"test_case name='%s' name_len=%zu dots_len=%zu\\n\",\n\t\t\t\ttest_case->name, name_len, dots_len);\n\t\t\tfprintf(logf, \"addresses: dots=%p pad=%p (&dots[0]=%p)\\n\",\n\t\t\t\t(void *)dots, (void *)pad, (void *)&dots[0]);\n\t\t\t/* Check relation between pad and the dots object */\n\t\t\tif (pad < dots + dots_len) {\n\t\t\t\tfprintf(logf, \"pad is within dots (offset=%td)\\n\",\n\t\t\t\t\t(ptrdiff_t)(pad - dots));\n\t\t\t} else if (pad == dots + dots_len) {\n\t\t\t\tfprintf(logf, \"pad points to one-past-end of dots (offset=%td)\\n\",\n\t\t\t\t\t(ptrdiff_t)(pad - dots));\n\t\t\t} else {\n\t\t\t\tfprintf(logf, \"pad is beyond end of dots (offset=%td)\\n\",\n\t\t\t\t\t(ptrdiff_t)(pad - dots));\n\t\t\t}\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tmetal_log(METAL_LOG_INFO,\"running [%s]\\n\", test_case->name);\n\t\terror = test_case->test();\n\t\t/* Log the exact formatted arguments passed to metal_log to help reproduce */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"after test(): name='%s' pad_ptr=%p error=%d\\n\",\n\t\t\t\ttest_case->name, (void *)pad, error);\n\t\t\tfflush(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_INFO,\"result [%s]%s %s%s%s\\n\",\n\t\t       test_case->name, pad,\n\t\t       error ? \"fail\" : \"pass\",\n\t\t       error ? \" - error: \" : \"\",\n\t\t       error ? strerror(-error) : \"\");\n\t\tif (error)\n\t\t\terrors++;\n\t}\n\n\tmetal_finish();\n\n\tif (logf) {\n\t\tfprintf(logf, \"metal_tests_run finished, total errors=%d\\n\", errors);\n\t\tfprintf(logf, \"---- metal_tests_run END ----\\n\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn errors;\n}\n"
}