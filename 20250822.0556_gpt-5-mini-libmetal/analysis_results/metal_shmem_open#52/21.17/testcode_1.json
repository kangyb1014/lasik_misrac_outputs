{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling metal_shmem_open_generic with name == NULL (no validation before strcmp) causes strcmp(shmem->name, name) to dereference a NULL pointer leading to out-of-bounds access. Similarly, if either shmem->name or the caller-provided name is not NUL-terminated, strcmp may read past the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <unistd.h>\n\n/* Probe helpers: write concise, safe logs. These helpers avoid\n * dereferencing the \"name\" pointer and instead log its address.\n * Logs are appended to /tmp/logs/529.txt so other agents can inspect\n * the control flow and state leading up to any potential violation.\n */\nstatic void shmem_probe_log_enter(const char *name, size_t size, struct metal_io_region **result)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"ENTER metal_shmem_open: name=%p, size=%zu, result=%p\\n\",\n            (const void *)name, size, (void *)result);\n    if (name)\n        fprintf(f, \"  name: pointer non-NULL\\n\");\n    else\n        fprintf(f, \"  name: NULL\\n\");\n    fclose(f);\n}\n\nstatic void shmem_probe_log_after_generic(const char *name, int gen_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"AFTER metal_shmem_open_generic: ret=%d, name=%p\\n\",\n            gen_ret, (const void *)name);\n    fclose(f);\n}\n\nstatic void shmem_probe_log_before_open(const char *name)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"CALL metal_open with name=%p\\n\", (const void *)name);\n    fclose(f);\n}\n\nstatic void shmem_probe_log_open_result(const char *name, int fd)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n    if (fd < 0)\n        fprintf(f, \"metal_open FAILED: fd=%d, name=%p\\n\", fd, (const void *)name);\n    else\n        fprintf(f, \"metal_open OK: fd=%d, name=%p\\n\", fd, (const void *)name);\n    fclose(f);\n}\n\nstatic void shmem_probe_log_try_map(struct metal_page_size *ps, int fd, size_t size, int try_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"TRY MAP: ps=%p, page_size=%zu, fd=%d, requested_size=%zu, ret=%d\\n\",\n            (void *)ps, (size_t)ps->page_size, fd, size, try_ret);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Probe: entry state */\n    shmem_probe_log_enter(name, size, result);\n\n    error = metal_shmem_open_generic(name, size, result);\n\n    /* Probe: result of generic open */\n    shmem_probe_log_after_generic(name, error);\n\n    if (!error)\n        return error;\n\n    /* Will attempt to open the backing file. Log before calling metal_open. */\n    shmem_probe_log_before_open(name);\n    error = metal_open(name, 1);\n    shmem_probe_log_open_result(name, error);\n\n    if (error < 0) {\n        /* Preserve original behavior (including original log). */\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        if (ps->page_size > 2 * size)\n            continue;\n        error = metal_shmem_try_map(ps, fd, size, result);\n        /* Probe each try_map attempt and its result. */\n        shmem_probe_log_try_map(ps, fd, size, error);\n        if (!error)\n            break;\n    }\n\n    close(fd);\n    return error;\n}\n"
}