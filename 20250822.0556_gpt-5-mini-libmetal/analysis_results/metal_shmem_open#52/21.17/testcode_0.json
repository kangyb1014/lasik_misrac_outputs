{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(path) after only checking path != NULL. If a non-NULL pointer is passed that does not reference a NUL-terminated character array (e.g. a char buffer of fixed length not terminated, or binary data), strlen will read past the bounds of the object and cause an out-of-bounds access. For example, passing a char buf[5] filled with non-NUL bytes to metal_open will make strlen(buf) scan beyond buf. Although the NULL check prevents dereferencing NULL, it does not guarantee a terminating '\\0' within the object bounds, so this use can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/529.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n#include <stddef.h>\n\n/* Probe logging helper. Does not read the contents of `name` to avoid\n * introducing any string-handling violations. Logs pointer values and\n * relevant integers so other agents can reproduce the control flow and\n * state that leads to a potential out-of-bounds string access elsewhere. */\nstatic void metal_shmem_probe_log(const char *phase, const char *name,\n                                  size_t size, int fd, int error,\n                                  const struct metal_page_size *ps)\n{\n    FILE *f = fopen(\"/tmp/logs/529.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log the phase, pointer value for `name` (not its contents), size,\n     * file descriptor and error code. If a page size is available, log it.\n     */\n    fprintf(f, \"[metal_shmem_open] phase=%s name_ptr=%p size=%zu fd=%d error=%d\",\n            phase, (const void *)name, size, fd, error);\n    if (ps)\n        fprintf(f, \" page_size=%zu\", (size_t)ps->page_size);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Entry probe: log that we were called and the pointer value of name. */\n    metal_shmem_probe_log(\"entry\", name, size, -1, 0, NULL);\n\n    error = metal_shmem_open_generic(name, size, result);\n\n    /* Log the result of the generic open attempt. */\n    metal_shmem_probe_log(\"after_generic\", name, size, -1, error, NULL);\n\n    if (!error)\n        return error;\n\n    /* About to call metal_open with the provided name pointer. We only log\n     * the pointer value here (not the string contents) to avoid reading\n     * memory that might not be NUL-terminated. This helps reproduce the\n     * scenario where a non-NULL but non-terminated buffer is passed. */\n    metal_shmem_probe_log(\"before_metal_open\", name, size, -1, 0, NULL);\n\n    error = metal_open(name, 1);\n    if (error < 0) {\n        /* Log failure to open and the pointer value for diagnosis. */\n        metal_shmem_probe_log(\"metal_open_failed\", name, size, -1, error, NULL);\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n\n    /* Log successful open with resulting file descriptor. */\n    metal_shmem_probe_log(\"metal_open_success\", name, size, fd, 0, NULL);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log which page size we're considering. */\n        metal_shmem_probe_log(\"page_size_check\", name, size, fd, 0, ps);\n\n        if (ps->page_size > 2 * size)\n            continue;\n        error = metal_shmem_try_map(ps, fd, size, result);\n\n        /* Log result of try_map for this page size. */\n        metal_shmem_probe_log(\"after_try_map\", name, size, fd, error, ps);\n\n        if (!error)\n            break;\n    }\n\n    close(fd);\n\n    /* Final state before returning. */\n    metal_shmem_probe_log(\"exit\", name, size, fd, error, NULL);\n\n    return error;\n}\n"
}