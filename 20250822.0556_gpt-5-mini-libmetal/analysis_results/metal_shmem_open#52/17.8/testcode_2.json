{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn function metal_map(int fd, off_t offset, size_t size, int expand, int flags, void **result) the parameter 'flags' is modified by the statement 'flags |= MAP_SHARED;'. This directly changes a function parameter and therefore violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. int local_flags = flags; local_flags |= MAP_SHARED;) instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Simple probe logger that appends to /tmp/logs/527.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    probe_log(\"ENTER: metal_shmem_open(name=%s, size=%zu, result=%p)\\n\",\n              name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    probe_log(\"after metal_shmem_open_generic: error=%d\\n\", error);\n    if (!error) {\n        probe_log(\"early return (already opened) error=%d\\n\", error);\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    probe_log(\"after metal_open: error=%d\\n\", error);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        probe_log(\"metal_open failed, returning error=%d\\n\", error);\n        return error;\n    }\n    fd = error;\n    probe_log(\"opened fd=%d\\n\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        probe_log(\"loop: page_size=%llu, compare 2*size=%zu\\n\",\n                  (unsigned long long)ps->page_size, size * (size_t)2);\n        if (ps->page_size > 2 * size) {\n            probe_log(\"skipping page size %llu because > 2*size\\n\",\n                      (unsigned long long)ps->page_size);\n            continue;\n        }\n        probe_log(\"trying map with page_size=%llu, fd=%d, size=%zu\\n\",\n                  (unsigned long long)ps->page_size, fd, size);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        probe_log(\"metal_shmem_try_map returned error=%d\\n\", error);\n        if (!error) {\n            probe_log(\"mapping succeeded with page_size=%llu\\n\",\n                      (unsigned long long)ps->page_size);\n            break;\n        }\n    }\n\n    probe_log(\"closing fd=%d and returning error=%d\\n\", fd, error);\n    close(fd);\n    return error;\n}\n"
}