{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_try_map the parameter 'size' is reassigned with the statement `size = metal_align_up(size, ps->page_size);`. This modifies the non\u2011pointer function parameter 'size', which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/527.txt */\nstatic void shmem_write_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n             struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    shmem_write_log(\"metal_shmem_open ENTRY: name=%s, size=%zu, result_ptr=%p\",\n                    name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    shmem_write_log(\"metal_shmem_open_generic returned %d\", error);\n    if (!error)\n        return error;\n\n    error = metal_open(name, 1);\n    if (error < 0) {\n        shmem_write_log(\"metal_open failed for name=%s, error=%d\", name ? name : \"(null)\", error);\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n    shmem_write_log(\"metal_open returned fd=%d for name=%s\", fd, name ? name : \"(null)\");\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        shmem_write_log(\"loop iter: ps=%p, ps->page_size=%zu, caller_size=%zu\", (void *)ps, ps->page_size, size);\n        if (ps->page_size > 2 * size) {\n            shmem_write_log(\"skipping ps->page_size (%zu) > 2*size (%zu)\", ps->page_size, 2 * size);\n            continue;\n        }\n        shmem_write_log(\"attempting metal_shmem_try_map with ps->page_size=%zu, fd=%d, size=%zu, result_ptr=%p\",\n                        ps->page_size, fd, size, (void *)result);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        shmem_write_log(\"metal_shmem_try_map returned %d; result_deref=%p\",\n                        error, (void *)(result ? *result : NULL));\n        if (!error) {\n            shmem_write_log(\"metal_shmem_try_map succeeded, breaking out of loop\");\n            break;\n        }\n        shmem_write_log(\"metal_shmem_try_map failed (error=%d), continuing loop\", error);\n    }\n\n    close(fd);\n    shmem_write_log(\"closed fd=%d, returning error=%d\", fd, error);\n    return error;\n}\n"
}