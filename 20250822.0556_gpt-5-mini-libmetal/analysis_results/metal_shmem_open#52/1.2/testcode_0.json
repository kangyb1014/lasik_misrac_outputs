{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_log expands a macro that uses compiler extensions. The macro is defined as: #define metal_log(level, fmt, __VA_ARGS__) ({ if(...) _metal.common.log_handler(..., ##__VA_ARGS__); }) \u2014 it uses the GNU statement-expression extension ({ ... }) and the GNU \u2018##__VA_ARGS__\u2019 comma-elision trick. Both are documented compiler extensions (GCC) and therefore violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/520.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/520.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm_ptr = localtime_r(&t, &tm_buf);\n    if (tm_ptr) {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tm_ptr->tm_year + 1900,\n                tm_ptr->tm_mon + 1,\n                tm_ptr->tm_mday,\n                tm_ptr->tm_hour,\n                tm_ptr->tm_min,\n                tm_ptr->tm_sec);\n    } else {\n        fprintf(f, \"[unknown-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n             struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    log_probe(\"enter metal_shmem_open name='%s' size=%zu result=%p\", name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    log_probe(\"metal_shmem_open_generic returned %d\", error);\n    if (!error)\n        return error;\n\n    log_probe(\"Calling metal_open name='%s' flags=1\", name ? name : \"(null)\");\n    error = metal_open(name, 1);\n    log_probe(\"metal_open returned %d\", error);\n    if (error < 0) {\n        log_probe(\"Detected metal_open error (%d) for name='%s' - about to call metal_log\", error, name ? name : \"(null)\");\n\n        /* Original logging call (may be a macro that uses compiler extensions). */\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\n        log_probe(\"metal_log invoked for name='%s' after metal_open error\", name ? name : \"(null)\");\n        return error;\n    }\n    fd = error;\n\n    log_probe(\"Iterating through page sizes (decreasing order) with target size=%zu\", size);\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        log_probe(\"checking page size: ps->page_size=%zu, threshold=2*size=%zu\", (size_t)ps->page_size, (size_t)(2 * size));\n        if (ps->page_size > 2 * size) {\n            log_probe(\"skipping page size %zu because it's greater than 2*size\", (size_t)ps->page_size);\n            continue;\n        }\n        log_probe(\"Attempting metal_shmem_try_map with page_size=%zu fd=%d size=%zu\", (size_t)ps->page_size, fd, size);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        log_probe(\"metal_shmem_try_map returned %d for page_size=%zu\", error, (size_t)ps->page_size);\n        if (!error) {\n            log_probe(\"metal_shmem_try_map succeeded for page_size=%zu\", (size_t)ps->page_size);\n            break;\n        }\n    }\n\n    close(fd);\n    log_probe(\"closed fd %d; returning %d\", fd, error);\n    return error;\n}\n"
}