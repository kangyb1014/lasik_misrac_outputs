{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_shmem_try_map declares its first parameter as 'struct metal_page_size *ps' but only reads fields (ps->page_size, ps->page_shift, ps->mmap_flags) and never modifies the pointed-to object. According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct metal_page_size *ps'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <unistd.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    probe_log(\"ENTER: metal_shmem_open name=%s size=%zu result=%p\\n\",\n              name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    probe_log(\"after metal_shmem_open_generic: error=%d\\n\", error);\n    if (!error) {\n        probe_log(\"RETURN early: success from metal_shmem_open_generic (error=%d)\\n\", error);\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    probe_log(\"after metal_open: error=%d\\n\", error);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        probe_log(\"metal_open failed (<0). name=%s error=%d\\n\", name ? name : \"(null)\", error);\n        return error;\n    }\n    fd = error;\n    probe_log(\"open fd=%d\\n\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        probe_log(\"loop: ps=%p\\n\", (void *)ps);\n        if (ps) {\n            probe_log(\"ps fields: page_size=%zu page_shift=%lu mmap_flags=0x%lx\\n\",\n                      ps->page_size,\n                      (unsigned long)ps->page_shift,\n                      (unsigned long)ps->mmap_flags);\n        } else {\n            probe_log(\"ps is NULL (unexpected)\\n\");\n        }\n\n        if (ps && ps->page_size > 2 * size) {\n            probe_log(\"skip this ps: ps->page_size(%zu) > 2*size(%zu)\\n\", ps->page_size, 2 * size);\n            continue;\n        }\n\n        probe_log(\"calling metal_shmem_try_map(ps=%p, fd=%d, size=%zu, result=%p)\\n\",\n                  (void *)ps, fd, size, (void *)result);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        probe_log(\"returned from metal_shmem_try_map: error=%d\\n\", error);\n        if (!error) {\n            probe_log(\"mapping succeeded, breaking out of loop (error=%d)\\n\", error);\n            break;\n        }\n    }\n\n    probe_log(\"closing fd=%d and returning error=%d\\n\", fd, error);\n    close(fd);\n    return error;\n}\n"
}