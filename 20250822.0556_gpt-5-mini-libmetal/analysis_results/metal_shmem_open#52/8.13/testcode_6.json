{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_open_generic the local iterator 'node' is only used for read-only traversal (it is compared, passed to metal_container_of and not modified). Therefore it could be declared as 'const struct metal_list *node' but is declared as 'struct metal_list *node'. This is a direct breach of MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n#include <stddef.h>\n\n/*\n * Probes for logging the control flow and state information relevant to\n * metal_shmem_open and its fallback path. Logs are appended to\n * /tmp/logs/523.txt. These probes preserve the original logic of\n * metal_shmem_open and do not change return values or side effects.\n */\nstatic void metal_shmem_log(const char *stage, const char *name, size_t size,\n                            struct metal_io_region **result, int fd, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_shmem_open] stage=%s name=%s size=%zu result=%p fd=%d error=%d\\n\",\n            stage, (name ? name : \"(null)\"), size, (void *)result, fd, error);\n    fclose(f);\n}\n\nstatic void metal_shmem_log_page(const char *stage, unsigned long page_size, size_t want_size, int last_error)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_shmem_open] %s page_size=%lu want_size=%zu last_error=%d\\n\",\n            stage, page_size, want_size, last_error);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    /* Probe: before calling generic opener */\n    metal_shmem_log(\"before_generic\", name, size, result, -1, -1);\n\n    error = metal_shmem_open_generic(name, size, result);\n\n    /* Probe: after calling generic opener */\n    metal_shmem_log(\"after_generic\", name, size, result, -1, error);\n\n    if (!error) {\n        /* Generic succeeded; record and return preserving original logic. */\n        metal_shmem_log(\"generic_success_return\", name, size, result, -1, error);\n        return error;\n    }\n\n    /* Generic failed: try to open file and map manually. */\n    metal_shmem_log(\"before_fallback_open\", name, size, result, -1, error);\n\n    error = metal_open(name, 1);\n    if (error < 0) {\n        metal_shmem_log(\"open_failed\", name, size, result, -1, error);\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n\n    metal_shmem_log(\"open_succeeded\", name, size, result, fd, 0);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log current candidate page size */\n        metal_shmem_log_page(\"considering_page\", ps->page_size, size, error);\n\n        if (ps->page_size > 2 * size) {\n            metal_shmem_log_page(\"skipping_too_large\", ps->page_size, size, error);\n            continue;\n        }\n\n        metal_shmem_log_page(\"attempt_map\", ps->page_size, size, error);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        metal_shmem_log_page(\"map_result\", ps->page_size, size, error);\n\n        if (!error) {\n            metal_shmem_log(\"mapped_success\", name, size, result, fd, error);\n            break;\n        }\n    }\n\n    close(fd);\n    metal_shmem_log(\"returning_final\", name, size, result, fd, error);\n    return error;\n}\n"
}