{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'ps' is declared as 'struct metal_page_size *ps;' but is only used to read fields (ps->page_size, ps->mmap_flags) while iterating _metal.page_sizes. Therefore it could and should be declared as 'const struct metal_page_size *ps'. Declaring it non-const when mutation of the pointed-to object is not required violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <unistd.h>\n\n/* Probe logger: append human-readable records to /tmp/logs/523.txt. */\nstatic void metal_shmem_probe_log(const char *stage, const char *name,\n                                  size_t size, struct metal_page_size *ps,\n                                  int fd, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"stage=%s name=%s size=%zu fd=%d error=%d ps=%p\",\n            stage, (name ? name : \"(null)\"), size, fd, error, (void *)ps);\n    if (ps) {\n        /* Print commonly inspected fields. Cast to types suitable for formatting. */\n        fprintf(f, \" page_size=%zu mmap_flags=0x%lx\",\n                (size_t)ps->page_size, (unsigned long)ps->mmap_flags);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps; /* Intentionally non-const to reproduce the reported scenario */\n    int fd, error;\n\n    /* Log entry */\n    metal_shmem_probe_log(\"entry\", name, size, NULL, -1, 0);\n\n    error = metal_shmem_open_generic(name, size, result);\n    /* Log after generic attempt */\n    metal_shmem_probe_log(\"after_generic\", name, size, NULL, -1, error);\n    if (!error) {\n        /* Early return path (already opened by generic). */\n        metal_shmem_probe_log(\"early_return_generic_success\", name, size, NULL, -1, error);\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        /* Log open failure */\n        metal_shmem_probe_log(\"open_failed\", name, size, NULL, -1, error);\n        return error;\n    }\n    fd = error;\n\n    /* Log obtained file descriptor before iterating */\n    metal_shmem_probe_log(\"opened_fd\", name, size, NULL, fd, 0);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log page size and pointer before checking condition */\n        metal_shmem_probe_log(\"iter_start\", name, size, ps, fd, 0);\n\n        if (ps->page_size > 2 * size) {\n            /* Log skipped page size */\n            metal_shmem_probe_log(\"skipped_too_large\", name, size, ps, fd, 0);\n            continue;\n        }\n        error = metal_shmem_try_map(ps, fd, size, result);\n\n        /* Log result of try_map for this page size */\n        metal_shmem_probe_log(\"tried_map\", name, size, ps, fd, error);\n\n        if (!error) {\n            /* Successful mapping; log and break out */\n            metal_shmem_probe_log(\"map_success\", name, size, ps, fd, error);\n            break;\n        }\n    }\n\n    close(fd);\n    /* Log after close and before return */\n    metal_shmem_probe_log(\"exit\", name, size, NULL, fd, error);\n    return error;\n}\n"
}