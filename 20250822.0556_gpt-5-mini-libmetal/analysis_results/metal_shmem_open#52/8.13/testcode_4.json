{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is only used to read memory (it is set from 'mem' and used as 'virt + offset' when calling metal_virt2phys) and is never used to modify the pointed-to bytes. Therefore it could be declared as a pointer to a const-qualified type (const uint8_t *virt). Declaring it as a non-const uint8_t * violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/*\n * Probe logger: append human-readable messages to /tmp/logs/523.txt\n * Keeps the original logic of metal_shmem_open intact and only adds\n * instrumentation to capture control flow and state relevant to debugging.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    probe_log(\"ENTER metal_shmem_open: name='%s' size=%zu result_ptr=%p\", name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    probe_log(\"metal_shmem_open_generic returned %d\", error);\n    if (!error) {\n        probe_log(\"existing shared memory opened successfully via generic path; returning %d\", error);\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    probe_log(\"metal_open('%s', 1) returned %d\", name ? name : \"(null)\", error);\n    if (error < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        probe_log(\"metal_open failed with %d; logging error and returning\", error);\n        return error;\n    }\n    fd = error;\n    probe_log(\"file descriptor obtained: %d\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    probe_log(\"entering page-size iteration\");\n    metal_for_each_page_size_down(ps) {\n        probe_log(\"considering page size: %zu\", (size_t)ps->page_size);\n        if (ps->page_size > 2 * size) {\n            probe_log(\"skipping page size %zu because it is > 2 * requested size (%zu)\", (size_t)ps->page_size, 2 * size);\n            continue;\n        }\n        probe_log(\"attempting metal_shmem_try_map with page_size=%zu, fd=%d, size=%zu, result_ptr=%p\", (size_t)ps->page_size, fd, size, (void *)result);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        probe_log(\"metal_shmem_try_map returned %d for page_size=%zu\", error, (size_t)ps->page_size);\n        if (!error) {\n            probe_log(\"metal_shmem_try_map succeeded for page_size=%zu; breaking out of loop\", (size_t)ps->page_size);\n            break;\n        }\n    }\n\n    probe_log(\"closing file descriptor %d and returning error=%d\", fd, error);\n    close(fd);\n    return error;\n}\n"
}