{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_open, ps is declared as 'struct metal_page_size *ps;' and then used in the loop 'metal_for_each_page_size_down(ps)' only to read fields (ps->page_size, ps->mmap_flags, ps->page_shift). Because the pointed-to objects are not modified, the pointer should be to a const-qualified type (const struct metal_page_size *ps). Thus the current non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open:\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/523.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    /* Ensure log directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_shmem_open(const char *name, size_t size,\n                     struct metal_io_region **result)\n{\n    struct metal_page_size *ps;\n    int fd, error;\n\n    probe_logf(\"metal_shmem_open: entered name=%s size=%zu result=%p\",\n               name ? name : \"(null)\", size, (void *)result);\n\n    error = metal_shmem_open_generic(name, size, result);\n    probe_logf(\"metal_shmem_open: metal_shmem_open_generic returned %d\", error);\n    if (!error) {\n        probe_logf(\"metal_shmem_open: early return success (error==0)\");\n        return error;\n    }\n\n    error = metal_open(name, 1);\n    probe_logf(\"metal_shmem_open: metal_open returned %d\", error);\n    if (error < 0) {\n        probe_logf(\"metal_shmem_open: Failed to open shmem file :%s, err=%d\",\n                   name ? name : \"(null)\", error);\n        metal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n        return error;\n    }\n    fd = error;\n    probe_logf(\"metal_shmem_open: fd=%d\", fd);\n\n    /* Iterate through page sizes in decreasing order. */\n    metal_for_each_page_size_down(ps) {\n        /* Log the page size info we observe. Casts are used to avoid format mismatches. */\n        probe_logf(\"metal_shmem_open: loop ps=%p page_size=%zu mmap_flags=%llu page_shift=%d\",\n                   (void *)ps,\n                   (size_t)ps->page_size,\n                   (unsigned long long)ps->mmap_flags,\n                   ps->page_shift);\n\n        if (ps->page_size > 2 * size) {\n            probe_logf(\"metal_shmem_open: skipping ps->page_size (%zu) > 2*size (%zu)\",\n                       (size_t)ps->page_size, (size_t)(2 * size));\n            continue;\n        }\n\n        probe_logf(\"metal_shmem_open: attempting metal_shmem_try_map with page_size=%zu\",\n                   (size_t)ps->page_size);\n        error = metal_shmem_try_map(ps, fd, size, result);\n        probe_logf(\"metal_shmem_open: metal_shmem_try_map returned %d\", error);\n        if (!error) {\n            probe_logf(\"metal_shmem_open: mapping succeeded with ps=%p\", (void *)ps);\n            break;\n        }\n    }\n\n    close(fd);\n    probe_logf(\"metal_shmem_open: closed fd=%d returning error=%d\", fd, error);\n    return error;\n}\n"
}