{
  "user_message": "An agent A claimed that the following metal_shmem_open code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_open.\n```c\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local pointer 'virt' is only used to read memory (it is set from 'mem' and used as 'virt + offset' when calling metal_virt2phys) and is never used to modify the pointed-to bytes. Therefore it could be declared as a pointer to a const-qualified type (const uint8_t *virt). Declaring it as a non-const uint8_t * violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1fffee20\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1f7fde20\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c24d02e20\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c25503e20\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c26505e20\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c25d04e20\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1effce20\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_open('/foo', 1) returned 7\n[1755843101] metal_open('/foo', 1) returned 6\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_open('/foo', 1) returned 10\n[1755843101] file descriptor obtained: 7\n[1755843101] file descriptor obtained: 6\n[1755843101] metal_open('/foo', 1) returned 8\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1e7fbe20\n[1755843101] file descriptor obtained: 10\n[1755843101] metal_open('/foo', 1) returned 16\n[1755843101] metal_open('/foo', 1) returned 12\n[1755843101] metal_open('/foo', 1) returned 18\n[1755843101] entering page-size iteration\n[1755843101] file descriptor obtained: 8\n[1755843101] entering page-size iteration\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] entering page-size iteration\n[1755843101] file descriptor obtained: 16\n[1755843101] considering page size: 4096\n[1755843101] file descriptor obtained: 12\n[1755843101] considering page size: 4096\n[1755843101] file descriptor obtained: 18\n[1755843101] considering page size: 4096\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1dffae20\n[1755843101] entering page-size iteration\n[1755843101] ENTER metal_shmem_open: name='/foo' size=1048576 result_ptr=0x7f9c1d7f9e20\n[1755843101] metal_open('/foo', 1) returned 9\n[1755843101] entering page-size iteration\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=7, size=1048576, result_ptr=0x7f9c1f7fde20\n[1755843101] entering page-size iteration\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=10, size=1048576, result_ptr=0x7f9c26505e20\n[1755843101] entering page-size iteration\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=6, size=1048576, result_ptr=0x7f9c1fffee20\n[1755843101] considering page size: 4096\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] metal_shmem_open_generic returned -2\n[1755843101] file descriptor obtained: 9\n[1755843101] considering page size: 4096\n[1755843101] considering page size: 4096\n[1755843101] considering page size: 4096\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=8, size=1048576, result_ptr=0x7f9c24d02e20\n[1755843101] metal_open('/foo', 1) returned 14\n[1755843101] metal_open('/foo', 1) returned 19\n[1755843101] entering page-size iteration\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=16, size=1048576, result_ptr=0x7f9c25503e20\n[1755843101] file descriptor obtained: 14\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=12, size=1048576, result_ptr=0x7f9c1effce20\n[1755843101] considering page size: 4096\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=18, size=1048576, result_ptr=0x7f9c25d04e20\n[1755843101] file descriptor obtained: 19\n[1755843101] entering page-size iteration\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=9, size=1048576, result_ptr=0x7f9c1e7fbe20\n[1755843101] entering page-size iteration\n[1755843101] considering page size: 4096\n[1755843101] considering page size: 4096\n[1755843101] attempting metal_shmem_try_map with page_size=4096, fd=14, size=1048576, result_ptr=0x7f9c1dffae20\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_open:\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n...\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n...\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n...\nstruct metal_page_size {\n\t/** Page size. */\n\tsize_t\tpage_size;\n\n\t/** Page shift. */\n\tunsigned long page_shift;\n\n\t/** Path to hugetlbfs (or tmpfs) mount point. */\n\tchar path[PATH_MAX];\n\n\t/** Flags to use for mmap. */\n\tint mmap_flags;\n}\n...\n#define metal_for_each_page_size_down(ps) for((ps)=&_metal.page_sizes[_metal.num_page_sizes-1];(ps)>=&_metal.page_sizes[0];(ps)--)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The code shown for metal_shmem_open does not contain a local variable named \"virt\"; the pointer discussed by agent A appears in metal_shmem_try_map (provided in the additional code), so the violation is misattributed to metal_shmem_open. Regarding the actual pointer in metal_shmem_try_map: it is true that virt is only used for reads (virt = mem; used as virt + offset when calling metal_virt2phys), so it could be const-qualified if and only if all uses (notably the prototype of metal_virt2phys) accept a pointer-to-const. If metal_virt2phys requires a non-const pointer (e.g. void *), then changing virt to const uint8_t * would be incompatible without casting and therefore not possible without further API changes. MISRA Rule 8.13 applies only when qualification can be added without breaking required interfaces. Because agent A blamed metal_shmem_open (wrong function) and did not check the callee signatures that determine whether const can be applied, the report is incorrect."
}