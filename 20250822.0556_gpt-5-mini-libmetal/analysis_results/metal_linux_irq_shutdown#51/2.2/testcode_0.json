{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call is dead when logging is disabled: if _metal.common.log_handler == NULL or _metal.common.log_level < METAL_LOG_DEBUG, the macro expands to a conditional that performs no observable action. In that situation the statement metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__); is executed but its removal would not change program state or outputs (aside from possible timing differences), so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/512.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Helper probe: append a single-line diagnostic to /tmp/logs/512.txt.\n   Kept static to limit linkage and avoid changing program behaviour. */\nstatic void metal_linux_probe(const char *stage, int retval, int notify_fd, int irq_handling)\n{\n    FILE *f = fopen(\"/tmp/logs/512.txt\", \"a\");\n    if (f == NULL) {\n        /* Try to create directory once and reopen; ignore errors otherwise. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/512.txt\", \"a\");\n    }\n    if (f != NULL) {\n        /* Print stage, relevant state and return value. Keep output simple and\n           deterministic so other agents can parse it easily. */\n        (void)fprintf(f, \"%s: stage=%s ret=%d notify_fd=%d irq_handling_stop=%d\\n\",\n                      \"metal_linux_probe\", stage, retval, notify_fd, irq_handling);\n        (void)fclose(f);\n    }\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n    int ret;\n\n    /* Capture current values for logging so the logging itself does not\n       depend on any later changes to the globals. */\n    int saved_notify_fd = irq_notify_fd;\n    int saved_irq_handling_before = (int)irq_handling_stop;\n\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\n    /* Log entry and the state before changing irq_handling_stop. */\n    metal_linux_probe(\"entry_before_set\", 0, saved_notify_fd, saved_irq_handling_before);\n\n    irq_handling_stop = true;\n\n    /* Log after setting irq_handling_stop and before notifying. */\n    metal_linux_probe(\"after_set\", 0, saved_notify_fd, (int)irq_handling_stop);\n\n    metal_linux_irq_notify();\n\n    /* Log after notify and before join. */\n    metal_linux_probe(\"after_notify\", 0, saved_notify_fd, (int)irq_handling_stop);\n\n    ret = pthread_join(irq_pthread, NULL);\n\n    /* Log the result of pthread_join. */\n    metal_linux_probe(\"after_join\", ret, saved_notify_fd, (int)irq_handling_stop);\n\n    if (ret) {\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n    }\n\n    close(irq_notify_fd);\n\n    /* Log after close and before deinitializing the lock. */\n    metal_linux_probe(\"after_close\", ret, irq_notify_fd, (int)irq_handling_stop);\n\n    metal_mutex_deinit(&irq_lock);\n\n    /* Final exit log. */\n    metal_linux_probe(\"exit\", ret, irq_notify_fd, (int)irq_handling_stop);\n}\n"
}