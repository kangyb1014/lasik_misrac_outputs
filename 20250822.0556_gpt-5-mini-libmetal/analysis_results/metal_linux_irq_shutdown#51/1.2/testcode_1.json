{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses the GCC statement-expression extension '({ ... })' (a compiler-specific language extension). It also uses the '##__VA_ARGS__' token-pasting idiom to remove a trailing comma, which is a compiler extension in many toolchains. Because the code relies on these compiler extensions, MISRA C 2023 Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe helper: append human-readable trace messages to /tmp/logs/510.txt.\n * Keeps function logic unchanged; only records control flow and state.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n    int ret;\n\n    /* Original debug log preserved */\n    metal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\n    /* Probe: entry */\n    probe_log(\"ENTER: %s\", __func__);\n\n    /* Probe: about to mark IRQ handling stopped */\n    probe_log(\"Action: set irq_handling_stop = true\");\n    irq_handling_stop = true;\n\n    /* Probe: before notifying IRQ thread */\n    probe_log(\"Action: calling metal_linux_irq_notify()\");\n    metal_linux_irq_notify();\n    probe_log(\"Returned from metal_linux_irq_notify()\");\n\n    /* Probe: joining IRQ thread */\n    probe_log(\"Action: pthread_join starting\");\n    ret = pthread_join(irq_pthread, NULL);\n    if (ret) {\n        /* Preserve original error handling */\n        metal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n                  ret);\n        /* Probe: record join failure */\n        probe_log(\"ERROR: pthread_join failed with ret=%d\", ret);\n    } else {\n        probe_log(\"Info: pthread_join succeeded (ret=%d)\", ret);\n    }\n\n    /* Probe: closing notify fd and capture result */\n    probe_log(\"Action: close(irq_notify_fd)\");\n    int close_ret = close(irq_notify_fd);\n    if (close_ret == 0) {\n        probe_log(\"Info: close(irq_notify_fd) succeeded\");\n    } else {\n        probe_log(\"WARN: close(irq_notify_fd) returned %d (errno=%d: %s)\",\n                  close_ret, errno, strerror(errno));\n    }\n\n    /* Probe: deinitializing mutex */\n    probe_log(\"Action: metal_mutex_deinit(&irq_lock)\");\n    metal_mutex_deinit(&irq_lock);\n    probe_log(\"EXIT: %s\", __func__);\n}\n"
}