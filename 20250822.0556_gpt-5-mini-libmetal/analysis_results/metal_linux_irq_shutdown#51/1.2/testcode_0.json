{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: a statement expression '({ ... })' and the GNU variadic-macro comma elision '##__VA_ARGS__'. Both are compiler-specific extensions (documented as GNU extensions) and therefore violate MISRA C 2023 Rule 1.2 (no language extensions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_shutdown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/510.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_shutdown as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_shutdown:\n```c\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tmetal_linux_irq_notify();\n\tret = pthread_join(irq_pthread, NULL);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\tclose(irq_notify_fd);\n\tmetal_mutex_deinit(&irq_lock);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_shutdown code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends messages to /tmp/logs/510.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/510.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid metal_linux_irq_shutdown(void)\n{\n\tint ret;\n\n\tprobe_log(\"ENTER: %s\\n\", __func__);\n\tprobe_log(\"State before: irq_handling_stop=%d, irq_notify_fd=%d\\n\",\n\t          (int)irq_handling_stop, (int)irq_notify_fd);\n\n\tmetal_log(METAL_LOG_DEBUG, \"%s\\n\", __func__);\n\tirq_handling_stop = true;\n\tprobe_log(\"Action: set irq_handling_stop=true\\n\");\n\n\tmetal_linux_irq_notify();\n\tprobe_log(\"Action: called metal_linux_irq_notify()\\n\");\n\n\tprobe_log(\"Action: calling pthread_join for IRQ thread\\n\");\n\tret = pthread_join(irq_pthread, NULL);\n\tprobe_log(\"Result: pthread_join returned %d\\n\", ret);\n\n\tif (ret) {\n\t\tprobe_log(\"Error: pthread_join failed with %d\\n\", ret);\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to join IRQ thread: %d.\\n\",\n\t\t\t  ret);\n\t}\n\n\tclose(irq_notify_fd);\n\tprobe_log(\"Action: close(irq_notify_fd) called, fd=%d\\n\",\n\t          (int)irq_notify_fd);\n\n\tmetal_mutex_deinit(&irq_lock);\n\tprobe_log(\"Action: metal_mutex_deinit(&irq_lock) called\\n\");\n\n\tprobe_log(\"EXIT: %s\\n\", __func__);\n}\n"
}