{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can access beyond object bounds. If the destination array _metal.page_sizes[index].path is smaller than PATH_MAX, strncpy will write past the destination. If the source pointed to by path is not null-terminated within PATH_MAX bytes (or its allocated size is less than PATH_MAX), strncpy may read beyond the source object while copying up to PATH_MAX bytes. The code does not validate the source length or ensure the destination size/terminator, so the use of strncpy can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/469.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "int metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\tFILE *logf = fopen(\"/tmp/logs/469.txt\", \"a\");\n\n\tif (logf) {\n\t\tfprintf(logf, \"=== metal_sys_init entered ===\\n\");\n\t}\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\tif (logf) {\n\t\tfprintf(logf, \"TMPDIR env -> %s\\n\", getenv(\"TMPDIR\") ? getenv(\"TMPDIR\") : \"(null)\");\n\t\tfprintf(logf, \"_metal.tmp_path set to '%s'\\n\", _metal.tmp_path);\n\t}\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"failed to open /dev/urandom: %s (errno=%d)\\n\", strerror(errno), errno);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -errno;\n\t}\n\n\tsize_t nread = fread(&seed, 1, sizeof(seed), urandom);\n\tif (nread <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t\tif (logf)\n\t\t\tfprintf(logf, \"fread from /dev/urandom returned %zu\\n\", nread);\n\t} else {\n\t\tif (logf)\n\t\t\tfprintf(logf, \"seed read from /dev/urandom: %u (0x%x), bytes=%zu\\n\", seed, seed, nread);\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\tif (logf)\n\t\tfprintf(logf, \"srand called with seed %u\\n\", seed);\n\n\tresult = metal_init_page_sizes();\n\tif (logf)\n\t\tfprintf(logf, \"metal_init_page_sizes returned %d\\n\", result);\n\tif (result < 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"exiting: metal_init_page_sizes failed with %d\\n\", result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\n\tresult = metal_linux_bus_init();\n\tif (logf)\n\t\tfprintf(logf, \"metal_linux_bus_init returned %d\\n\", result);\n\tif (result < 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"exiting: metal_linux_bus_init failed with %d\\n\", result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t\tif (logf)\n\t\t\tfprintf(logf, \"Failed pagemap open - %s (errno=%d)\\n\", strerror(errno), errno);\n\t} else {\n\t\tif (logf)\n\t\t\tfprintf(logf, \"Opened /proc/self/pagemap, fd=%d\\n\", result);\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\tif (logf) {\n\t\tfprintf(logf, \"metal_linux_irq_init completed, returning 0\\n\");\n\t\tfclose(logf);\n\t}\n\treturn 0;\n}\n"
}