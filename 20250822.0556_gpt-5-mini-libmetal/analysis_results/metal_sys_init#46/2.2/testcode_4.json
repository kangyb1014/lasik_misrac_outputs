{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_unused(params) expands to do { (params) = (params); } while (0). This self-assignment is executed but has no observable effect for the given parameter type (a pointer to const data, non-volatile). Removing that statement would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/stat.h>\n\n/* Forward declarations of external symbols used by the original code. */\nstruct metal_init_params; /* opaque here, not dereferenced */\n\nextern void metal_log(int level, const char *fmt, ...);\nextern int metal_init_page_sizes(void);\nextern int metal_linux_bus_init(void);\nextern void metal_linux_irq_init(void);\nextern struct {\n    const char *tmp_path;\n    int pagemap_fd;\n} _metal;\n\n/* Helper probe: append a log entry describing the control flow/state to file. */\nstatic void metal_probe_log(const char *msg)\n{\n    FILE *f;\n    /* Ensure the directory exists (best-effort). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/462.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void metal_probe_log_params(const struct metal_init_params *params, const char *label)\n{\n    FILE *f;\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/462.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[%s] params pointer=%p\\n\", label, (const void *)params);\n    /* We do not dereference params because its contents are unknown here. */\n    fclose(f);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Entry probe */\n    metal_probe_log(\"enter: metal_sys_init\");\n    metal_probe_log_params(params, \"entry\");\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n    _metal.tmp_path = tmp_path;\n\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"tmp_path set to %s\", _metal.tmp_path);\n        metal_probe_log(buf);\n    }\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        metal_log( /* METAL_LOG_ERROR */ 3, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        {\n            char buf[256];\n            snprintf(buf, sizeof(buf), \"failed to open /dev/urandom: errno=%d (%s)\", errno, strerror(errno));\n            metal_probe_log(buf);\n        }\n        return -errno;\n    }\n\n    metal_probe_log(\"/dev/urandom opened\");\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_log( /* METAL_LOG_DEBUG */ 7, \"Failed fread /dev/urandom\\n\");\n        metal_probe_log(\"fread on /dev/urandom returned <= 0\");\n    } else {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"seed read from /dev/urandom = %u\", seed);\n        metal_probe_log(buf);\n    }\n    fclose(urandom);\n    metal_probe_log(\"/dev/urandom closed\");\n\n    srand(seed);\n    metal_probe_log(\"srand(seed) called\");\n\n    result = metal_init_page_sizes();\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"metal_init_page_sizes returned %d\", result);\n        metal_probe_log(buf);\n    }\n    if (result < 0)\n        return result;\n\n    result = metal_linux_bus_init();\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"metal_linux_bus_init returned %d\", result);\n        metal_probe_log(buf);\n    }\n    if (result < 0)\n        return result;\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_log( /* METAL_LOG_DEBUG */ 7, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n        {\n            char buf[256];\n            snprintf(buf, sizeof(buf), \"Failed pagemap open: errno=%d (%s)\", errno, strerror(errno));\n            metal_probe_log(buf);\n        }\n    }\n    _metal.pagemap_fd = result;\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"pagemap_fd=%d\", _metal.pagemap_fd);\n        metal_probe_log(buf);\n    }\n\n    /* Probe params immediately before the potentially dead self-assignment */\n    metal_probe_log_params(params, \"before_metal_unused\");\n\n    /* The original code called metal_unused(params); keep it to preserve logic. */\n    metal_unused(params);\n\n    /* Probe params immediately after the call to capture any observable change\n       (the reported issue states this is a no-op). */\n    metal_probe_log_params(params, \"after_metal_unused\");\n\n    /* Initialize IRQ handling */\n    metal_probe_log(\"calling metal_linux_irq_init\");\n    metal_linux_irq_init();\n    metal_probe_log(\"exit: metal_sys_init (success)\");\n    return 0;\n}\n"
}