{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang statement-expression syntax '({ ... })' and the GNU token-pasting of the varargs comma '##__VA_ARGS__', both of which are compiler-specific language extensions (documented as GCC extensions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/460.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "static void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/460.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void probe_log_fmt(const char *prefix, const char *fmt, ...)\n{\n    char buf[512];\n    int n = 0;\n    if (prefix)\n        n = snprintf(buf, sizeof(buf), \"%s: \", prefix);\n    if (n < 0 || n >= (int)sizeof(buf))\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vsnprintf(buf + n, sizeof(buf) - (size_t)n, fmt, ap);\n    va_end(ap);\n\n    probe_log(buf);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Log compiler information to help reproduce extension availability */\n#if defined(__clang__)\n    probe_log(\"probe: compiler=clang\");\n    probe_log_fmt(\"probe\", \"clang_version=%d.%d.%d\", __clang_major__, __clang_minor__, __clang_patchlevel__);\n#elif defined(__GNUC__)\n    probe_log(\"probe: compiler=gcc\");\n    probe_log_fmt(\"probe\", \"gcc_version=%d.%d\", __GNUC__, __GNUC_MINOR__);\n#else\n    probe_log(\"probe: compiler=unknown\");\n#endif\n\n    /* Find the temporary directory location. */\n    probe_log(\"probe: entering getenv for TMPDIR\");\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path) {\n        probe_log(\"probe: TMPDIR not set, using /tmp\");\n        tmp_path = \"/tmp\";\n    } else {\n        probe_log_fmt(\"probe\", \"TMPDIR=%s\", tmp_path);\n    }\n    _metal.tmp_path = tmp_path;\n    probe_log_fmt(\"probe\", \"_metal.tmp_path set to %s\", _metal.tmp_path);\n\n    /* Initialize the pseudo-random number generator. */\n    probe_log(\"probe: opening /dev/urandom\");\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        probe_log_fmt(\"probe\", \"/dev/urandom open failed: errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        probe_log(\"probe: returning error from metal_sys_init due to urandom open failure\");\n        return -errno;\n    }\n    probe_log(\"probe: /dev/urandom opened\");\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        probe_log(\"probe: Failed fread /dev/urandom (<=0)\");\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n    } else {\n        probe_log_fmt(\"probe\", \"seed read from /dev/urandom: 0x%08x\", seed);\n    }\n    fclose(urandom);\n    probe_log(\"probe: closed /dev/urandom\");\n    srand(seed);\n    probe_log_fmt(\"probe\", \"srand called with seed=0x%08x\", seed);\n\n    result = metal_init_page_sizes();\n    probe_log_fmt(\"probe\", \"metal_init_page_sizes() returned %d\", result);\n    if (result < 0)\n        return result;\n\n    result = metal_linux_bus_init();\n    probe_log_fmt(\"probe\", \"metal_linux_bus_init() returned %d\", result);\n    if (result < 0)\n        return result;\n\n    probe_log(\"probe: opening /proc/self/pagemap\");\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        probe_log_fmt(\"probe\", \"Failed pagemap open - errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n    } else {\n        probe_log_fmt(\"probe\", \"/proc/self/pagemap opened, fd=%d\", result);\n    }\n    _metal.pagemap_fd = result;\n\n    probe_log(\"probe: calling metal_unused(params)\");\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    probe_log(\"probe: initializing IRQ handling (metal_linux_irq_init)\");\n    metal_linux_irq_init();\n    probe_log(\"probe: finished metal_linux_irq_init\");\n\n    probe_log(\"probe: leaving metal_sys_init with success (0)\");\n    return 0;\n}\n"
}