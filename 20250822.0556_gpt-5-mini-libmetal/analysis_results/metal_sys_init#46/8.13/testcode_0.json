{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\ntmp_path is declared as const char *tmp_path, but _metal.tmp_path is (or is typedef'd as) char *; assigning a const char * to a non-const char * discards the const qualifier. This both contravenes C's qualifier rules (implicit discard) and violates MISRA C 2023 Rule 8.13 \u2014 the pointer should instead be declared to point to a const-qualified type (e.g. const char *tmp_path or _metal.tmp_path should be const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_sys_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_sys_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_sys_init:\n```c\nint metal_sys_init(const struct metal_init_params *params)\n{\n\tconst char *tmp_path;\n\tunsigned int seed;\n\tFILE *urandom;\n\tint result;\n\n\t/* Find the temporary directory location. */\n\ttmp_path = getenv(\"TMPDIR\");\n\tif (!tmp_path)\n\t\ttmp_path = \"/tmp\";\n\t_metal.tmp_path = tmp_path;\n\n\t/* Initialize the pseudo-random number generator. */\n\turandom = fopen(\"/dev/urandom\", \"r\");\n\tif (!urandom) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n\t\t\t  strerror(errno));\n\t\treturn -errno;\n\t}\n\tif (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n\t}\n\tfclose(urandom);\n\tsrand(seed);\n\n\tresult = metal_init_page_sizes();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = metal_linux_bus_init();\n\tif (result < 0)\n\t\treturn result;\n\n\tresult = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\t_metal.pagemap_fd = result;\n\n\tmetal_unused(params);\n\n\t/* Initialize IRQ handling */\n\tmetal_linux_irq_init();\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_sys_init code.\n",
  "test_code": "static void metal_probe_log(const char *fmt, ...)\n{\n    FILE *logf = fopen(\"/tmp/logs/463.txt\", \"a\");\n    if (!logf)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(logf, fmt, ap);\n    va_end(ap);\n    fclose(logf);\n}\n\nint metal_sys_init(const struct metal_init_params *params)\n{\n    const char *tmp_path;\n    unsigned int seed;\n    FILE *urandom;\n    int result;\n\n    /* Probe: entry */\n    metal_probe_log(\"ENTER metal_sys_init\\n\");\n\n    /* Find the temporary directory location. */\n    tmp_path = getenv(\"TMPDIR\");\n    if (!tmp_path)\n        tmp_path = \"/tmp\";\n\n    /* Probe: before assignment */\n    metal_probe_log(\"tmp_path (const char *): %p -> \\\"%s\\\"\\n\",\n                    (void *)tmp_path, tmp_path ? tmp_path : \"(null)\");\n    metal_probe_log(\"_metal.tmp_path (before): %p -> \\\"%s\\\"\\n\",\n                    (void *)_metal.tmp_path,\n                    _metal.tmp_path ? _metal.tmp_path : \"(null)\");\n\n    /* Assignment that may discard const qualifier in _metal.tmp_path */\n    _metal.tmp_path = tmp_path;\n\n    /* Probe: after assignment - record that an assignment from a const-qualified\n     * pointer to _metal.tmp_path (non-const) was performed. This log documents\n     * the control flow and state relevant to the potential Rule 8.13 issue. */\n    metal_probe_log(\"_metal.tmp_path (after): %p -> \\\"%s\\\"\\n\",\n                    (void *)_metal.tmp_path,\n                    _metal.tmp_path ? _metal.tmp_path : \"(null)\");\n    metal_probe_log(\"NOTE: assigned const char *tmp_path -> _metal.tmp_path; this may discard const qualifier\\n\");\n\n    /* Initialize the pseudo-random number generator. */\n    urandom = fopen(\"/dev/urandom\", \"r\");\n    if (!urandom) {\n        metal_probe_log(\"fopen(/dev/urandom) failed: errno=%d (%s)\\n\",\n                        errno, strerror(errno));\n        metal_log(METAL_LOG_ERROR, \"failed to open /dev/urandom (%s)\\n\",\n                  strerror(errno));\n        return -errno;\n    }\n    metal_probe_log(\"fopen(/dev/urandom) succeeded: FILE=%p\\n\", (void *)urandom);\n\n    if (fread(&seed, 1, sizeof(seed), urandom) <= 0) {\n        metal_probe_log(\"fread(/dev/urandom) returned <= 0\\n\");\n        metal_log(METAL_LOG_DEBUG, \"Failed fread /dev/urandom\\n\");\n    } else {\n        /* Only log seed when fread reported success to avoid printing uninitialized data. */\n        metal_probe_log(\"fread(/dev/urandom) succeeded; seed=0x%08x (%u)\\n\",\n                        seed, seed);\n    }\n    fclose(urandom);\n    metal_probe_log(\"closed /dev/urandom\\n\");\n    srand(seed);\n    metal_probe_log(\"srand called with seed (value logged only if fread succeeded)\\n\");\n\n    result = metal_init_page_sizes();\n    metal_probe_log(\"metal_init_page_sizes() -> %d\\n\", result);\n    if (result < 0) {\n        metal_probe_log(\"EXIT metal_sys_init (early, init_page_sizes failed) -> %d\\n\", result);\n        return result;\n    }\n\n    result = metal_linux_bus_init();\n    metal_probe_log(\"metal_linux_bus_init() -> %d\\n\", result);\n    if (result < 0) {\n        metal_probe_log(\"EXIT metal_sys_init (early, linux_bus_init failed) -> %d\\n\", result);\n        return result;\n    }\n\n    result = open(\"/proc/self/pagemap\", O_RDONLY | O_CLOEXEC);\n    if (result < 0) {\n        metal_probe_log(\"open(/proc/self/pagemap) failed: errno=%d (%s)\\n\",\n                        errno, strerror(errno));\n        metal_log(METAL_LOG_DEBUG, \"Failed pagemap open - %s\\n\",\n                  strerror(errno));\n    } else {\n        metal_probe_log(\"open(/proc/self/pagemap) succeeded: fd=%d\\n\", result);\n    }\n    _metal.pagemap_fd = result;\n\n    metal_unused(params);\n\n    /* Initialize IRQ handling */\n    metal_linux_irq_init();\n    metal_probe_log(\"metal_linux_irq_init() called\\n\");\n\n    metal_probe_log(\"EXIT metal_sys_init -> 0\\n\");\n    return 0;\n}\n"
}