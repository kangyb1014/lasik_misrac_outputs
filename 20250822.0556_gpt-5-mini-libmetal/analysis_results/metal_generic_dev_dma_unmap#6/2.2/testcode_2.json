{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)device;' is an expression statement whose execution has no effect on program behavior (it only suppresses an unused-parameter warning). Removing this statement does not change the program's observable behaviour, so it meets the definition of dead code in MISRA C 2023 Rule 2.2. (Same applies to the similar '(void)bus;' and '(void)dir;' lines in the function.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and state to /tmp/logs/62.txt */\nstatic void log_probe(const char *stage,\n                      struct metal_bus *bus,\n                      struct metal_device *device,\n                      uint32_t dir,\n                      struct metal_sg *sg,\n                      int nents,\n                      int idx)\n{\n    FILE *fp = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    /* Log basic context */\n    (void)fprintf(fp, \"%s: bus=%p device=%p dir=%u nents=%d idx=%d\\n\",\n                  stage, (void *)bus, (void *)device, (unsigned)dir, nents, idx);\n\n    /* If an entry index is valid, log the scatter-gather entry details */\n    if (sg != NULL && idx >= 0 && idx < nents) {\n        (void)fprintf(fp, \"%s: sg[%d].virt=%p sg[%d].len=%u\\n\",\n                      stage, idx, (void *)sg[idx].virt, idx, (unsigned)sg[idx].len);\n    }\n\n    (void)fclose(fp);\n}\n\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n\n    /* Log entry into the function */\n    log_probe(\"entry\", bus, device, dir, sg, nents, -1);\n\n    /* The following (void) casts are present in the original code; keep them\n       and log before/after to show they execute but have no effect on state. */\n    log_probe(\"before_cast_bus\", bus, device, dir, sg, nents, -1);\n    (void)bus;\n    log_probe(\"after_cast_bus\", bus, device, dir, sg, nents, -1);\n\n    log_probe(\"before_cast_device\", bus, device, dir, sg, nents, -1);\n    (void)device;\n    log_probe(\"after_cast_device\", bus, device, dir, sg, nents, -1);\n\n    log_probe(\"before_cast_dir\", bus, device, dir, sg, nents, -1);\n    (void)dir;\n    log_probe(\"after_cast_dir\", bus, device, dir, sg, nents, -1);\n\n    for (i = 0; i < nents; i++) {\n        log_probe(\"loop_iter_start\", bus, device, dir, sg, nents, i);\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n        log_probe(\"loop_iter_end\", bus, device, dir, sg, nents, i);\n    }\n\n    /* Log exit from the function */\n    log_probe(\"exit\", bus, device, dir, sg, nents, -1);\n}\n"
}