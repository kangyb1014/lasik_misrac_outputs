{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void)dir;' is an executed no-op: it has no side effects and the parameter 'dir' is not used elsewhere in the function. Removing this statement would not change program behaviour, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal forward declarations to allow this translation unit to compile\n   when included independently. The real project will provide full\n   definitions. */\nstruct metal_bus;\nstruct metal_device;\nstruct metal_sg { void *virt; size_t len; };\n\n/* Forward declaration of the cache invalidate function used by the\n   original code. The real implementation is provided elsewhere. */\nvoid metal_cache_invalidate(void *addr, size_t len);\n\n/* Probe helper: append human-readable logs to /tmp/logs/62.txt. */\nstatic void probe_log(const char *stage,\n                      struct metal_bus *bus,\n                      struct metal_device *device,\n                      uint32_t dir,\n                      struct metal_sg *sg,\n                      int nents,\n                      int index)\n{\n    FILE *f = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not change program behaviour; silently return. */\n        return;\n    }\n\n    if (index < 0) {\n        fprintf(f, \"[metal_generic_dev_dma_unmap] %s: bus=%p device=%p dir=%u nents=%d sg=%p\\n\",\n                stage, (void *)bus, (void *)device, (unsigned)dir, nents, (void *)sg);\n    } else {\n        /* Log individual scatter-gather entry details. */\n        void *virt = NULL;\n        size_t len = 0u;\n        if ((sg != NULL) && (index < nents)) {\n            virt = sg[index].virt;\n            len = sg[index].len;\n        }\n        fprintf(f, \"[metal_generic_dev_dma_unmap] %s: idx=%d bus=%p device=%p dir=%u nents=%d sg[%d].virt=%p sg[%d].len=%zu\\n\",\n                stage, index, (void *)bus, (void *)device, (unsigned)dir, nents, index, virt, index, len);\n    }\n\n    fclose(f);\n}\n\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n    (void)bus;\n    (void)device;\n    /* The original code contains an explicit no-op cast for 'dir'. We\n       keep this to preserve the original source form and intent. We\n       also log just after this point to provide evidence that the\n       no-op cast is present in the executed code path. */\n    (void)dir;\n\n    /* Log entry after the explicit no-op cast to capture the control\n       point claimed to be dead (the (void)dir statement). This shows\n       the function was entered and that the cast was executed. */\n    probe_log(\"entry_after_void_cast\", bus, device, dir, sg, nents, -1);\n\n    for (i = 0; i < nents; i++) {\n        /* Log before invalidation of each scatter-gather range so that\n           callers can reproduce the sequence of operations and see that\n           'dir' is not used in the loop body (the only operations are\n           cache invalidations based on sg entries). */\n        probe_log(\"before_invalidate\", bus, device, dir, sg, nents, i);\n\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n\n        probe_log(\"after_invalidate\", bus, device, dir, sg, nents, i);\n    }\n}\n"
}