{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn function metal_generic_dev_dma_unmap, the statement '(void)bus;' is executed but has no effect (it merely casts the parameter to void to suppress an unused-parameter warning). Removing this statement would not change program behaviour, so it constitutes dead code according to MISRA C 2023 Rule 2.2. (The same applies to the similar '(void)device;' and '(void)dir;' lines.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: log call parameters and scatter-gather entries to a file\n * This helper preserves the original logic by only observing state and\n * writing it to /tmp/logs/62.txt. It is declared static to limit scope\n * to this translation unit. */\nstatic void metal_probe_log_unmap(struct metal_bus *bus,\n                                  struct metal_device *device,\n                                  uint32_t dir,\n                                  struct metal_sg *sg,\n                                  int nents)\n{\n    FILE *f = fopen(\"/tmp/logs/62.txt\", \"a\");\n    if (f == NULL) {\n        return; /* If logging fails, do not affect original behaviour */\n    }\n\n    fprintf(f, \"metal_generic_dev_dma_unmap called: bus=%p device=%p dir=%u nents=%d\\n\",\n            (void *)bus, (void *)device, (unsigned int)dir, nents);\n    fprintf(f, \"Note: (void)bus, (void)device, (void)dir lines are present in the function and executed (no effect)\\n\");\n\n    for (int i = 0; i < nents; ++i) {\n        /* Log each scatter-gather entry (virt pointer and length) */\n        fprintf(f, \"  sg[%d]: virt=%p len=%d\\n\", i, sg[i].virt, (int)sg[i].len);\n    }\n\n    fprintf(f, \"--- end call ---\\n\");\n    fclose(f);\n}\n\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n    (void)bus;\n    (void)device;\n    (void)dir;\n\n    /* Probe invocation: logs parameters and scatter-gather state to file\n     * without changing the original behaviour of the function. */\n    metal_probe_log_unmap(bus, device, dir, sg, nents);\n\n    for (i = 0; i < nents; i++) {\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n    }\n}\n"
}