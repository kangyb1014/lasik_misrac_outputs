{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_bus *bus' is not const-qualified even though it is unused and never modified in metal_generic_dev_dma_unmap (it is cast to void). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Change the prototype to 'const struct metal_bus *bus' (or 'struct metal_bus const *bus').\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13 requires that pointer types should be const-qualified whenever that is possible (i.e. the function does not modify the object pointed to). In the shown definition metal_generic_dev_dma_unmap the parameter struct metal_bus *bus is not used or modified (it is cast to void), so it could be declared as const struct metal_bus *bus. Therefore, as presented, the code violates Rule 8.13. Note: there are practical caveats \u2014 you must keep the function definition\u2019s parameter types consistent with its prototype/declaration and any required callback or interface signatures; if the non-const form is required by an external API, then adding const may not be \u201cpossible.\u201d Also, other pointer parameters in this function (e.g. struct metal_device *device and struct metal_sg *sg) are likewise not modified here and could be const-qualified if the broader API allows it."
}