{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_sg *sg' is not const-qualified even though the function only reads from the scatter-gather entries (metal_cache_invalidate(sg[i].virt, sg[i].len)); it should be declared as 'const struct metal_sg *sg' to prevent modification and comply with MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the general case. The function only reads fields from the scatter-gather entries (sg[i].virt and sg[i].len) and does not modify the sg array or its elements; therefore the pointer parameter could and should be declared as pointing to a const-qualified type (const struct metal_sg *sg) to satisfy MISRA C 2023 Rule 8.13. Note: an exception applies if this function must match an existing non-const API or function-pointer type (i.e. it is required by an external interface or header); in that case the signature cannot be changed and no violation can be fixed locally. Absent such a constraint, the current declaration is a violation and should be changed to const struct metal_sg *sg."
}