{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'sg' is declared as 'struct metal_sg *sg' but is only read. In the fragment metal_cache_invalidate(sg[i].virt, sg[i].len) the code treats sg[i].virt as an input (not modified), so the pointer should be const-qualified. Therefore Rule 8.13 is violated. Suggested fix: change the parameter to 'const struct metal_sg *sg' (and/or declare sg[i].virt as a pointer-to-const or have metal_cache_invalidate accept a 'const void *' address).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In metal_generic_dev_dma_unmap the parameter sg is only read (sg[i].virt and sg[i].len are accessed; sg and its pointees are not modified), so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type where possible. The straightforward fix is to change the prototype to take const struct metal_sg *sg (and/or make sg[i].virt a const pointer or change metal_cache_invalidate to accept a const void * if it does not modify the pointed-to memory). If API compatibility prevents changing the signature, a documented justification or an appropriate, narrow cast is required, but as written the code violates Rule 8.13."
}