{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'sg' is declared as 'struct metal_sg *sg' but is only read. In the fragment metal_cache_invalidate(sg[i].virt, sg[i].len) the code treats sg[i].virt as an input (not modified), so the pointer should be const-qualified. Therefore Rule 8.13 is violated. Suggested fix: change the parameter to 'const struct metal_sg *sg' (and/or declare sg[i].virt as a pointer-to-const or have metal_cache_invalidate accept a 'const void *' address).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Minimal forward declarations to keep this translation unit self-contained. */\nstruct metal_bus;\nstruct metal_device;\n\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\n\n/* Assume metal_cache_invalidate is provided elsewhere in the system. */\nvoid metal_cache_invalidate(void *addr, size_t len);\n\n/* Helper: ensure the log directory exists. */\nstatic void ensure_log_dir(void)\n{\n    /* Try to create /tmp/logs. If it already exists, ignore error. */\n    if (mkdir(\"/tmp/logs\", 0755) != 0) {\n        if (errno != EEXIST) {\n            /* If we cannot create and it isn't because it already exists, there's nothing\n             * more we can do here; we still try to open the file later. */\n        }\n    }\n}\n\n/* Append a log message to /tmp/logs/63.txt. Keep the function minimal and robust. */\nstatic void append_log(const char *msg)\n{\n    ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (!f) {\n        /* If logging fails, we do not alter program behavior; just return. */\n        return;\n    }\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* A small formatter that writes a single log line with key state items.\n * We avoid dynamic allocation for simplicity. */\nstatic void log_sg_entry(int idx, void *virt, size_t len)\n{\n    char buf[256];\n    /* Format: IDX=<i> PTR=<pointer> LEN=<len> */\n    /* Use snprintf to avoid buffer overflow. */\n    (void)snprintf(buf, sizeof(buf), \"IDX=%d PTR=%p LEN=%zu\", idx, virt, len);\n    append_log(buf);\n}\n\n/* Log start and end of function with high-level parameters. */\nstatic void log_function_start(uint32_t dir, const struct metal_sg *sg, int nents)\n{\n    char buf[256];\n    (void)snprintf(buf, sizeof(buf), \"ENTER metal_generic_dev_dma_unmap DIR=%u SG_PTR=%p NENTS=%d\",\n                   (unsigned)dir, (const void *)sg, nents);\n    append_log(buf);\n}\n\nstatic void log_function_end(void)\n{\n    append_log(\"EXIT metal_generic_dev_dma_unmap\");\n}\n\n/* The original function logic is preserved. Logging probes are added but do not\n * change behavior. */\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n    (void)bus;\n    (void)device;\n    (void)dir;\n\n    /* Log entry with key parameters. Use a const-qualified pointer for logging to\n     * communicate intent; we do not modify sg. */\n    log_function_start(dir, (const struct metal_sg *)sg, nents);\n\n    for (i = 0; i < nents; i++) {\n        /* Probe before invalidation to capture the state observed by the function. */\n        log_sg_entry(i, sg[i].virt, sg[i].len);\n\n        /* Preserve original behavior exactly. */\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n\n        /* Probe after invalidation to show control flow continuation. */\n        {\n            char buf[128];\n            (void)snprintf(buf, sizeof(buf), \"AFTER invalidate IDX=%d\", i);\n            append_log(buf);\n        }\n    }\n\n    log_function_end();\n}\n"
}