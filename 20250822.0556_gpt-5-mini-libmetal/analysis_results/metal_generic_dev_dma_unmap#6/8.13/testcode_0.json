{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct metal_bus *bus' is not const-qualified even though it is unused and never modified in metal_generic_dev_dma_unmap (it is cast to void). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Change the prototype to 'const struct metal_bus *bus' (or 'struct metal_bus const *bus').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Forward declarations to allow this snippet to compile standalone.\n   In the real project these will be provided by project headers. */\nstruct metal_bus;\nstruct metal_device;\nstruct metal_sg { void *virt; size_t len; };\n\n/* External cache invalidate function (provided elsewhere). */\nextern void metal_cache_invalidate(void *addr, size_t len);\n\n/* Helper: append a log line describing entry and parameters. */\nstatic void metal_gdmu_log_entry(const struct metal_bus *bus,\n                                 const struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (f == NULL) {\n        /* Best-effort logging; silently continue if log cannot be opened. */\n        return;\n    }\n\n    fprintf(f, \"metal_generic_dev_dma_unmap: entry\\n\");\n    fprintf(f, \"  bus=%p\\n\", (const void *)bus);\n    fprintf(f, \"  device=%p\\n\", (const void *)device);\n    fprintf(f, \"  dir=%u\\n\", (unsigned)dir);\n    fprintf(f, \"  nents=%d\\n\", nents);\n\n    if (bus == NULL) {\n        fprintf(f, \"  NOTE: bus is NULL\\n\");\n    } else {\n        fprintf(f, \"  NOTE: bus is non-NULL (pointer present but not modified)\\n\");\n    }\n\n    /* Log a summary of the scatter-gather list pointers/lengths if provided. */\n    if (sg != NULL && nents > 0) {\n        int i;\n        for (i = 0; i < nents; ++i) {\n            fprintf(f, \"  sg[%d].virt=%p, sg[%d].len=%zu\\n\", i, sg[i].virt, i, sg[i].len);\n        }\n    } else {\n        fprintf(f, \"  sg is NULL or nents<=0\\n\");\n    }\n\n    fprintf(f, \"metal_generic_dev_dma_unmap: proceeding to invalidate caches for each SG entry\\n\");\n    fclose(f);\n}\n\n/* Helper: append a log line after each cache invalidation. */\nstatic void metal_gdmu_log_invalidate(int index, void *virt, size_t len)\n{\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"  invalidate: index=%d, virt=%p, len=%zu\\n\", index, virt, len);\n    fclose(f);\n}\n\n/* Modified function with probes. Original logic preserved. */\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n\n    /* Log entry & parameter state. This also documents that 'bus' is not\n       modified by this function (evidence relevant to the MISRA 8.13 report). */\n    metal_gdmu_log_entry(bus, device, dir, sg, nents);\n\n    /* Original behavior: invalidate caches for each scatter/gather entry. */\n    for (i = 0; i < nents; i++) {\n        /* preserve original call */\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n        /* log the action for traceability */\n        metal_gdmu_log_invalidate(i, sg[i].virt, sg[i].len);\n    }\n\n    /* Final log noting exit; kept as a separate append so that post-loop state is recorded. */\n    {\n        FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"metal_generic_dev_dma_unmap: exit\\n\\n\");\n            fclose(f);\n        }\n    }\n}\n"
}