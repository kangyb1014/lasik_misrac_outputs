{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_unmap code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_unmap.\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_device *device' is not const-qualified but the function does not modify the pointed-to object (it only does '(void)device'). According to MISRA C 2023 Rule 8.13 this pointer should be declared as 'const struct metal_device *device'.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The function does not use or modify the 'device' object (it is explicitly silenced via '(void)device;'). MISRA C 2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible \u2014 here the parameter could be declared as 'const struct metal_device *device'. Therefore, unless there is an external constraint preventing the change (for example the function must match a non-const function-pointer type in an API/struct and thus cannot be changed without breaking the required prototype), the agent A's report is correct: this is a violation of Rule 8.13. If such an API constraint exists, that constitutes a valid justification for keeping the non-const signature and then there would be no violation in context."
}