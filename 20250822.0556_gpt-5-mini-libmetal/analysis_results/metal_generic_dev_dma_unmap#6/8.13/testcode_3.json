{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct metal_sg *sg' is not const-qualified even though the function only reads from the scatter-gather entries (metal_cache_invalidate(sg[i].virt, sg[i].len)); it should be declared as 'const struct metal_sg *sg' to prevent modification and comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_unmap:\n```c\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t struct metal_device *device,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg,\n\t\t\t\t int nents)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\t(void)dir;\n\n\tfor (i = 0; i < nents; i++) {\n\t\tmetal_cache_invalidate(sg[i].virt, sg[i].len);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logger: write logs to /tmp/logs/63.txt about control flow and state.\n * Uses a const-qualified pointer for sg to avoid introducing additional\n * non-const pointer violations in the probe itself. The original function\n * signature is preserved to demonstrate the reported violation scenario.\n */\nstatic void probe_log_start(const char *fn,\n                            struct metal_bus *bus,\n                            struct metal_device *device,\n                            uint32_t dir,\n                            const struct metal_sg *sg,\n                            int nents)\n{\n    FILE *f = NULL;\n    const char *path = \"/tmp/logs/63.txt\";\n\n    /* Try to open the log file for append; if directory missing, attempt to create it. */\n    f = fopen(path, \"a\");\n    if (!f) {\n        /* attempt to create parent directory then reopen */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(path, \"a\");\n    }\n    if (!f) {\n        /* If still failing, give up silently to avoid altering program behavior */\n        return;\n    }\n\n    fprintf(f, \"--- %s invoked ---\\n\", fn);\n    fprintf(f, \"bus=%p device=%p dir=%u nents=%d\\n\", (void *)bus, (void *)device, (unsigned)dir, nents);\n\n    if (sg == NULL) {\n        fprintf(f, \"sg = NULL\\n\");\n        fclose(f);\n        return;\n    }\n\n    for (int i = 0; i < nents; ++i) {\n        /* Print each scatter-gather entry state. Use casts to avoid type assumptions. */\n        fprintf(f, \"sg[%d].virt=%p sg[%d].len=%llu\\n\", i, (void *)sg[i].virt, i, (unsigned long long) sg[i].len);\n    }\n\n    fprintf(f, \"--- end of %s header ---\\n\", fn);\n    fclose(f);\n}\n\nstatic void probe_log_entry(const char *fn, int idx, const void *virt, unsigned long long len)\n{\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (!f) {\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    }\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: about to invalidate sg[%d]: virt=%p len=%llu\\n\", fn, idx, virt, len);\n    fclose(f);\n}\n\nvoid metal_generic_dev_dma_unmap(struct metal_bus *bus,\n                                 struct metal_device *device,\n                                 uint32_t dir,\n                                 struct metal_sg *sg,\n                                 int nents)\n{\n    int i;\n\n    /* Log entry and state. The probe takes a const-qualified sg pointer to\n     * emphasize that the function only reads the sg entries. The original\n     * signature (non-const) is intentionally kept to reproduce the violation\n     * scenario reported by the other agent.\n     */\n    probe_log_start(\"metal_generic_dev_dma_unmap\", bus, device, dir, (const struct metal_sg *)sg, nents);\n\n    for (i = 0; i < nents; i++) {\n        /* Log each entry just before invalidation to capture control flow and state. */\n        probe_log_entry(\"metal_generic_dev_dma_unmap\", i, sg[i].virt, (unsigned long long) sg[i].len);\n\n        /* Preserve original behavior: invalidate cache for this SG entry. */\n        metal_cache_invalidate(sg[i].virt, sg[i].len);\n    }\n}\n"
}