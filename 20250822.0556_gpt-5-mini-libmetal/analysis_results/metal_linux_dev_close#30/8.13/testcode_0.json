{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field is declared as void *irq_info; if irq_info is intended only to refer to IRQ-related metadata or identifiers that are not modified (for example it is passed to callbacks or read-only code), it should be declared const void *irq_info; therefore the current declaration is a violation of MISRA C 2023 Rule 8.13. (If, however, the pointed-to object is intentionally modified via this pointer, then void * is appropriate and no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_close:\n```c\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n\t\t\t\t  struct metal_device *device)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_close(lbus, ldev);\n\tmetal_list_del(&device->node);\n\tfree(ldev);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append structured logs to /tmp/logs/303.txt */\nstatic void metal_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/303.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n                                  struct metal_device *device)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Log entry and resolved pointers/state prior to calling dev_close */\n    metal_log_probe(\"ENTER metal_linux_dev_close: bus=%p, device=%p\", (void *)bus, (void *)device);\n    metal_log_probe(\"Resolved: ldev=%p, lbus=%p\", (void *)ldev, (void *)lbus);\n\n    if (ldev)\n    {\n        void *ldrv_ptr = (void *)ldev->ldrv;\n        void *dev_close_ptr = NULL;\n        if (ldev->ldrv)\n            dev_close_ptr = (void *)ldev->ldrv->dev_close;\n        metal_log_probe(\"ldev->ldrv=%p, ldev->ldrv->dev_close=%p\", ldrv_ptr, dev_close_ptr);\n    }\n    else\n    {\n        metal_log_probe(\"ldev is NULL\");\n    }\n\n    /* Call the original close callback (preserve original logic and ordering) */\n    metal_log_probe(\"Calling ldev->ldrv->dev_close...\");\n    ldev->ldrv->dev_close(lbus, ldev);\n    metal_log_probe(\"Returned from ldev->ldrv->dev_close\");\n\n    /* Log device node removal info (do not change original call) */\n    metal_log_probe(\"About to remove device node at %p\", (void *)&device->node);\n    metal_list_del(&device->node);\n    metal_log_probe(\"Removed device node\");\n\n    /* Log information before freeing ldev (do not dereference after free) */\n    metal_log_probe(\"About to free ldev=%p\", (void *)ldev);\n    free(ldev);\n    metal_log_probe(\"Freed ldev (pointer value retained for evidence)=%p\", (void *)ldev);\n\n    metal_log_probe(\"EXIT metal_linux_dev_close: bus=%p, device=%p\", (void *)bus, (void *)device);\n}\n"
}