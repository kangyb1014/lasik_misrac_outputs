{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct metal_bus *bus' even though metal_linux_dev_close itself does not directly modify the bus object (it only converts/passes it on). If the helper functions to_linux_bus() and ldev->ldrv->dev_close() do not modify the bus pointed-to, then the parameter (and any stored references) should be const-qualified \u2014 e.g. 'const struct metal_bus *bus' \u2014 to satisfy MISRA C 2023 Rule 8.13. Thus, unless those callees require a mutable pointer, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_close:\n```c\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n\t\t\t\t  struct metal_device *device)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_close(lbus, ldev);\n\tmetal_list_del(&device->node);\n\tfree(ldev);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n                                  struct metal_device *device)\n{\n    FILE *f = NULL;\n    struct linux_device *ldev = NULL;\n    struct linux_bus *lbus = NULL;\n\n    /* Log entry with the raw pointer values (do not dereference yet) */\n    f = fopen(\"/tmp/logs/303.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"ENTER metal_linux_dev_close: bus=%p device=%p\\n\",\n                (const void *)bus, (const void *)device);\n        fclose(f);\n    }\n\n    /* Preserve original conversions and control flow */\n    ldev = to_linux_device(device);\n    lbus = to_linux_bus(bus);\n\n    /* Log converted pointers and relevant function-pointer state */\n    f = fopen(\"/tmp/logs/303.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"Converted: ldev=%p lbus=%p ldev->ldrv=%p\\n\",\n                (const void *)ldev, (const void *)lbus,\n                (const void *)(ldev ? (void *)ldev->ldrv : NULL));\n        if (ldev && ldev->ldrv) {\n            /* Print the address of the dev_close callback for evidence */\n            fprintf(f, \"Callback: dev_close=%p\\n\",\n                    (const void *)((void *)ldev->ldrv->dev_close));\n        } else {\n            fprintf(f, \"Callback: dev_close=(null)\\n\");\n        }\n        /* Address of the device list node (as used by metal_list_del) */\n        fprintf(f, \"Device node address: %p\\n\", (const void *)&device->node);\n        fclose(f);\n    }\n\n    /* Call through to the underlying driver close (original behavior) */\n    ldev->ldrv->dev_close(lbus, ldev);\n\n    /* Log return from dev_close */\n    f = fopen(\"/tmp/logs/303.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"Returned from dev_close: ldev=%p\\n\", (const void *)ldev);\n        fclose(f);\n    }\n\n    /* Preserve original cleanup */\n    metal_list_del(&device->node);\n    free(ldev);\n\n    /* Final log to show that cleanup was performed */\n    f = fopen(\"/tmp/logs/303.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"EXIT metal_linux_dev_close: freed ldev=%p\\n\", (const void *)ldev);\n        fclose(f);\n    }\n}\n"
}