{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment is a macro invocation (for_each_linux_bus(lbus)). MISRA conformance cannot be determined without the macro expansion. If the macro expands to a simple compliant form (e.g. for (lbus = first_bus(); lbus != NULL; lbus = lbus->next)) it would satisfy Rule 14.2. However, it can violate Rule 14.2 if the expansion introduces side effects or extra loop counters. Example violating expansion: for (lbus = linux_bus_head; lbus != NULL && (++count, 1); lbus = lbus->next) \u2014 the second clause has a persistent side effect (++count), which violates clause 2. Another violating expansion: for (lbus = linux_bus_head, idx = 0; lbus != NULL; lbus = lbus->next, idx++) where idx is also modified in the loop body \u2014 multiple loop counters / modification in body violates clauses 1 and 4. The macro must be expanded and reviewed; as given, this fragment potentially violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/294.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "int metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\tFILE *f;\n\n\t/* Log entry and initial state */\n\tf = fopen(\"/tmp/logs/294.txt\", \"a\");\n\tif (f) {\n\t\tfprintf(f, \"metal_linux_bus_init: enter, initial valid=%d\\n\", valid);\n\t\tfclose(f);\n\t}\n\n\t/* Iterate over buses. Keep original logic but add probes to log control flow and state. */\n\tfor_each_linux_bus(lbus) {\n\t\tint probe_rc = metal_linux_probe_bus(lbus) ? 0 : 1; /* 1 means counted as valid device */\n\t\tvalid += probe_rc;\n\n\t\t/* Log per-iteration state: pointer, probe result and cumulative valid count */\n\t\tf = fopen(\"/tmp/logs/294.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"for_each_linux_bus: lbus=%p probe_rc=%d valid=%d\\n\", (void *)lbus, probe_rc, valid);\n\t\t\tfclose(f);\n\t\t}\n\t}\n\n\t/* Log exit state and return value */\n\tf = fopen(\"/tmp/logs/294.txt\", \"a\");\n\tif (f) {\n\t\tfprintf(f, \"metal_linux_bus_init: exit, final valid=%d, return=%d\\n\", valid, valid ? 0 : -ENODEV);\n\t\tfclose(f);\n\t}\n\n\treturn valid ? 0 : -ENODEV;\n}\n"
}