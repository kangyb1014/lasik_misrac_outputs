{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'lbus' is declared as 'struct linux_bus *lbus;' but is only used for read-only access in the loop (e.g. passed to metal_linux_probe_bus which does not modify the pointed-to object). In that case the pointer should be const-qualified ('const struct linux_bus *lbus;'), so the current code violates MISRA C 2023 Rule 8.13. If, however, the for_each_linux_bus macro or metal_linux_probe_bus actually modifies the pointed-to linux_bus objects, then const qualification would not be appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helpers: write logs to /tmp/logs/293.txt. */\nstatic void linux_bus_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/293.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Compare two snapshots and log a summary of differences (up to 16 diffs). */\nstatic void log_snapshot_diff(const unsigned char *before, const unsigned char *after, size_t sz)\n{\n    size_t diffs = 0;\n    const size_t max_report = 16;\n    char line[256];\n\n    for (size_t i = 0; i < sz; ++i) {\n        if (before[i] != after[i]) {\n            if (diffs < max_report) {\n                int n = snprintf(line, sizeof(line), \"  diff[%zu]: 0x%02x -> 0x%02x\", i, before[i], after[i]);\n                if (n > 0) {\n                    linux_bus_log(\"%s\", line);\n                }\n            }\n            ++diffs;\n        }\n    }\n    if (diffs == 0) {\n        linux_bus_log(\"  snapshot: no byte-level changes detected\");\n    } else {\n        linux_bus_log(\"  snapshot: total differing bytes: %zu (showing up to %zu)\", diffs, max_report);\n    }\n}\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n\n    /* Iterate through buses as in original code, but add probes to log state. */\n    for_each_linux_bus(lbus) {\n        /* Log entry to the loop with pointer value. */\n        linux_bus_log(\"ENTER_BUS_LOOP: lbus=%p\", (void *)lbus);\n\n        if (lbus != NULL) {\n            size_t sz = sizeof(*lbus);\n            unsigned char *before = (unsigned char *)malloc(sz);\n            unsigned char *after = (unsigned char *)malloc(sz);\n\n            if (before != NULL && after != NULL) {\n                memcpy(before, lbus, sz);\n\n                /* Call the original probe and capture its return value. */\n                int probe_ret = metal_linux_probe_bus(lbus);\n\n                /* Snapshot after the probe. */\n                memcpy(after, lbus, sz);\n\n                /* Log probe return and compare snapshots. */\n                linux_bus_log(\"AFTER_PROBE: lbus=%p probe_ret=%d\", (void *)lbus, probe_ret);\n                log_snapshot_diff(before, after, sz);\n\n                /* Preserve original accumulation logic. */\n                valid += probe_ret ? 0 : 1;\n\n                free(before);\n                free(after);\n            } else {\n                /* Fallback: if memory allocation fails, still call probe and log minimal info. */\n                if (before) free(before);\n                if (after) free(after);\n\n                int probe_ret = metal_linux_probe_bus(lbus);\n                linux_bus_log(\"AFTER_PROBE_NO_SNAPSHOT: lbus=%p probe_ret=%d (snapshot skipped)\", (void *)lbus, probe_ret);\n                valid += probe_ret ? 0 : 1;\n            }\n        } else {\n            /* If lbus is NULL (unlikely), still call probe to preserve behavior. */\n            int probe_ret = metal_linux_probe_bus(lbus);\n            linux_bus_log(\"AFTER_PROBE_NULL: lbus=(nil) probe_ret=%d\", probe_ret);\n            valid += probe_ret ? 0 : 1;\n        }\n    }\n\n    linux_bus_log(\"EXIT_BUS_INIT: valid=%d return=%d\", valid, (valid ? 0 : -ENODEV));\n    return valid ? 0 : -ENODEV;\n}\n"
}