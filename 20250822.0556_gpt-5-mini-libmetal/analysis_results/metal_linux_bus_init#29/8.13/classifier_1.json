{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor_each_linux_bus(lbus)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The local pointer 'lbus' is declared as 'struct linux_bus *lbus;' but is only used for read-only access in the loop (e.g. passed to metal_linux_probe_bus which does not modify the pointed-to object). In that case the pointer should be const-qualified ('const struct linux_bus *lbus;'), so the current code violates MISRA C 2023 Rule 8.13. If, however, the for_each_linux_bus macro or metal_linux_probe_bus actually modifies the pointed-to linux_bus objects, then const qualification would not be appropriate and there is no violation."
}