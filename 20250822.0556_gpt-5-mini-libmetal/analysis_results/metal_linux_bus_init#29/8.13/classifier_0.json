{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "In the fragment, lbus is declared as 'struct linux_bus *lbus' and passed to metal_linux_probe_bus(lbus). If metal_linux_probe_bus treats the pointed-to object as read-only (i.e., does not modify the struct), then the pointer should be const-qualified (e.g. 'const struct linux_bus *lbus' and the function prototype should accept 'const struct linux_bus *'). Because the code shows a non-const pointer being used where a const-qualified pointer would be appropriate, this violates Rule 8.13. (If, however, metal_linux_probe_bus legitimately modifies the object, no violation occurs \u2014 the fragment alone does not prove modification, so the violation is conditional on the function not modifying lbus.)"
}