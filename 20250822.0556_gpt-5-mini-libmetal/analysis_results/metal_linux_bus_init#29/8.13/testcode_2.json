{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer lbus is declared as a non-const pointer ('struct linux_bus *lbus;') although in this function it is only used for iteration and passed to metal_linux_probe_bus. If neither the for_each_linux_bus macro nor metal_linux_probe_bus require modifying the pointed-to object, then lbus should be declared as 'const struct linux_bus *lbus;' and the current declaration violates MISRA C 2023 Rule 8.13. (If for_each_linux_bus or metal_linux_probe_bus require a non-const pointer, then the non-const declaration is justified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "int metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\tFILE *log = fopen(\"/tmp/logs/293.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_bus_init: enter\\n\");\n\t\tfflush(log);\n\t}\n\n\tint iter = 0;\n\n\t/* Preserve original iteration logic; add probes around the probe call */\n\tfor_each_linux_bus(lbus) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"iteration %d: lbus=%p\\n\", iter, (void *)lbus);\n\t\t\tfflush(log);\n\t\t}\n\n\t\t/* Call once and record the return to avoid changing semantics */\n\t\tint rc = metal_linux_probe_bus(lbus);\n\n\t\tif (log) {\n\t\t\tfprintf(log, \"iteration %d: metal_linux_probe_bus returned %d\\n\", iter, rc);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tvalid += rc ? 0 : 1;\n\t\titer++;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"metal_linux_bus_init: exit valid=%d return=%d\\n\", valid, valid ? 0 : -ENODEV);\n\t\tfclose(log);\n\t}\n\n\treturn valid ? 0 : -ENODEV;\n}"
}