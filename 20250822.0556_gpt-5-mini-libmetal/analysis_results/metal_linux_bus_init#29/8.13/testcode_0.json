{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn the fragment, lbus is declared as 'struct linux_bus *lbus' and passed to metal_linux_probe_bus(lbus). If metal_linux_probe_bus treats the pointed-to object as read-only (i.e., does not modify the struct), then the pointer should be const-qualified (e.g. 'const struct linux_bus *lbus' and the function prototype should accept 'const struct linux_bus *'). Because the code shows a non-const pointer being used where a const-qualified pointer would be appropriate, this violates Rule 8.13. (If, however, metal_linux_probe_bus legitimately modifies the object, no violation occurs \u2014 the fragment alone does not prove modification, so the violation is conditional on the function not modifying lbus.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_init:\n```c\nint metal_linux_bus_init(void)\n{\n\tstruct linux_bus *lbus;\n\tint valid = 0;\n\n\tfor_each_linux_bus(lbus)\n\t\tvalid += metal_linux_probe_bus(lbus) ? 0 : 1;\n\n\treturn valid ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <time.h>\n\nint metal_linux_probe_bus(struct linux_bus *lbus); /* external */\nint for_each_linux_bus(struct linux_bus *lbus); /* placeholder if macro replaced by a function; real code will use the macro */\n\nint metal_linux_bus_init(void)\n{\n    struct linux_bus *lbus;\n    int valid = 0;\n    FILE *log = NULL;\n\n    /* Ensure log directory exists (ignore errors other than non-existence handling) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    log = fopen(\"/tmp/logs/293.txt\", \"a\");\n    if (log) {\n        time_t t = time(NULL);\n        fprintf(log, \"\\n=== metal_linux_bus_init start: %s\", ctime(&t));\n    }\n\n    /* Preserve original logic: iterate over buses and probe each */\n    for_each_linux_bus(lbus)\n    {\n        /* Log the control path and pointer state before the probe call */\n        if (log) {\n            fprintf(log, \"loop: lbus pointer = %p\\n\", (void *)lbus);\n        }\n\n        /* Call probe and capture its return value (preserve original call site) */\n        int ret = metal_linux_probe_bus(lbus);\n\n        /* Log probe return and decision used to update 'valid' */\n        if (log) {\n            fprintf(log, \"metal_linux_probe_bus(%p) returned %d\\n\", (void *)lbus, ret);\n        }\n\n        /* Original accumulation logic: if probe returns 0, increment valid */\n        valid += ret ? 0 : 1;\n\n        /* Log the updated valid count after this iteration */\n        if (log) {\n            fprintf(log, \"after iteration: valid = %d\\n\", valid);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"metal_linux_bus_init end: valid = %d, returning %d\\n\", valid, valid ? 0 : -ENODEV);\n        fclose(log);\n    }\n\n    return valid ? 0 : -ENODEV;\n}\n"
}