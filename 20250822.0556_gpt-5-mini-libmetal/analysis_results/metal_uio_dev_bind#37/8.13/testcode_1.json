{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct linux_driver *ldrv' is not const-qualified even though metal_uio_dev_bind only reads from the driver object (reads drv_name and sdrv) and does not modify it. Per MISRA C 2023 Rule 8.13 the pointer should be declared as 'const struct linux_driver *ldrv'. Note: 'ldev' must remain non-const because the function writes ldev->override.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n\n/* Probe helper: write diagnostic information to /tmp/logs/373.txt */\nstatic void metal_uio_log_state(const char *stage,\n                                struct linux_device *ldev,\n                                struct linux_driver *ldrv,\n                                struct sysfs_attribute *attr,\n                                int result)\n{\n    FILE *f = fopen(\"/tmp/logs/373.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Safely compute strings and pointers for logging */\n    const char *ldev_dev_name = \"(null)\";\n    const char *sdev_driver_name = \"(null)\";\n    const char *ldrv_drv_name = \"(null)\";\n    void *ldev_ptr = (void *)ldev;\n    void *ldrv_ptr = (void *)ldrv;\n    void *sdev_ptr = NULL;\n    void *sdrv_ptr = NULL;\n\n    if (ldev) {\n        if (ldev->dev_name) {\n            ldev_dev_name = ldev->dev_name;\n        }\n        if (ldev->sdev) {\n            sdev_ptr = (void *)ldev->sdev;\n            if (ldev->sdev->driver_name) {\n                sdev_driver_name = ldev->sdev->driver_name;\n            }\n        }\n    }\n\n    if (ldrv) {\n        if (ldrv->drv_name) {\n            ldrv_drv_name = ldrv->drv_name;\n        }\n        if (ldrv->sdrv) {\n            sdrv_ptr = (void *)ldrv->sdrv;\n        }\n    }\n\n    fprintf(f,\n            \"[metal_uio_dev_bind] stage=%s\\n\"\n            \"  ldev=%p, ldev->dev_name=%s, ldev->sdev=%p, ldev->sdev->driver_name=%s\\n\"\n            \"  ldrv=%p, ldrv->drv_name=%s, ldrv->sdrv=%p\\n\"\n            \"  attr=%p, result=%d, errno=%d\\n\",\n            stage,\n            ldev_ptr, ldev_dev_name, sdev_ptr, sdev_driver_name,\n            ldrv_ptr, ldrv_drv_name, sdrv_ptr,\n            (void *)attr, result, errno);\n\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log initial state */\n    metal_uio_log_state(\"entry\", ldev, ldrv, NULL, 0);\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        metal_uio_log_state(\"already_bound\", ldev, ldrv, NULL, 0);\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        metal_uio_log_state(\"device_in_use\", ldev, ldrv, NULL, 0);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    metal_uio_log_state(\"got_driver_override_attr\", ldev, ldrv, attr, 0);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        metal_uio_log_state(\"no_override_attr\", ldev, ldrv, attr, errno);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    metal_uio_log_state(\"wrote_driver_override\", ldev, ldrv, attr, result);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        metal_uio_log_state(\"failed_set_override\", ldev, ldrv, attr, errno);\n        return -errno;\n    }\n    ldev->override = attr;\n    metal_uio_log_state(\"set_ldev_override\", ldev, ldrv, attr, 0);\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    metal_uio_log_state(\"got_driver_bind_attr\", ldev, ldrv, attr, 0);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        metal_uio_log_state(\"driver_has_no_bind\", ldev, ldrv, attr, 0);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    metal_uio_log_state(\"wrote_driver_bind\", ldev, ldrv, attr, result);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        metal_uio_log_state(\"failed_bind\", ldev, ldrv, attr, errno);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    metal_uio_log_state(\"success\", ldev, ldrv, attr, 0);\n\n    return 0;\n}\n"
}