{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct sysfs_device::driver_name is declared without const (e.g. char *driver_name or char driver_name[]), then this is a violation of MISRA C 2023 Rule 8.13. The call strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) treats driver_name as read\u2011only, so it should be declared as const char * (or const char[]). Note: linux_driver->drv_name is already const char *, so ensure sysfs_device::driver_name is also const-qualified to avoid the rule violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "static void probe_log_state(struct linux_device *ldev,\n                                struct linux_driver *ldrv,\n                                const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/373.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"=== metal_uio_dev_bind probe: %s ===\\n\", stage);\n    fprintf(f, \"ldev=%p, ldrv=%p\\n\", (void *)ldev, (void *)ldrv);\n\n    if (ldev) {\n        fprintf(f, \"ldev->dev_name=%s\\n\",\n                ldev->dev_name ? ldev->dev_name : \"(null)\");\n        fprintf(f, \"ldev->override=%p\\n\", (void *)ldev->override);\n        if (ldev->sdev) {\n            fprintf(f, \"ldev->sdev=%p\\n\", (void *)ldev->sdev);\n            fprintf(f, \"sdev->driver_name=%s\\n\",\n                    ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n            if (ldev->sdev->driver_name)\n                fprintf(f, \"strlen(sdev->driver_name)=%zu\\n\",\n                        strlen(ldev->sdev->driver_name));\n        } else {\n            fprintf(f, \"ldev->sdev=(null)\\n\");\n        }\n    } else {\n        fprintf(f, \"ldev=(null)\\n\");\n    }\n\n    if (ldrv) {\n        fprintf(f, \"ldrv->drv_name=%s\\n\",\n                ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        if (ldrv->drv_name)\n            fprintf(f, \"strlen(ldrv->drv_name)=%zu\\n\",\n                    strlen(ldrv->drv_name));\n        fprintf(f, \"ldrv->sdrv=%p\\n\", (void *)ldrv->sdrv);\n    } else {\n        fprintf(f, \"ldrv=(null)\\n\");\n    }\n\n    if (ldev && ldev->sdev && ldev->sdev->driver_name && ldrv && ldrv->drv_name) {\n        int r1 = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n        int r2 = strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN);\n        fprintf(f, \"strcmp(sdev->driver_name, ldrv->drv_name)=%d\\n\", r1);\n        fprintf(f, \"strcmp(sdev->driver_name, SYSFS_UNKNOWN)=%d\\n\", r2);\n    } else {\n        fprintf(f, \"strcmp: insufficient data to compare\\n\");\n    }\n\n    fprintf(f, \"--- end probe (%s) ---\\n\\n\", stage);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Probe: entry */\n    probe_log_state(ldev, ldrv, \"entry\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        /* Probe: already bound to same driver */\n        probe_log_state(ldev, ldrv, \"already_bound_match\");\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        /* Probe: in use by other driver */\n        probe_log_state(ldev, ldrv, \"in_use_by_other_driver\");\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    /* Probe: before getting override attribute */\n    probe_log_state(ldev, ldrv, \"before_get_device_attr\");\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        /* Probe: no override attribute */\n        probe_log_state(ldev, ldrv, \"no_override_attr\");\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    /* Probe: got override attribute */\n    probe_log_state(ldev, ldrv, \"got_override_attr\");\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        /* Probe: failed to set override */\n        probe_log_state(ldev, ldrv, \"failed_set_override\");\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    /* Probe: after setting override */\n    probe_log_state(ldev, ldrv, \"after_set_override\");\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        /* Probe: driver has no bind */\n        probe_log_state(ldev, ldrv, \"driver_has_no_bind\");\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    /* Probe: before writing bind attribute */\n    probe_log_state(ldev, ldrv, \"before_write_bind_attr\");\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        /* Probe: failed to bind */\n        probe_log_state(ldev, ldrv, \"failed_bind_write\");\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    /* Probe: success */\n    probe_log_state(ldev, ldrv, \"success\");\n\n    return 0;\n}"
}