{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct sysfs_device::driver_name is declared as a non-const pointer (e.g. char *), this is a violation: the code only reads the string via strcmp, so the pointer should be const-qualified (const char *). Change driver_name to const char * to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/373.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/373.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Entry probe: log pointers and strings involved in the binding decision. */\n    probe_log(\"ENTRY: metal_uio_dev_bind called\");\n    probe_log(\"  ldev=%p, ldev->dev_name=%s\", (void *)ldev, ldev ? (ldev->dev_name ? ldev->dev_name : \"(null)\") : \"(null)\");\n    probe_log(\"  ldev->sdev=%p, sdev->driver_name_ptr=%p, sdev->driver_name_str=%s\",\n              ldev ? (void *)ldev->sdev : NULL,\n              ldev && ldev->sdev ? (void *)ldev->sdev->driver_name : NULL,\n              ldev && ldev->sdev && ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n    probe_log(\"  ldrv=%p, ldrv->drv_name_ptr=%p, ldrv->drv_name_str=%s\",\n              (void *)ldrv,\n              ldrv ? (void *)ldrv->drv_name : NULL,\n              ldrv && ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    /* First equality check between device's current driver and the candidate driver. */\n    {\n        int cmp = 0;\n        const char *dev_drv = NULL;\n        const char *cand_drv = NULL;\n\n        if (ldev && ldev->sdev)\n            dev_drv = ldev->sdev->driver_name;\n        if (ldrv)\n            cand_drv = ldrv->drv_name;\n\n        /* Safe-check strings for logging; do not alter original logic. */\n        if (dev_drv && cand_drv)\n            cmp = strcmp(dev_drv, cand_drv);\n        else if (!dev_drv && !cand_drv)\n            cmp = 0;\n        else\n            cmp = (dev_drv ? 1 : -1);\n\n        probe_log(\"  strcmp(dev->driver_name, ldrv->drv_name) -> %d\", cmp);\n\n        /* Preserve original behavior: call strcmp again as in original code path. */\n        if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n        {\n            probe_log(\"  decision: already bound to driver (return 0)\");\n            return 0;\n        }\n    }\n\n    /* Check whether the device driver_name is not the SYSFS_UNKNOWN marker. */\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"  device %s in use by driver %s (return -EBUSY)\",\n                  ldev->dev_name,\n                  ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    /* Attempt to get the override attribute for the device. */\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"  sysfs_get_device_attr(driver_override) returned attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"  device %s has no override (return -errno=%d)\", ldev->dev_name, errno);\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    /* Write the driver name into the override attribute. */\n    probe_log(\"  writing override: attr=%p, value=%s, len=%zu\",\n              (void *)attr,\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n              ldrv->drv_name ? strlen(ldrv->drv_name) : 0);\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"  sysfs_write_attribute returned %d, errno=%d\", result, errno);\n\n    if (result) {\n        probe_log(\"  failed to set override on %s (return -errno=%d)\", ldev->dev_name, errno);\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"  override attribute saved: ldev->override=%p\", (void *)ldev->override);\n\n    /* Get the driver's bind attribute. */\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"  sysfs_get_driver_attr(bind) returned attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"  driver %s has no bind (return -ENOTSUP)\", ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    /* Write the device name into the driver's bind attribute to trigger binding. */\n    probe_log(\"  writing bind: attr=%p, value=%s, len=%zu\",\n              (void *)attr,\n              ldev->dev_name ? ldev->dev_name : \"(null)\",\n              ldev->dev_name ? strlen(ldev->dev_name) : 0);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"  sysfs_write_attribute (bind) returned %d, errno=%d\", result, errno);\n\n    if (result) {\n        probe_log(\"  failed to bind %s to %s (return -errno=%d)\",\n                  ldev->dev_name, ldrv->drv_name ? ldrv->drv_name : \"(null)\", errno);\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"  success: bound device %s to driver %s (return 0)\",\n              ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}