{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe invocation metal_log(...) expands to a macro defined as: #define metal_log(level, fmt, __VA_ARGS__) ({ if(_metal.common.log_handler && level<=_metal.common.log_level) _metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__); }) \u2014 this uses the GCC statement-expression extension ({ ... }) and the GCC variadic macro token\u2011pasting '##__VA_ARGS__'. Those are compiler-specific language extensions documented as extensions in compiler manuals, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: write diagnostic logs to /tmp/logs/370.txt */\nstatic void metal_probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Entry probe: record input state */\n    metal_probe_log(\"ENTRY\", \"metal_uio_dev_bind entered: ldev=%p ldrv=%p dev_name=%s ldrv->drv_name=%s ldev->sdev->driver_name=%s\",\n                    (void *)ldev, (void *)ldrv,\n                    ldev && ldev->dev_name ? ldev->dev_name : \"(null)\",\n                    ldrv && ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n                    ldev && ldev->sdev && ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        metal_probe_log(\"PATH\", \"driver names equal -> early return 0 (device %s already bound to driver %s)\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\",\n                        ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        /* Log the fact that metal_log will be called and record state */\n        metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_INFO, ...) for device=%s current_driver=%s\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\",\n                        ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n\n        metal_probe_log(\"PATH\", \"device in use -> return -EBUSY (device=%s driver=%s)\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\",\n                        ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    metal_probe_log(\"STATE\", \"sysfs_get_device_attr(driver_override) returned attr=%p for device=%s\",\n                    (void *)attr, ldev->dev_name ? ldev->dev_name : \"(null)\");\n\n    if (!attr) {\n        metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_ERROR, ...) - no override for device=%s\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\");\n\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n\n        metal_probe_log(\"PATH\", \"no override -> return -errno (errno=%d)\", errno);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    metal_probe_log(\"STATE\", \"sysfs_write_attribute(driver_override) result=%d errno=%d for driver=%s\",\n                    result, errno, ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    if (result) {\n        metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_ERROR, ...) - failed to set override on device=%s\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\");\n\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n\n        metal_probe_log(\"PATH\", \"failed to set override -> return -errno (errno=%d)\", errno);\n        return -errno;\n    }\n    ldev->override = attr;\n    metal_probe_log(\"STATE\", \"override set: ldev->override=%p for device=%s\",\n                    (void *)ldev->override, ldev->dev_name ? ldev->dev_name : \"(null)\");\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    metal_probe_log(\"STATE\", \"sysfs_get_driver_attr(bind) returned attr=%p for driver=%s\",\n                    (void *)attr, ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    if (!attr) {\n        metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_ERROR, ...) - driver has no bind attribute for driver=%s\",\n                        ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\n        metal_probe_log(\"PATH\", \"no bind attribute -> return -ENOTSUP for driver=%s\",\n                        ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    metal_probe_log(\"STATE\", \"sysfs_write_attribute(bind) result=%d errno=%d binding device=%s to driver=%s\",\n                    result, errno,\n                    ldev->dev_name ? ldev->dev_name : \"(null)\",\n                    ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    if (result) {\n        metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_ERROR, ...) - failed to bind device=%s to driver=%s\",\n                        ldev->dev_name ? ldev->dev_name : \"(null)\",\n                        ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n\n        metal_probe_log(\"PATH\", \"failed to bind -> return -errno (errno=%d)\", errno);\n        return -errno;\n    }\n\n    metal_probe_log(\"BEFORE_METAL_LOG\", \"about to call metal_log(METAL_LOG_DEBUG, ...) - bound device=%s to driver=%s\",\n                    ldev->dev_name ? ldev->dev_name : \"(null)\",\n                    ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    metal_probe_log(\"EXIT\", \"metal_uio_dev_bind success -> return 0 for device=%s driver=%s\",\n                    ldev->dev_name ? ldev->dev_name : \"(null)\",\n                    ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    return 0;\n}\n"
}