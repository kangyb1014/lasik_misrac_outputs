{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_log uses the metal_log macro which is defined using GCC/Clang language extensions: a statement-expression ({ ... }) and the GNU variadic-comma elision token paste (##__VA_ARGS__). Both are explicit compiler extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper to log control flow and key state to /tmp/logs/370.txt */\nstatic void metal_uio_probe_log(const char *stage,\n                                struct linux_device *ldev,\n                                struct linux_driver *ldrv,\n                                int result,\n                                const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Safely print known fields if available */\n    const char *dev_name = \"(null)\";\n    const char *drv_name = \"(null)\";\n    const char *sdrv_name = \"(null)\";\n    const char *sdev_driver_name = \"(null)\";\n\n    if (ldev) {\n        if (ldev->dev_name)\n            dev_name = ldev->dev_name;\n        if (ldev->sdev && ldev->sdev->driver_name)\n            sdev_driver_name = ldev->sdev->driver_name;\n    }\n    if (ldrv) {\n        if (ldrv->drv_name)\n            drv_name = ldrv->drv_name;\n        if (ldrv->sdrv && ldrv->sdrv->name)\n            sdrv_name = ldrv->sdrv->name; /* fall back if different field name */\n        if (ldrv->sdrv && ldrv->sdrv->driver)\n            sdrv_name = ldrv->sdrv->driver; /* try another possible field */\n    }\n\n    fprintf(f, \"STAGE=%s result=%d note=%s\\n\", stage, result, note ? note : \"\");\n    fprintf(f, \"  ldev=%p dev_name=%s sdev_driver=%s\\n\", (void *)ldev, dev_name, sdev_driver_name);\n    fprintf(f, \"  ldrv=%p drv_name=%s sdrv_name=%s\\n\", (void *)ldrv, drv_name, sdrv_name);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    metal_uio_probe_log(\"entry\", ldev, ldrv, 0, \"entered metal_uio_dev_bind\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        metal_uio_probe_log(\"already_bound\", ldev, ldrv, 0, \"device already bound to this driver\");\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_uio_probe_log(\"device_in_use\", ldev, ldrv, -EBUSY, \"device in use by other driver\");\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_uio_probe_log(\"no_override_attr\", ldev, ldrv, -errno, \"driver_override attribute missing\");\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        metal_uio_probe_log(\"write_override_failed\", ldev, ldrv, -errno, \"failed to write driver_override\");\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n    metal_uio_probe_log(\"override_set\", ldev, ldrv, 0, \"driver_override set on device\");\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_uio_probe_log(\"no_bind_attr\", ldev, ldrv, -ENOTSUP, \"driver has no bind attribute\");\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        metal_uio_probe_log(\"write_bind_failed\", ldev, ldrv, -errno, \"failed to write bind attribute\");\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    metal_uio_probe_log(\"bind_success\", ldev, ldrv, 0, \"device successfully bound to driver\");\n\n    return 0;\n}\n"
}