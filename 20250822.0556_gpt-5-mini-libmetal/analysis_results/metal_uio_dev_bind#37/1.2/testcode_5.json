{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GNU/C compiler extensions: a GNU statement-expression '({ ... })' and the GNU variadic-macro comma-swallowing token paste '##__VA_ARGS__'. Both are explicitly documented GCC extensions and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: writes to /tmp/logs/370.txt and preserves errno. */\nstatic void probe_log(const char *fmt, ...)\n{\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f) {\n        errno = saved_errno;\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n    errno = saved_errno;\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry and key input fields (safe checks for NULL). */\n    probe_log(\"ENTER metal_uio_dev_bind: ldev=%p ldrv=%p dev_name=%s drv_name=%s sdev_driver=%s\",\n              (void *)ldev, (void *)ldrv,\n              (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n              (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\",\n              (ldev && ldev->sdev && ldev->sdev->driver_name) ? ldev->sdev->driver_name : \"(null)\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"PATH: already bound: sdev->driver_name == ldrv->drv_name (%s)\", ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"PATH: device in use: device %s in use by driver %s\",\n                  (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n                  (ldev && ldev->sdev && ldev->sdev->driver_name) ? ldev->sdev->driver_name : \"(null)\");\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"CALL: sysfs_get_device_attr returned attr=%p for device %s\",\n              (void *)attr, (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\");\n    if (!attr) {\n        int save_errno = errno;\n        probe_log(\"ERROR: device %s has no override; errno=%d\",\n                  (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\", save_errno);\n        return -save_errno;\n    }\n\n    probe_log(\"CALL: sysfs_write_attribute(attr=%p, value=%s, len=%zu)\",\n              (void *)attr,\n              (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\",\n              ldrv && ldrv->drv_name ? strlen(ldrv->drv_name) : 0);\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"RESULT: sysfs_write_attribute returned %d\", result);\n    if (result) {\n        int save_errno = errno;\n        probe_log(\"ERROR: failed to set override on %s; errno=%d\",\n                  (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\", save_errno);\n        return -save_errno;\n    }\n    ldev->override = attr;\n    probe_log(\"STATE: set ldev->override = %p\", (void *)attr);\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"CALL: sysfs_get_driver_attr returned attr=%p for driver %s\",\n              (void *)attr, (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\");\n    if (!attr) {\n        probe_log(\"ERROR: driver %s has no bind\",\n                  (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\");\n        return -ENOTSUP;\n    }\n\n    probe_log(\"CALL: sysfs_write_attribute(attr=%p, value=%s, len=%zu)\",\n              (void *)attr,\n              (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n              ldev && ldev->dev_name ? strlen(ldev->dev_name) : 0);\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"RESULT: sysfs_write_attribute returned %d\", result);\n    if (result) {\n        int save_errno = errno;\n        probe_log(\"ERROR: failed to bind %s to %s; errno=%d\",\n                  (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n                  (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\", save_errno);\n        return -save_errno;\n    }\n\n    probe_log(\"SUCCESS: bound device %s to driver %s\",\n              (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\",\n              (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\");\n\n    return 0;\n}\n"
}