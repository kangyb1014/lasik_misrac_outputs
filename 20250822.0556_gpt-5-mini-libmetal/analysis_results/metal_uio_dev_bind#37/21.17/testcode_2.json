{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ldev->dev_name is not a valid NUL-terminated C string (for example it is a fixed-size char buf[N] that has been filled completely without a terminating '\\0', or the pointer is invalid/NULL), then strlen(ldev->dev_name) will read past the bounds of the object. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/379.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Probe: entry and pointer state */\n    probe_logf(\"ENTER: metal_uio_dev_bind: ldev=%p, ldrv=%p, ldev->dev_name=%p, ldev->sdev=%p, ldrv->sdrv=%p\",\n               (void *)ldev, (void *)ldrv,\n               (void *)(ldev ? ldev->dev_name : (char *)0),\n               (void *)(ldev ? ldev->sdev : (void *)0),\n               (void *)(ldrv ? ldrv->sdrv : (void *)0));\n\n    /* Compare driver names: capture result and log it */\n    {\n        int cmp = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n        probe_logf(\"CMP driver_name: ldev->sdev->driver_name=%p, ldrv->drv_name=%p, strcmp=%d\",\n                   (void *)ldev->sdev->driver_name, (void *)ldrv->drv_name, cmp);\n        if (cmp == 0) {\n            probe_logf(\"PATH: already bound to this driver -> return 0\");\n            return 0;\n        }\n    }\n\n    {\n        int cmp2 = strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN);\n        probe_logf(\"CMP unknown: ldev->sdev->driver_name=%p, SYSFS_UNKNOWN=%p, strcmp=%d\",\n                   (void *)ldev->sdev->driver_name, (void *)SYSFS_UNKNOWN, cmp2);\n        if (cmp2 != 0) {\n            /* Log that device is in use (note: avoid printing ldev->dev_name as string here to not read past its bounds) */\n            probe_logf(\"PATH: device in use by another driver -> device_name_ptr=%p, using_driver_ptr=%p\",\n                       (void *)ldev->dev_name, (void *)ldev->sdev->driver_name);\n            metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                      ldev->dev_name, ldev->sdev->driver_name);\n            return -EBUSY;\n        }\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_logf(\"AFTER sysfs_get_device_attr(driver_override): attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_logf(\"ERROR: no override attr -> device_name_ptr=%p\", (void *)ldev->dev_name);\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    /* Log writing override: drv_name pointer and its length (driver name assumed NUL-terminated and valid) */\n    {\n        size_t drv_len = strlen(ldrv->drv_name);\n        probe_logf(\"CALL sysfs_write_attribute: attr=%p, drv_name_ptr=%p, drv_name_len=%zu\",\n                   (void *)attr, (void *)ldrv->drv_name, drv_len);\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        probe_logf(\"ERROR: failed to set override on device -> attr=%p, device_name_ptr=%p, errno=%d\",\n                   (void *)attr, (void *)ldev->dev_name, errno);\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_logf(\"AFTER sysfs_get_driver_attr(bind): attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_logf(\"ERROR: driver has no bind -> driver_name_ptr=%p\", (void *)ldrv->drv_name);\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    /* Probe before the potentially problematic strlen on ldev->dev_name:\n     * - record pointer value (address) but avoid reading the string content here to prevent\n     *   introducing new out-of-bounds accesses. The original code will call strlen below\n     *   (and that is the code path under investigation).\n     */\n    probe_logf(\"BEFORE bind write: about to call sysfs_write_attribute for bind: attr=%p, device_name_ptr=%p\",\n               (void *)attr, (void *)ldev->dev_name);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        probe_logf(\"ERROR: failed to bind -> device_name_ptr=%p, driver_name_ptr=%p, errno=%d\",\n                   (void *)ldev->dev_name, (void *)ldrv->drv_name, errno);\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    probe_logf(\"SUCCESS: bound device_ptr=%p to driver_ptr=%p\",\n               (void *)ldev->dev_name, (void *)ldrv->drv_name);\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}