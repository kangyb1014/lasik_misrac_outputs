{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(ldev->sdev->driver_name, ldrv->drv_name) without prior validation can read beyond object bounds if either pointer is NULL or not NUL-terminated. The code fragment contains no NULL checks or guarantees that driver_name and drv_name are valid, NUL-terminated strings; therefore if ldev->sdev, ldev->sdev->driver_name or ldrv->drv_name are NULL or point to non-terminated buffers, strcmp may overrun the objects and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/379.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/379.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Log a safe snapshot of pointers/state that may be involved in the strcmp calls.\n * This function avoids dereferencing pointers that may be NULL. It logs addresses\n * and whether key pointers are NULL, so callers can reproduce scenarios where\n * strcmp is invoked with unexpected pointer values. */\nstatic void probe_log_state(struct linux_device *ldev, struct linux_driver *ldrv)\n{\n    void *sdev_ptr = NULL;\n    void *sdev_driver_name_ptr = NULL;\n    void *ldev_dev_name_ptr = NULL;\n    void *ldrv_drv_name_ptr = NULL;\n\n    if (ldev)\n        ldev_dev_name_ptr = (void *)ldev->dev_name;\n\n    if (ldev)\n        sdev_ptr = (void *)ldev->sdev;\n\n    /* Only access sdev->driver_name if sdev_ptr is non-NULL to avoid deref of NULL. */\n    if (sdev_ptr) {\n        sdev_driver_name_ptr = (void *)ldev->sdev->driver_name;\n    }\n\n    if (ldrv)\n        ldrv_drv_name_ptr = (void *)ldrv->drv_name;\n\n    probe_log(\"[probe] metal_uio_dev_bind called: ldev=%p, ldrv=%p\", (void *)ldev, (void *)ldrv);\n    probe_log(\"[probe] ldev->dev_name=%p, ldev->sdev=%p, sdev->driver_name=%p, ldrv->drv_name=%p\",\n              ldev_dev_name_ptr, sdev_ptr, sdev_driver_name_ptr, ldrv_drv_name_ptr);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n    int cmp;\n\n    /* Log entry and pointer state before performing the strcmp that may trigger the violation. */\n    probe_log_state(ldev, ldrv);\n\n    /* Preserve original logic: call strcmp once, capture result, log it, and use it. */\n    cmp = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n    probe_log(\"[probe] strcmp(ldev->sdev->driver_name, ldrv->drv_name) -> %d\", cmp);\n    if (cmp == 0)\n        return 0;\n\n    cmp = strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN);\n    probe_log(\"[probe] strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) -> %d\", cmp);\n    if (cmp != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        probe_log(\"[probe] device %s in use by driver %s\", ldev->dev_name,\n                  ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"[probe] device %s has no override\", ldev->dev_name);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"[probe] failed to set override on %s (result=%d)\", ldev->dev_name, result);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"[probe] driver %s has no bind\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"[probe] failed to bind %s to %s (result=%d)\",\n                  ldev->dev_name, ldrv->drv_name, result);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"[probe] bound device %s to driver %s\", ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}