{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ldrv->drv_name is not guaranteed to be a NUL-terminated C string, the call to strlen(ldrv->drv_name) can read past the end of the object (e.g. char drv_name[4] = {'a','b','c','d'}; strlen will scan beyond the 4 bytes until a '\\0' is found), causing out-of-bounds access. Therefore this use of strlen can violate MISRA C 2023 Rule 21.17 when drv_name is not null\u2011terminated (or its lifetime/size is not sufficient).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/379.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/379.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entrance and pointer values (avoid deref if sdev is NULL) */\n    probe_log(\"ENTER metal_uio_dev_bind: ldev=%p ldrv=%p\", (void *)ldev, (void *)ldrv);\n    probe_log(\"ldev->sdev=%p\", (void *)(ldev ? ldev->sdev : NULL));\n    probe_log(\"ldev->dev_name=%p ldrv->drv_name=%p\",\n              (void *)(ldev ? ldev->dev_name : NULL), (void *)(ldrv ? ldrv->drv_name : NULL));\n\n    /* Preserve original logic but capture strcmp results for tracing */\n    if (ldev && ldev->sdev && ldrv) {\n        int cmp_drv = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n        probe_log(\"strcmp(ldev->sdev->driver_name, ldrv->drv_name) => %d (driver_name_ptr=%p, drv_name_ptr=%p)\",\n                  cmp_drv, (void *)ldev->sdev->driver_name, (void *)ldrv->drv_name);\n        if (cmp_drv == 0)\n            return 0;\n\n        int cmp_unknown = strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN);\n        probe_log(\"strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) => %d (driver_name_ptr=%p)\",\n                  cmp_unknown, (void *)ldev->sdev->driver_name);\n        if (cmp_unknown != 0) {\n            metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                      ldev->dev_name, ldev->sdev->driver_name);\n            probe_log(\"DEVICE IN USE: device=%p driver_name=%p\", (void *)ldev->dev_name,\n                      (void *)ldev->sdev->driver_name);\n            return -EBUSY;\n        }\n    } else {\n        /* If any of the pointers are NULL, log and let original logic handle subsequent NULL derefs as before */\n        probe_log(\"NULL pointer detected: ldev=%p ldev->sdev=%p ldrv=%p\", (void *)ldev, (void *)(ldev ? ldev->sdev : NULL), (void *)ldrv);\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"sysfs_get_device_attr(driver_override) => attr=%p\", (void *)attr);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"ERROR: device %p has no override (dev_name_ptr=%p)\", (void *)ldev, (void *)ldev->dev_name);\n        return -errno;\n    }\n\n    /* Capture length returned by strlen (this replicates the original call that can read until a NUL) */\n    size_t drv_name_len = 0;\n    if (ldrv && ldrv->drv_name) {\n        drv_name_len = strlen(ldrv->drv_name);\n        probe_log(\"strlen(ldrv->drv_name) => %zu (drv_name_ptr=%p)\", drv_name_len, (void *)ldrv->drv_name);\n    } else {\n        probe_log(\"drv_name is NULL\");\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   drv_name_len);\n    probe_log(\"sysfs_write_attribute(driver_override) => result=%d\", result);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"ERROR: failed to set override on device %p (dev_name_ptr=%p)\", (void *)ldev, (void *)ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"sysfs_get_driver_attr(bind) => attr=%p\", (void *)attr);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"ERROR: driver %p has no bind (drv_name_ptr=%p)\", (void *)ldrv, (void *)ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    size_t dev_name_len = 0;\n    if (ldev && ldev->dev_name) {\n        dev_name_len = strlen(ldev->dev_name);\n        probe_log(\"strlen(ldev->dev_name) => %zu (dev_name_ptr=%p)\", dev_name_len, (void *)ldev->dev_name);\n    } else {\n        probe_log(\"dev_name is NULL\");\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   dev_name_len);\n    probe_log(\"sysfs_write_attribute(bind) => result=%d\", result);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"ERROR: failed to bind device_ptr=%p to driver_ptr=%p\", (void *)ldev->dev_name, (void *)ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"SUCCESS: bound device_ptr=%p to driver_ptr=%p\", (void *)ldev->dev_name, (void *)ldrv->drv_name);\n\n    return 0;\n}\n"
}