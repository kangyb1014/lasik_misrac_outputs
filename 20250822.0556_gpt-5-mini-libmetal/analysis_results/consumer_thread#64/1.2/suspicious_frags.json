{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of consumer_thread:\n```c\nstatic void *consumer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (!counter)\n\t\tmetal_condition_wait(&nempty_condv, &lock);\n\tcounter--;\n\tmetal_condition_signal(&nfull_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function consumer_thread:\nint metal_condition_wait(struct metal_condition *cv,\n\t\t\t\t       metal_mutex_t *m)\n{\n\tuintptr_t tmpmptr = 0, mptr = (uintptr_t)m;\n\tint v = 0;\n\n\t/* Check if the mutex has been acquired */\n\tif (!cv || !m || !metal_mutex_is_acquired(m))\n\t\treturn -EINVAL;\n\n\tif (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {\n\t\tif (tmpmptr != mptr)\n\t\t\treturn -EINVAL;\n\t}\n\n\tv = atomic_load(&cv->wakeups);\n\tatomic_fetch_add(&cv->waiters, 1);\n\n\t/* Release the mutex before sleeping. */\n\tmetal_mutex_release(m);\n\tsyscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);\n\tatomic_fetch_sub(&cv->waiters, 1);\n\t/* Acquire the mutex after it's waken up. */\n\tmetal_mutex_acquire(m);\n\n\treturn 0;\n}\n...\nMETAL_MUTEX_DEFINE(lock)\n...\nstatic struct metal_condition nempty_condv = METAL_CONDITION_INIT\n...\nstatic struct metal_condition nfull_condv = METAL_CONDITION_INIT\n...\nstatic unsigned int counter\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static struct metal_condition nempty_condv = METAL_CONDITION_INIT",
    "v = atomic_load(&cv->wakeups);",
    "atomic_fetch_add(&cv->waiters, 1);",
    "syscall(SYS_futex, &cv->wakeups, FUTEX_WAIT, v, NULL, NULL, 0);",
    "uintptr_t tmpmptr = 0, mptr = (uintptr_t)m;",
    "atomic_fetch_sub(&cv->waiters, 1);",
    "METAL_MUTEX_DEFINE(lock)",
    "static struct metal_condition nfull_condv = METAL_CONDITION_INIT",
    "if (!atomic_compare_exchange_strong(&cv->mptr, &tmpmptr, mptr)) {"
  ],
  "explanation": "I inspected the provided consumer_thread and related snippets for compiler/language extensions that are explicitly documented as extensions (e.g. __attribute__, __asm__, typeof, statement-expressions, nested functions, GCC builtins with __builtin_/__extension__, or other vendor-specific tokens). None of those explicit compiler-extension tokens appear directly in the visible code. Many other constructs (thread-start signature, uintptr_t, NULL, casts, standard function-style calls) are standard ISO C or common POSIX/library APIs and do not by themselves indicate a compiler language extension.\n\nThe fragments reported above are flagged because they are macro invocations, system-call usage, or atomic operations whose actual definitions/implementations are not shown in the snippet; those definitions may hide compiler-specific extensions (for example macros that expand to attributes, inline assembly, or compiler intrinsics). Thus those fragments should be investigated further to confirm whether the underlying definitions rely on language/compiler extensions. All other visible code uses standard language constructs and library calls, so they do not require investigation for Rule 1.2 based on the provided snippets."
}