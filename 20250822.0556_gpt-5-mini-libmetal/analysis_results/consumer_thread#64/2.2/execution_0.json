{
  "result": "success",
  "message": "consumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: lock acquired\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: lock acquired\nconsumer_thread: counter==0, waiting on nempty_condv\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=2\nconsumer_thread: decremented counter to 1\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: woke from wait, counter=1\nconsumer_thread: decremented counter to 0\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: lock acquired\nconsumer_thread: decremented counter to 9\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: lock acquired\nconsumer_thread: decremented counter to 8\nconsumer_thread: signaled nfull_condv\nconsumer_thread: released lock, exiting\nconsumer_thread: entered, (void)arg executed, arg=(nil)\nconsumer_thread: attempting to acquire lock\nconsumer_thread: lock ac"
}