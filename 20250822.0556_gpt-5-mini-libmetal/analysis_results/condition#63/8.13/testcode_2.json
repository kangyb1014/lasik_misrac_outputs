{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses an explicit cast to (void *)tids, passing a non-const void * for the thread-id array. If metal_finish_threads only reads tids (which is likely), the parameter should be const-qualified (e.g. const pthread_t * or const void *), and the call should pass a const pointer (or simply tids without an unnecessary cast). Thus the use of (void *)tids (non-const) violates the intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified condition code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of condition as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of condition:\n```c\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified condition code.\n",
  "test_code": "static void probe_log_pre(const char *label, const pthread_t *tids, int count, int ts_created, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[PRE] %s: count=%d, ts_created=%d, ret=%d, tids_addr=%p, sizeof(pthread_t)=%zu\\n\",\n            label, count, ts_created, ret, (const void *)tids, sizeof(pthread_t));\n\n    for (int i = 0; i < count; ++i) {\n        const unsigned char *p = (const unsigned char *)&tids[i];\n        size_t n = sizeof(pthread_t);\n        if (n > 16U) {\n            n = 16U; /* limit printed bytes for readability */\n        }\n        fprintf(f, \"  tid[%d] addr=%p bytes=\", i, (const void *)&tids[i]);\n        for (size_t b = 0; b < n; ++b) {\n            fprintf(f, \"%02x\", (unsigned)p[b]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_post(const char *label, const pthread_t *tids, int count, int ts_created, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[POST] %s: count=%d, ts_created=%d, ret=%d, tids_addr=%p\\n\",\n            label, count, ts_created, ret, (const void *)tids);\n    fflush(f);\n    fclose(f);\n}\n\nstatic int condition(void)\n{\n    int ret;\n    int ts_created;\n    pthread_t tids[THREADS];\n\n    /** TC1 consumer threads go first */\n    /** create 10 consumer threads first */\n    ret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n                &ts_created);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n              ret);\n        goto out;\n    }\n\n    /** create 10 producer threads next */\n    ret = metal_run(THREADS, producer_thread, NULL);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n              ret);\n        goto out;\n    }\n\n    /** wait for consumer threads to finish */\n    /* Probe before calling metal_finish_threads to capture the fact that\n     * the call passes a non-const cast (void *)tids. We pass tids as const\n     * to the probe to avoid introducing new pointer-to-non-const usage. */\n    probe_log_pre(\"TC1_before_finish\", (const pthread_t *)tids, THREADS, ts_created, ret);\n    metal_finish_threads(THREADS, (void *)tids);\n    probe_log_post(\"TC1_after_finish\", (const pthread_t *)tids, THREADS, ts_created, ret);\n\n    /** TC2 producer threads go first */\n    /** create 10 producer threads first */\n    ret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n                &ts_created);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n              ret);\n        goto out;\n    }\n\n    /** create 10 consumer threads next */\n    ret = metal_run(THREADS, consumer_thread, NULL);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n              ret);\n        goto out;\n    }\n\nout:\n    /** wait for producer threads to finish */\n    probe_log_pre(\"FINAL_before_finish\", (const pthread_t *)tids, THREADS, ts_created, ret);\n    metal_finish_threads(THREADS, (void *)tids);\n    probe_log_post(\"FINAL_after_finish\", (const pthread_t *)tids, THREADS, ts_created, ret);\n    return ret;\n}\n"
}