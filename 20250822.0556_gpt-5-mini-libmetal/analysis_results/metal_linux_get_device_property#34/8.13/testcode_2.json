{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression ldev->sdev->path is passed as a read-only string. If sdev->path is declared as a non-const char * (e.g. char *path;) then this is a violation: the pointer should be declared as const char * since it is only used for reading (snprintf does not modify the source string). Note: property_name is already const char * (OK) and the local path array is a destination buffer (not subject to 8.13).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_get_device_property code that contains useful probe functions that print useful logs to a file \"/tmp/logs/343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_get_device_property as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_get_device_property:\n```c\nint metal_linux_get_device_property(struct metal_device *device,\n\t\t\t\t    const char *property_name,\n\t\t\t\t    void *output, int len)\n{\n\tint fd = 0;\n\tint status = 0;\n\tconst int flags = O_RDONLY;\n\tconst int mode = S_IRUSR | S_IRGRP | S_IROTH;\n\tstruct linux_device *ldev = to_linux_device(device);\n\tchar path[PATH_MAX];\n\n\tsnprintf(path, sizeof(path), \"%s/of_node/%s\",\n\t\t\t ldev->sdev->path, property_name);\n\tfd = open(path, flags, mode);\n\tif (fd < 0)\n\t\treturn -errno;\n\tif (read(fd, output, len) < 0) {\n\t\tstatus = -errno;\n\t\tclose(fd);\n\t\treturn status;\n\t}\n\n\tstatus = close(fd);\n\treturn status < 0 ? -errno : 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_get_device_property code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <unistd.h>\n#include <string.h>\n#include <limits.h>\n#include <sys/stat.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/343.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/343.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_linux_get_device_property(struct metal_device *device,\n                                    const char *property_name,\n                                    void *output, int len)\n{\n    int fd = 0;\n    int status = 0;\n    const int flags = O_RDONLY;\n    const int mode = S_IRUSR | S_IRGRP | S_IROTH;\n    struct linux_device *ldev = to_linux_device(device);\n    char path[PATH_MAX];\n\n    /* Log entry and relevant pointers/state before snprintf */\n    probe_log(\"ENTER metal_linux_get_device_property: device=%p, ldev=%p, property_name=%p (%s)\",\n              (void *)device, (void *)ldev,\n              (void *)property_name, property_name ? property_name : \"(null)\");\n\n    if (ldev) {\n        /* Attempt to log sdev and its path; don't dereference if NULL */\n        probe_log(\"ldev=%p, ldev->sdev=%p\", (void *)ldev, (void *)ldev->sdev);\n        if (ldev->sdev) {\n            probe_log(\"ldev->sdev->path pointer=%p, content='%s'\",\n                      (void *)ldev->sdev->path,\n                      ldev->sdev->path ? ldev->sdev->path : \"(null)\");\n        }\n    }\n\n    /* Construct the path as in original logic, but log both inputs and result */\n    probe_log(\"about to snprintf path buffer (size=%zu)\", sizeof(path));\n    snprintf(path, sizeof(path), \"%s/of_node/%s\",\n             ldev->sdev->path, property_name);\n    probe_log(\"constructed path='%s'\", path);\n\n    probe_log(\"calling open(path, flags=0x%x, mode=0%o)\", flags, mode);\n    fd = open(path, flags, mode);\n    probe_log(\"open returned fd=%d, errno=%d (%s)\", fd, errno, strerror(errno));\n\n    if (fd < 0) {\n        /* Log and return exactly as original code */\n        probe_log(\"open failed, returning -errno (%d)\", -errno);\n        return -errno;\n    }\n\n    probe_log(\"calling read(fd=%d, output=%p, len=%d)\", fd, output, len);\n    ssize_t r = read(fd, output, len);\n    probe_log(\"read returned=%zd, errno=%d (%s)\", r, errno, strerror(errno));\n    if (r < 0) {\n        status = -errno;\n        probe_log(\"read failed, status=%d; closing fd=%d\", status, fd);\n        close(fd);\n        probe_log(\"fd %d closed after read failure\", fd);\n        return status;\n    }\n\n    status = close(fd);\n    probe_log(\"close returned=%d, errno=%d (%s)\", status, errno, strerror(errno));\n    probe_log(\"EXIT metal_linux_get_device_property returning %d\", status < 0 ? -errno : 0);\n    return status < 0 ? -errno : 0;\n}\n"
}