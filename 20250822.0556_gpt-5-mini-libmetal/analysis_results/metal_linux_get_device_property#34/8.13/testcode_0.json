{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'ldev' is declared as 'struct linux_device *' but is only used for read-only access (e.g. ldev->sdev->path passed to snprintf). Since the pointer could point to a const-qualified type, it should be declared as 'const struct linux_device *ldev' to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_get_device_property code that contains useful probe functions that print useful logs to a file \"/tmp/logs/343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_get_device_property as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_get_device_property:\n```c\nint metal_linux_get_device_property(struct metal_device *device,\n\t\t\t\t    const char *property_name,\n\t\t\t\t    void *output, int len)\n{\n\tint fd = 0;\n\tint status = 0;\n\tconst int flags = O_RDONLY;\n\tconst int mode = S_IRUSR | S_IRGRP | S_IROTH;\n\tstruct linux_device *ldev = to_linux_device(device);\n\tchar path[PATH_MAX];\n\n\tsnprintf(path, sizeof(path), \"%s/of_node/%s\",\n\t\t\t ldev->sdev->path, property_name);\n\tfd = open(path, flags, mode);\n\tif (fd < 0)\n\t\treturn -errno;\n\tif (read(fd, output, len) < 0) {\n\t\tstatus = -errno;\n\t\tclose(fd);\n\t\treturn status;\n\t}\n\n\tstatus = close(fd);\n\treturn status < 0 ? -errno : 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_get_device_property code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <limits.h>\n#include <string.h>\n#include <sys/types.h>\n\n/* Probe logger: append textual trace information to /tmp/logs/343.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/343.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_linux_get_device_property(struct metal_device *device,\n                                    const char *property_name,\n                                    void *output, int len)\n{\n    int fd = 0;\n    int status = 0;\n    const int flags = O_RDONLY;\n    const int mode = S_IRUSR | S_IRGRP | S_IROTH;\n    struct linux_device *ldev = to_linux_device(device);\n    char path[PATH_MAX];\n\n    probe_log(\"ENTER metal_linux_get_device_property: device=%p, property_name=%s, output=%p, len=%d\",\n              (void *)device, property_name ? property_name : \"(null)\", output, len);\n    probe_log(\"to_linux_device returned ldev=%p\", (void *)ldev);\n\n    /* Log sdev and path information safely (avoid dereferencing NULL) */\n    probe_log(\"ldev->sdev=%p, sdev->path=%s\",\n              (void *)(ldev ? ldev->sdev : NULL),\n              (ldev && ldev->sdev && ldev->sdev->path) ? ldev->sdev->path : \"(null)\");\n\n    snprintf(path, sizeof(path), \"%s/of_node/%s\",\n             (ldev && ldev->sdev && ldev->sdev->path) ? ldev->sdev->path : \"\",\n             property_name ? property_name : \"\");\n\n    probe_log(\"constructed path=\\\"%s\\\"\", path);\n\n    fd = open(path, flags, mode);\n    probe_log(\"open('%s') -> fd=%d, errno=%d\", path, fd, errno);\n    if (fd < 0) {\n        int ret = -errno;\n        probe_log(\"open failed, returning %d\", ret);\n        return ret;\n    }\n\n    ssize_t r = read(fd, output, len);\n    if (r < 0) {\n        status = -errno;\n        probe_log(\"read(fd=%d) failed: r=%zd, errno=%d, status=%d\", fd, r, errno, status);\n        close(fd);\n        probe_log(\"closed fd=%d after read error\", fd);\n        probe_log(\"returning %d\", status);\n        return status;\n    }\n\n    probe_log(\"read(fd=%d) returned %zd bytes\", fd, r);\n\n    status = close(fd);\n    probe_log(\"close(fd=%d) returned %d, errno=%d\", fd, status, errno);\n\n    {\n        int ret = status < 0 ? -errno : 0;\n        probe_log(\"EXIT metal_linux_get_device_property: returning %d\", ret);\n        return ret;\n    }\n}\n"
}