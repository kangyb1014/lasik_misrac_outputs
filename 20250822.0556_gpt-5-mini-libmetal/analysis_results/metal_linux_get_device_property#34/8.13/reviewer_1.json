{
  "user_message": "An agent A claimed that the following metal_linux_get_device_property code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_linux_get_device_property.\n```c\nint metal_linux_get_device_property(struct metal_device *device,\n\t\t\t\t    const char *property_name,\n\t\t\t\t    void *output, int len)\n{\n\tint fd = 0;\n\tint status = 0;\n\tconst int flags = O_RDONLY;\n\tconst int mode = S_IRUSR | S_IRGRP | S_IROTH;\n\tstruct linux_device *ldev = to_linux_device(device);\n\tchar path[PATH_MAX];\n\n\tsnprintf(path, sizeof(path), \"%s/of_node/%s\",\n\t\t\t ldev->sdev->path, property_name);\n\tfd = open(path, flags, mode);\n\tif (fd < 0)\n\t\treturn -errno;\n\tif (read(fd, output, len) < 0) {\n\t\tstatus = -errno;\n\t\tclose(fd);\n\t\treturn status;\n\t}\n\n\tstatus = close(fd);\n\treturn status < 0 ? -errno : 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'device' is declared as 'struct metal_device *device' but in the function body it is only read (to_linux_device(device) and reading ldev->sdev->path for snprintf). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. 'property_name' is already const and 'output' must remain non-const (it is written into), so the violation is that 'device' should be declared as 'const struct metal_device *device' (or otherwise use a const-correct accessor).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in principle. In metal_linux_get_device_property the pointer parameter device is not modified by the function (it is only used to obtain ldev and read ldev->sdev->path), so per MISRA C 2023 Rule 8.13 the pointer type should be const-qualified when possible (e.g. const struct metal_device *device). That would make the API const-correct and satisfy the rule.\n\nOne caveat: you cannot unilaterally change this function signature if called code or the helper to_linux_device() requires a non-const pointer. If to_linux_device is declared to take a non-const struct metal_device *, then either that helper must be updated to accept a const pointer (and any code it affects adjusted), or a documented deviation from Rule 8.13 is needed. But the code as shown does violate Rule 8.13 unless there is an API-level reason preventing const-qualification of device."
}