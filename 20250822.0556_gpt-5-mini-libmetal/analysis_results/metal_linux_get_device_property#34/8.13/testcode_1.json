{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'device' is declared as 'struct metal_device *device' but in the function body it is only read (to_linux_device(device) and reading ldev->sdev->path for snprintf). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. 'property_name' is already const and 'output' must remain non-const (it is written into), so the violation is that 'device' should be declared as 'const struct metal_device *device' (or otherwise use a const-correct accessor).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_get_device_property code that contains useful probe functions that print useful logs to a file \"/tmp/logs/343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_get_device_property as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_get_device_property:\n```c\nint metal_linux_get_device_property(struct metal_device *device,\n\t\t\t\t    const char *property_name,\n\t\t\t\t    void *output, int len)\n{\n\tint fd = 0;\n\tint status = 0;\n\tconst int flags = O_RDONLY;\n\tconst int mode = S_IRUSR | S_IRGRP | S_IROTH;\n\tstruct linux_device *ldev = to_linux_device(device);\n\tchar path[PATH_MAX];\n\n\tsnprintf(path, sizeof(path), \"%s/of_node/%s\",\n\t\t\t ldev->sdev->path, property_name);\n\tfd = open(path, flags, mode);\n\tif (fd < 0)\n\t\treturn -errno;\n\tif (read(fd, output, len) < 0) {\n\t\tstatus = -errno;\n\t\tclose(fd);\n\t\treturn status;\n\t}\n\n\tstatus = close(fd);\n\treturn status < 0 ? -errno : 0;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_get_device_property code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <unistd.h>\n#include <limits.h>\n#include <sys/stat.h>\n#include <string.h>\n#include <sys/types.h>\n\n/* Probe helper: append textual log entries to /tmp/logs/343.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/343.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_linux_get_device_property(struct metal_device *device,\n                                    const char *property_name,\n                                    void *output, int len)\n{\n    int fd = 0;\n    int status = 0;\n    const int flags = O_RDONLY;\n    const int mode = S_IRUSR | S_IRGRP | S_IROTH;\n    struct linux_device *ldev = to_linux_device(device);\n    char path[PATH_MAX];\n\n    /* Entry probe: record input pointers and parameters */\n    probe_log(\"ENTRY: metal_linux_get_device_property device=%p property_name=%s output=%p len=%d\",\n              (void *)device, property_name ? property_name : \"(null)\", output, len);\n\n    /* Build the path and log it */\n    snprintf(path, sizeof(path), \"%s/of_node/%s\",\n             ldev->sdev->path, property_name);\n    probe_log(\"BUILT PATH: %s\", path);\n\n    probe_log(\"OPEN: path=%s flags=%d mode=%o\", path, flags, mode);\n\n    fd = open(path, flags, mode);\n    if (fd < 0) {\n        int saved_errno = errno; /* capture errno before any logging that may change it */\n        probe_log(\"OPEN FAILED: fd=%d errno=%d (%s)\", fd, saved_errno, strerror(saved_errno));\n        return -saved_errno;\n    }\n\n    /* Attempt to read and log result */\n    ssize_t bytes_read = read(fd, output, len);\n    if (bytes_read < 0) {\n        int saved_errno = errno; /* capture errno before logging */\n        probe_log(\"READ FAILED: bytes_read=%zd errno=%d (%s) fd=%d\", bytes_read, saved_errno, strerror(saved_errno), fd);\n        status = -saved_errno;\n        if (close(fd) < 0) {\n            int cerr = errno;\n            probe_log(\"CLOSE AFTER READ FAILED: fd=%d close_errno=%d (%s)\", fd, cerr, strerror(cerr));\n        } else {\n            probe_log(\"CLOSED AFTER READ FAILED: fd=%d\", fd);\n        }\n        return status;\n    }\n\n    probe_log(\"READ OK: bytes_read=%zd fd=%d\", bytes_read, fd);\n\n    status = close(fd);\n    if (status < 0) {\n        int saved_errno = errno; /* capture errno before logging */\n        probe_log(\"CLOSE FAILED: fd=%d close_status=%d errno=%d (%s)\", fd, status, saved_errno, strerror(saved_errno));\n        return -saved_errno;\n    }\n\n    probe_log(\"RETURN OK: status=0\");\n    return 0;\n}\n"
}