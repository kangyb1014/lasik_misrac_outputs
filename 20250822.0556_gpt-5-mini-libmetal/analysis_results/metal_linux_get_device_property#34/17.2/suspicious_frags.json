{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_linux_get_device_property:\n```c\nint metal_linux_get_device_property(struct metal_device *device,\n\t\t\t\t    const char *property_name,\n\t\t\t\t    void *output, int len)\n{\n\tint fd = 0;\n\tint status = 0;\n\tconst int flags = O_RDONLY;\n\tconst int mode = S_IRUSR | S_IRGRP | S_IROTH;\n\tstruct linux_device *ldev = to_linux_device(device);\n\tchar path[PATH_MAX];\n\n\tsnprintf(path, sizeof(path), \"%s/of_node/%s\",\n\t\t\t ldev->sdev->path, property_name);\n\tfd = open(path, flags, mode);\n\tif (fd < 0)\n\t\treturn -errno;\n\tif (read(fd, output, len) < 0) {\n\t\tstatus = -errno;\n\t\tclose(fd);\n\t\treturn status;\n\t}\n\n\tstatus = close(fd);\n\treturn status < 0 ? -errno : 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_linux_get_device_property:\nstatic struct linux_device *to_linux_device(struct metal_device *device)\n{\n\treturn metal_container_of(device, struct linux_device, device);\n}\n...\nstatic void metal_linux_dev_close(struct metal_bus *bus,\n\t\t\t\t  struct metal_device *device)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_close(lbus, ldev);\n\tmetal_list_del(&device->node);\n\tfree(ldev);\n}\n...\nstatic void metal_linux_dev_irq_ack(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     int irq)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_irq_ack(lbus, ldev, irq);\n}\n...\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t       nents_in, sg_out);\n}\n...\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t      struct metal_device *device,\n\t\t\t\t      uint32_t dir,\n\t\t\t\t      struct metal_sg *sg,\n\t\t\t\t      int nents)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n\t\t\t\t       nents);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n                      struct metal_device *device,\n                      uint32_t dir,\n                      struct metal_sg *sg,\n                      int nents)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    ldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n                       nents);\n}",
    "static int metal_linux_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    return ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n                       nents_in, sg_out);\n}",
    "static void metal_linux_dev_irq_ack(struct metal_bus *bus,\n                             struct metal_device *device,\n                             int irq)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    return ldev->ldrv->dev_irq_ack(lbus, ldev, irq);\n}",
    "static void metal_linux_dev_close(struct metal_bus *bus,\n                                  struct metal_device *device)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    ldev->ldrv->dev_close(lbus, ldev);\n    metal_list_del(&device->node);\n    free(ldev);\n}"
  ],
  "explanation": "The listed fragments invoke driver-supplied function pointers (ldev->ldrv->dev_*) which may be implemented to call back into the metal_* functions, potentially creating indirect recursion; these call sites therefore must be investigated for Rule 17.2 compliance. Other fragments need not be investigated for recursion: metal_linux_get_device_property only calls to_linux_device (which is a simple container_of wrapper) and standard library/syscall-like functions (snprintf, open, read, close) that do not call back into the shown metal APIs; to_linux_device simply returns a containing structure pointer and contains no calls; metal_list_del and free do not invoke the device callbacks shown. Consequently, no other code shown presents a direct or obvious indirect self-call risk under Rule 17.2."
}