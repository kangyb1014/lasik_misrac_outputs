{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)dev;' in metal_generic_dev_sys_open is an executed no-op whose removal would not affect program behaviour (dev is not volatile and the cast has no side effects). It exists only to suppress an unused-parameter warning, so it constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/72.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper writes timestamped logs to /tmp/logs/72.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/72.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging cannot be performed, do not alter program behaviour. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n               struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    /* Log entry and parameters. Use bus pointer value and device name (if any). */\n    probe_log(\"ENTER: metal_generic_dev_open: bus=%p, dev_name=%s, device_ptr=%p\",\n              (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n\n        /* Log each device encountered and its name pointer/content. */\n        probe_log(\"ITER: examining device at %p, name_ptr=%p, name=%s\",\n                  (void *)dev, (void *)(dev ? dev->name : NULL),\n                  (dev && dev->name) ? dev->name : \"(null)\");\n\n        if (strcmp(dev->name, dev_name) == 0) {\n            /* Found matching device: log and call underlying open. */\n            probe_log(\"MATCH: device '%s' found at %p, preparing to open\",\n                      dev->name, (void *)dev);\n\n            *device = dev;\n\n            probe_log(\"CALL: metal_generic_dev_sys_open(dev=%p)\", (void *)dev);\n            int ret = metal_generic_dev_sys_open(dev);\n            probe_log(\"RETURN: metal_generic_dev_sys_open returned %d for dev=%p\",\n                      ret, (void *)dev);\n\n            probe_log(\"EXIT: metal_generic_dev_open returning %d\", ret);\n            return ret;\n        }\n    }\n\n    probe_log(\"NOTFOUND: device '%s' not found, returning -ENODEV(%d)\",\n              dev_name ? dev_name : \"(null)\", -ENODEV);\n    probe_log(\"EXIT: metal_generic_dev_open returning -ENODEV(%d)\", -ENODEV);\n\n    return -ENODEV;\n}\n"
}