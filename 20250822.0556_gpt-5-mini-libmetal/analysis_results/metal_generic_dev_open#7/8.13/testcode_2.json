{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'bus' is declared as 'struct metal_bus *bus' but is not used or modified in the function (it is explicitly cast to void). According to MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type: 'const struct metal_bus *bus'. (Note: 'dev_name' is already const. The output parameter 'struct metal_device **device' cannot be made 'const struct metal_device **' here because the function assigns a mutable 'struct metal_device *' and subsequently calls metal_generic_dev_sys_open(struct metal_device *), so that change would not be compatible.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/73.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n                           struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    /* Original code explicitly ignored 'bus'. Preserve that behavior and\n     * log that the parameter is intentionally ignored to reproduce the\n     * violation scenario evidence. Do not dereference or otherwise use\n     * 'bus' here so the parameter remains unused as in the original code. */\n    (void)bus;\n    probe_log(\"metal_generic_dev_open: entry dev_name='%s' device_ptr=%p\", dev_name, (void *)device);\n    probe_log(\"metal_generic_dev_open: 'bus' parameter explicitly ignored (cast to void)\");\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n        probe_log(\"metal_generic_dev_open: examining device dev=%p name='%s'\", (void *)dev, dev->name ? dev->name : \"(null)\");\n        if (strcmp(dev->name, dev_name) == 0) {\n            *device = dev;\n            probe_log(\"metal_generic_dev_open: match found, assigned *device=%p; calling metal_generic_dev_sys_open(dev=%p)\", (void *)dev, (void *)dev);\n            int ret = metal_generic_dev_sys_open(dev);\n            probe_log(\"metal_generic_dev_open: metal_generic_dev_sys_open returned %d\", ret);\n            return ret;\n        } else {\n            probe_log(\"metal_generic_dev_open: device '%s' did not match '%s'\", dev->name, dev_name);\n        }\n    }\n\n    probe_log(\"metal_generic_dev_open: no matching device found, returning -ENODEV (%d)\", -ENODEV);\n    return -ENODEV;\n}\n"
}