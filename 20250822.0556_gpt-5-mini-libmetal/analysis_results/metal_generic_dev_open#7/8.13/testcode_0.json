{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'bus' is declared as 'struct metal_bus *bus' but is unused (the code contains '(void)bus;'). Since the function does not use or modify the pointee, the pointer could and should be declared to point to a const-qualified type (e.g. 'const struct metal_bus *bus') or the parameter removed. Therefore the non-const parameter declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helpers. These helpers append tracing information to\n * /tmp/logs/73.txt so that control flow and state information for\n * metal_generic_dev_open can be observed. They preserve the original\n * function logic and only add observational side effects. */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure the directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (f == NULL) {\n        return; /* If we cannot log, do not affect original logic. */\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n               struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    /* Log entry and parameters. We intentionally log the bus pointer value\n     * (address) to provide evidence that the parameter is unused beyond\n     * observation. This does not modify the pointee. */\n    probe_log_printf(\"ENTER: metal_generic_dev_open(bus=%p, dev_name=%s, device_out=%p)\",\n                     (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n\n        /* Log the device observed during iteration. */\n        probe_log_printf(\"ITER: device_node=%p device=%p name=%s\",\n                         (void *)node, (void *)dev, dev->name ? dev->name : \"(null)\");\n\n        if (strcmp(dev->name, dev_name) == 0) {\n            /* Record match and assignment just as in the original code. */\n            probe_log_printf(\"MATCH: found device=%p name=%s - assigning to output\",\n                             (void *)dev, dev->name ? dev->name : \"(null)\");\n\n            *device = dev;\n\n            /* Call the system open and capture the return value so we can log it. */\n            int ret = metal_generic_dev_sys_open(dev);\n\n            probe_log_printf(\"SYS_OPEN_RETURN: device=%p name=%s ret=%d\",\n                             (void *)dev, dev->name ? dev->name : \"(null)\", ret);\n            probe_log_printf(\"EXIT: metal_generic_dev_open returning %d\", ret);\n\n            return ret;\n        }\n\n        /* Log non-match for this iteration. */\n        probe_log_printf(\"NO_MATCH: device=%p name=%s does not match %s\",\n                         (void *)dev, dev->name ? dev->name : \"(null)\", dev_name ? dev_name : \"(null)\");\n    }\n\n    probe_log_printf(\"NOT_FOUND: no device matched name=%s - returning %d\",\n                     dev_name ? dev_name : \"(null)\", -ENODEV);\n\n    return -ENODEV;\n}\n"
}