{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn struct metal_device the member is declared as 'struct metal_bus *bus;'. There is no indication in the provided code that the device mutates the bus through this pointer (e.g. metal_generic_dev_open casts/uses the bus parameter only as (void)bus). Therefore the pointer can and should be declared as pointing to a const-qualified type (const struct metal_bus *bus) to prevent accidental modification. This is a violation of MISRA C 2023 Rule 8.13 unless there is code (not shown) that legitimately needs to modify the bus via this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n                           struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t/* Log entry and parameters */\n\t{\n\t\tFILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"ENTER: metal_generic_dev_open(bus=%p, dev_name=\\\"%s\\\")\\n\",\n\t\t\t\t( void *)bus, dev_name ? dev_name : \"(null)\");\n\t\t\tfclose(f);\n\t\t}\n\t}\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\n\t\t/* Log each iteration and device state */\n\t\t{\n\t\t\tFILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n\t\t\tif (f) {\n\t\t\t\tfprintf(f, \"LOOP: node=%p dev=%p dev->name=\\\"%s\\\"\\n\",\n\t\t\t\t\t( void *)node, ( void *)dev, dev->name ? dev->name : \"(null)\");\n\t\t\t\tfclose(f);\n\t\t\t}\n\t\t}\n\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t/* Log match and about to open */\n\t\t\t{\n\t\t\t\tFILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n\t\t\t\tif (f) {\n\t\t\t\t\tfprintf(f, \"MATCH: dev=%p name=\\\"%s\\\" - selecting device and calling sys_open\\n\",\n\t\t\t\t\t\t( void *)dev, dev->name ? dev->name : \"(null)\");\n\t\t\t\t\tfclose(f);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\t/* Log not found */\n\t{\n\t\tFILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"EXIT: device '%s' not found -> returning -ENODEV\\n\",\n\t\t\t\tdev_name ? dev_name : \"(null)\");\n\t\t\tfclose(f);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n"
}