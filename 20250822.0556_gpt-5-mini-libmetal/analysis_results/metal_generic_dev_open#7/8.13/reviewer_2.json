{
  "user_message": "An agent A claimed that the following metal_generic_dev_open code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_open.\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'bus' is declared as 'struct metal_bus *bus' but is not used or modified in the function (it is explicitly cast to void). According to MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type: 'const struct metal_bus *bus'. (Note: 'dev_name' is already const. The output parameter 'struct metal_device **device' cannot be made 'const struct metal_device **' here because the function assigns a mutable 'struct metal_device *' and subsequently calls metal_generic_dev_sys_open(struct metal_device *), so that change would not be compatible.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_open:\nstruct metal_device {\n\tconst char             *name;       /**< Device name */\n\tstruct metal_bus       *bus;        /**< Bus that contains device */\n\tunsigned int           num_regions; /**< Number of I/O regions in\n\t\t\t\t\t\t device */\n\tstruct metal_io_region regions[METAL_MAX_DEVICE_REGIONS]; /**< Array of\n\t\t\t\t\t\t\tI/O regions in device*/\n\tstruct metal_list      node;       /**< Node on bus' list of devices */\n\tint                    irq_num;    /**< Number of IRQs per device */\n\tvoid                   *irq_info;  /**< IRQ ID */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n...\nint metal_generic_dev_sys_open(struct metal_device *dev)\n{\n\t(void)dev;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 R.8.13 indeed recommends that a pointer parameter that is not used to modify the pointed-to object be declared to point to a const-qualified type. In isolation, the local implementation of metal_generic_dev_open() does not use or modify the bus object, so changing the parameter to const struct metal_bus *bus would satisfy the letter of R.8.13 for this definition.\n\nHowever, MISRA's \u201cwhenever possible\u201d must be interpreted with respect to the actual program interfaces. An implementation must match the function prototype declared elsewhere (headers or a function-pointer type). If this function is required to have the non-const signature to conform to an externally visible API or to match a previously declared prototype, then the implementation must use that signature and the function is not a MISRA violation. The explicit (void)bus; indicates the parameter is intentionally unused to satisfy an API or callback signature. Given only the code shown, there is no definite evidence that the signature can safely be changed across the whole program. Therefore the agent A claim \u2014 that the code violates R.8.13 as written \u2014 is not necessarily correct.\n\nRecommendation: If the prototype is internal and can be changed consistently, change the parameter to const struct metal_bus *bus (and update the prototype). If the signature must match an external API/prototype, keep the current declaration and suppress/justify the deviation (the current (void)bus; pattern is appropriate to document the unused parameter)."
}