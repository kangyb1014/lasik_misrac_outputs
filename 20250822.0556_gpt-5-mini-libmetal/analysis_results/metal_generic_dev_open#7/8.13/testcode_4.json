{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_generic_dev_sys_open is declared as int metal_generic_dev_sys_open(struct metal_device *dev) but its implementation does not modify *dev (it only uses (void)dev; and returns 0). According to MISRA C 2023 Rule 8.13, the pointer parameter should be const-qualified whenever possible. The signature should be int metal_generic_dev_sys_open(const struct metal_device *dev) (calls from metal_generic_dev_open would still be valid because conversion from struct metal_device * to const struct metal_device * is allowed). If the function must modify the device, keep non-const; otherwise, make the parameter const to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append formatted log messages to /tmp/logs/73.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        struct tm *lt = localtime(&t);\n        if (lt != NULL) {\n            fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d - \",\n                    lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n                    lt->tm_hour, lt->tm_min, lt->tm_sec);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n               struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    (void)bus;\n\n    /* Log entry and parameters */\n    probe_log(\"enter metal_generic_dev_open: bus=%p dev_name=%s device_ptr=%p\",\n              (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n\n        /* Log each candidate device encountered */\n        probe_log(\"iter device candidate: dev_ptr=%p name=%s\",\n                  (void *)dev, dev && dev->name ? dev->name : \"(null)\");\n\n        if (strcmp(dev->name, dev_name) == 0) {\n            *device = dev;\n            probe_log(\"device matched: dev_ptr=%p name=%s assigned to *device\",\n                      (void *)dev, dev->name ? dev->name : \"(null)\");\n\n            /* Call the system-specific open and log its result */\n            int sys_ret = metal_generic_dev_sys_open(dev);\n            probe_log(\"metal_generic_dev_sys_open called with dev=%p name=%s returned %d\",\n                      (void *)dev, dev->name ? dev->name : \"(null)\", sys_ret);\n\n            return sys_ret;\n        }\n    }\n\n    probe_log(\"device not found: dev_name=%s returning -ENODEV\",\n              dev_name ? dev_name : \"(null)\");\n\n    return -ENODEV;\n}\n"
}