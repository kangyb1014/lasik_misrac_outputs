{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (strcmp(dev->name, dev_name) == 0) {\n\t\t*device = dev;\n\t\treturn metal_generic_dev_sys_open(dev);\n\t}\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call strcmp(dev->name, dev_name) can read beyond the bounds of the objects pointed to because neither operand is checked for being a valid NUL-terminated string. Example violation: if struct metal_device defines char name[16] and the name buffer is filled with 16 non-NUL characters (no terminating '\\0'), strcmp will continue reading past the 16-byte array searching for a NUL and thus access out-of-bounds. Similarly, if the caller passes dev_name that is not NUL-terminated or points to a shorter buffer, strcmp(dev->name, dev_name) may read beyond dev_name's bounds."
}