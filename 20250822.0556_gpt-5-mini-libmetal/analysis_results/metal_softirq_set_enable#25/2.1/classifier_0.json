{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (enable ==  METAL_IRQ_ENABLE) {\n\tatomic_store(&metal_softirq_enabled[irq], 1);\n} else {\n\tatomic_store(&metal_softirq_enabled[irq], 0);\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: both branches are reachable at runtime depending on the value of 'enable'. The code does not contain unreachable code. (A violation would occur only in a hypothetical scenario where the condition is a compile-time constant\u2014for example if 'enable' were a compile-time constant or the expression 'enable == METAL_IRQ_ENABLE' could be proven always true/false by the compiler\u2014making one branch impossible. That is not evident from the fragment.)"
}