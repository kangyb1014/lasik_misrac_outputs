{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf cntr->irq_num == 0 then the test reduces to (irq < cntr->irq_base) || (irq >= cntr->irq_base) which is a tautology for all irq values, so the function always returns and the subsequent statements are unreachable. Thus, in that scenario the code contains unreachable code. (Similarly, if cntr->irq_num is such that the range test is always true for all possible irq values, the remainder is unreachable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/251.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdatomic.h>\n\n/* Helper probe: append formatted log to /tmp/logs/251.txt. */\nstatic void write_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/251.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n                     int irq, unsigned int enable)\n{\n    /* Log entry and key controller state to help reproduce the scenario. */\n    if (cntr != NULL) {\n        write_logf(\"ENTER: %s: cntr=%p irq=%d enable=%u irq_base=%d irq_num=%u\",\n                   \"metal_softirq_set_enable\",\n                   (void *)cntr, irq, enable,\n                   (int)cntr->irq_base, (unsigned int)cntr->irq_num);\n    } else {\n        write_logf(\"ENTER: %s: cntr=NULL irq=%d enable=%u\",\n                   \"metal_softirq_set_enable\", irq, enable);\n    }\n\n    /* Preserve original logic: if out of range, return early. Log the decision. */\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        write_logf(\"EARLY RETURN: irq=%d outside [%d, %d) (irq_base=%d irq_num=%u)\",\n                   irq,\n                   (int)cntr->irq_base,\n                   (int)(cntr->irq_base + (int)cntr->irq_num),\n                   (int)cntr->irq_base,\n                   (unsigned int)cntr->irq_num);\n        return;\n    }\n\n    irq -= cntr->irq_base;\n    write_logf(\"PROCEED: adjusted irq index=%d (original base=%d)\", irq, (int)cntr->irq_base);\n\n    if (enable ==  METAL_IRQ_ENABLE) {\n        write_logf(\"ACTION: enabling softirq index=%d\", irq);\n        atomic_store(&metal_softirq_enabled[irq], 1);\n    } else {\n        write_logf(\"ACTION: disabling softirq index=%d\", irq);\n        atomic_store(&metal_softirq_enabled[irq], 0);\n    }\n\n    /* Read back and log stored value for verification. */\n    {\n        int val = (int)atomic_load(&metal_softirq_enabled[irq]);\n        write_logf(\"AFTER STORE: enabled[%d]=%d\", irq, val);\n    }\n}\n"
}