{
  "user_message": "An agent A claimed that the following metal_softirq_set_enable code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_softirq_set_enable.\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct metal_irq_controller *cntr' is not const-qualified even though the function only reads cntr->irq_base and cntr->irq_num and does not modify the controller. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (e.g. 'const struct metal_irq_controller *cntr'). Note: if the function must match an existing function-pointer typedef (metal_irq_set_enable) that requires a non-const pointer, the signature cannot be changed without updating that typedef; otherwise the current non-const parameter is a violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set_enable:\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\n\n...\n#define METAL_IRQ_ENABLE 1U\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is plausible at first sight (metal_softirq_set_enable only reads cntr->irq_base and cntr->irq_num, so the parameter could be const-qualified). However, the struct metal_irq_controller contains a member of type metal_irq_set_enable (irq_set_enable), so this function is an implementation of that function-pointer type and must match its prototype. If the typedef metal_irq_set_enable expects a non-const pointer, the function signature cannot be changed to take a const pointer without breaking the type match. MISRA Rule 8.13 encourages const qualification where possible, but it does not require changing an API/signature that must match an existing typedef or interface. Because the code is clearly intended to implement the metal_irq_set_enable callback, the report is not correct unless the metal_irq_set_enable typedef actually permits changing the parameter to a const pointer. In the absence of evidence that the typedef allows a const pointer, we must treat the report as incorrect."
}