{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct metal_irq_controller *cntr' is not const-qualified even though the function only reads cntr->irq_base and cntr->irq_num and does not modify the controller. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (e.g. 'const struct metal_irq_controller *cntr'). Note: if the function must match an existing function-pointer typedef (metal_irq_set_enable) that requires a non-const pointer, the signature cannot be changed without updating that typedef; otherwise the current non-const parameter is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdatomic.h>\n#include <stdint.h>\n\n/* Minimal declarations to allow compilation of this test probe code. */\nstruct metal_irq_controller {\n    int irq_base;\n    int irq_num;\n};\n\n/* Keep a const variable instead of a macro to avoid introducing macros. */\nconst unsigned int METAL_IRQ_ENABLE = 1u;\n\n/* Array representing the softirq enabled flags. Size chosen to be reasonably large for tests. */\nstatic _Atomic int metal_softirq_enabled[1024];\n\n/* Helper probe: append a structured log entry to /tmp/logs/253.txt.\n   Uses a const-qualified pointer for logging to emphasize read-only access. */\nstatic void metal_softirq_log(const char *event,\n                              const struct metal_irq_controller *cntr,\n                              int orig_irq,\n                              int adjusted_irq,\n                              unsigned int enable)\n{\n    FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Log the control path event and relevant state. */\n    fprintf(f, \"event=%s\\n\", event);\n    fprintf(f, \"  cntr_ptr=%p\\n\", (const void *)cntr);\n    if (cntr != NULL) {\n        fprintf(f, \"  cntr->irq_base=%d\\n\", cntr->irq_base);\n        fprintf(f, \"  cntr->irq_num=%d\\n\", cntr->irq_num);\n    } else {\n        fprintf(f, \"  cntr is NULL\\n\");\n    }\n    fprintf(f, \"  orig_irq=%d\\n\", orig_irq);\n    fprintf(f, \"  adjusted_irq=%d\\n\", adjusted_irq);\n    fprintf(f, \"  enable=%u\\n\", enable);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\n/* Original function with logging probes inserted. Signature preserved. */\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n                                     int irq, unsigned int enable)\n{\n    /* Log entry and initial state. */\n    metal_softirq_log(\"enter\", cntr, irq, -1, enable);\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        /* Log out-of-range event before returning. */\n        metal_softirq_log(\"irq out of range - returning\", cntr, irq, -1, enable);\n        return;\n    }\n\n    irq -= cntr->irq_base;\n    /* Log the adjusted irq index that will be used to index the enabled array. */\n    metal_softirq_log(\"irq adjusted\", cntr, irq + cntr->irq_base, irq, enable);\n\n    if (enable == METAL_IRQ_ENABLE) {\n        atomic_store(&metal_softirq_enabled[irq], 1);\n        metal_softirq_log(\"atomic_store -> enabled\", cntr, irq + cntr->irq_base, irq, enable);\n    } else {\n        atomic_store(&metal_softirq_enabled[irq], 0);\n        metal_softirq_log(\"atomic_store -> disabled\", cntr, irq + cntr->irq_base, irq, enable);\n    }\n}\n"
}