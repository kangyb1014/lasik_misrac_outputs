{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member is declared as a non-const void pointer (void *arg). If this field is intended only to carry read-only context (for example a pointer to configuration data or a string literal), omitting const allows code to modify the pointed-to object (or to cast away constness when assigning), which violates MISRA C 2023 Rule 8.13. Example problematic usage: const char *cfg = \"read-only\"; cntr->arg = (void *)cfg; /* discards const */ and an interrupt handler later casts cntr->arg to char * and writes through it.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <stdatomic.h>\n\n/* Helper logging functions. These only append textual traces and\n   do not modify program state. They attempt to create /tmp/logs if\n   necessary. */\nstatic void log_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/253.txt\", \"a\");\n    if (!f) {\n        /* Try to create directory, ignore errors if it fails. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/253.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe: log entry and parameter values. */\nstatic void probe_enter(const void *cntr, int irq, unsigned int enable)\n{\n    log_write(\"[metal_softirq_set_enable] enter: cntr=%p, irq=%d, enable=%u\", cntr, irq, enable);\n}\n\n/* Probe: log controller range info safely (caller must ensure cntr has members). */\nstatic void probe_cntr_range(const struct metal_irq_controller *cntr)\n{\n    if (cntr == NULL) {\n        log_write(\"[metal_softirq_set_enable] cntr=NULL\");\n        return;\n    }\n\n    /* Access known members used by the function. */\n    log_write(\"[metal_softirq_set_enable] cntr->irq_base=%d, cntr->irq_num=%d\", cntr->irq_base, cntr->irq_num);\n}\n\n/* Probe: log actions taken and resulting state for the given irq index. */\nstatic void probe_action(int adj_irq, unsigned int enable)\n{\n    /* Attempt to read the current enabled state. If metal_softirq_enabled is not visible\n       in this translation unit, the surrounding build should provide it; if not, this\n       will be a link error at link time (same as original code would). */\n    int cur = -1;\n    /* Use atomic_load if available to avoid data races in logs. */\n    /* Guard with a try: we assume metal_softirq_enabled is an array of atomic_int. */\n    extern atomic_int metal_softirq_enabled[];\n    cur = atomic_load(&metal_softirq_enabled[adj_irq]);\n    log_write(\"[metal_softirq_set_enable] action: adj_irq=%d, enable=%u, prior_state=%d\", adj_irq, enable, cur);\n}\n\n/* Modified function with probes inserted. Logic preserved exactly as originally. */\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n                                     int irq, unsigned int enable)\n{\n    probe_enter(cntr, irq, enable);\n    probe_cntr_range(cntr);\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        log_write(\"[metal_softirq_set_enable] range check failed: irq=%d not in [%d,%d)\",\n                  irq, cntr->irq_base, cntr->irq_base + cntr->irq_num);\n        return;\n    }\n\n    irq -= cntr->irq_base;\n    log_write(\"[metal_softirq_set_enable] adjusted irq index=%d\", irq);\n\n    /* Log prior value and intended new value, then perform original atomic store. */\n    probe_action(irq, enable);\n\n    if (enable ==  METAL_IRQ_ENABLE) {\n        atomic_store(&metal_softirq_enabled[irq], 1);\n        log_write(\"[metal_softirq_set_enable] stored 1 to metal_softirq_enabled[%d]\", irq);\n    } else {\n        atomic_store(&metal_softirq_enabled[irq], 0);\n        log_write(\"[metal_softirq_set_enable] stored 0 to metal_softirq_enabled[%d]\", irq);\n    }\n\n    /* Log final observed state after the store. */\n    {\n        extern atomic_int metal_softirq_enabled[];\n        int final = atomic_load(&metal_softirq_enabled[irq]);\n        log_write(\"[metal_softirq_set_enable] final_state metal_softirq_enabled[%d]=%d\", irq, final);\n    }\n}\n"
}