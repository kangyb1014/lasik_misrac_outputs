{
  "user_message": "An agent A claimed that the following metal_softirq_set_enable code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_softirq_set_enable.\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'irq' is modified in the function body by the statement 'irq -= cntr->irq_base;'. Rule 17.8 states function parameters shall not be modified, so this constitutes a violation. (The pointer parameter 'cntr' is not modified; only the non-pointer parameter 'irq' is.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set_enable:\nint irq_num\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified. In metal_softirq_set_enable the parameter 'irq' (an int, passed by value) is modified by the statement\n\n    irq -= cntr->irq_base;\n\nwhich violates Rule 17.8. (The pointer parameter 'cntr' is not modified; note that modifying the object pointed-to would be allowed but not the pointer itself.)\n\nRecommended fix: compute the adjusted index in a local variable, e.g.\n\n    int idx = irq - cntr->irq_base;\n    if (idx < 0 || idx >= cntr->irq_num) return;\n    atomic_store(&metal_softirq_enabled[idx], (enable == METAL_IRQ_ENABLE) ? 1 : 0);\n\nor declare the parameter as const and use a local variable for any needed modification. This removes modification of the parameter and complies with Rule 17.8."
}