{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'irq' is modified in the function body by the statement 'irq -= cntr->irq_base;'. Rule 17.8 states function parameters shall not be modified, so this constitutes a violation. (The pointer parameter 'cntr' is not modified; only the non-pointer parameter 'irq' is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/257.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdatomic.h>\n\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n                     int irq, unsigned int enable)\n{\n    FILE *f = fopen(\"/tmp/logs/257.txt\", \"a\");\n\n    if (f) {\n        fprintf(f, \"ENTRY: metal_softirq_set_enable cntr=%p irq=%d enable=%u cntr->irq_base=%d cntr->irq_num=%d\\n\",\n                (void *)cntr, irq, enable, cntr->irq_base, cntr->irq_num);\n    }\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        if (f) {\n            fprintf(f, \"EXIT: irq %d out of range [%d, %d) - returning\\n\",\n                    irq, cntr->irq_base, cntr->irq_base + cntr->irq_num);\n            fclose(f);\n        }\n        return;\n    }\n\n    if (f) {\n        fprintf(f, \"Before modification: irq=%d (will subtract irq_base=%d)\\n\",\n                irq, cntr->irq_base);\n    }\n\n    /* Original code modifies the parameter 'irq' here. This modification\n     * is the subject of the reported Rule 17.8 violation. Keep the logic\n     * intact but log before/after to provide evidence. */\n    irq -= cntr->irq_base;\n\n    if (f) {\n        /* Reconstruct original IRQ for clarity by adding base back */\n        fprintf(f, \"After modification: irq=%d (original irq=%d)\\n\",\n                irq, irq + cntr->irq_base);\n    }\n\n    if (enable ==  METAL_IRQ_ENABLE) {\n        atomic_store(&metal_softirq_enabled[irq], 1);\n        if (f) {\n            fprintf(f, \"Action: atomic_store enabled[ %d ] = 1\\n\", irq);\n        }\n    } else {\n        atomic_store(&metal_softirq_enabled[irq], 0);\n        if (f) {\n            fprintf(f, \"Action: atomic_store enabled[ %d ] = 0\\n\", irq);\n        }\n    }\n\n    if (f) {\n        fprintf(f, \"EXIT: metal_softirq_set_enable completed for original irq=%d\\n\", irq + cntr->irq_base);\n        fclose(f);\n    }\n}\n"
}