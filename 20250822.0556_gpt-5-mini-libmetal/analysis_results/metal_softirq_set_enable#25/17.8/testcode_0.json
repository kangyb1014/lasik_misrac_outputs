{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'irq' is modified in-place with the statement 'irq -= cntr->irq_base;'. Modifying a function parameter variable (even if passed by value) violates MISRA C 2023 Rule 17.8. (Note: modifying the object pointed to by a pointer parameter would be allowed, but that is not the case here.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/257.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set_enable:\n```c\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n\t\t\t\t     int irq, unsigned int enable)\n{\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tif (enable ==  METAL_IRQ_ENABLE) {\n\t\tatomic_store(&metal_softirq_enabled[irq], 1);\n\t} else {\n\t\tatomic_store(&metal_softirq_enabled[irq], 0);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void metal_softirq_log(const char *stage,\n                              struct metal_irq_controller *cntr,\n                              int original_irq,\n                              unsigned int enable,\n                              int adjusted_irq)\n{\n    FILE *f = fopen(\"/tmp/logs/257.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: cntr=%p irq_in=%d irq_base=%d irq_num=%d adjusted_irq=%d enable=%u\\n\",\n                stage,\n                (void *)cntr,\n                original_irq,\n                cntr ? cntr->irq_base : -1,\n                cntr ? cntr->irq_num : -1,\n                adjusted_irq,\n                enable);\n        fclose(f);\n    }\n}\n\nstatic void metal_softirq_set_enable(struct metal_irq_controller *cntr,\n                                     int irq, unsigned int enable)\n{\n    /* preserve original irq value for logging while keeping original logic */\n    int original_irq = irq;\n    metal_softirq_log(\"entry\", cntr, original_irq, enable, -1);\n\n    if (original_irq < cntr->irq_base ||\n        original_irq >= (cntr->irq_base + cntr->irq_num)) {\n        metal_softirq_log(\"out_of_range\", cntr, original_irq, enable, -1);\n        return;\n    }\n\n    /* This line is the reported violation: modifying the value parameter 'irq' */\n    irq -= cntr->irq_base;\n    metal_softirq_log(\"after_adjust\", cntr, original_irq, enable, irq);\n\n    if (enable ==  METAL_IRQ_ENABLE) {\n        atomic_store(&metal_softirq_enabled[irq], 1);\n        metal_softirq_log(\"store_enable_1\", cntr, original_irq, enable, irq);\n    } else {\n        atomic_store(&metal_softirq_enabled[irq], 0);\n        metal_softirq_log(\"store_enable_0\", cntr, original_irq, enable, irq);\n    }\n}\n"
}