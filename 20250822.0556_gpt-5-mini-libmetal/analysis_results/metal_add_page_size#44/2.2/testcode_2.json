{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'metal_unused(params);' is typically a no-op used to suppress unused-parameter warnings (commonly implemented as (void)(params) or an empty macro). Such an operation is executed but has no effect on program behaviour \u2014 removing it would not change the program \u2014 therefore it constitutes dead code under MISRA C 2023 Rule 2.2. (If, contrary to the typical definition, metal_unused has observable side-effects, then it would not violate the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_add_page_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_add_page_size code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\nstatic void metal_probe_log(const char *event, const char *path, int shift,\n                            int mmap_flags, int index, unsigned long size,\n                            int retval)\n{\n    FILE *f = fopen(\"/tmp/logs/442.txt\", \"a\");\n    if (!f) {\n        /* If logging fails, do not change program behaviour. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: event=%s path=%s shift=%d mmap_flags=%d index=%d size=%lu retval=%d\\n\",\n            (long)t, event, (path != NULL) ? path : \"(null)\", shift,\n            mmap_flags, index, size, retval);\n    fclose(f);\n}\n\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\t/* log enter with initial state */\n\tmetal_probe_log(\"enter\", path, shift, mmap_flags, index, size, 0);\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\t/* record the overflow outcome */\n\t\tmetal_probe_log(\"overflow\", path, shift, mmap_flags, index, size, -EOVERFLOW);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\t/* record the invalid-args outcome */\n\t\tmetal_probe_log(\"invalid_args\", path, shift, mmap_flags, index, size, -EINVAL);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\t/* record successful addition and the new state */\n\tmetal_probe_log(\"added\", path, shift, mmap_flags, index, size, 0);\n\n\treturn 0;\n}\n"
}