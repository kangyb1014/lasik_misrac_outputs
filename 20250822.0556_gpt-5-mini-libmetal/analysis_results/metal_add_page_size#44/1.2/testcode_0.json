{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC language extensions: it employs a statement-expression ({ ... }) which is a GCC/Clang extension, and it uses the token pasting '##__VA_ARGS__' trick to swallow a comma when no variadic args \u2014 also a compiler-specific extension. These are explicit compiler extensions and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/440.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_add_page_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_add_page_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <limits.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/440.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/440.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n    probe_log(\"enter metal_add_page_size: path=%s shift=%d mmap_flags=0x%x\\n\",\n              (path != NULL) ? path : \"(null)\", shift, mmap_flags);\n\n    int index = _metal.num_page_sizes;\n    unsigned long size = 1UL << shift;\n\n    probe_log(\"computed values: index=%d size=%lu (1UL<<%d)\\n\", index, size, shift);\n\n    if (index >= MAX_PAGE_SIZES) {\n        probe_log(\"branch taken: index >= MAX_PAGE_SIZES (index=%d MAX_PAGE_SIZES=%d) -> returning -EOVERFLOW\\n\",\n                  index, MAX_PAGE_SIZES);\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n                  size);\n        return -EOVERFLOW;\n    }\n\n    if (!path || shift <= 0) {\n        probe_log(\"branch taken: invalid args (path=%s shift=%d) -> returning -EINVAL\\n\",\n                  (path != NULL) ? path : \"(null)\", shift);\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n                  size);\n        return -EINVAL;\n    }\n\n    probe_log(\"adding page size at index=%d: shift=%d size=%lu mmap_flags=0x%x path=\\\"%s\\\"\\n\",\n              index, shift, size, mmap_flags, path);\n\n    _metal.page_sizes[index].page_shift = shift;\n    _metal.page_sizes[index].page_size = size;\n    _metal.page_sizes[index].mmap_flags = mmap_flags;\n    strncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n    /* Ensure NUL termination in case path is equal/longer than PATH_MAX */\n    if (PATH_MAX > 0) {\n        _metal.page_sizes[index].path[PATH_MAX - 1] = '\\0';\n    }\n\n    _metal.num_page_sizes++;\n\n    probe_log(\"updated _metal: new num_page_sizes=%d; confirmed entry path=\\\"%s\\\" shift=%d size=%lu mmap_flags=0x%x\\n\",\n              _metal.num_page_sizes,\n              _metal.page_sizes[index].path,\n              _metal.page_sizes[index].page_shift,\n              _metal.page_sizes[index].page_size,\n              _metal.page_sizes[index].mmap_flags);\n\n    metal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n    probe_log(\"exit metal_add_page_size: returning 0\\n\");\n\n    return 0;\n}\n"
}