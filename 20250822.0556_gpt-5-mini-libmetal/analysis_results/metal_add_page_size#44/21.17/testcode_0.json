{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(_metal.page_sizes[index].path, path, PATH_MAX) can access memory beyond the bounds of the objects passed: e.g. if _metal.page_sizes[index].path has a smaller storage (for example char path[128]) while PATH_MAX == 256, strncpy will write up to 256 bytes and overflow the destination. Also, if the source 'path' is not NUL-terminated within PATH_MAX bytes, strncpy may read beyond the source object\u2019s bounds while copying, which is another out-of-bounds access. Unless the code can statically guarantee that the destination buffer size >= PATH_MAX and that 'path' contains a NUL within PATH_MAX bytes, this violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_add_page_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/449.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_add_page_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_add_page_size:\n```c\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n\tint index = _metal.num_page_sizes;\n\tunsigned long size = 1UL << shift;\n\n\tif (index >= MAX_PAGE_SIZES) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n\t\t\t  size);\n\t\treturn -EOVERFLOW;\n\t}\n\n\tif (!path || shift <= 0) {\n\t\tmetal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n\t\t\t  size);\n\t\treturn -EINVAL;\n\t}\n\n\t_metal.page_sizes[index].page_shift = shift;\n\t_metal.page_sizes[index].page_size = size;\n\t_metal.page_sizes[index].mmap_flags = mmap_flags;\n\tstrncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\t_metal.num_page_sizes++;\n\n\tmetal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_add_page_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/449.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/449.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* The original function with inserted probes to capture control flow and state. */\nstatic int metal_add_page_size(const char *path, int shift, int mmap_flags)\n{\n    int index = _metal.num_page_sizes;\n    unsigned long size = 1UL << shift;\n\n    probe_logf(\"ENTER metal_add_page_size: path=%p shift=%d mmap_flags=%d index=%d size=%lu PATH_MAX=%d\",\n               (void *)path, shift, mmap_flags, index, size, PATH_MAX);\n\n    if (index >= MAX_PAGE_SIZES) {\n        probe_logf(\"BRANCH: index >= MAX_PAGE_SIZES (index=%d MAX_PAGE_SIZES=%d) - returning -EOVERFLOW\",\n                   index, MAX_PAGE_SIZES);\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - overflow\\n\",\n                  size);\n        return -EOVERFLOW;\n    }\n\n    if (!path || shift <= 0) {\n        probe_logf(\"BRANCH: invalid args (path=%p shift=%d) - returning -EINVAL\",\n                   (void *)path, shift);\n        metal_log(METAL_LOG_WARNING, \"skipped page size %ld - invalid args\\n\",\n                  size);\n        return -EINVAL;\n    }\n\n    /* Log destination buffer size as known at compile-time (if path is an array) */\n    size_t dest_buf_size = sizeof(_metal.page_sizes[index].path);\n    probe_logf(\"BEFORE COPY: index=%d dest_buf_size=%zu PATH_MAX=%d path_ptr=%p\",\n               index, dest_buf_size, PATH_MAX, (void *)path);\n\n    _metal.page_sizes[index].page_shift = shift;\n    _metal.page_sizes[index].page_size = size;\n    _metal.page_sizes[index].mmap_flags = mmap_flags;\n\n    /* Record state just before the strncpy that is the subject of the MISRA warning. */\n    probe_logf(\"CALL strncpy: dest=&_metal.page_sizes[%d].path src=%p n=%d\",\n               index, (void *)path, PATH_MAX);\n\n    /* Perform the original copy (preserve original behaviour) */\n    strncpy(_metal.page_sizes[index].path, path, PATH_MAX);\n\n    /* After copy, safely inspect destination buffer up to its known size to detect lack of NUL. */\n    int found_nul = 0;\n    {\n        size_t i;\n        for (i = 0; i < dest_buf_size; ++i) {\n            if (_metal.page_sizes[index].path[i] == '\\0') {\n                found_nul = 1;\n                break;\n            }\n        }\n    }\n\n    _metal.num_page_sizes++;\n\n    probe_logf(\"AFTER COPY: index=%d found_nul_in_dest=%d dest_buf_size=%zu new_num_page_sizes=%d\",\n               index, found_nul, dest_buf_size, _metal.num_page_sizes);\n\n    metal_log(METAL_LOG_DEBUG, \"added page size %ld @%s\\n\", size, path);\n\n    probe_logf(\"RETURN 0: added page size %lu at index=%d\", size, index);\n\n    return 0;\n}\n"
}