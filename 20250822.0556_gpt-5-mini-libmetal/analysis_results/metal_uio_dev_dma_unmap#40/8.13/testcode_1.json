{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer members in struct linux_device (ldrv, sdev, override) are unqualified but appear to be references to externally owned descriptor objects that the linux_device likely does not modify. Under MISRA C 2023 Rule 8.13 these should be const-qualified (for example: const struct linux_driver *ldrv; const struct sysfs_device *sdev; const struct sysfs_attribute *override) to indicate they are non\u2011modifiable through this struct. As written, the lack of const qualification is a violation if those pointers are intended only for read/access of externally owned data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_unmap:\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <unistd.h>\n\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n                                    struct linux_device *ldev,\n                                    uint32_t dir,\n                                    struct metal_sg *sg,\n                                    int nents)\n{\n    FILE *fp = fopen(\"/tmp/logs/403.txt\", \"a\");\n    if (fp != NULL) {\n        time_t now = time(NULL);\n        char *timestr = ctime(&now);\n        if (timestr != NULL) {\n            /* ctime() returns a string that ends with a newline */\n            timestr[strcspn(timestr, \"\\n\")] = '\\0';\n        }\n\n        /* Log control flow entry and parameter state */\n        fprintf(fp, \"[metal_uio_dev_dma_unmap] entry: time=%s pid=%d\\n\",\n                timestr ? timestr : \"(unknown)\", (int)getpid());\n\n        fprintf(fp, \"  lbus=%p\\n\", (void *)lbus);\n        fprintf(fp, \"  ldev=%p\\n\", (void *)ldev);\n        fprintf(fp, \"  dir=%u\\n\", (unsigned int)dir);\n        fprintf(fp, \"  sg=%p\\n\", (void *)sg);\n        fprintf(fp, \"  nents=%d\\n\", nents);\n\n        /* Note about suspected non-const pointers (for auditing) */\n        fprintf(fp, \"  note: pointer members in struct linux_device appear unqualified (non-const).\\n\");\n        fprintf(fp, \"        If these point to externally owned descriptors that should not be modified,\\n\");\n        fprintf(fp, \"        they should be declared as const to comply with MISRA C 2023 Rule 8.13.\\n\");\n\n        fprintf(fp, \"[metal_uio_dev_dma_unmap] exit\\n\\n\");\n        fclose(fp);\n    }\n\n    /* Preserve original no-op semantics (no modifications) */\n    (void) lbus;\n    (void) ldev;\n    (void) dir;\n    (void) sg;\n    (void) nents;\n}\n"
}