{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes pointer parameters that are not const-qualified although they are not modified or used (they are explicitly cast to void). Specifically, the parameters struct linux_bus *lbus, struct linux_device *ldev and struct metal_sg *sg could be const-qualified. This violates MISRA C 2023 R8.13. A compliant prototype would be, for example: static void metal_uio_dev_dma_unmap(const struct linux_bus *lbus, const struct linux_device *ldev, uint32_t dir, const struct metal_sg *sg, int nents).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_unmap:\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n                                    struct linux_device *ldev,\n                                    uint32_t dir,\n                                    struct metal_sg *sg,\n                                    int nents)\n{\n    /* Probe: log invocation and parameter state to help reproduce the violation scenario. */\n    FILE *fp = fopen(\"/tmp/logs/403.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"metal_uio_dev_dma_unmap invoked\\n\");\n        fprintf(fp, \"  parameter addresses: lbus=%p, ldev=%p, sg=%p\\n\",\n                (void *)lbus, (void *)ldev, (void *)sg);\n        /* Print integer parameter values */\n        fprintf(fp, \"  dir=%u, nents=%d\\n\", (unsigned)dir, nents);\n        fprintf(fp, \"  Note: function does not modify any of these parameters; they could be const-qualified (MISRA R8.13).\\n\");\n        fclose(fp);\n    }\n\n    /* Preserve original semantics: parameters are not modified. Keep the unused casts\n       so that removing the probes will still result in the original no-op behavior. */\n    (void) lbus;\n    (void) ldev;\n    (void) dir;\n    (void) sg;\n    (void) nents;\n}\n"
}