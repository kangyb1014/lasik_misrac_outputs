{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) ldev;' is an expression statement that evaluates the parameter and discards the result; it performs no action and its removal would not affect program behaviour. Therefore it constitutes dead code (likely used only to suppress an unused-parameter warning) and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_unmap:\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append an entry to /tmp/logs/402.txt describing the call\n * and parameter state. This preserves the original logic of the function\n * (no functional effect on DMA unmap) while providing evidence of the\n * presence and execution of the (void) parameter-cast statements that are\n * reported as dead code. */\nstatic void metal_uio_dev_dma_unmap_log(const struct linux_bus *lbus,\n                                        const struct linux_device *ldev,\n                                        uint32_t dir,\n                                        const struct metal_sg *sg,\n                                        int nents)\n{\n    int mkdir_res = mkdir(\"/tmp/logs\", 0777);\n    (void) mkdir_res; /* suppress unused-result warning if not inspected */\n\n    FILE *fp = fopen(\"/tmp/logs/402.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log pointer values and numeric state so other agents can reproduce\n         * and inspect the scenario. Using %p for pointers and PRIu32 for\n         * uint32_t. */\n        fprintf(fp,\n                \"metal_uio_dev_dma_unmap: lbus=%p, ldev=%p, dir=%\" PRIu32 \", sg=%p, nents=%d\\n\",\n                (const void *) lbus, (const void *) ldev, dir, (const void *) sg, nents);\n        fclose(fp);\n    }\n}\n\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n                                    struct linux_device *ldev,\n                                    uint32_t dir,\n                                    struct metal_sg *sg,\n                                    int nents)\n{\n    /* Original no-op casts are retained to reproduce the reported violation\n     * (they are expression statements that perform no action). Their presence\n     * is the subject of the reported dead-code violation. */\n    (void) lbus;\n    (void) ldev;\n    (void) dir;\n    (void) sg;\n    (void) nents;\n\n    /* Inserted probe: record that the function was entered and the runtime\n     * values of the parameters. This does not change the unmap semantics. */\n    metal_uio_dev_dma_unmap_log(lbus, ldev, dir, sg, nents);\n\n    /* Preserve original logic: function performs no DMA unmap actions here. */\n}\n"
}