{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) dir;' is an expression statement with no side effects; executing it has no effect on program behaviour and removing it would not change the program. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_unmap:\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Forward declarations so this file is standalone-compileable. */\nstruct linux_bus;\nstruct linux_device;\nstruct metal_sg;\n\n/* Helper probe: append formatted logs to /tmp/logs/402.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists (ignore errors if it already exists). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/402.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If we cannot open the file, there's nothing more we can do here. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n                    struct linux_device *ldev,\n                    uint32_t dir,\n                    struct metal_sg *sg,\n                    int nents)\n{\n    /* Log entry and the actual parameter values so observers can see\n     * that the function does not use the parameters beyond casting them to void.\n     * This provides evidence that the '(void) dir;' statement has no effect\n     * on observable behaviour here. */\n    probe_log(\"metal_uio_dev_dma_unmap ENTRY: lbus=%p ldev=%p dir=%u sg=%p nents=%d\",\n              (void *)lbus, (void *)ldev, (unsigned)dir, (void *)sg, nents);\n\n    /* Preserve original void-casts to keep logic identical to the original\n     * implementation. These casts are harmless and are the subject of the\n     * reported violation (they have no side effects). */\n    (void) lbus;\n    (void) ldev;\n    (void) dir;\n    (void) sg;\n    (void) nents;\n\n    /* Log after performing the original no-op casts. This demonstrates that\n     * executing those casts did not modify the logged parameter values above,\n     * supporting the claim that they are dead (no-effect) operations. */\n    probe_log(\"metal_uio_dev_dma_unmap AFTER_CASTS: casts executed; parameters remain unchanged\");\n}\n"
}