{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) sg;' inside metal_uio_dev_dma_unmap is a no-op (used only to silence an unused-parameter warning). It is executed but has no effect on program behaviour, so removing it would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_unmap:\n```c\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev,\n\t\t\t\t    uint32_t dir,\n\t\t\t\t    struct metal_sg *sg,\n\t\t\t\t    int nents)\n{\n\t(void) lbus;\n\t(void) ldev;\n\t(void) dir;\n\t(void) sg;\n\t(void) nents;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Forward declarations to match original types (incomplete types are sufficient here) */\nstruct linux_bus;\nstruct linux_device;\nstruct metal_sg;\n\nstatic void metal_uio_dev_dma_unmap(struct linux_bus *lbus,\n                                    struct linux_device *ldev,\n                                    uint32_t dir,\n                                    struct metal_sg *sg,\n                                    int nents)\n{\n    /* Preserve original explicit no-op casts to show they are executed */\n    (void) lbus;\n    (void) ldev;\n    (void) dir;\n    (void) sg;\n    (void) nents;\n\n    /* Probe logging: record that the function was entered and that the no-op casts ran.\n       This writes control-flow and state information to /tmp/logs/402.txt so other\n       agents can reproduce and collect evidence for the reported no-op (dead) statement. */\n    FILE *fp = fopen(\"/tmp/logs/402.txt\", \"a\");\n    if (fp != NULL) {\n        /* Log the call site and parameter state. Casting to (void*) for pointer printing. */\n        fprintf(fp,\n                \"metal_uio_dev_dma_unmap called\\n\");\n        fprintf(fp,\n                \"  lbus=%p\\n  ldev=%p\\n  dir=%u\\n  sg=%p\\n  nents=%d\\n\",\n                (void *)lbus,\n                (void *)ldev,\n                (unsigned)dir,\n                (void *)sg,\n                nents);\n        fprintf(fp,\n                \"  Note: explicit (void) casts executed for all parameters (no-ops to silence warnings)\\n\");\n        fclose(fp);\n    }\n}\n"
}