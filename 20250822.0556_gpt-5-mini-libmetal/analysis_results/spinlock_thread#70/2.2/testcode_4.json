{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf spinlock_thread is actually executed but the global variable 'total' is only written (incremented) and never read or otherwise used (and no external observable timing/side-effects depend on these increments or the spinlock operations), then the total++ (and potentially the acquire/release around it) are dead code \u2014 removing them would not change program behaviour. In that case Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified spinlock_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of spinlock_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of spinlock_thread:\n```c\nstatic void *spinlock_thread(void *arg)\n{\n\tstruct metal_spinlock *l = arg;\n\tint i;\n\n\tfor (i = 0; i < spinlock_test_count; i++) {\n\t\tmetal_spinlock_acquire(l);\n\t\ttotal++;\n\t\tmetal_spinlock_release(l);\n\t}\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified spinlock_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n\n/* Probe helper: lightweight logging to /tmp/logs/702.txt. */\nstatic void probe_log(const char *event, int iter, struct metal_spinlock *l)\n{\n    FILE *f = fopen(\"/tmp/logs/702.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log thread id, event, iteration, lock pointer and address of 'total'.\n       We intentionally do NOT read the value of 'total' to avoid changing\n       program observable behaviour; only its address is recorded. */\n    fprintf(f, \"tid=%lu event=%s iter=%d lock=%p total_addr=%p\\n\",\n            (unsigned long)pthread_self(), event, iter, (void *)l, (void *)&total);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void *spinlock_thread(void *arg)\n{\n    struct metal_spinlock *l = arg;\n    int i;\n\n    /* Log thread start once. */\n    probe_log(\"thread_start\", -1, l);\n\n    for (i = 0; i < spinlock_test_count; i++) {\n        probe_log(\"before_acquire\", i, l);\n\n        metal_spinlock_acquire(l);\n        /* Original behaviour preserved exactly: increment under lock. */\n        total++;\n        metal_spinlock_release(l);\n\n        /* Log after release to avoid extending the critical section.\n           We do NOT read the value of 'total' here to avoid altering\n           program behaviour; we only record that an increment was\n           performed by this thread at this iteration. */\n        probe_log(\"after_release_increment\", i, l);\n    }\n\n    probe_log(\"thread_exit\", -1, l);\n\n    return NULL;\n}\n"
}