{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf 'total' is only written (static unsigned int total = 0) and never read, observed (e.g. printed, returned, or used in control flow) nor declared volatile, then the increment total++ is dead: removing it would not change program behaviour. (If, however, 'total' is read elsewhere, used for diagnostics/assertions, declared volatile, or its update affects timing that the system depends on, then it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified spinlock_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/702.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of spinlock_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of spinlock_thread:\n```c\nstatic void *spinlock_thread(void *arg)\n{\n\tstruct metal_spinlock *l = arg;\n\tint i;\n\n\tfor (i = 0; i < spinlock_test_count; i++) {\n\t\tmetal_spinlock_acquire(l);\n\t\ttotal++;\n\t\tmetal_spinlock_release(l);\n\t}\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified spinlock_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <sys/time.h>\n#include <stdint.h>\n\n/*\n * Probe helpers to record control flow and state relevant to the\n * potential dead-write of 'total'. The probe records that an\n * increment was executed, which iteration it was, the thread id and\n * the address of 'total'. Importantly the probe does NOT read the\n * value of 'total' (to avoid changing the semantics that would\n * otherwise demonstrate a dead write).\n */\n\nextern unsigned int total;              /* variable under test */\nextern int spinlock_test_count;         /* loop count used by caller */\n\nstatic void log_total_increment(int iter, const void *total_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/702.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging cannot be opened, preserve original behaviour silently. */\n        return;\n    }\n\n    struct timeval tv;\n    if (gettimeofday(&tv, NULL) == 0) {\n        fprintf(f, \"%ld.%06ld \", (long)tv.tv_sec, (long)tv.tv_usec);\n    }\n\n    /* Record thread id, iteration and address of 'total'. Do not read '*total'. */\n    fprintf(f, \"thread=%lu iter=%d total_addr=%p increment_executed\\n\",\n            (unsigned long)pthread_self(), iter, total_addr);\n    fclose(f);\n}\n\nstatic void *spinlock_thread(void *arg)\n{\n    struct metal_spinlock *l = arg;\n    int i;\n\n    for (i = 0; i < spinlock_test_count; i++) {\n        metal_spinlock_acquire(l);\n        /* original operation retained */\n        total++;\n        /* probe after the increment to record that the write occurred;\n           the probe logs the address of 'total' but does NOT read its value. */\n        log_total_increment(i, (const void *)&total);\n        metal_spinlock_release(l);\n    }\n\n    return NULL;\n}\n"
}