{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang statement-expression syntax '({ ... })' and the GNU comma-swallowing token-paste '##__VA_ARGS__' \u2014 both are documented compiler extensions (GCC/Clang). This violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/580.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of atomic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified atomic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdatomic.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n\n/* External symbols from the surrounding test harness. */\nextern int metal_run(int threads, void (*thread_fn)(void *), void *arg);\nextern void atomic_thread(void *arg);\nextern void metal_log(int level, const char *fmt, ...);\nextern int atomic_test_count;\nextern int METAL_LOG_DEBUG;\n\n/* Probe function: append succinct runtime traces to /tmp/logs/580.txt. */\nstatic void write_probe(const char *stage, int error, int value, int threads)\n{\n    FILE *f = fopen(\"/tmp/logs/580.txt\", \"a\");\n    if (!f) {\n        /* Best-effort: if log can't be opened, drop silently to avoid altering behavior. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n\n    fprintf(f, \"[%ld] pid=%d stage=%s error=%d value=%d threads=%d\\n\",\n            (long)t, (int)pid, stage, error, value, threads);\n\n    fclose(f);\n}\n\nstatic int atomic(void)\n{\n    const int threads = 10;\n    atomic_int counter = ATOMIC_VAR_INIT(0);\n    int value = 0, error;\n\n    /* Log entry before invoking the threaded test. */\n    write_probe(\"start_before_run\", 0, 0, threads);\n\n    error = metal_run(threads, atomic_thread, &counter);\n\n    /* Log outcome of metal_run. */\n    write_probe(\"after_run\", error, 0, threads);\n\n    if (!error) {\n        /* Capture counter state after thread run. */\n        value = atomic_load(&counter);\n        write_probe(\"after_atomic_load\", 0, value, threads);\n\n        /* Compute delta relative to expected count. */\n        value -= atomic_test_count * threads;\n        write_probe(\"after_delta\", 0, value, threads);\n\n        if (value) {\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\", value);\n            write_probe(\"mismatch_detected\", -EINVAL, value, threads);\n            error = -EINVAL;\n        }\n    }\n\n    /* Final trace before return. */\n    write_probe(\"returning\", error, value, threads);\n\n    return error;\n}\n"
}