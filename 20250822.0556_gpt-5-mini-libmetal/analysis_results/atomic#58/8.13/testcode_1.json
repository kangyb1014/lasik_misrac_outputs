{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the thread-id array as a non-const void *: metal_finish_threads(ts_created, (void *)tids); If metal_finish_threads does not modify the tids array (which is likely, e.g. it only joins/inspects threads), the parameter should be a pointer to a const-qualified type (e.g. const void * or const pthread_t *). Casting and passing a plain void * therefore fails to use a const-qualified pointer where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified atomic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/583.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of atomic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of atomic:\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified atomic code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Forward declarations for external symbols used by the original code. */\nextern int metal_run(int threads, void (*thread_fn)(void *), void *arg);\nextern void atomic_thread(void *arg);\nextern void metal_log(int level, const char *fmt, ...);\n\n/* Preserve original function signature and behavior. Insert probes that\n   log control flow and state to /tmp/logs/583.txt for later analysis. */\nstatic int metal_run_probe(int threads, void (*thread_fn)(void *), void *arg)\n{\n    FILE *f = NULL;\n    int err;\n\n    /* Ensure log directory exists. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] entering metal_run_probe\\n\");\n        fprintf(f, \"[probe] threads = %d\\n\", threads);\n        fprintf(f, \"[probe] thread_fn = %p\\n\", (void *)thread_fn);\n        fprintf(f, \"[probe] arg (pointer passed to threads) = %p\\n\", arg);\n        fclose(f);\n    }\n\n    /* Call the original metal_run to preserve original behavior. */\n    err = metal_run(threads, thread_fn, arg);\n\n    f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] metal_run returned err = %d\\n\", err);\n        fclose(f);\n    }\n\n    return err;\n}\n\nstatic int atomic(void)\n{\n    const int threads = 10;\n    atomic_int counter = ATOMIC_VAR_INIT(0);\n    int value, error;\n\n    /* Use the probe wrapper so we can capture the call site and argument\n       values passed into metal_run (and indirectly the thread creation\n       sequence). This preserves original logic by forwarding to metal_run. */\n    error = metal_run_probe(threads, atomic_thread, &counter);\n    if (!error) {\n        value = atomic_load(&counter);\n        value -= atomic_test_count * threads;\n        if (value) {\n            /* Log both via metal_log (original mechanism) and to the\n               external probe log so agents can observe the mismatch and\n               the prior call information in one place. */\n            metal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n                      value);\n\n            {\n                FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n                if (f) {\n                    fprintf(f, \"[probe] counter mismatch detected\\n\");\n                    fprintf(f, \"[probe] delta = %d\\n\", value);\n                    fprintf(f, \"[probe] counter address = %p\\n\", (void *)&counter);\n                    fclose(f);\n                }\n            }\n\n            error = -EINVAL;\n        }\n    }\n\n    return error;\n}\n"
}