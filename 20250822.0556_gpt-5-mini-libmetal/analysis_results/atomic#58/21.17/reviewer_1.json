{
  "user_message": "An agent A claimed that the following atomic code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of atomic.\n```c\nstatic int atomic(void)\n{\n\tconst int threads = 10;\n\tatomic_int counter = ATOMIC_VAR_INIT(0);\n\tint value, error;\n\n\terror = metal_run(threads, atomic_thread, &counter);\n\tif (!error) {\n\t\tvalue = atomic_load(&counter);\n\t\tvalue -= atomic_test_count * threads;\n\t\tif (value) {\n\t\t\tmetal_log(METAL_LOG_DEBUG, \"counter mismatch, delta = %d\\n\",\n\t\t\t\t  value);\n\t\t\terror = -EINVAL;\n\t\t}\n\t}\n\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes \u2014 pthread_create returns 0 on success or a positive error number on failure, but the code stores error = -pthread_create(...). On failure error is negative and the code calls strerror(error). Passing a negative errnum to strerror can cause the strerror implementation to index its internal message table out-of-bounds (or otherwise exhibit undefined/implementation-defined behaviour), so this use can result in accesses beyond the bounds of objects inside the string routine. Example: pthread_create returns EAGAIN (e.g. 11), code sets error = -11 and then calls strerror(-11). This may lead to out-of-range access in strerror. The correct behaviour would be to call strerror(-error) or avoid negating the pthread_create return value before passing it to strerror (or use strerror_r).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter_atomic: threads=10 metal_run_ret=0 counter_val=0 delta=0 error=0\nafter_metal_run: threads=10 metal_run_ret=0 counter_val=0 delta=0 error=0\nafter_atomic_load_and_delta: threads=10 metal_run_ret=0 counter_val=10000 delta=0 error=0\nreturn_atomic: threads=10 metal_run_ret=0 counter_val=10000 delta=10000 error=0\nenter_atomic: threads=10 metal_run_ret=0 counter_val=0 delta=0 error=0\nafter_metal_run: threads=10 metal_run_ret=0 counter_val=0 delta=0 error=0\nafter_atomic_load_and_delta: threads=10 metal_run_ret=0 counter_val=10000 delta=0 error=0\nreturn_atomic: threads=10 metal_run_ret=0 counter_val=10000 delta=10000 error=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function atomic:\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n...\nstatic const int atomic_test_count = 1000\n...\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n...\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_run_noblock the code does error = -pthread_create(...); and then calls strerror(error). pthread_create returns 0 on success or a positive error number on failure; negating that produces a negative integer. Passing a negative errnum to strerror is not guaranteed safe \u2014 typical implementations index an internal message table using the errnum, and a negative argument can lead to out-of-range access (or other implementation-defined/undefined behavior). This is exactly the kind of unsafe use of a <string.h> routine that MISRA C 2023 Rule 21.17 forbids (even if in your execution log no failure occurred). Recommended fixes: do not negate the pthread_create return value before passing it to strerror (e.g. call strerror(-error) after storing the positive pthread_create result, or better use strerror_r or otherwise map/validate the error number before passing it to strerror)."
}