{
  "user_message": "An agent A claimed that the following _metal_irq_set_enable code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of _metal_irq_set_enable.\n```c\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn;\n\t}\n\tcntr->irq_set_enable(cntr, irq, state);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe field 'arg' is declared as 'void *arg' but is described as an \"Argument to pass to interrupt controller function\". If this pointer is only used as an input/opaque context and never used to modify the pointee, it should be declared 'const void *arg'. Leaving it as 'void *' when the pointee is not modified violates MISRA C 2023 Rule 8.13. For example, if controller callbacks only read from (or pass through) cntr->arg, the declaration should be 'const void *arg;' and the current code would be a violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function _metal_irq_set_enable:\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent A claim is not supported by the provided code. MISRA C:2023 Rule 8.13 concerns pointer declarations that should be const-qualified when the pointed-to object is never modified. The target function _metal_irq_set_enable simply obtains a pointer to a metal_irq_controller and calls the controller callback: cntr->irq_set_enable(cntr, irq, state); it neither accesses cntr->arg nor proves that cntr->arg (declared as void *arg) is never modified. There is no evidence in the snippets that the arg field is only used as a read-only/opaque input or that any code never modifies the pointee; moreover the controller callbacks may legitimately need a non-const void * to allow modification. To claim a MISRA 8.13 violation you must show that the pointer is always used read-only throughout the codebase and therefore could be declared const. Absent that evidence, the report is incorrect. Recommendation: if you can audit all uses and verify arg is never modified, then change void *arg to const void *arg (and adjust callback prototypes); otherwise keep it as void *."
}