{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field 'arg' is declared as 'void *arg' but is described as an \"Argument to pass to interrupt controller function\". If this pointer is only used as an input/opaque context and never used to modify the pointee, it should be declared 'const void *arg'. Leaving it as 'void *' when the pointee is not modified violates MISRA C 2023 Rule 8.13. For example, if controller callbacks only read from (or pass through) cntr->arg, the declaration should be 'const void *arg;' and the current code would be a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified _metal_irq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of _metal_irq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of _metal_irq_set_enable:\n```c\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn;\n\t}\n\tcntr->irq_set_enable(cntr, irq, state);\n}\n```\n</target_code>\nPlease provide the modified _metal_irq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/143.txt\n * This preserves the original logic of _metal_irq_set_enable while capturing\n * the steps taken and the key state (irq, state, controller presence).\n */\nstatic void _metal_log_irq_set_enable_probe(struct metal_irq_controller *cntr, int irq, unsigned int state, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/143.txt\", \"a\");\n    if (f == NULL) {\n        /* If the log file cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    /* Log stage, irq number, requested state, and whether controller is present. */\n    fprintf(f, \"%s: irq=%d state=%u cntr=%p\\n\", stage, irq, state, (void *)cntr);\n\n    /* If controller is present, log whether the irq_set_enable callback is set.\n     * We avoid printing function pointer values directly to prevent undefined\n     * conversions between function and data pointers.\n     */\n    if (cntr != NULL) {\n        fprintf(f, \"%s: irq_set_enable_is_null=%d\\n\", stage,\n                (cntr->irq_set_enable == NULL) ? 1 : 0);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n    struct metal_irq_controller *cntr;\n\n    cntr = metal_irq_get_controller(irq);\n\n    /* Log immediately after obtaining the controller (may be NULL). */\n    _metal_log_irq_set_enable_probe(cntr, irq, state, \"entry\");\n\n    if (cntr == NULL) {\n        /* Log the early return due to missing controller and preserve behavior. */\n        _metal_log_irq_set_enable_probe(cntr, irq, state, \"no_controller_return\");\n        return;\n    }\n\n    /* Log just before invoking the controller callback. */\n    _metal_log_irq_set_enable_probe(cntr, irq, state, \"before_callback\");\n\n    /* Preserve original behavior: call the controller's callback. */\n    cntr->irq_set_enable(cntr, irq, state);\n\n    /* Log after the callback has been invoked. */\n    _metal_log_irq_set_enable_probe(cntr, irq, state, \"after_callback\");\n}\n"
}