{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nmetal_finish_threads accepts a non-const void *tids and casts it to pthread_t *tid_p even though the function only reads the thread IDs (calls pthread_join) and does not modify them. The parameter and local pointer should be const-qualified (e.g., const void *tids and const pthread_t *tid_p). As written this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <pthread.h>\n\n/*\n * Probe/logging helpers for metal_run. Logs go to /tmp/logs/673.txt.\n * These helpers are designed to be non-intrusive and preserve original logic.\n */\nstatic void metal_run_log_header(FILE *f)\n{\n    if (f == NULL) return;\n    fprintf(f, \"--- metal_run probe ---\\n\");\n}\n\nstatic void metal_run_log_tid_bytes(FILE *f, int index, const pthread_t *tid)\n{\n    if (f == NULL || tid == NULL) return;\n\n    /* Print raw bytes of pthread_t to avoid assumptions about its representation. */\n    unsigned char buf[sizeof(*tid)];\n    memcpy(buf, tid, sizeof(buf));\n\n    fprintf(f, \"  tid[%d] (raw bytes):\", index);\n    for (size_t b = 0u; b < sizeof(buf); ++b)\n    {\n        /* Print as two-digit hex per byte */\n        fprintf(f, \" %02x\", (unsigned)buf[b]);\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void metal_run_log_state(int threads, int ts_created, pthread_t *tids)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb program flow if logging fails. */\n    }\n\n    metal_run_log_header(f);\n    fprintf(f, \"metal_run called with threads=%d\\n\", threads);\n    fprintf(f, \"ts_created=%d\\n\", ts_created);\n\n    /* Only log the created thread IDs to reflect the scenario where the array\n       is only read (no modification). */\n    for (int i = 0; i < ts_created; ++i)\n    {\n        metal_run_log_tid_bytes(f, i, &tids[i]);\n    }\n\n    fclose(f);\n}\n\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n    pthread_t tids[threads];\n    int error, ts_created;\n\n    error = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n    /* Log state just before finishing/joining threads. This captures the\n       control path and the (read-only) thread ID values that are later\n       passed (cast) to metal_finish_threads. */\n    metal_run_log_state(threads, ts_created, tids);\n\n    metal_finish_threads(ts_created, (void *)tids);\n\n    return error;\n}\n"
}