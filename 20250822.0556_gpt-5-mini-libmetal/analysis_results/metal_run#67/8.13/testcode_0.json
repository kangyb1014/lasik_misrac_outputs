{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nmetal_finish_threads is declared as void metal_finish_threads(int threads, void *tids) and the implementation only reads from the tids buffer (it casts to pthread_t * and calls pthread_join). The pointer parameter therefore should be const-qualified (e.g. const void *tids or const pthread_t *tids). Passing (void *)tids from metal_run thus uses a non-const pointer where a const-qualified pointer is possible \u2014 this violates MISRA C 2023 Rule 8.13. Suggested fix: change the function prototype to accept a const pointer and use const pthread_t *tid_p = (const pthread_t *)tids; so the caller can pass tids without casting.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n\n/* Probe: log control flow and state to /tmp/logs/673.txt so other agents can\n   reproduce the scenario where metal_finish_threads is called with a\n   non-const void * pointer. This preserves original logic and only adds\n   side-effect free logging. */\nstatic void metal_run_log_pre(int threads, int ts_created, pthread_t *tids, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"metal_run PRECALL: threads=%d, ts_created=%d, error=%d\\n\",\n            threads, ts_created, error);\n    /* Log the address of the tids array and the address of each created entry. */\n    fprintf(f, \"  tids array address (passed as (void *)tids) = %p\\n\", (void *)tids);\n    for (int i = 0; i < ts_created && i < threads; ++i)\n    {\n        fprintf(f, \"  tids[%d] address = %p\\n\", i, (void *)&tids[i]);\n    }\n    fprintf(f, \"  About to call metal_finish_threads(ts_created=%d, (void *)tids=%p)\\n\",\n            ts_created, (void *)tids);\n\n    fclose(f);\n}\n\nstatic void metal_run_log_post(int threads, int ts_created, pthread_t *tids, int error)\n{\n    FILE *f = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"metal_run POSTCALL: threads=%d, ts_created=%d, error=%d\\n\",\n            threads, ts_created, error);\n    fprintf(f, \"  Returned from metal_finish_threads. tids array address = %p\\n\",\n            (void *)tids);\n    fclose(f);\n}\n\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n    pthread_t tids[threads];\n    int error, ts_created;\n\n    /* Preserve original behavior: create threads non-blocking. */\n    error = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n    /* Log current state before calling metal_finish_threads. This documents\n       that a non-const pointer (void *)tids is passed. */\n    metal_run_log_pre(threads, ts_created, tids, error);\n\n    metal_finish_threads(ts_created, (void *)tids);\n\n    /* Log after finishing threads to capture control flow evidence. */\n    metal_run_log_post(threads, ts_created, tids, error);\n\n    return error;\n}\n"
}