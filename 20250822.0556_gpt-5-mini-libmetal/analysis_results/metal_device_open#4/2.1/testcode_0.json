{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_bus_register the code calls metal_bus_find(bus->name, NULL) and tests for a zero return: if (metal_bus_find(bus->name, NULL) == 0) return -EEXIST;. The provided implementation of metal_bus_find only returns 0 when the second parameter 'result' is non-NULL (it returns 0 inside a conditional that requires 'result' to be true). If 'result' is NULL the function cannot return 0 and always returns -ENOENT. Therefore the condition can never be true and the return -EEXIST is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <errno.h>\n\n/* Minimal forward declarations so this snippet is self-contained for compilation\n * These should match the real definitions in the project.\n */\nstruct metal_device;\nstruct metal_bus;\n\nstruct metal_bus_ops {\n    int (*dev_open)(struct metal_bus *bus, const char *dev_name, struct metal_device **device);\n};\n\nstruct metal_bus {\n    const char *name;\n    struct metal_bus_ops ops;\n};\n\n/* Prototype for the actual function provided elsewhere */\nint metal_bus_find(const char *name, struct metal_bus **bus);\n\n/* Simple probe logger that appends to the requested file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/41.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n\n    probe_log(\"ENTER: metal_device_open bus_name=%s dev_name=%s device_ptr=%p\",\n              bus_name ? bus_name : \"(null)\", dev_name ? dev_name : \"(null)\", (void *)device);\n\n    if (!bus_name || !strlen(bus_name) ||\n        !dev_name || !strlen(dev_name) ||\n        !device) {\n        probe_log(\"PARAM_CHECK_FAIL: bus_name=%p dev_name=%p device=%p strlen_bus=%zu strlen_dev=%zu\",\n                  (void *)bus_name, (void *)dev_name, (void *)device,\n                  bus_name ? strlen(bus_name) : 0U, dev_name ? strlen(dev_name) : 0U);\n        probe_log(\"EXIT: metal_device_open return=%d\", -EINVAL);\n        return -EINVAL;\n    }\n\n    error = metal_bus_find(bus_name, &bus);\n    probe_log(\"metal_bus_find called with name='%s' returned error=%d bus_ptr=%p\",\n              bus_name, error, (void *)bus);\n    if (error) {\n        probe_log(\"EXIT: metal_device_open return=%d (metal_bus_find failure)\", error);\n        return error;\n    }\n\n    probe_log(\"AFTER_FIND: bus=%p bus->name=%s ops.dev_open=%p\",\n              (void *)bus, bus->name ? bus->name : \"(null)\", (void *)bus->ops.dev_open);\n\n    if (!bus->ops.dev_open) {\n        probe_log(\"EXIT: metal_device_open return=%d (no dev_open handler)\", -ENODEV);\n        return -ENODEV;\n    }\n\n    error = (*bus->ops.dev_open)(bus, dev_name, device);\n    if (error) {\n        probe_log(\"dev_open returned error=%d; device pointer (out param) not guaranteed to be set yet\", error);\n        probe_log(\"EXIT: metal_device_open return=%d (dev_open failure)\", error);\n        return error;\n    }\n\n    /* Only log the device pointer if dev_open succeeded and therefore set it. */\n    probe_log(\"dev_open succeeded; device=%p\", (void *)(*device));\n    probe_log(\"EXIT: metal_device_open return=0\");\n    return 0;\n}\n"
}