{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(bus->name, name) can read beyond object bounds if either argument is not a valid NUL\u2011terminated string or is NULL. metal_bus_find does not validate 'name' (or bus->name) before calling strcmp; thus if metal_bus_find is invoked with name == NULL or with a non\u2011NUL\u2011terminated buffer, strcmp may access memory beyond the referenced objects (or dereference NULL). Note: the specific caller metal_device_open checks bus_name for NULL and non\u2011empty via strlen, so that particular call site is safe, but the fragment itself can lead to out\u2011of\u2011bounds accesses in other call scenarios.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/49.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append diagnostic messages to /tmp/logs/49.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/49.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n\n    /* Preserve original input validation exactly as before */\n    if (!bus_name || !strlen(bus_name) ||\n        !dev_name || !strlen(dev_name) ||\n        !device) {\n        /* Log why we are returning early and the pointer state */\n        probe_log(\"metal_device_open: early return -EINVAL; bus_name=%p, dev_name=%p, device=%p\",\n                  (const void *)bus_name, (const void *)dev_name, (const void *)device);\n        if (bus_name)\n            probe_log(\"  bus_name='%s' (len=%zu)\", bus_name, strlen(bus_name));\n        else\n            probe_log(\"  bus_name is NULL\");\n        if (dev_name)\n            probe_log(\"  dev_name='%s' (len=%zu)\", dev_name, strlen(dev_name));\n        else\n            probe_log(\"  dev_name is NULL\");\n        return -EINVAL;\n    }\n\n    /* Log entering the function with validated inputs */\n    probe_log(\"metal_device_open: entry; bus_name=%p, dev_name=%p, device=%p\",\n              (const void *)bus_name, (const void *)dev_name, (const void *)device);\n    probe_log(\"  bus_name='%s' (len=%zu)\", bus_name, strlen(bus_name));\n    probe_log(\"  dev_name='%s' (len=%zu)\", dev_name, strlen(dev_name));\n\n    /* Call metal_bus_find and log its result and the bus pointer */\n    error = metal_bus_find(bus_name, &bus);\n    probe_log(\"metal_bus_find returned %d, bus pointer=%p\", error, (const void *)bus);\n    if (error)\n        return error;\n\n    /* Log existence of dev_open operation pointer without dereferencing other bus internals */\n    probe_log(\"  bus->ops.dev_open pointer=%p\", (const void *)bus->ops.dev_open);\n\n    if (!bus->ops.dev_open) {\n        probe_log(\"metal_device_open: bus->ops.dev_open is NULL; returning -ENODEV\");\n        return -ENODEV;\n    }\n\n    /* Call the bus-specific open and log the outcome */\n    error = (*bus->ops.dev_open)(bus, dev_name, device);\n    probe_log(\"bus->ops.dev_open returned %d, *device=%p\", error, (const void *)(device ? *device : NULL));\n    if (error)\n        return error;\n\n    probe_log(\"metal_device_open: success; returning 0\");\n    return 0;\n}\n"
}