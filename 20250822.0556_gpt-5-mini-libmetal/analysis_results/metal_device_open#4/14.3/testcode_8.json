{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression 'strcmp(bus->name, name) == 0 && result' can be invariant (always false) for a given call when result is NULL. For example, metal_bus_register calls metal_bus_find(bus->name, NULL); in that call result is NULL, so the expression becomes (strcmp(...) == 0 && 0) which is always false regardless of strcmp, making the if never taken and the function fail to report a found bus. This is a violation of MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/45.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/45.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n\n    /* Log entry and parameters (safe printing for potentially NULL strings) */\n    probe_log(\"ENTER metal_device_open: bus_name=%s, dev_name=%s, device_ptr=%p\",\n              bus_name ? bus_name : \"(null)\", dev_name ? dev_name : \"(null)\",\n              (void *)device);\n\n    if (!bus_name || !strlen(bus_name) ||\n        !dev_name || !strlen(dev_name) ||\n        !device) {\n        probe_log(\"INPUT VALIDATION FAILED: bus_name=%s, dev_name=%s, device_ptr=%p\",\n                  bus_name ? bus_name : \"(null)\", dev_name ? dev_name : \"(null)\",\n                  (void *)device);\n        return -EINVAL;\n    }\n\n    probe_log(\"Calling metal_bus_find for bus_name=%s\", bus_name);\n    error = metal_bus_find(bus_name, &bus);\n    probe_log(\"metal_bus_find returned error=%d, bus_ptr=%p\", error, (void *)bus);\n\n    if (error)\n        return error;\n\n    /* If bus is set, log its name if available and the dev_open op pointer */\n    if (bus) {\n        /* bus->name may be NULL in some implementations, guard access */\n        const char *bname = (bus->name) ? bus->name : \"(null)\";\n        probe_log(\"Found bus: bus->name=%s, bus_ptr=%p, dev_open_ptr=%p\",\n                  bname, (void *)bus, (void *)bus->ops.dev_open);\n    } else {\n        probe_log(\"Warning: bus is NULL after successful metal_bus_find\");\n    }\n\n    if (!bus->ops.dev_open) {\n        probe_log(\"No dev_open for bus %s (bus_ptr=%p): returning -ENODEV\",\n                  bus->name ? bus->name : \"(null)\", (void *)bus);\n        return -ENODEV;\n    }\n\n    probe_log(\"Invoking bus->ops.dev_open: bus_ptr=%p, dev_name=%s, device_out=%p\",\n              (void *)bus, dev_name, (void *)device);\n    error = (*bus->ops.dev_open)(bus, dev_name, device);\n    probe_log(\"bus->ops.dev_open returned error=%d, device_out=%p\", error, (void *)device);\n\n    if (error)\n        return error;\n\n    probe_log(\"EXIT metal_device_open: success, device_out=%p\", (void *)device);\n    return 0;\n}\n"
}