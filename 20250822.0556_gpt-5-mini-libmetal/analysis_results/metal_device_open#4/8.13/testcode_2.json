{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'void *irq_info' is declared as a non-const pointer. Under MISRA C 2023 Rule 8.13, a pointer should be to a const-qualified type whenever possible. If irq_info is used only as an opaque IRQ identifier that is stored and passed around (read-only) and not modified through the pointer, it should be declared 'const void *irq_info'. As written (non-const) this violates Rule 8.13 unless there is a documented justification that the pointed-to object must be mutable and is modified via this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Forward declarations to avoid pulling in other headers here. */\nstruct metal_bus;\nstruct metal_device;\n\n/* Helper: append a formatted log line to /tmp/logs/43.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure log directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Timestamp prefix */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf)) {\n            char tb[64];\n            if (strftime(tb, sizeof(tb), \"%Y-%m-%d %H:%M:%S\", &tm_buf))\n                fprintf(f, \"%s \", tb);\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Keep original logic as much as possible, adding probes to record\n   control flow and key state information for debug/repro purposes. */\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n\n    probe_log(\"ENTER metal_device_open: bus_name=%s, dev_name=%s, device_ptr=%p\",\n              bus_name ? bus_name : \"(null)\", dev_name ? dev_name : \"(null)\",\n              (void *)device);\n\n    if (!bus_name || !strlen(bus_name) ||\n        !dev_name || !strlen(dev_name) ||\n        !device) {\n        /* Log which of the checks failed so reproduce the early return path. */\n        probe_log(\"INVALID ARGUMENT(S): bus_name_present=%d, bus_name_len=%zu, dev_name_present=%d, dev_name_len=%zu, device_ptr=%p\",\n                  (bus_name != NULL), (bus_name ? strlen(bus_name) : 0),\n                  (dev_name != NULL), (dev_name ? strlen(dev_name) : 0),\n                  (void *)device);\n        return -EINVAL;\n    }\n\n    error = metal_bus_find(bus_name, &bus);\n    probe_log(\"metal_bus_find returned %d, bus_ptr=%p\", error, (void *)bus);\n    if (error)\n        return error;\n\n    /* Check and log whether the bus provides a dev_open implementation. */\n    {\n        int has_dev_open = 0;\n        /* The original code touches bus->ops.dev_open; replicate that check and\n           capture presence as a boolean for logging. */\n        has_dev_open = (bus->ops.dev_open != NULL);\n        probe_log(\"bus->ops.dev_open present=%d\", has_dev_open);\n        if (!has_dev_open) {\n            probe_log(\"NO DEV_OPEN: returning -ENODEV\");\n            return -ENODEV;\n        }\n    }\n\n    probe_log(\"CALLING bus->ops.dev_open(bus=%p, dev_name=%s, device_out=%p)\",\n              (void *)bus, dev_name, (void *)device);\n\n    error = (*bus->ops.dev_open)(bus, dev_name, device);\n\n    probe_log(\"bus->ops.dev_open returned %d, device_out_ptr=%p, *device=%p\",\n              error, (void *)device, (void *)(device ? *device : NULL));\n\n    if (error)\n        return error;\n\n    probe_log(\"EXIT metal_device_open success: device=%p\", (void *)(*device));\n\n    return 0;\n}\n"
}