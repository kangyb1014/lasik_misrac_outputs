{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nmetal_finish_threads is called with (void *)tids where tids is an array of pthread_t. The function parameter is a non-const void * (as used here), but the thread id array is only read (not modified) by the finish routine. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so the parameter should be declared const void * (or const pthread_t *) and the call should pass tids without casting. Using a non-const void * (and the explicit (void *) cast) therefore violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mutex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mutex as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mutex:\n```c\nstatic int mutex(void)\n{\n\tmetal_mutex_t lock;\n\tconst int threads = 10;\n\tint rc;\n\n\tmetal_mutex_init(&lock);\n\n\trc = metal_run(threads, mutex_thread, &lock);\n\n\tmetal_mutex_deinit(&lock);\n\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified mutex code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <pthread.h>\n\n/* Probe helpers: write control-flow and state information to /tmp/logs/603.txt */\nstatic void probe_log(const char *msg)\n{\n    FILE *fp = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"%s\\n\", msg);\n        fclose(fp);\n    }\n}\n\nstatic void probe_log_ptr(const char *prefix, const void *p)\n{\n    FILE *fp = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"%s %p\\n\", prefix, p);\n        fclose(fp);\n    }\n}\n\n/* Log a const array of pthread_t values (reads only) so callers can avoid casts when passing tids.\n   This helper intentionally takes a const-qualified pointer (const pthread_t *) to follow\n   MISRA guidance that pointers should be const-qualified when possible. */\nstatic void log_thread_ids_const(const pthread_t *tids, size_t n)\n{\n    FILE *fp = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (fp == NULL) {\n        return;\n    }\n    fprintf(fp, \"log_thread_ids_const: n=%zu\\n\", n);\n    for (size_t i = 0u; i < n; ++i) {\n        /* Represent pthread_t as an integer-sized value for logging purposes. */\n        uintptr_t v = (uintptr_t) tids[i];\n        fprintf(fp, \" tids[%zu] = 0x%\" PRIxPTR \" (%\" PRIuPTR \")\\n\", i, v, (uintptr_t) v);\n    }\n    fclose(fp);\n}\n\n/* Probe wrapper around metal_run: logs entry/exit and preserves original behaviour. */\nextern int metal_run(int threads, void *(*thread_fn)(void *), void *arg);\n\nstatic int metal_run_probe(int threads, void *(*thread_fn)(void *), void *arg)\n{\n    FILE *fp = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"metal_run_probe: entry threads=%d arg=%p\\n\", threads, arg);\n        fclose(fp);\n    }\n\n    /* Call the original function to preserve logic. */\n    int rc = metal_run(threads, thread_fn, arg);\n\n    fp = fopen(\"/tmp/logs/603.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"metal_run_probe: exit rc=%d\\n\", rc);\n        fclose(fp);\n    }\n\n    return rc;\n}\n\n/* Original mutex function with inserted probes. */\nstatic int mutex(void)\n{\n\tmetal_mutex_t lock;\n\tconst int threads = 10;\n\tint rc;\n\n\t/* Log entry and the address of the lock object. */\n\tprobe_log(\"mutex: entry\");\n\tprobe_log_ptr(\"mutex: &lock=\", (void *)&lock);\n\t{\n\t    char buf[128];\n\t    snprintf(buf, sizeof(buf), \"mutex: threads=%d\", threads);\n\t    probe_log(buf);\n\t}\n\n\tmetal_mutex_init(&lock);\n\n\t/* Use the probe wrapper so we capture the call site and argument values. */\n\trc = metal_run_probe(threads, mutex_thread, &lock);\n\n\tmetal_mutex_deinit(&lock);\n\n\t{\n\t    char buf[128];\n\t    snprintf(buf, sizeof(buf), \"mutex: exit rc=%d\", rc);\n\t    probe_log(buf);\n\t}\n\n\treturn rc;\n}\n"
}