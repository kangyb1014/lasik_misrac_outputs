{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of mutex:\n```c\nstatic int mutex(void)\n{\n\tmetal_mutex_t lock;\n\tconst int threads = 10;\n\tint rc;\n\n\tmetal_mutex_init(&lock);\n\n\trc = metal_run(threads, mutex_thread, &lock);\n\n\tmetal_mutex_deinit(&lock);\n\n\treturn rc;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function mutex:\ntypedef struct {\n\tatomic_int v;\n} metal_mutex_t\n...\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n...\nstatic void *mutex_thread(void *arg)\n{\n\tmetal_mutex_t *l = arg;\n\tint i;\n\n\tfor (i = 0; i < mutex_test_count; i++) {\n\t\tmetal_mutex_acquire(l);\n\t\tusleep(1);\n\t\tmetal_mutex_release(l);\n\t}\n\n\treturn NULL;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "typedef struct {\n\tatomic_int v;\n} metal_mutex_t",
    "pthread_t tids[threads];"
  ],
  "explanation": "I reported the two fragments that may rely on compiler/language features that are not universally part of every C compiler implementation and therefore should be investigated for being compiler extensions: the variable-length array declaration \"pthread_t tids[threads];\" (VLAs can be an extension depending on the selected C standard and some compilers' documentation) and the use of \"atomic_int\" in the mutex typedef (atomic types are a C11 feature and some compilers document atomic support as an extension or optional feature). Other fragments were not reported because they are ordinary, standard C constructs or platform/library APIs rather than compiler language extensions: the function definitions and calls (static int mutex(void), metal_run(...), metal_mutex_init/deinit, metal_mutex_acquire/release, mutex_thread), the constant initialization \"const int threads = 10;\", the cast \"(void *)tids\" and return of NULL from a thread function, and POSIX API calls such as usleep() and pthread types/usages. Those are either standard C constructs or platform/library interfaces (POSIX) rather than compiler language extensions explicitly documented as such, so they do not need investigation under MISRA Rule 1.2 unless your specific compiler documentation explicitly lists them as extensions."
}