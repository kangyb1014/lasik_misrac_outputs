{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: metal_add_page_size() calls strncpy(_metal.page_sizes[index].path, path, PATH_MAX). The fragment passes _metal.tmp_path as path. If _metal.tmp_path does not point to a NUL-terminated character string within PATH_MAX bytes (for example it is a pointer to a smaller buffer, a non-terminated buffer, or a string whose terminating NUL lies beyond PATH_MAX), strncpy will attempt to read up to PATH_MAX bytes from the source and may access memory beyond the bounds of the object referenced by _metal.tmp_path. Therefore the call can violate MISRA C 2023 Rule 21.17 unless it is guaranteed that _metal.tmp_path is a NUL-terminated buffer at least PATH_MAX bytes long (or otherwise guaranteed to contain a NUL within PATH_MAX bytes).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "static void metal_probe_log(const char *event, const char *name, const void *ptr, long size, int shift)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log the event, the symbolic name of the pointer, its address and\n     * relevant numeric state. Do not dereference pointer values here to\n     * avoid introducing additional out-of-bounds reads. */\n    fprintf(f, \"EVENT: %s\\n\", event);\n    fprintf(f, \"  name: %s\\n\", name ? name : \"(null)\");\n    fprintf(f, \"  ptr: %p\\n\", ptr);\n    fprintf(f, \"  page_size_or_size: %ld\\n\", size);\n    fprintf(f, \"  shift: %d\\n\", shift);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        return -EINVAL;\n    }\n\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n\n    /* Probe log before calling metal_add_page_size with _metal.tmp_path.\n     * We intentionally log only the pointer value and numerical state to\n     * avoid performing any potentially unsafe dereference of the path\n     * buffer here. This captures the control flow and state relevant to\n     * the reported scenario (pointer passed to strncpy inside\n     * metal_add_page_size). */\n    metal_probe_log(\"before_first_add\", \"_metal.tmp_path\",\n                    (const void *)_metal.tmp_path, sizes[0], _metal.page_shift);\n\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    if (sizes[0] > 0) {\n        const char *path = hugetlbfs_find_path();\n\n        /* Log the pointer returned by hugetlbfs_find_path before using it. */\n        metal_probe_log(\"hugetlb_single_before_add\", \"hugetlbfs_find_path()\",\n                        (const void *)path, sizes[0], metal_log2(sizes[0]));\n\n        metal_add_page_size(path,\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            if ((shift & MAP_HUGE_MASK) != shift)\n                continue;\n\n            /* Obtain path for this size and log the pointer before use. */\n            const char *path = hugetlbfs_find_path_for_size(sizes[i]);\n            metal_probe_log(\"hugetlb_multi_before_add\",\n                            \"hugetlbfs_find_path_for_size()\",\n                            (const void *)path, sizes[i], shift);\n\n            metal_add_page_size(\n                path,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    return 0;\n}\n"
}