{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIndirect violation: metal_add_page_size uses strncpy(_metal.page_sizes[index].path, path, PATH_MAX) which does not NUL-terminate when strlen(path) >= PATH_MAX. If the same destination buffer (or any buffer left without a terminator) is later passed to a %s format (e.g. via metal_log(\"%s\", path) or another API that expects a NUL-terminated C string), the %s conversion will read past the end of the object and cause an out-of-bounds access. Thus the sequence strncpy(..., PATH_MAX) -> later metal_log(\"%s\", path) can result in an access beyond the bounds and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "static void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_path(const char *label, const char *path)\n{\n    if (!path) {\n        probe_log(\"%s: path = (NULL)\\n\", label);\n        return;\n    }\n\n    /* Safely determine if a NUL terminator exists within PATH_MAX bytes. */\n    size_t len = strnlen(path, PATH_MAX);\n    if (len < PATH_MAX) {\n        probe_log(\"%s: path@%p (NUL found at offset %zu): '%s'\\n\",\n                  label, (void *)path, len, path);\n    } else {\n        /* No NUL within PATH_MAX bytes; print a hexadecimal prefix so we do not\n         * attempt to treat it as a terminated C string. */\n        probe_log(\"%s: path@%p (no NUL within PATH_MAX, first %d bytes shown)\\n\",\n                  label, (void *)path, PATH_MAX);\n        /* Dump a small prefix safely. */\n        probe_log(\"%s: prefix: \", label);\n        for (size_t i = 0; i < 16 && i < PATH_MAX; i++) {\n            unsigned char c = (unsigned char)path[i];\n            probe_log(\"%02x\", c);\n            if (i + 1 < 16 && i + 1 < PATH_MAX)\n                probe_log(\" \");\n        }\n        probe_log(\"\\n\");\n    }\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Log entry into function */\n    probe_log(\"metal_init_page_sizes: enter\\n\");\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"metal_init_page_sizes: getpagesize() -> %ld\\n\", sizes[0]);\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_log(\"metal_init_page_sizes: failed to get page size, returning -EINVAL\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"metal_init_page_sizes: page_size=%ld, page_shift=%d\\n\",\n              _metal.page_size, _metal.page_shift);\n\n    /* Log the tmp_path before adding. */\n    probe_log_path(\"before metal_add_page_size(tmp_path)\", _metal.tmp_path);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n    probe_log(\"metal_init_page_sizes: called metal_add_page_size(tmp_path)\\n\");\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"metal_init_page_sizes: gethugepagesize() -> %ld\\n\", sizes[0]);\n    if (sizes[0] > 0) {\n        const char *hp = hugetlbfs_find_path();\n        probe_log_path(\"hugetlbfs_find_path()\", hp);\n        metal_add_page_size(hp,\n                    metal_log2(sizes[0]),\n                    MAP_HUGETLB);\n        probe_log(\"metal_init_page_sizes: called metal_add_page_size(hugetlbfs_find_path)\\n\");\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_log(\"metal_init_page_sizes: gethugepagesizes() -> count=%d\\n\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_log(\"metal_init_page_sizes: sizes[%d]=%ld, shift=%d\\n\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                probe_log(\"metal_init_page_sizes: sizes[%d] shift masked out (incompatible)\\n\", i);\n                continue;\n            }\n            const char *hp = hugetlbfs_find_path_for_size(sizes[i]);\n            probe_log_path(\"hugetlbfs_find_path_for_size()\", hp);\n            metal_add_page_size(\n                hp,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n            probe_log(\"metal_init_page_sizes: called metal_add_page_size(hp for size=%ld)\\n\", sizes[i]);\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"metal_init_page_sizes: before qsort, num_page_sizes=%d\\n\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    /* Log final table state (including whether paths are NUL-terminated). */\n    probe_log(\"metal_init_page_sizes: after qsort, num_page_sizes=%d\\n\", _metal.num_page_sizes);\n    for (int i = 0; i < _metal.num_page_sizes; i++) {\n        struct metal_page_size *p = &_metal.page_sizes[i];\n        /* Log basic fields. */\n        probe_log(\"entry[%d]: size=%zu, shift=%d, flags=0x%lx, path@%p\\n\",\n                  i, p->size, p->shift, (unsigned long)p->flags, (void *)p->path);\n        probe_log_path(\"entry path\", p->path);\n    }\n\n    probe_log(\"metal_init_page_sizes: exit\\n\");\n    return 0;\n}\n"
}