{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmetal_add_page_size calls strncpy(_metal.page_sizes[index].path, path, PATH_MAX). In the fragment metal_add_page_size(hugetlbfs_find_path(), metal_log2(sizes[0]), MAP_HUGETLB); the 'path' argument comes from hugetlbfs_find_path(). If hugetlbfs_find_path() returns a pointer to a source buffer whose accessible size is less than PATH_MAX (for example a buffer of size 64 while PATH_MAX is much larger), strncpy may attempt to read up to PATH_MAX bytes from 'path' and thus read beyond the bounds of the source object. That would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/459.txt. */\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Log entry and configuration. */\n    metal_probe_log(\"enter metal_init_page_sizes: MAX_PAGE_SIZES=%d max_sizes=%d\", MAX_PAGE_SIZES, max_sizes);\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    metal_probe_log(\"getpagesize() -> %ld\", sizes[0]);\n    if (sizes[0] <= 0) {\n        metal_probe_log(\"getpagesize failed: sizes[0]=%ld\", sizes[0]);\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n\n    metal_probe_log(\"_metal.tmp_path pointer=%p page_size=%ld page_shift=%d\",\n                    (void *)_metal.tmp_path, (long)_metal.page_size, _metal.page_shift);\n\n    /* Keep original call but log before calling. */\n    metal_probe_log(\"calling metal_add_page_size(temp_path, %d, 0)\", _metal.page_shift);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    metal_probe_log(\"gethugepagesize() -> %ld\", sizes[0]);\n    if (sizes[0] > 0) {\n        /* Capture the path pointer returned for logging before passing it through. */\n        char *hp = hugetlbfs_find_path();\n        metal_probe_log(\"hugetlbfs_find_path() returned %p\", (void *)hp);\n        metal_probe_log(\"calling metal_add_page_size(hp, metal_log2(%ld), MAP_HUGETLB)\", sizes[0]);\n        metal_add_page_size(hp,\n                    metal_log2(sizes[0]),\n                    MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        metal_probe_log(\"gethugepagesizes() -> count=%d\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            metal_probe_log(\"iteration i=%d sizes[%d]=%ld shift=%d\", i, i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                metal_probe_log(\"skipping sizes[%d]=%ld due to MAP_HUGE_MASK mismatch\", i, sizes[i]);\n                continue;\n            }\n\n            /* Capture and log path pointer for this size before calling metal_add_page_size. */\n            char *hp = hugetlbfs_find_path_for_size(sizes[i]);\n            metal_probe_log(\"hugetlbfs_find_path_for_size(%ld) returned %p\", sizes[i], (void *)hp);\n            metal_probe_log(\"calling metal_add_page_size(hp, %d, MAP_HUGETLB | (shift << MAP_HUGE_SHIFT))\", shift);\n            metal_add_page_size(\n                hp,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    metal_probe_log(\"about to qsort: num_page_sizes=%d\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n    metal_probe_log(\"qsort completed\");\n\n    return 0;\n}\n"
}