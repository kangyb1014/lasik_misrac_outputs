{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code declares char path[PATH_MAX] and elsewhere uses strncpy(_metal.page_sizes[index].path, path, PATH_MAX) without guaranteeing NUL-termination. If the source string length is >= PATH_MAX (e.g. hugetlbfs_find_path() or other provided path), strncpy will copy PATH_MAX bytes without writing a terminating '\\0'. Any subsequent use of string.h functions that expect a NUL-terminated string (strlen, strcat, printf(\"%s\"), etc.) on the stored path can read past the buffer end, causing an out-of-bounds access. This scenario violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/459.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "static void probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/459.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic void probe_log_buffer(const char *label, const char *buf, size_t bufsize)\n{\n    if (!buf) {\n        probe_write(\"%s: NULL\\n\", label);\n        return;\n    }\n\n    size_t len = strnlen(buf, bufsize);\n    probe_write(\"%s: buf=%p len=%zu\\n\", label, (void *)buf, len);\n\n    /* Print the printable prefix safely (limited by bufsize). */\n    probe_write(\"%s: contents=\\\"\");\n    if (len > 0)\n        probe_write(\"%.*s\", (int)len, buf);\n    probe_write(\"\\\"\");\n\n    if (len == bufsize)\n        probe_write(\" [truncated/no-nul]\");\n\n    probe_write(\"\\n\");\n\n    if (len < bufsize)\n        probe_write(\"%s: terminating byte=0x%02x\\n\", label, (unsigned char)buf[len]);\n    else\n        probe_write(\"%s: last_byte=0x%02x\\n\", label, (unsigned char)buf[bufsize - 1]);\n}\n\nstatic void probe_log_pagesize_entry(const char *when_description)\n{\n    /* If _metal.num_page_sizes is > 0, log the most recently added entry. */\n    if (_metal.num_page_sizes <= 0) {\n        probe_write(\"%s: no page sizes present (num_page_sizes=%d)\\n\",\n                    when_description, _metal.num_page_sizes);\n        return;\n    }\n\n    int idx = _metal.num_page_sizes - 1;\n    probe_write(\"%s: logging page_sizes[%d] (num_page_sizes=%d)\\n\",\n                when_description, idx, _metal.num_page_sizes);\n\n    /* Log known fields safely. */\n    probe_write(\"%s: page_sizes[%d].shift=%d flags=0x%x\\n\",\n                when_description, idx,\n                _metal.page_sizes[idx].shift,\n                _metal.page_sizes[idx].flags);\n\n    /* _metal.page_sizes[].path is expected to be of size PATH_MAX. Log safely. */\n    probe_log_buffer(\"page_sizes[].path\", _metal.page_sizes[idx].path, (size_t)PATH_MAX);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    probe_write(\"metal_init_page_sizes: entered\\n\");\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_write(\"getpagesize() -> %ld\\n\", sizes[0]);\n\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_write(\"metal_init_page_sizes: failed to get page size -> returning -EINVAL\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_write(\"page_size=%ld page_shift=%d\\n\", _metal.page_size, _metal.page_shift);\n\n    /* Log the tmp path before adding. */\n    probe_log_buffer(\"tmp_path (before add)\", _metal.tmp_path, (size_t)PATH_MAX);\n\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n    /* Log the newly added entry (most recent). */\n    probe_log_pagesize_entry(\"after adding tmp_path\");\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_write(\"gethugepagesize() -> %ld\\n\", sizes[0]);\n    if (sizes[0] > 0) {\n        const char *hp = hugetlbfs_find_path();\n        probe_write(\"hugetlbfs_find_path() -> %p\\n\", (void *)hp);\n\n        metal_add_page_size(hp,\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n\n        probe_log_pagesize_entry(\"after adding single hugepage size\");\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_write(\"gethugepagesizes() -> count=%d\\n\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_write(\"huge size[%d]=%ld shift=%d\\n\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift)\n                continue;\n\n            const char *hpfs = hugetlbfs_find_path_for_size(sizes[i]);\n            probe_write(\"hugetlbfs_find_path_for_size(%ld) -> %p\\n\", sizes[i], (void *)hpfs);\n\n            metal_add_page_size(\n                hpfs,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n\n            probe_log_pagesize_entry(\"after adding hugepage size entry\");\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_write(\"about to qsort page sizes: num_page_sizes=%d\\n\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    probe_write(\"after qsort: num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\n    probe_write(\"metal_init_page_sizes: exit success\\n\");\n    return 0;\n}\n"
}