{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call gethugepagesize() is used only as a boolean check (if (gethugepagesize() >= 0)) and its return value is not otherwise used. If gethugepagesize() is a side\u2011effect\u2011free query (as is typical), executing that call does not change program behaviour \u2014 removing the call and instead calling/getting the number of huge page sizes via gethugepagesizes() (or checking its return) would produce the same result. In that common scenario the call is an executed operation whose removal would not affect behaviour, i.e. dead code (violation of MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append textual logs to /tmp/logs/452.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    probe_log(\"metal_init_page_sizes: entry max_sizes=%d\", max_sizes);\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"getpagesize() -> %ld\", sizes[0]);\n    if (sizes[0] <= 0) {\n        probe_log(\"getpagesize() failed: %ld\", sizes[0]);\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"base page: size=%ld shift=%d\", _metal.page_size, _metal.page_shift);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"(single huge) gethugepagesize() -> %ld\", sizes[0]);\n    if (sizes[0] > 0) {\n        int shift = metal_log2(sizes[0]);\n        probe_log(\"adding single huge page: size=%ld shift=%d flags=MAP_HUGETLB\", sizes[0], shift);\n        metal_add_page_size(hugetlbfs_find_path(),\n                            shift,\n                            MAP_HUGETLB);\n    } else {\n        probe_log(\"no single huge page size available (gethugepagesize <= 0)\");\n    }\n#else\n    /* Capture and log the value returned by gethugepagesize() used as a boolean check. */\n    {\n        long gh_ret = gethugepagesize();\n        probe_log(\"gethugepagesize() (boolean check) -> %ld\", gh_ret);\n        if (gh_ret >= 0) {\n            int i, count;\n\n            /* System supports multiple huge page sizes. */\n            count = gethugepagesizes(sizes, max_sizes);\n            probe_log(\"gethugepagesizes() -> count=%d (max_sizes=%d)\", count, max_sizes);\n            for (i = 0; i < count; i++) {\n                int shift = metal_log2(sizes[i]);\n\n                probe_log(\"sizes[%d]=%ld shift=%d\", i, sizes[i], shift);\n\n                if ((shift & MAP_HUGE_MASK) != shift) {\n                    probe_log(\"sizes[%d]=%ld skipped: shift out of MAP_HUGE_MASK\", i, sizes[i]);\n                    continue;\n                }\n\n                probe_log(\"adding huge page: sizes[%d]=%ld shift=%d flags=MAP_HUGETLB|(shift<<MAP_HUGE_SHIFT)\",\n                          i, sizes[i], shift);\n                metal_add_page_size(\n                    hugetlbfs_find_path_for_size(sizes[i]),\n                    shift, (MAP_HUGETLB |\n                    (shift << MAP_HUGE_SHIFT)));\n            }\n        } else {\n            probe_log(\"gethugepagesize() boolean check failed (gh_ret < 0): %ld\", gh_ret);\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"qsort: num_page_sizes=%zu\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    probe_log(\"metal_init_page_sizes: exit success\");\n    return 0;\n}\n"
}