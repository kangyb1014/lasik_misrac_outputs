{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: if hugetlbfs_find_path() returns a non-const char * or metal_add_page_size() declares its path parameter as char * (not const char *) while neither function intends to modify the returned/path string, then the pointer should be const-qualified (const char *) per MISRA C 2023 Rule 8.13. Without the function prototypes it is not provable, but in the common case where the path is read-only the code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper that appends a line to /tmp/logs/453.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/453.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"metal_init_page_sizes: getpagesize() -> %ld\", sizes[0]);\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_log(\"metal_init_page_sizes: failed to get page size (<= 0)\");\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"metal_init_page_sizes: tmp_path ptr=%p str=\\\"%.256s\\\" page_shift=%d\",\n              (void *)_metal.tmp_path,\n              _metal.tmp_path ? _metal.tmp_path : \"(null)\",\n              _metal.page_shift);\n\n    /* Call original function, preserve logic. */\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n    probe_log(\"metal_init_page_sizes: called metal_add_page_size(tmp_path, %d, 0)\", _metal.page_shift);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"metal_init_page_sizes: gethugepagesize() -> %ld\", sizes[0]);\n    if (sizes[0] > 0) {\n        char *hp = hugetlbfs_find_path();\n        probe_log(\"metal_init_page_sizes: hugetlbfs_find_path() returned ptr=%p str=\\\"%.256s\\\"\",\n                  (void *)hp, hp ? hp : \"(null)\");\n        metal_add_page_size(hp,\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n        probe_log(\"metal_init_page_sizes: called metal_add_page_size(hp, %d, MAP_HUGETLB)\",\n                  metal_log2(sizes[0]));\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_log(\"metal_init_page_sizes: gethugepagesizes() -> count=%d\", count);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_log(\"metal_init_page_sizes: sizes[%d]=%ld shift=%d\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                probe_log(\"metal_init_page_sizes: skipping sizes[%d]=%ld due to mask mismatch\", i, sizes[i]);\n                continue;\n            }\n\n            char *hp = hugetlbfs_find_path_for_size(sizes[i]);\n            probe_log(\"metal_init_page_sizes: hugetlbfs_find_path_for_size(%ld) returned ptr=%p str=\\\"%.256s\\\"\",\n                      sizes[i], (void *)hp, hp ? hp : \"(null)\");\n\n            metal_add_page_size(\n                hp,\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n\n            probe_log(\"metal_init_page_sizes: called metal_add_page_size(hp, %d, flags=0x%x)\",\n                      shift, (unsigned)(MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"metal_init_page_sizes: before qsort num_page_sizes=%d\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n    probe_log(\"metal_init_page_sizes: after qsort\");\n\n    probe_log(\"metal_init_page_sizes: exit return 0\");\n    return 0;\n}\n"
}