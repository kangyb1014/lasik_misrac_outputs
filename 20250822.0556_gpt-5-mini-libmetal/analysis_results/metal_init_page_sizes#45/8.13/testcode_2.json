{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf metal_add_page_size's first parameter is declared as a non-const pointer (e.g. char *path) but the function does not modify the string, then _metal.tmp_path should be a pointer to const (const char *) or the function parameter should be const-qualified. In that case passing _metal.tmp_path as shown violates MISRA C 2023 Rule 8.13. (If, however, metal_add_page_size already declares its parameter as const char *, there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init_page_sizes code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init_page_sizes as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init_page_sizes:\n```c\nstatic int metal_init_page_sizes(void)\n{\n\tconst int max_sizes = MAX_PAGE_SIZES - 1;\n\tlong sizes[max_sizes];\n\n\t/* Determine system page size. */\n\tsizes[0] = getpagesize();\n\tif (sizes[0] <= 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n\t\treturn -EINVAL;\n\t}\n\t_metal.page_size  = sizes[0];\n\t_metal.page_shift = metal_log2(sizes[0]);\n\tmetal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n\t/* System does not support multiple huge page sizes. */\n\tsizes[0] = gethugepagesize();\n\tif (sizes[0] > 0) {\n\t\tmetal_add_page_size(hugetlbfs_find_path(),\n\t\t\t\t    metal_log2(sizes[0]),\n\t\t\t\t    MAP_HUGETLB);\n\t}\n#else\n\tif (gethugepagesize() >= 0) {\n\t\tint i, count;\n\n\t\t/* System supports multiple huge page sizes. */\n\t\tcount = gethugepagesizes(sizes, max_sizes);\n\t\tfor (i = 0; i < count; i++) {\n\t\t\tint shift = metal_log2(sizes[i]);\n\n\t\t\tif ((shift & MAP_HUGE_MASK) != shift)\n\t\t\t\tcontinue;\n\t\t\tmetal_add_page_size(\n\t\t\t\thugetlbfs_find_path_for_size(sizes[i]),\n\t\t\t\tshift, (MAP_HUGETLB |\n\t\t\t\t(shift << MAP_HUGE_SHIFT)));\n\t\t}\n\t}\n#endif\n#endif\n\n\t/* Finally sort the resulting array by size. */\n\tqsort(_metal.page_sizes, _metal.num_page_sizes,\n\t      sizeof(struct metal_page_size), metal_pagesize_compare);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_init_page_sizes code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers. These preserve const-correctness for the probe APIs. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/453.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic void probe_add_call(const char *context, const char *path, int shift, int flags)\n{\n    /* Log both the pointer value and the string contents (if non-NULL). */\n    probe_log(\"%s: calling metal_add_page_size(path_ptr=%p, path_str='%s', shift=%d, flags=0x%x)\\n\",\n              context, (const void *)path, (path ? path : \"(null)\"), shift, flags);\n}\n\nstatic int metal_init_page_sizes(void)\n{\n    const int max_sizes = MAX_PAGE_SIZES - 1;\n    long sizes[max_sizes];\n\n    /* Determine system page size. */\n    sizes[0] = getpagesize();\n    probe_log(\"enter: metal_init_page_sizes, getpagesize()=%ld, _metal.tmp_path_ptr=%p, _metal.tmp_path_str='%s'\\n\",\n              sizes[0], (const void *)_metal.tmp_path, (_metal.tmp_path ? _metal.tmp_path : \"(null)\"));\n\n    if (sizes[0] <= 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to get page size\\n\");\n        probe_log(\"error: getpagesize() returned %ld -> returning -EINVAL\\n\", sizes[0]);\n        return -EINVAL;\n    }\n    _metal.page_size  = sizes[0];\n    _metal.page_shift = metal_log2(sizes[0]);\n    probe_log(\"base page: size=%ld, shift=%d\\n\", sizes[0], _metal.page_shift);\n\n    /* Probe and then call metal_add_page_size with the original parameters. */\n    probe_add_call(\"base\", _metal.tmp_path, _metal.page_shift, 0);\n    metal_add_page_size(_metal.tmp_path, _metal.page_shift, 0);\n\n#ifdef HAVE_HUGETLBFS_H\n#ifndef MAP_HUGE_SHIFT\n    /* System does not support multiple huge page sizes. */\n    sizes[0] = gethugepagesize();\n    probe_log(\"gethugepagesize()=%ld\\n\", sizes[0]);\n    if (sizes[0] > 0) {\n        probe_add_call(\"hugetlb_single\", hugetlbfs_find_path(), metal_log2(sizes[0]), MAP_HUGETLB);\n        metal_add_page_size(hugetlbfs_find_path(),\n                            metal_log2(sizes[0]),\n                            MAP_HUGETLB);\n    }\n#else\n    if (gethugepagesize() >= 0) {\n        int i, count;\n\n        /* System supports multiple huge page sizes. */\n        count = gethugepagesizes(sizes, max_sizes);\n        probe_log(\"gethugepagesizes returned count=%d (max_sizes=%d)\\n\", count, max_sizes);\n        for (i = 0; i < count; i++) {\n            int shift = metal_log2(sizes[i]);\n\n            probe_log(\"huge size[%d]=%ld, shift=%d\\n\", i, sizes[i], shift);\n\n            if ((shift & MAP_HUGE_MASK) != shift) {\n                probe_log(\"skip: shift & MAP_HUGE_MASK != shift for sizes[%d]=%ld (shift=%d)\\n\", i, sizes[i], shift);\n                continue;\n            }\n            probe_add_call(\"hugetlb_multi\",\n                           hugetlbfs_find_path_for_size(sizes[i]),\n                           shift,\n                           (MAP_HUGETLB | (shift << MAP_HUGE_SHIFT)));\n            metal_add_page_size(\n                hugetlbfs_find_path_for_size(sizes[i]),\n                shift, (MAP_HUGETLB |\n                (shift << MAP_HUGE_SHIFT)));\n        }\n    }\n#endif\n#endif\n\n    /* Finally sort the resulting array by size. */\n    probe_log(\"qsort: num_page_sizes=%d\\n\", _metal.num_page_sizes);\n    qsort(_metal.page_sizes, _metal.num_page_sizes,\n          sizeof(struct metal_page_size), metal_pagesize_compare);\n\n    probe_log(\"exit: metal_init_page_sizes returning 0, final num_page_sizes=%d\\n\", _metal.num_page_sizes);\n\n    return 0;\n}\n"
}