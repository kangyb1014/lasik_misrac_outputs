{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWithin the for loop, once one of the called functions (e.g. metal_uio_read_map_attr) returns a non\u2011zero error code, the subsequent lines use the conditional expression (result ? result : func()) and thus evaluate to result and perform redundant assignments result = result. Those assignments are executed but have no effect on program behaviour and could be removed, so they constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_read_map_attr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/432.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_read_map_attr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_read_map_attr:\n```c\nstatic int metal_uio_read_map_attr(struct linux_device *ldev,\n\t\t\t\t   unsigned int index,\n\t\t\t\t   const char *name,\n\t\t\t\t   unsigned long *value)\n{\n\tconst char *cls = ldev->cls_path;\n\tstruct sysfs_attribute *attr;\n\tchar path[SYSFS_PATH_MAX];\n\tint result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/maps/map%u/%s\", cls, index, name);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tattr = sysfs_open_attribute(path);\n\tif (!attr || sysfs_read_attribute(attr) != 0) {\n\t\tsysfs_close_attribute(attr);\n\t\treturn -errno;\n\t}\n\n\t*value = strtoul(attr->value, NULL, 0);\n\n\tsysfs_close_attribute(attr);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_read_map_attr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <stdarg.h>\n\n/* Minimal definitions to make this testable/compilable without the full project. */\nstruct linux_device {\n    const char *cls_path;\n};\n\nenum { SYSFS_PATH_MAX = 256 };\n\nstruct sysfs_attribute {\n    char *value;\n    char *path;\n};\n\n/* Stub implementations of the sysfs helpers used by the original function.\n * These are intentionally simplistic: sysfs_open_attribute returns NULL when\n * the path contains the substring \"bad\" to simulate an open failure.  Otherwise\n * it returns an attribute whose value is \"42\" (string).  sysfs_read_attribute\n * returns 0 on success or -1 on simulated read failure (when path contains\n * \"readfail\"). */\nstatic struct sysfs_attribute *sysfs_open_attribute(const char *path)\n{\n    if (!path)\n        return NULL;\n    if (strstr(path, \"bad\")) {\n        errno = ENOENT;\n        return NULL;\n    }\n    struct sysfs_attribute *attr = malloc(sizeof(*attr));\n    if (!attr) {\n        errno = ENOMEM;\n        return NULL;\n    }\n    attr->path = strdup(path);\n    /* default value; tests may simulate other strings by using different paths */\n    attr->value = strdup(\"42\");\n    return attr;\n}\n\nstatic int sysfs_read_attribute(struct sysfs_attribute *attr)\n{\n    if (!attr)\n        return -1;\n    if (attr->path && strstr(attr->path, \"readfail\")) {\n        errno = EIO;\n        return -1;\n    }\n    /* success */\n    return 0;\n}\n\nstatic void sysfs_close_attribute(struct sysfs_attribute *attr)\n{\n    if (!attr)\n        return;\n    free(attr->path);\n    free(attr->value);\n    free(attr);\n}\n\n/* Simple logging helper that appends to /tmp/logs/432.txt. */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/432.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Modified metal_uio_read_map_attr with logging probes inserted. The original\n * logic is preserved; error paths that return -errno save errno before doing\n * any logging (which could mutate errno) and restore it before returning. */\nstatic int metal_uio_read_map_attr(struct linux_device *ldev,\n                                   unsigned int index,\n                                   const char *name,\n                                   unsigned long *value)\n{\n    const char *cls = ldev ? ldev->cls_path : NULL;\n    struct sysfs_attribute *attr;\n    char path[SYSFS_PATH_MAX];\n    int result;\n\n    log_probe(\"ENTER %s: ldev=%p cls=%s index=%u name=%s value_ptr=%p\",\n              __func__, (void *)ldev, cls ? cls : \"(null)\", index,\n              name ? name : \"(null)\", (void *)value);\n\n    result = snprintf(path, sizeof(path), \"%s/maps/map%u/%s\", cls, index, name);\n    log_probe(\"snprintf -> result=%d path=\\\"%s\\\" (bufsize=%zu)\", result, path, sizeof(path));\n    if (result >= (int)sizeof(path)) {\n        log_probe(\"ERROR %s: path overflow (result=%d >= %zu), returning -EOVERFLOW\",\n                  __func__, result, sizeof(path));\n        return -EOVERFLOW;\n    }\n\n    attr = sysfs_open_attribute(path);\n    log_probe(\"sysfs_open_attribute(%s) -> attr=%p errno=%d\", path, (void *)attr, errno);\n\n    if (!attr) {\n        int saved_errno = errno;\n        log_probe(\"OPEN FAIL %s: attr==NULL, errno=%d, returning -errno=%d\",\n                  __func__, saved_errno, -saved_errno);\n        /* restore errno in case logging changed it */\n        errno = saved_errno;\n        /* sysfs_close_attribute(NULL) is safe in original code; call for parity */\n        sysfs_close_attribute(attr);\n        return -errno;\n    }\n\n    if (sysfs_read_attribute(attr) != 0) {\n        int saved_errno = errno;\n        log_probe(\"READ FAIL %s: sysfs_read_attribute returned !=0 for path=%s, errno=%d, returning -errno=%d\",\n                  __func__, path, saved_errno, -saved_errno);\n        sysfs_close_attribute(attr);\n        errno = saved_errno;\n        return -errno;\n    }\n\n    log_probe(\"READ OK %s: attr->value=\\\"%s\\\"\", __func__, attr->value ? attr->value : \"(null)\");\n\n    /* parse value (original behavior) */\n    *value = strtoul(attr->value, NULL, 0);\n    log_probe(\"PARSED %s: parsed_value=%lu\", __func__, *value);\n\n    sysfs_close_attribute(attr);\n    log_probe(\"EXIT %s: returning 0\", __func__);\n    return 0;\n}\n"
}