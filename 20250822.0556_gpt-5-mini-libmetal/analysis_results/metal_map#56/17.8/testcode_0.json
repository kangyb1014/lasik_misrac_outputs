{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nWithin metal_map the parameter 'flags' is assigned a new value in the statement 'flags = MAP_PRIVATE | MAP_ANONYMOUS;' (in the fd < 0 branch). This modifies the function parameter 'flags' and thus violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <sys/file.h>\n#include <fcntl.h>\n\nstatic void metal_map_log(const char *phase, int fd, off_t offset, size_t size,\n                          int expand, int flags, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: fd=%d, offset=%jd, size=%zu, expand=%d, flags=0x%x, errno=%d\\n\",\n            phase, fd, (intmax_t)offset, size, expand, flags, err);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state */\n    metal_map_log(\"entry\", fd, offset, size, expand, flags, errno);\n\n    flags |= MAP_SHARED;\n\n    /* Log after OR'ing MAP_SHARED */\n    metal_map_log(\"after_map_shared\", fd, offset, size, expand, flags, errno);\n\n    if (fd < 0) {\n        /* Log just before modifying fd and flags to capture the violation scenario */\n        metal_map_log(\"fd_lt_0_before_change\", fd, offset, size, expand, flags, errno);\n\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        /* Log immediately after changing the parameter 'flags' */\n        metal_map_log(\"fd_lt_0_after_change\", fd, offset, size, expand, flags, errno);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        metal_map_log(\"expand_branch_start\", fd, offset, size, expand, flags, errno);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        if (!error)\n            error = fstat(fd, &stat);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        if (!error)\n            flock(fd, LOCK_UN);\n        if (error) {\n            /* Log error before returning */\n            metal_map_log(\"expand_branch_error\", fd, offset, size, expand, flags, errno);\n            return -errno;\n        }\n\n        metal_map_log(\"expand_branch_end\", fd, offset, size, expand, flags, errno);\n    }\n\n    /* Log just before mmap call */\n    metal_map_log(\"before_mmap\", fd, offset, size, expand, flags, errno);\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        /* Log mmap failure */\n        metal_map_log(\"mmap_failed\", fd, offset, size, expand, flags, errno);\n        return -errno;\n    }\n\n    /* Log mmap success and resulting pointer */\n    metal_map_log(\"mmap_success\", fd, offset, size, expand, flags, errno);\n\n    *result = mem;\n    return 0;\n}\n"
}