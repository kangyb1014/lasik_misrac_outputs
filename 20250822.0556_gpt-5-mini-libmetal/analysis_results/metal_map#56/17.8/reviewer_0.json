{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWithin metal_map the parameter 'flags' is assigned a new value in the statement 'flags = MAP_PRIVATE | MAP_ANONYMOUS;' (in the fd < 0 branch). This modifies the function parameter 'flags' and thus violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified).\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nentry: fd=6, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nentry: fd=7, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nentry: fd=9, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nentry: fd=8, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nafter_map_shared: fd=6, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=7, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=9, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=8, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=6, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=7, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=9, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=8, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=14, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nexpand_branch_end: fd=6, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=12, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nexpand_branch_end: fd=9, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=14, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=6, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=8, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=12, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=9, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=7, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=14, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=8, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=12, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=7, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=6, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=14, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=9, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=12, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=8, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=14, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=12, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=7, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=16, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nafter_map_shared: fd=16, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=16, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=16, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=16, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=15, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nmmap_success: fd=14, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=12, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=15, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=15, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_end: fd=15, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=15, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=16, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nmmap_success: fd=15, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=10, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nafter_map_shared: fd=10, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nexpand_branch_start: fd=10, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nentry: fd=7, offset=0, size=1048576, expand=1, flags=0x0, errno=0\nexpand_branch_end: fd=10, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nbefore_mmap: fd=10, offset=0, size=1048576, expand=1, flags=0x1, errno=0\nafter_map_shared: fd=7, offset=0, size=1048576, expand=1, fl\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters (except for the object pointed to by a pointer parameter \u2014 which is not the case here). In metal_map the parameter flags is written to in at least two places: 'flags |= MAP_SHARED;' and 'flags = MAP_PRIVATE | MAP_ANONYMOUS;'. Both statements modify the parameter object and therefore violate Rule 17.8. To conform, introduce a local copy (e.g. 'int map_flags = flags;') and modify that local variable instead, then use map_flags in the mmap call."
}