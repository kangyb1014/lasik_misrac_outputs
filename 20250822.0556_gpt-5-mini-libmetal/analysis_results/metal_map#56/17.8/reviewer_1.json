{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn metal_map, the parameter 'fd' (int fd) is assigned a new value with the statement 'fd = -1;'. This directly modifies a function parameter, violating MISRA C 2023 Rule 17.8. Use a local variable copy (e.g. int local_fd = fd;) if a writable copy is needed.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_map ENTRY: fd=7, offset=0, size=1048576, expand=1, flags=0x00000000\nbranch: expand path. reqsize=1048576\nmetal_map ENTRY: fd=8, offset=0, size=1048576, expand=1, flags=0x00000000\nmetal_map ENTRY: fd=6, offset=0, size=1048576, expand=1, flags=0x00000000\nflock(fd=7, LOCK_EX) returned 0, errno=0, computed error=0\nbranch: expand path. reqsize=1048576\nbranch: expand path. reqsize=1048576\nfstat result: error=0, errno=0, st_size=1048576\nmetal_map ENTRY: fd=9, offset=0, size=1048576, expand=1, flags=0x00000000\nflock(fd=6, LOCK_EX) returned 0, errno=0, computed error=0\nmmap success: mem=0x7f98a66fd000, fd=7, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nbranch: expand path. reqsize=1048576\nfstat result: error=0, errno=0, st_size=1048576\nmetal_map EXIT: returning 0\nmmap success: mem=0x7f98a65fd000, fd=6, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nflock(fd=8, LOCK_EX) returned 0, errno=0, computed error=0\nmetal_map EXIT: returning 0\nfstat result: error=0, errno=0, st_size=1048576\nflock(fd=9, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nmmap success: mem=0x7f98a54fb000, fd=8, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map EXIT: returning 0\nmmap success: mem=0x7f98a65fd000, fd=9, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map ENTRY: fd=12, offset=0, size=1048576, expand=1, flags=0x00000000\nmetal_map EXIT: returning 0\nbranch: expand path. reqsize=1048576\nflock(fd=12, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nmetal_map ENTRY: fd=10, offset=0, size=1048576, expand=1, flags=0x00000000\nbranch: expand path. reqsize=1048576\nflock(fd=10, LOCK_EX) returned 0, errno=0, computed error=0\nmetal_map ENTRY: fd=13, offset=0, size=1048576, expand=1, flags=0x00000000\nfstat result: error=0, errno=0, st_size=1048576\nmetal_map ENTRY: fd=6, offset=0, size=1048576, expand=1, flags=0x00000000\nmmap success: mem=0x7f98a4bfa000, fd=12, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nbranch: expand path. reqsize=1048576\nbranch: expand path. reqsize=1048576\nmetal_map EXIT: returning 0\nflock(fd=13, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nflock(fd=6, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nmmap success: mem=0x7f98a4afa000, fd=10, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map EXIT: returning 0\nmmap success: mem=0x7f98a41f9000, fd=13, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmmap success: mem=0x7f98a40f9000, fd=6, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map EXIT: returning 0\nmetal_map EXIT: returning 0\nmetal_map ENTRY: fd=15, offset=0, size=1048576, expand=1, flags=0x00000000\nbranch: expand path. reqsize=1048576\nflock(fd=15, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nmmap success: mem=0x7f989ff00000, fd=15, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map EXIT: returning 0\nmetal_map ENTRY: fd=14, offset=0, size=1048576, expand=1, flags=0x00000000\nbranch: expand path. reqsize=1048576\nflock(fd=14, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nmmap success: mem=0x7f989fe00000, fd=14, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nmetal_map EXIT: returning 0\nmetal_map ENTRY: fd=6, offset=0, size=1048576, expand=1, flags=0x00000000\nmetal_map ENTRY: fd=7, offset=0, size=1048576, expand=1, flags=0x00000000\nbranch: expand path. reqsize=1048576\nbranch: expand path. reqsize=1048576\nflock(fd=6, LOCK_EX) returned 0, errno=0, computed error=0\nfstat result: error=0, errno=0, st_size=1048576\nflock(fd=7, LOCK_EX) returned 0, errno=0, computed error=0\nmetal_map ENTRY: fd=10, offset=0, size=1048576, expand=1, flags=0x00000000\nmmap success: mem=0x7f3a6f39a000, fd=6, offset=0, size=1048576, flags=0x00000001. Assigned *result.\nfstat result: error=0, errno=0, st_size=1048576\nbranch: ex\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified; only the object referred to by a pointer parameter may be modified, not the parameter itself. In the function metal_map the statement \"fd = -1;\" directly assigns to the parameter fd, violating Rule 17.8. (Additionally, the function also modifies the parameter flags via \"flags |= MAP_SHARED;\", which is another violation for the same rule.) The appropriate fix is to copy parameters that need to be changed into local variables (e.g. int local_fd = fd; int local_flags = flags;) and use those local variables instead of modifying the formal parameters."
}