{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'flags |= MAP_SHARED;' modifies the parameter 'flags' (an int passed by value). MISRA C 2023 Rule 17.8 forbids modifying function parameters; this line therefore violates the rule. Fix by using a local copy (e.g. 'int local_flags = flags; local_flags |= MAP_SHARED;') and use the local variable thereafter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[metal_map] entry: fd=6 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] entry: fd=7 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] expand_before_lock: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] entry: fd=13 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=7 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=13 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] expand_before_lock: fd=7 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_fstat: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=0x100000 error=0 errno=17\n[metal_map] expand_before_lock: fd=13 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] entry: fd=8 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] after_ftruncate_if_needed: fd=6 offset=1048576 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_unlock: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=8 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=7 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] entry: fd=15 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] entry: fd=9 offset=0 size=1048576 expand=1 flags=0x0 mem=(nil) error=0 errno=17\n[metal_map] expand_before_lock: fd=8 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_fstat: fd=7 offset=0 size=1048576 expand=1 flags=0x1 mem=0x100000 error=0 errno=17\n[metal_map] mmap_success: fd=6 offset=0 size=1048576 expand=1 flags=0x1 mem=0x7f19e8610000 error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=15 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_MAP_SHARED: fd=9 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_ftruncate_if_needed: fd=7 offset=1048576 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] expand_before_lock: fd=15 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] expand_before_lock: fd=9 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_unlock: fd=7 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=15 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_fstat: fd=15 offset=0 size=1048576 expand=1 flags=0x1 mem=0x100000 error=0 errno=17\n[metal_map] after_ftruncate_if_needed: fd=15 offset=1048576 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_unlock: fd=15 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=13 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_fstat: fd=13 offset=0 size=1048576 expand=1 flags=0x1 mem=0x100000 error=0 errno=17\n[metal_map] after_ftruncate_if_needed: fd=13 offset=1048576 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_unlock: fd=13 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=9 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_fstat: fd=9 offset=0 size=1048576 expand=1 flags=0x1 mem=0x100000 error=0 errno=17\n[metal_map] after_ftruncate_if_needed: fd=9 offset=1048576 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_unlock: fd=9 offset=0 size=1048576 expand=1 flags=0x1 mem=(nil) error=0 errno=17\n[metal_map] after_flock_lock: fd=8 offs\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 prohibits modifying function parameters (for non-pointer parameters passed by value). In the code, the statement 'flags |= MAP_SHARED;' updates the parameter variable 'flags' and therefore violates R17.8. (Note: the function also assigns to the parameter 'fd' later with 'fd = -1;', which is a separate violation of the same rule; modifying *result is allowed because the rule permits modifying the object pointed to by a pointer parameter.) The appropriate fix is to use local copies (e.g. 'int local_flags = flags; local_flags |= MAP_SHARED;' and likewise for fd if needed) and use those locals thereafter."
}