{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_map, the parameter 'fd' (int fd) is assigned a new value with the statement 'fd = -1;'. This directly modifies a function parameter, violating MISRA C 2023 Rule 17.8. Use a local variable copy (e.g. int local_fd = fd;) if a writable copy is needed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/file.h>\n\nstatic void log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry with initial parameters */\n    log_printf(\"metal_map ENTRY: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%08x\",\n               (int)fd, (long long)offset, size, expand, flags);\n\n    /* Preserve original fd value for logging before any possible modification */\n    int orig_fd = fd;\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        /* Log branch taken and original fd */\n        log_printf(\"branch: fd < 0 (original fd=%d). Will assign fd = -1 and use anonymous private mapping.\", orig_fd);\n\n        fd = -1; /* NOTE: This intentionally modifies the function parameter 'fd' (reported Rule 17.8 violation) */\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        log_printf(\"after assignment: fd=%d, flags=0x%08x\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        log_printf(\"branch: expand path. reqsize=%lld\", (long long)reqsize);\n\n        /* Capture flock result for logging; preserve behavior by setting error the same way as original code */\n        int flock_res = flock(fd, LOCK_EX);\n        error = flock_res < 0 ? -errno : 0;\n        log_printf(\"flock(fd=%d, LOCK_EX) returned %d, errno=%d, computed error=%d\", fd, flock_res, errno, error);\n\n        if (!error)\n            error = fstat(fd, &stat);\n        log_printf(\"fstat result: error=%d, errno=%d, st_size=%lld\", error, errno, (long long)stat.st_size);\n\n        if (!error && stat.st_size < reqsize) {\n            error = ftruncate(fd, reqsize);\n            log_printf(\"ftruncate to %lld returned %d, errno=%d\", (long long)reqsize, error, errno);\n        }\n        if (!error)\n            flock(fd, LOCK_UN);\n        if (error) {\n            log_printf(\"expand path encountered error: error=%d, errno=%d. Returning %d\", error, errno, -errno);\n            return -errno; /* preserve original behavior */\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        log_printf(\"mmap failed: fd=%d, offset=%lld, size=%zu, flags=0x%08x, errno=%d\", fd, (long long)offset, size, flags, errno);\n        return -errno;\n    }\n\n    *result = mem;\n    log_printf(\"mmap success: mem=%p, fd=%d, offset=%lld, size=%zu, flags=0x%08x. Assigned *result.\", mem, fd, (long long)offset, size, flags);\n    log_printf(\"metal_map EXIT: returning 0\");\n    return 0;\n}\n"
}