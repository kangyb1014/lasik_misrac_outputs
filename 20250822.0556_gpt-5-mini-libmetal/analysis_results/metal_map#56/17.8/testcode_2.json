{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'flags |= MAP_SHARED;' modifies the parameter 'flags' (an int passed by value). MISRA C 2023 Rule 17.8 forbids modifying function parameters; this line therefore violates the rule. Fix by using a local copy (e.g. 'int local_flags = flags; local_flags |= MAP_SHARED;') and use the local variable thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <sys/file.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <stdlib.h>\n\n/* Probe logger: append human-readable trace lines to /tmp/logs/567.txt */\nstatic void probe_log(const char *label, int fd, off_t offset, size_t size,\n                      int expand, int flags, void *mem, int error_val)\n{\n    /* Ensure directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_map] %s: fd=%d offset=%lld size=%zu expand=%d flags=0x%x mem=%p error=%d errno=%d\\n\",\n            label, fd, (long long)offset, size, expand, flags, mem, error_val, errno);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state (capture parameter values before any modifications) */\n    probe_log(\"entry\", fd, offset, size, expand, flags, NULL, 0);\n\n    /* This line is intentionally left as in the original to demonstrate the reported violation. */\n    flags |= MAP_SHARED;\n\n    /* Log state after modifying flags with MAP_SHARED */\n    probe_log(\"after_MAP_SHARED\", fd, offset, size, expand, flags, NULL, 0);\n\n    if (fd < 0) {\n        /* Log before fd branch changes */\n        probe_log(\"fd<0_before_change\", fd, offset, size, expand, flags, NULL, 0);\n\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        /* Log after setting private/anonymous flags */\n        probe_log(\"fd<0_after_change\", fd, offset, size, expand, flags, NULL, 0);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        /* Log entering expand branch and requested size */\n        probe_log(\"expand_before_lock\", fd, offset, size, expand, flags, NULL, 0);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        probe_log(\"after_flock_lock\", fd, offset, size, expand, flags, NULL, error);\n\n        if (!error)\n            error = fstat(fd, &stat);\n        probe_log(\"after_fstat\", fd, offset, size, expand, flags, (void *)(uintptr_t)stat.st_size, error);\n\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        probe_log(\"after_ftruncate_if_needed\", fd, reqsize, size, expand, flags, NULL, error);\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        probe_log(\"after_flock_unlock\", fd, offset, size, expand, flags, NULL, error);\n\n        if (error) {\n            /* Log the error before returning */\n            probe_log(\"expand_error_return\", fd, offset, size, expand, flags, NULL, error);\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        /* Log mmap failure (mem == MAP_FAILED) */\n        probe_log(\"mmap_failed\", fd, offset, size, expand, flags, mem, -errno);\n        return -errno;\n    }\n\n    /* Log successful mmap and pointer returned */\n    probe_log(\"mmap_success\", fd, offset, size, expand, flags, mem, 0);\n\n    *result = mem;\n    return 0;\n}\n"
}