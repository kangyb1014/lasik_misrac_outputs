{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'mem' is declared as void * but is only used as an input (the function does not modify the pointed-to object). Per MISRA C 2023 Rule 8.13 it should be declared pointing to a const-qualified type (e.g. const void *mem). As written, the non-const pointer parameter violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <unistd.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append structured logs to /tmp/logs/563.txt */\nstatic void metal_map_log(const char *stage,\n                          int fd,\n                          off_t offset,\n                          size_t size,\n                          int expand,\n                          int flags,\n                          void **result_ptr,\n                          void *mem_ptr,\n                          int error_code,\n                          off_t reqsize,\n                          off_t file_size)\n{\n    FILE *f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"stage=%s\\n\", stage);\n    fprintf(f, \"  fd=%d\\n\", fd);\n    fprintf(f, \"  offset=%lld\\n\", (long long)offset);\n    fprintf(f, \"  size=%zu\\n\", size);\n    fprintf(f, \"  expand=%d\\n\", expand);\n    fprintf(f, \"  flags=0x%x\\n\", flags);\n    fprintf(f, \"  result_ptr=%p\\n\", (void *)result_ptr);\n    fprintf(f, \"  mem_ptr=%p\\n\", mem_ptr);\n    fprintf(f, \"  error_code=%d\\n\", error_code);\n    fprintf(f, \"  reqsize=%lld\\n\", (long long)reqsize);\n    fprintf(f, \"  file_size=%lld\\n\", (long long)file_size);\n    fprintf(f, \"  errno=%d\\n\", errno);\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n    off_t reqsize = 0;\n    off_t saved_file_size = -1;\n\n    /* entry probe */\n    metal_map_log(\"entry\", fd, offset, size, expand, flags, result, NULL, 0, 0, -1);\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        /* log branch taken */\n        metal_map_log(\"fd_negative_branch_before\", fd, offset, size, expand, flags, result, NULL, 0, 0, -1);\n\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        metal_map_log(\"fd_negative_branch_after\", fd, offset, size, expand, flags, result, NULL, 0, 0, -1);\n    } else if (expand) {\n        reqsize = offset + (off_t)size;\n        struct stat statbuf;\n\n        metal_map_log(\"expand_branch_before\", fd, offset, size, expand, flags, result, NULL, 0, (off_t)reqsize, -1);\n\n        /* preserve errno around system calls for logging correctness */\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"after_flock_lock\", fd, offset, size, expand, flags, result, NULL, error, reqsize, -1);\n\n        if (!error)\n            error = fstat(fd, &statbuf);\n        if (!error)\n            saved_file_size = statbuf.st_size;\n        metal_map_log(\"after_fstat\", fd, offset, size, expand, flags, result, NULL, error, reqsize, saved_file_size);\n\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after_ftruncate\", fd, offset, size, expand, flags, result, NULL, error, reqsize, saved_file_size);\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"after_flock_unlock\", fd, offset, size, expand, flags, result, NULL, error, reqsize, saved_file_size);\n\n        if (error) {\n            /* log error and preserve original behavior */\n            metal_map_log(\"expand_branch_error_return\", fd, offset, size, expand, flags, result, NULL, error, reqsize, saved_file_size);\n            return -errno;\n        }\n\n        metal_map_log(\"expand_branch_success\", fd, offset, size, expand, flags, result, NULL, 0, reqsize, saved_file_size);\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap_failed\", fd, offset, size, expand, flags, result, mem, -errno, reqsize, saved_file_size);\n        return -errno;\n    }\n\n    /* log successful mapping before assigning to result */\n    metal_map_log(\"mmap_success_before_assign\", fd, offset, size, expand, flags, result, mem, 0, reqsize, saved_file_size);\n\n    *result = mem;\n\n    metal_map_log(\"exit_success\", fd, offset, size, expand, flags, result, mem, 0, reqsize, saved_file_size);\n\n    return 0;\n}\n"
}