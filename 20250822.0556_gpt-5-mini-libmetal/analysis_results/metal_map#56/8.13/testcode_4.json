{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'instance' is declared as 'char *instance' but is only used for read-only operations (passed to snprintf with \"%s\"); it should be declared as 'const char *instance' (and the dlist_for_each_data usage updated accordingly) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/file.h>\n\n/*\n * Probe logging helper: append a single-line record describing the\n * control point and relevant state to /tmp/logs/563.txt.\n *\n * Note: logging can change errno. Callers must save and restore errno\n * around calls to this function when necessary to preserve the original\n * semantics of metal_map.\n */\nstatic void metal_map_log(const char *event, int fd, off_t offset, size_t size,\n                          int expand, int flags, int prot, int error,\n                          off_t reqsize, off_t stat_size, void *mem)\n{\n    FILE *f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (f != NULL) {\n        /* Cast integers for portable printing */\n        fprintf(f,\n                \"event=%s fd=%d offset=%lld size=%llu expand=%d flags=0x%x prot=0x%x error=%d reqsize=%lld stat_size=%lld mem=%p\\n\",\n                event,\n                fd,\n                (long long)offset,\n                (unsigned long long)size,\n                expand,\n                flags,\n                prot,\n                error,\n                (long long)reqsize,\n                (long long)stat_size,\n                mem);\n        (void)fclose(f);\n    }\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n          void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n    off_t reqsize = -1;\n    off_t stat_size = -1;\n    int saved_errno;\n\n    /* Entry log */\n    saved_errno = errno;\n    metal_map_log(\"entry\", fd, offset, size, expand, flags, prot, 0, reqsize, stat_size, NULL);\n    errno = saved_errno;\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        saved_errno = errno;\n        metal_map_log(\"anon_branch\", fd, offset, size, expand, flags, prot, 0, reqsize, stat_size, NULL);\n        errno = saved_errno;\n    } else if (expand) {\n        reqsize = offset + size;\n        struct stat stat;\n\n        /* record attempt to lock */\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        saved_errno = errno;\n        metal_map_log(\"after_flock\", fd, offset, size, expand, flags, prot, error, reqsize, stat_size, NULL);\n        errno = saved_errno;\n\n        if (!error)\n            error = fstat(fd, &stat);\n        stat_size = stat.st_size;\n        saved_errno = errno;\n        metal_map_log(\"after_fstat\", fd, offset, size, expand, flags, prot, error, reqsize, stat_size, NULL);\n        errno = saved_errno;\n\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        saved_errno = errno;\n        metal_map_log(\"after_ftruncate\", fd, offset, size, expand, flags, prot, error, reqsize, stat_size, NULL);\n        errno = saved_errno;\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        saved_errno = errno;\n        metal_map_log(\"after_unlock\", fd, offset, size, expand, flags, prot, error, reqsize, stat_size, NULL);\n        errno = saved_errno;\n\n        if (error) {\n            saved_errno = errno;\n            metal_map_log(\"expand_error_return\", fd, offset, size, expand, flags, prot, error, reqsize, stat_size, NULL);\n            errno = saved_errno;\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    saved_errno = errno;\n    metal_map_log(\"after_mmap\", fd, offset, size, expand, flags, prot, 0, reqsize, stat_size, mem == MAP_FAILED ? (void *)-1 : mem);\n    errno = saved_errno;\n\n    if (mem == MAP_FAILED) {\n        saved_errno = errno;\n        metal_map_log(\"mmap_failed_return\", fd, offset, size, expand, flags, prot, 0, reqsize, stat_size, mem);\n        errno = saved_errno;\n        return -errno;\n    }\n    *result = mem;\n    saved_errno = errno;\n    metal_map_log(\"success_return\", fd, offset, size, expand, flags, prot, 0, reqsize, stat_size, mem);\n    errno = saved_errno;\n    return 0;\n}\n"
}