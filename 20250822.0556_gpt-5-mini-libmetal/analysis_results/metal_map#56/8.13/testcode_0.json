{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'void *addr' is not const-qualified even though the function does not modify the object pointed to; it is only inspected (cast to uintptr_t) to compute an offset. According to MISRA C 2023 Rule 8.13 this should be declared as 'const void *addr'. (The output parameter 'unsigned long *phys' is correctly non-const because it is written.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable trace lines to /tmp/logs/563.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/563.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    log_probe(\"ENTER metal_map: fd=%d offset=%lld size=%llu expand=%d flags=0x%x result_ptr=%p\",\n              fd, (long long)offset, (unsigned long long)size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    log_probe(\"after OR MAP_SHARED: flags=0x%x prot=0x%x\", flags, prot);\n\n    if (fd < 0) {\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        log_probe(\"fd<0 branch taken: fd=%d flags=0x%x\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        log_probe(\"expand branch: computed reqsize=%lld (offset=%lld + size=%llu)\",\n                  (long long)reqsize, (long long)offset, (unsigned long long)size);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_probe(\"flock(LOCK_EX) returned %d (errno=%d)\", error, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        log_probe(\"after fstat: error=%d\", error);\n        if (!error && stat.st_size < reqsize) {\n            log_probe(\"file too small: st_size=%lld reqsize=%lld, attempting ftruncate\",\n                      (long long)stat.st_size, (long long)reqsize);\n            if (!error)\n                error = ftruncate(fd, reqsize);\n            log_probe(\"after ftruncate: error=%d (errno=%d)\", error, errno);\n        } else if (!error) {\n            log_probe(\"no truncate needed: st_size=%lld reqsize=%lld\",\n                      (long long)stat.st_size, (long long)reqsize);\n        }\n        if (!error)\n            flock(fd, LOCK_UN);\n        log_probe(\"released lock, final error=%d\", error);\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    log_probe(\"mmap called: mem=%p size=%llu prot=0x%x flags=0x%x fd=%d offset=%lld errno=%d\",\n              mem, (unsigned long long)size, prot, flags, fd, (long long)offset, errno);\n    if (mem == MAP_FAILED) {\n        log_probe(\"mmap failed: MAP_FAILED errno=%d\", errno);\n        return -errno;\n    }\n    *result = mem;\n    log_probe(\"mapping success: result=%p returning 0\", mem);\n    return 0;\n}\n"
}