{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro definition uses a non\u2011standard variadic-parameter form: #define metal_sys_io_mem_map(__VA_ARGS__) and the call metal_sys_io_mem_map(io); relies on that macro. Using __VA_ARGS__ as the macro parameter name (instead of the standard C99 form using '...') is a compiler/preprocessor extension (GCC/Clang document named-variadic/alternate forms as extensions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/130.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <limits.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/130.txt. */\nstatic void metal_io_log_probe(const char *stage,\n                               const void *io_ptr,\n                               const void *virt,\n                               const void *physmap,\n                               size_t size,\n                               unsigned int page_shift,\n                               unsigned long page_mask,\n                               unsigned int mem_flags,\n                               const void *ops_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/130.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"[metal_io_init] stage=%s\\n\", stage);\n    fprintf(f, \"  io=%p\\n\", io_ptr);\n    fprintf(f, \"  virt=%p\\n\", virt);\n    fprintf(f, \"  physmap=%p\\n\", physmap);\n    fprintf(f, \"  size=%zu\\n\", size);\n    fprintf(f, \"  page_shift=%u\\n\", page_shift);\n    fprintf(f, \"  page_mask=0x%lx\\n\", page_mask);\n    fprintf(f, \"  mem_flags=0x%x\\n\", mem_flags);\n    fprintf(f, \"  ops=%p\\n\", ops_ptr);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Log entry state before modifications */\n    metal_io_log_probe(\"entry\", (const void *)io, virt, physmap, size,\n                       page_shift, 0UL, mem_flags, (const void *)ops);\n\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n        /* avoid overflow */\n        io->page_mask = -1UL;\n    else\n        io->page_mask = (1UL << page_shift) - 1UL;\n    io->mem_flags = mem_flags;\n    io->ops = ops ? *ops : nops;\n\n    /* Log state after computing page_mask and setting fields */\n    metal_io_log_probe(\"before_sys_map_call\", (const void *)io, virt, physmap, size,\n                       page_shift, io->page_mask, mem_flags, (const void *)ops);\n\n    /* Record the fact we're about to invoke the system mapping helper. */\n    metal_io_log_probe(\"invoke_metal_sys_io_mem_map\", (const void *)io, virt, physmap, size,\n                       page_shift, io->page_mask, mem_flags, (const void *)ops);\n\n    /* Original call preserved to exercise potential preprocessor macro usage. */\n    metal_sys_io_mem_map(io);\n\n    /* Log completion (control returned here if expansion allows) */\n    metal_io_log_probe(\"after_sys_map_call\", (const void *)io, virt, physmap, size,\n                       page_shift, io->page_mask, mem_flags, (const void *)ops);\n}\n"
}