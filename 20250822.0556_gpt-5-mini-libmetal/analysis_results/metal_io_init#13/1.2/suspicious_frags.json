{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_io_init:\ntypedef unsigned long metal_phys_addr_t\n...\n#define metal_sys_io_mem_map(__VA_ARGS__) \n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "metal_sys_io_mem_map(io);",
    "#define metal_sys_io_mem_map(__VA_ARGS__)"
  ],
  "explanation": "No other language extensions are present in the provided code. The struct aggregate initializer (const struct metal_io_ops nops = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };), pointer and integer assignments, use of sizeof and CHAR_BIT, bit-shift and unsigned literal operations (io->page_mask = -1UL; io->page_mask = (1UL << page_shift) - 1UL;), conditional (?:) and struct copy assignment (io->ops = ops ? *ops : nops;), typedef of unsigned long, use of size_t and unsigned int, and the function signature and call semantics are all standard C constructs (C99/C11/C17) and do not rely on compiler-specific extensions. There are no occurrences of other common compiler extensions such as __attribute__, typeof, inline assembly, statement-expressions, nested functions, or nonstandard extensions in the shown code; therefore those parts need not be investigated further."
}