{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function pointer parameter 'struct metal_io_region *io' is a pointer to a non-const type. Per MISRA C 2023 Rule 8.13, if the function does not modify the region it should be declared as 'const struct metal_io_region *io' (e.g. unsigned long (*phys_to_offset)(const struct metal_io_region *io, metal_phys_addr_t phys);). The other parameter (metal_phys_addr_t phys) is not a pointer and is not relevant. Because the pointer parameter is not const-qualified where it could be, this violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stddef.h>\n\nstatic void metal_io_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Log entry and input parameters (do not dereference io before init) */\n    metal_io_log(\"metal_io_init: entry: io=%p virt=%p physmap=%p size=%zu page_shift=%u mem_flags=%u ops=%p\",\n                 (void *)io, virt, (const void *)physmap, size, page_shift, mem_flags, (const void *)ops);\n\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT) {\n        /* avoid overflow */\n        io->page_mask = -1UL;\n        metal_io_log(\"metal_io_init: page_mask overflow branch taken: page_shift=%u bits=%zu page_mask=%#lx\",\n                     page_shift, (size_t)(sizeof(io->page_mask) * CHAR_BIT), io->page_mask);\n    } else {\n        io->page_mask = (1UL << page_shift) - 1UL;\n        metal_io_log(\"metal_io_init: page_mask computed: page_shift=%u page_mask=%#lx\",\n                     page_shift, io->page_mask);\n    }\n\n    io->mem_flags = mem_flags;\n    io->ops = ops ? *ops : nops;\n\n    metal_io_log(\"metal_io_init: after assignments: io=%p virt=%p physmap=%p size=%zu page_shift=%u page_mask=%#lx mem_flags=%u ops_ptr=%p ops_was_null=%d\",\n                 (void *)io, io->virt, (const void *)io->physmap, io->size, io->page_shift, io->page_mask, io->mem_flags,\n                 (const void *)ops, (ops == NULL) ? 1 : 0);\n\n    metal_sys_io_mem_map(io);\n\n    metal_io_log(\"metal_io_init: exit after metal_sys_io_mem_map: io=%p\", (void *)io);\n}\n"
}