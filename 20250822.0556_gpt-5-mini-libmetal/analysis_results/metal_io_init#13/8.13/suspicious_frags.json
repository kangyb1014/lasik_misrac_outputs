{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_io_init:\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n...\nstruct metal_io_ops {\n\tuint64_t\t(*read)(struct metal_io_region *io,\n\t\t\t\tunsigned long offset,\n\t\t\t\tmemory_order order,\n\t\t\t\tint width);\n\tvoid\t\t(*write)(struct metal_io_region *io,\n\t\t\t\t unsigned long offset,\n\t\t\t\t uint64_t value,\n\t\t\t\t memory_order order,\n\t\t\t\t int width);\n\tint\t\t(*block_read)(struct metal_io_region *io,\n\t\t\t\t      unsigned long offset,\n\t\t\t\t      void *restrict dst,\n\t\t\t\t      memory_order order,\n\t\t\t\t      int len);\n\tint\t\t(*block_write)(struct metal_io_region *io,\n\t\t\t\t       unsigned long offset,\n\t\t\t\t       const void *restrict src,\n\t\t\t\t       memory_order order,\n\t\t\t\t       int len);\n\tvoid\t\t(*block_set)(struct metal_io_region *io,\n\t\t\t\t     unsigned long offset,\n\t\t\t\t     unsigned char value,\n\t\t\t\t     memory_order order,\n\t\t\t\t     int len);\n\tvoid\t\t(*close)(struct metal_io_region *io);\n\tmetal_phys_addr_t (*offset_to_phys)(struct metal_io_region *io,\n\t\t\t\t\t    unsigned long offset);\n\tunsigned long\t(*phys_to_offset)(struct metal_io_region *io,\n\t\t\t\t\t  metal_phys_addr_t phys);\n}\n...\n#define metal_sys_io_mem_map(__VA_ARGS__) \n...\ntypedef unsigned long metal_phys_addr_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "void\t\t(*write)(struct metal_io_region *io,\nt\t\t\t unsigned long offset,\n\t\t\t\t uint64_t value,\n\t\t\t\t memory_order order,\n\t\t\t\t int width);",
    "int\t\t(*block_write)(struct metal_io_region *io,\n\t\t\t\t   unsigned long offset,\n\t\t\t\t   const void *restrict src,\n\t\t\t\t   memory_order order,\n\t\t\t\t   int len);",
    "io->virt = virt;",
    "void *virt;",
    "void\t\t(*block_set)(struct metal_io_region *io,\n\t\t\t     unsigned long offset,\n\t\t\t     unsigned char value,\n\t\t\t     memory_order order,\n\t\t\t     int len);",
    "uint64_t\t(*read)(struct metal_io_region *io,\n\t\t\tunsigned long offset,\n\t\t\tmemory_order order,\n\t\t\tint width);",
    "metal_phys_addr_t (*offset_to_phys)(struct metal_io_region *io,\n\t\t\t\t\t    unsigned long offset);",
    "unsigned long\t(*phys_to_offset)(struct metal_io_region *io,\n\t\t\t\t  metal_phys_addr_t phys);",
    "io->ops = ops ? *ops : nops;",
    "io->physmap = physmap;",
    "struct metal_io_ops ops;",
    "void metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)",
    "void\t\t(*close)(struct metal_io_region *io);",
    "int\t\t(*block_read)(struct metal_io_region *io,\n\t\t\t\t  unsigned long offset,\n\t\t\t\t  void *restrict dst,\n\t\t\t\t  memory_order order,\n\t\t\t\t  int len);"
  ],
  "explanation": "I included code fragments that involve pointer types that are not const-qualified (or where const qualification is removed/propagated) and thus are candidates for investigation with respect to MISRA C 2023 Rule 8.13. Specifically: the metal_io_init parameter list (void *virt, const struct metal_io_ops *ops) and the assignments io->virt = virt; io->physmap = physmap; and io->ops = ops ? *ops : nops; because they show use or transfer of pointer/struct data where constness might be relevant. I included the struct metal_io_region fields void *virt and struct metal_io_ops ops since these are the destinations of pointer or ops data. I included every function-pointer declaration in struct metal_io_ops that takes a struct metal_io_region *io (and the block_read dst parameter) since the pointer parameter type (struct metal_io_region *) appears repeatedly without const qualification and may be unnecessarily mutable.\n\nWhy other fragments were not included: physmap is already declared const (const metal_phys_addr_t *physmap and io->physmap is const), so it conforms to the rule and does not need investigation. The block_write callback already uses const for its src parameter, so that is correct for Rule 8.13. The page_mask/page_shift arithmetic and metal_sys_io_mem_map macro do not involve pointer const-qualification and are irrelevant to Rule 8.13. The typedef of metal_phys_addr_t is an integer type (unsigned long), not a pointer, so it is not subject to this rule. Other non-pointer fields (size, mem_flags, page_mask) or uses that do not change pointer constness were omitted as not relevant to this rule."
}