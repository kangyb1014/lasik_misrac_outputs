{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function pointer offset_to_phys is declared to take a non-const pointer parameter: 'struct metal_io_region *io'. If implementations do not modify the pointed-to metal_io_region (which is likely for an offset->phys mapping operation), the parameter should be 'const struct metal_io_region *io'. Because the pointer target is not const-qualified where it could be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\nPlease provide the modified metal_io_init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <limits.h>\n\n/* Probe logging helper. Keeps original logic intact and only emits\n   diagnostics to /tmp/logs/133.txt for reproduction and evidence. */\nstatic void metal_io_log_probe(const char *phase,\n                               const void *io_ptr,\n                               void *virt,\n                               const void *physmap,\n                               size_t size,\n                               unsigned int page_shift,\n                               unsigned long page_mask,\n                               unsigned int mem_flags,\n                               const void *ops_ptr,\n                               int used_default_ops)\n{\n    FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n    if (!f) {\n        /* If logging cannot be performed, do not disturb original logic. */\n        return;\n    }\n\n    fprintf(f, \"[%s] io=%\" PRIxPTR \", virt=%\" PRIxPTR \", physmap=%\" PRIxPTR \", size=%zu, page_shift=%u, page_mask=0x%08\" PRIxPTR \", mem_flags=0x%08x, ops=%\" PRIxPTR \", used_default_ops=%d\\n\",\n            phase,\n            (uintptr_t)io_ptr,\n            (uintptr_t)virt,\n            (uintptr_t)physmap,\n            size,\n            page_shift,\n            (uintptr_t)page_mask,\n            mem_flags,\n            (uintptr_t)ops_ptr,\n            used_default_ops);\n\n    fclose(f);\n}\n\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n          const metal_phys_addr_t *physmap, size_t size,\n          unsigned int page_shift, unsigned int mem_flags,\n          const struct metal_io_ops *ops)\n{\n    const struct metal_io_ops nops = {\n        NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n    };\n\n    /* Log entry and input pointer addresses to help reproduce scenario\n       where callers pass non-const pointers (evidence for Rule 8.13). */\n    metal_io_log_probe(\"entry\", io, virt, physmap, size, page_shift, 0u, mem_flags, ops, ops == NULL);\n\n    io->virt = virt;\n    io->physmap = physmap;\n    io->size = size;\n    io->page_shift = page_shift;\n    if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n        /* avoid overflow */\n        io->page_mask = -1UL;\n    else\n        io->page_mask = (1UL << page_shift) - 1UL;\n    io->mem_flags = mem_flags;\n    io->ops = ops ? *ops : nops;\n\n    /* Log state after initialization but before calling the system map\n       so the control path and computed state are captured. */\n    metal_io_log_probe(\"pre-map\", io, io->virt, io->physmap, io->size, io->page_shift, io->page_mask, io->mem_flags, ops, ops == NULL);\n\n    metal_sys_io_mem_map(io);\n\n    /* Log after mapping to capture any effects of metal_sys_io_mem_map. */\n    metal_io_log_probe(\"post-map\", io, io->virt, io->physmap, io->size, io->page_shift, io->page_mask, io->mem_flags, ops, ops == NULL);\n}\n"
}