{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable irq is declared as 'struct metal_irq *irq' and is set to point at elements of the metal_softirqs descriptor array. If metal_irq_handle (or any user of irq) does not need to modify the pointed-to metal_irq object, then irq should be declared as 'const struct metal_irq *irq' so that the pointer points to a const-qualified type. In that common case the current code violates MISRA C 2023 Rule 8.13. (If, however, metal_irq_handle legitimately modifies the metal_irq object, then a non-const pointer is required and the rule is not violated.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_dispatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_dispatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_dispatch:\n```c\nvoid metal_softirq_dispatch(void)\n{\n\tint i;\n\n\tfor (i = 0; i < metal_softirq_num; i++) {\n\t\tstruct metal_irq *irq;\n\t\tchar is_pending = 1;\n\n\t\tif (atomic_load(&metal_softirq_enabled[i]) != 0 &&\n\t\t    atomic_compare_exchange_strong(&metal_softirq_pending[i],\n\t\t\t\t\t\t   &is_pending, 0)) {\n\t\t\tirq = &metal_softirqs[i];\n\t\t\t(void)metal_irq_handle(irq,\n\t\t\t\t\t       i + metal_softirq_cntr.irq_base);\n\t\t}\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_dispatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nstatic void metal_softirq_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/233.txt\", \"a\");\n    if (f != NULL) {\n        va_list ap;\n        va_start(ap, fmt);\n        (void)vfprintf(f, fmt, ap);\n        va_end(ap);\n        (void)fclose(f);\n    }\n}\n\nvoid metal_softirq_dispatch(void)\n{\n\tint i;\n\n\tfor (i = 0; i < metal_softirq_num; i++) {\n\t\tstruct metal_irq *irq;\n\t\tchar is_pending = 1;\n\n\t\t/* Log enabled flag and initial pending state */\n\t\tint enabled = (atomic_load(&metal_softirq_enabled[i]) != 0);\n\t\tmetal_softirq_log(\"softirq: index=%d enabled=%d pending_init=%d\\n\",\n\t\t\t\t\t i, enabled, (int)is_pending);\n\n\t\t/* Perform compare-exchange only when enabled (same short-circuit logic as original) */\n\t\tbool exchanged = false;\n\t\tif (enabled) {\n\t\t\texchanged = atomic_compare_exchange_strong(&metal_softirq_pending[i],\n\t\t\t\t\t\t\t\t &is_pending, 0);\n\t\t\tmetal_softirq_log(\"softirq: index=%d cmpxchg_result=%d pending_after=%d\\n\",\n\t\t\t\t\t i, exchanged ? 1 : 0, (int)is_pending);\n\t\t} else {\n\t\t\tmetal_softirq_log(\"softirq: index=%d skipped cmpxchg (disabled)\\n\", i);\n\t\t}\n\n\t\tif (enabled && exchanged) {\n\t\t\tirq = &metal_softirqs[i];\n\t\t\tmetal_softirq_log(\"softirq: index=%d irq_ptr=%p calling metal_irq_handle(irq_no=%d)\\n\",\n\t\t\t\t\t i, (void *)irq, i + metal_softirq_cntr.irq_base);\n\n\t\t\t(void)metal_irq_handle(irq,\n\t\t\t\t\t   i + metal_softirq_cntr.irq_base);\n\n\t\t\tmetal_softirq_log(\"softirq: index=%d metal_irq_handle returned\\n\", i);\n\t\t}\n\t}\n}\n"
}