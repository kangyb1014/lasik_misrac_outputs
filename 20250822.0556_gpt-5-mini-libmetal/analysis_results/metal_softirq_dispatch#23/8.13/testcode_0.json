{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'void *arg' in struct metal_irq is not const-qualified. If the interrupt handlers only read the context pointer (i.e. the pointed object is not modified and is passed as read-only via metal_irq_handle/handlers), then the pointer should be declared 'const void *arg'. As written, using plain 'void *' violates MISRA C 2023 Rule 8.13 because the pointer could and should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_dispatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_dispatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_dispatch:\n```c\nvoid metal_softirq_dispatch(void)\n{\n\tint i;\n\n\tfor (i = 0; i < metal_softirq_num; i++) {\n\t\tstruct metal_irq *irq;\n\t\tchar is_pending = 1;\n\n\t\tif (atomic_load(&metal_softirq_enabled[i]) != 0 &&\n\t\t    atomic_compare_exchange_strong(&metal_softirq_pending[i],\n\t\t\t\t\t\t   &is_pending, 0)) {\n\t\t\tirq = &metal_softirqs[i];\n\t\t\t(void)metal_irq_handle(irq,\n\t\t\t\t\t       i + metal_softirq_cntr.irq_base);\n\t\t}\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_dispatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe: log key state for a softirq dispatch event. Appends to\n * /tmp/logs/233.txt so other agents can inspect control flow and\n * the in-memory bytes at the start of the struct metal_irq instance.\n * This preserves the original logic and only observes object bytes\n * without changing program behavior.\n */\nstatic void metal_softirq_log_event(int idx, struct metal_irq *irq,\n                                    int enabled, char was_pending)\n{\n    FILE *f = fopen(\"/tmp/logs/233.txt\", \"a\");\n    if (f == NULL) {\n        /* best-effort logging; don't change program flow if logging fails */\n        return;\n    }\n\n    (void)fprintf(f, \"[metal_softirq] idx=%d enabled=%d was_pending=%d irq_ptr=%p\\n\",\n                  idx, enabled, was_pending, (void *)irq);\n\n    /* Dump the first two pointer-sized words of the irq object as bytes.\n     * This is a conservative observation of the object representation\n     * (doesn't dereference presumed members) and can help reveal the\n     * presence/values of internal pointer fields such as an \"arg\" pointer.\n     */\n    unsigned char bytes[sizeof(void *) * 2];\n    memset(bytes, 0, sizeof(bytes));\n\n    /* Copy raw bytes from the object representation. This is an\n     * observation-only read (via unsigned char *) and does not invoke\n     * object semantics.\n     */\n    memcpy(bytes, (const void *)irq, sizeof(bytes));\n\n    (void)fprintf(f, \"[metal_softirq] irq_bytes:\");\n    for (size_t b = 0; b < sizeof(bytes); ++b) {\n        (void)fprintf(f, \" %02x\", (unsigned int)bytes[b]);\n    }\n    (void)fprintf(f, \"\\n\");\n\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nvoid metal_softirq_dispatch(void)\n{\n    int i;\n\n    for (i = 0; i < metal_softirq_num; i++) {\n        struct metal_irq *irq;\n        char is_pending = 1;\n\n        if (atomic_load(&metal_softirq_enabled[i]) != 0 &&\n            atomic_compare_exchange_strong(&metal_softirq_pending[i],\n                                           &is_pending, 0)) {\n            irq = &metal_softirqs[i];\n\n            /* Log state just before invoking the handler so other agents\n             * can see the control path and the in-memory bytes of the\n             * irq object (which may include the non-const 'arg' pointer).\n             */\n            metal_softirq_log_event(i, irq,\n                                    (int)atomic_load(&metal_softirq_enabled[i]),\n                                    is_pending);\n\n            /* Preserve original behavior: call the handler and ignore\n             * its return value, as in the original code.\n             */\n            (void)metal_irq_handle(irq,\n                                   i + metal_softirq_cntr.irq_base);\n\n            /* Log that the handler invocation completed. This helps to\n             * reproduce/control the sequence of events for the violation\n             * scenario without changing program logic.\n             */\n            metal_softirq_log_event(i, irq,\n                                    (int)atomic_load(&metal_softirq_enabled[i]),\n                                    0);\n        }\n    }\n}\n"
}