{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GNU statement-expression syntax '({ ... })' and the GNU variadic comma-swallowing extension '##__VA_ARGS__' (both documented GCC extensions). These are compiler-specific language extensions, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_driver code that contains useful probe functions that print useful logs to a file \"/tmp/logs/360.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_driver as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_driver:\n```c\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* If all else fails... */\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_driver code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper logging function to capture control flow and state. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/360.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n                                    struct linux_driver *ldrv)\n{\n    char command[256];\n    int ret;\n\n    probe_log(\"enter: %s: lbus=%p, ldrv=%p\", __func__, (void *)lbus, (void *)ldrv);\n    if (lbus)\n        probe_log(\"bus_name=%s\", lbus->bus_name ? lbus->bus_name : \"(null)\");\n    if (ldrv) {\n        probe_log(\"drv_name=%s, mod_name=%s, initial sdrv=%p\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n                  ldrv->mod_name ? ldrv->mod_name : \"(null)\",\n                  (void *)ldrv->sdrv);\n    }\n\n    ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n    probe_log(\"after initial sysfs_open_driver: sdrv=%p\", (void *)ldrv->sdrv);\n\n    /* Try probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log(\"first snprintf returned %d, command='%s'\", ret, command);\n        if (ret >= (int)sizeof(command)) {\n            probe_log(\"first snprintf overflow: returning -EOVERFLOW\");\n            return -EOVERFLOW;\n        }\n        ret = system(command);\n        probe_log(\"system('%s') returned %d\", command, ret);\n        if (ret < 0) {\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            probe_log(\"system call failed with ret=%d\", ret);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log(\"after first modprobe attempt, sdrv=%p\", (void *)ldrv->sdrv);\n    }\n\n    /* Try sudo probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log(\"second snprintf returned %d, command='%s'\", ret, command);\n        if (ret >= (int)sizeof(command)) {\n            probe_log(\"second snprintf overflow: returning -EOVERFLOW\");\n            return -EOVERFLOW;\n        }\n        ret = system(command);\n        probe_log(\"system('%s') returned %d\", command, ret);\n        if (ret < 0) {\n            metal_log(METAL_LOG_WARNING,\n                      \"%s: executing system command '%s' failed.\\n\",\n                      __func__, command);\n            probe_log(\"sudo system call failed with ret=%d\", ret);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log(\"after sudo modprobe attempt, sdrv=%p\", (void *)ldrv->sdrv);\n    }\n\n    /* If all else fails... */\n    probe_log(\"exit: %s returning %d (sdrv=%p)\", __func__, ldrv->sdrv ? 0 : -ENODEV, (void *)ldrv->sdrv);\n    return ldrv->sdrv ? 0 : -ENODEV;\n}\n"
}