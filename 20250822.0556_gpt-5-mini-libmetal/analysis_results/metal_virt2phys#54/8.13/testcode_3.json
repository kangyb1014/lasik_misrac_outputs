{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is only used for address arithmetic and passed (without being dereferenced for modification) to metal_virt2phys. The code never writes through 'virt', so it could be declared as 'const uint8_t *virt'. Because it is declared as a non-const pointer even though the pointee is not modified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe helper: append a diagnostic line to /tmp/logs/543.txt.\n * Keep the function small and independent so it does not affect\n * the original logic of metal_virt2phys.\n */\nstatic void metal_probe_log(const char *stage, void *addr, off_t offset,\n                            ssize_t pread_ret, uint64_t entry, int retcode)\n{\n    FILE *f = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not alter errno or program behavior. */\n        return;\n    }\n\n    /* Print a compact record of the control path and key state. */\n    fprintf(f, \"stage=%s addr=%p offset=0x%llx pread_ret=%zd entry=0x%llx ret=%d\\n\",\n            stage,\n            addr,\n            (unsigned long long)offset,\n            pread_ret,\n            (unsigned long long)entry,\n            retcode);\n\n    fclose(f);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Log entry into the function and the addr value. */\n    metal_probe_log(\"enter\", addr, 0, 0, 0, 0);\n\n    if (_metal.pagemap_fd < 0) {\n        /* Log the negative pagemap_fd path. */\n        metal_probe_log(\"bad_fd\", addr, 0, 0, 0, -EINVAL);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\n    /* Log computed offset before the pread. */\n    metal_probe_log(\"before_pread\", addr, offset, 0, 0, 0);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    if (error < 0) {\n        /* Capture errno now for message consistency. */\n        int saved_errno = errno;\n\n        /* Log the pread failure with offset and errno string. */\n        metal_probe_log(\"pread_failed\", addr, offset, error, 0, -saved_errno);\n\n        /* Also emit the original log as the code did. */\n        metal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(saved_errno));\n        return -saved_errno;\n    }\n\n    /* Log the raw pagemap entry read. */\n    metal_probe_log(\"after_pread\", addr, offset, error, entry, 0);\n\n    /* Check page present and not swapped. */\n    if ((entry >> 62) != 2) {\n        metal_probe_log(\"not_present\", addr, offset, error, entry, -ENOENT);\n        metal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\n    /* Log the final computed physical address value. */\n    metal_probe_log(\"success\", addr, offset, error, entry, 0);\n\n    return 0;\n}\n"
}