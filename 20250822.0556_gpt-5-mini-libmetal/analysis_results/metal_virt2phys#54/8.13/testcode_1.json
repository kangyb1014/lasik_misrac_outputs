{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses 'virt' declared as 'uint8_t *virt' but 'virt' is only used to compute addresses and not to modify pointed data (passed to metal_virt2phys). According to Rule 8.13, 'virt' should be a pointer to a const-qualified type (e.g. 'const uint8_t *virt'), and metal_virt2phys could take a 'const void *addr'. As written, the non-const declaration of 'virt' violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n\nstatic void probe_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (f == NULL) {\n        /* Best-effort logging; do not change errno for caller. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Probe: function entry and initial state */\n    probe_printf(\"ENTER metal_virt2phys: addr=%p phys_ptr=%p\", addr, (void *)phys);\n\n    if (_metal.pagemap_fd < 0) {\n        probe_printf(\"ERROR: pagemap_fd < 0 (%d)\", _metal.pagemap_fd);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n    probe_printf(\"Computed offset: addr=%p -> offset=0x%llx (page_shift=%u)\",\n                 addr,\n                 (unsigned long long)offset,\n                 (unsigned)_metal.page_shift);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    probe_printf(\"pread returned: error=%d entry=0x%llx errno=%d (%s)\",\n                 error,\n                 (unsigned long long)entry,\n                 errno,\n                 strerror(errno));\n\n    if (error < 0) {\n        probe_printf(\"READ_FAIL: failed pagemap pread (offset 0x%llx) - %s\",\n                     (unsigned long long)offset, strerror(errno));\n        /* Preserve original behavior */\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    probe_printf(\"ENTRY_FIELDS: entry=0x%llx (>>62 = 0x%llx)\",\n                 (unsigned long long)entry,\n                 (unsigned long long)(entry >> 62));\n\n    if ((entry >> 62) != 2) {\n        probe_printf(\"NOT_PRESENT: pagemap page not present, offset=0x%llx entry=0x%llx\",\n                     (unsigned long long)offset,\n                     (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n    probe_printf(\"SUCCESS: phys=0x%lx (computed from entry=0x%llx)\",\n                 (unsigned long)*phys,\n                 (unsigned long long)entry);\n    return 0;\n}\n"
}