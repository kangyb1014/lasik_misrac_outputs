{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nmetal_virt2phys is declared as static int metal_virt2phys(void *addr, unsigned long *phys) but it only reads from the memory pointed to by addr. The call error = metal_virt2phys(virt + offset, &phys[page]); therefore passes a non-const pointer into a function parameter that could and should be const-qualified (const void *addr). Because the pointer target can be const-qualified, this usage violates MISRA C 2023 Rule 8.13. (Fix: change the function prototype to take const void *addr.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/543.txt */\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (!f)\n        return; /* Do not interfere with original behavior if logging not possible */\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\t/* Log entry into the function with key state */\n\tmetal_probe_log(\"metal_virt2phys called: addr=%p phys=%p\\n\", addr, (void *)phys);\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tmetal_probe_log(\"metal_virt2phys early return: pagemap_fd=%d < 0 -> return %d\\n\",\n\t\t\t\t_metal.pagemap_fd, -EINVAL);\n\t\treturn -EINVAL;\n\t}\n\n\tmetal_probe_log(\"pagemap_fd=%d page_shift=%d\\n\", _metal.pagemap_fd, _metal.page_shift);\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\tmetal_probe_log(\"computed offset: addr=%p (uintptr_t=%\" PRIuPTR \") >> %d -> offset=%llu\\n\",\n\t\t\t\taddr, (uintptr_t)addr, _metal.page_shift, (unsigned long long)offset);\n\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tmetal_probe_log(\"pread returned: error=%d entry=0x%llx\\n\", error, (unsigned long long)entry);\n\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\tmetal_probe_log(\"pread failed: errno=%d (%s) -> return -%d\\n\", errno, strerror(errno), errno);\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\tmetal_probe_log(\"pagemap not present: offset=0x%llx entry=0x%llx -> return %d\\n\",\n\t\t\t\t(unsigned long long)offset, (unsigned long long)entry, -ENOENT);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\tmetal_probe_log(\"calculated phys: entry=0x%llx phys=0x%lx -> return 0\\n\",\n\t\t\t\t(unsigned long long)entry, *phys);\n\treturn 0;\n}\n"
}