{
  "user_message": "An agent A claimed that the following metal_virt2phys code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_virt2phys.\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct metal_page_size *ps' is only read (ps->page_size, ps->mmap_flags, ps->page_shift, etc.) and is not modified inside metal_shmem_try_map. Per MISRA C 2023 Rule 8.13, it should be declared const (i.e. 'const struct metal_page_size *ps'). The output parameter 'struct metal_io_region **result' must remain non-const because the function stores '*result = io'.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_virt2phys: addr=0x7fbc0c6cd000 phys=0x7fbbf8000b70 _metal.pagemap_fd=4 _metal.page_shift=12\ncalculated offset = 0x3fde063668 (addr=0x7fbc0c6cd000 >> 12 * 8)\nENTER metal_virt2phys: addr=0x7fbc0c7cd000 phys=0x7fbc00000b70 _metal.pagemap_fd=4 _metal.page_shift=12\nENTER metal_virt2phys: addr=0x7fbc0c5cd000 phys=0x7fbbfc000b70 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned 8 (errno=0: Success)\ncalculated offset = 0x3fde063e68 (addr=0x7fbc0c7cd000 >> 12 * 8)\ncalculated offset = 0x3fde062e68 (addr=0x7fbc0c5cd000 >> 12 * 8)\npagemap entry read = 0xa080000000000000\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\nEXIT metal_virt2phys -> success (phys=0x0)\nENTER metal_virt2phys: addr=0x7fbc0c6ce000 phys=0x7fbbf8000b78 _metal.pagemap_fd=4 _metal.page_shift=12\ncalculated offset = 0x3fde063670 (addr=0x7fbc0c6ce000 >> 12 * 8)\npread returned 8 (errno=0: Success)\npagemap entry read = 0xa080000000000000\nENTER metal_virt2phys: addr=0x7fbc0c4cd000 phys=0x7fbbf0000b70 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned 8 (errno=0: Success)\npread returned 8 (errno=0: Success)\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\ncalculated offset = 0x3fde062668 (addr=0x7fbc0c4cd000 >> 12 * 8)\npagemap entry read = 0xa080000000000000\npagemap entry read = 0xa080000000000000\nEXIT metal_virt2phys -> success (phys=0x0)\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\nENTER metal_virt2phys: addr=0x7fbc0c5ce000 phys=0x7fbbfc000b78 _metal.pagemap_fd=4 _metal.page_shift=12\nEXIT metal_virt2phys -> success (phys=0x0)\nEXIT metal_virt2phys -> success (phys=0x0)\ncalculated offset = 0x3fde062e70 (addr=0x7fbc0c5ce000 >> 12 * 8)\nENTER metal_virt2phys: addr=0x7fbc0c7ce000 phys=0x7fbc00000b78 _metal.pagemap_fd=4 _metal.page_shift=12\nENTER metal_virt2phys: addr=0x7fbc0c6cf000 phys=0x7fbbf8000b80 _metal.pagemap_fd=4 _metal.page_shift=12\ncalculated offset = 0x3fde063e70 (addr=0x7fbc0c7ce000 >> 12 * 8)\ncalculated offset = 0x3fde063678 (addr=0x7fbc0c6cf000 >> 12 * 8)\npread returned 8 (errno=0: Success)\npread returned 8 (errno=0: Success)\npread returned 8 (errno=0: Success)\npagemap entry read = 0xa080000000000000\npagemap entry read = 0xa080000000000000\npread returned 8 (errno=0: Success)\npagemap entry read = 0xa080000000000000\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\nENTER metal_virt2phys: addr=0x7fbc0c3cd000 phys=0x7fbbf4000b70 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\npagemap entry read = 0xa080000000000000\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\nEXIT metal_virt2phys -> success (phys=0x0)\nEXIT metal_virt2phys -> success (phys=0x0)\ncalculated offset = 0x3fde061e68 (addr=0x7fbc0c3cd000 >> 12 * 8)\ncomputed phys = 0x0 (entry=0xa080000000000000 page_shift=12)\nEXIT metal_virt2phys -> success (phys=0x0)\nENTER metal_virt2phys: addr=0x7fbc0c5cf000 phys=0x7fbbfc000b80 _metal.pagemap_fd=4 _metal.page_shift=12\nENTER metal_virt2phys: addr=0x7fbc0c7cf000 phys=0x7fbc00000b80 _metal.pagemap_fd=4 _metal.page_shift=12\nEXIT metal_virt2phys -> success (phys=0x0)\nENTER metal_virt2phys: addr=0x7fbc0c6d0000 phys=0x7fbbf8000b88 _metal.pagemap_fd=4 _metal.page_shift=12\ncalculated offset = 0x3fde062e78 (addr=0x7fbc0c5cf000 >> 12 * 8)\ncalculated offset = 0x3fde063e78 (addr=0x7fbc0c7cf000 >> 12 * 8)\nENTER metal_virt2phys: addr=0x7fbc0c4ce000 phys=0x7fbbf0000b78 _metal.pagemap_fd=4 _metal.page_shift=12\ncalculated offset = 0x3fde063680 (addr=0x7fbc0c6d0000 >> 12 * 8)\ncalculated offset = 0x3fde062670 (addr=0x7fbc0c4ce000 >> 12 * 8)\nENTER metal_virt2phys: addr=0x7fbc0c2cd000 phys=0x7fbbe8000b70 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned 8 (errno=0: Success)\npread returned 8 (errno=0: Success)\ncalculated offset = 0x3fde061668 (addr=0x7fbc0c2cd000 >> 12 * 8)\npagemap entry read = 0xa080000000000000\npread returned 8 (errno=0: Success)\npread returned 8 (errno=0: Success)\npagemap entry read = 0xa080000000000000\npread returned 8 (errno=0: Success)\ncomputed phys = 0x0 (entry=0xa\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_virt2phys:\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_shmem_try_map the parameter ps is only read (ps->page_size, ps->mmap_flags, ps->page_shift, etc.) and never used to modify the pointed-to object, so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type (i.e. change the prototype to const struct metal_page_size *ps). Making this change is safe: callers that pass a struct metal_page_size * can be passed to a function taking const struct metal_page_size * (implicit conversion allowed), and none of the called APIs inside metal_shmem_try_map require a non-const ps. The output parameter struct metal_io_region **result must remain non-const because the function assigns *result = io, as the scenario notes."
}