{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct metal_page_size *ps' is only read (ps->page_size, ps->mmap_flags, ps->page_shift, etc.) and is not modified inside metal_shmem_try_map. Per MISRA C 2023 Rule 8.13, it should be declared const (i.e. 'const struct metal_page_size *ps'). The output parameter 'struct metal_io_region **result' must remain non-const because the function stores '*result = io'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n/* Probe logging helper: append messages to /tmp/logs/543.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/543.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with inserted probes. Logic preserved. */\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tprobe_log(\"ENTER metal_virt2phys: addr=%p phys=%p _metal.pagemap_fd=%d _metal.page_shift=%d\",\n\t          addr, (void *)phys, _metal.pagemap_fd, _metal.page_shift);\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tprobe_log(\"pagemap_fd < 0 -> returning -EINVAL (pagemap_fd=%d)\", _metal.pagemap_fd);\n\t\treturn -EINVAL;\n\t}\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\tprobe_log(\"calculated offset = 0x%llx (addr=0x%llx >> %d * %zu)\",\n\t          (unsigned long long)offset,\n\t          (unsigned long long)(uintptr_t)addr,\n\t          _metal.page_shift,\n\t          sizeof(entry));\n\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tprobe_log(\"pread returned %d (errno=%d: %s)\", error, errno, strerror(errno));\n\n\tif (error < 0) {\n\t\tprobe_log(\"failed pagemap pread (offset 0x%llx) - %s\",\n\t\t          (unsigned long long)offset, strerror(errno));\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\tprobe_log(\"pagemap entry read = 0x%llx\", (unsigned long long)entry);\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tprobe_log(\"pagemap page not present: offset=0x%llx entry=0x%llx -> returning -ENOENT\",\n\t\t          (unsigned long long)offset, (unsigned long long)entry);\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t/* compute physical address */\n\t{\n\t\tunsigned long phys_val = (unsigned long)((entry & ((1ULL << 54) - 1)) << _metal.page_shift);\n\t\tprobe_log(\"computed phys = 0x%lx (entry=0x%llx page_shift=%d)\",\n\t\t          phys_val, (unsigned long long)entry, _metal.page_shift);\n\t\t*phys = phys_val;\n\t}\n\n\tprobe_log(\"EXIT metal_virt2phys -> success (phys=0x%lx)\", *phys);\n\treturn 0;\n}\n"
}