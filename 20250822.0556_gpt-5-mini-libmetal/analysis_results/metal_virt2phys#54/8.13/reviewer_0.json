{
  "user_message": "An agent A claimed that the following metal_virt2phys code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_virt2phys.\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'addr' is declared as void * but is only read (cast to uintptr_t) and never modified in metal_virt2phys. Per MISRA C 2023 Rule 8.13 it should be const-qualified: e.g. change the prototype to 'static int metal_virt2phys(const void *addr, unsigned long *phys)'. The 'phys' output parameter must remain non-const because the function writes '*phys'.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter metal_virt2phys: addr=0x7f187f3a3000 addr_uint=139743190462464 phys_ptr=0x7f1868000b70 _metal.pagemap_fd=4 _metal.page_shift=12\nenter metal_virt2phys: addr=0x7f187e9a2000 addr_uint=139743179972608 phys_ptr=0x7f186c000b70 _metal.pagemap_fd=4 _metal.page_shift=12\nenter metal_virt2phys: addr=0x7f187f2a3000 addr_uint=139743189413888 phys_ptr=0x7f1870000b70 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed offset: addr_uint=139743190462464 >> page_shift=12 -> offset=272935918872\nenter metal_virt2phys: addr=0x7f187e8a2000 addr_uint=139743178924032 phys_ptr=0x7f1860000b70 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed offset: addr_uint=139743179972608 >> page_shift=12 -> offset=272935898384\ncomputed offset: addr_uint=139743189413888 >> page_shift=12 -> offset=272935916824\ncomputed offset: addr_uint=139743178924032 >> page_shift=12 -> offset=272935896336\npread returned: error=8 entry=0xa080000000000000\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187e8a3000 addr_uint=139743178928128 phys_ptr=0x7f1860000b78 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned: error=8 entry=0xa080000000000000\npread returned: error=8 entry=0xa080000000000000\ncomputed offset: addr_uint=139743178928128 >> page_shift=12 -> offset=272935896344\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\npread returned: error=8 entry=0xa080000000000000\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187e9a3000 addr_uint=139743179976704 phys_ptr=0x7f186c000b78 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187f3a4000 addr_uint=139743190466560 phys_ptr=0x7f1868000b78 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed offset: addr_uint=139743179976704 >> page_shift=12 -> offset=272935898392\nenter metal_virt2phys: addr=0x7f187f2a4000 addr_uint=139743189417984 phys_ptr=0x7f1870000b78 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned: error=8 entry=0xa080000000000000\ncomputed offset: addr_uint=139743190466560 >> page_shift=12 -> offset=272935918880\ncomputed offset: addr_uint=139743189417984 >> page_shift=12 -> offset=272935916832\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187e8a4000 addr_uint=139743178932224 phys_ptr=0x7f1860000b80 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed offset: addr_uint=139743178932224 >> page_shift=12 -> offset=272935896352\nenter metal_virt2phys: addr=0x7f187e6a2000 addr_uint=139743176826880 phys_ptr=0x7f185c000b70 _metal.pagemap_fd=4 _metal.page_shift=12\nenter metal_virt2phys: addr=0x7f187e5a2000 addr_uint=139743175778304 phys_ptr=0x7f1858000b70 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned: error=8 entry=0xa080000000000000\npread returned: error=8 entry=0xa080000000000000\nenter metal_virt2phys: addr=0x7f187e7a2000 addr_uint=139743177875456 phys_ptr=0x7f1864000b70 _metal.pagemap_fd=4 _metal.page_shift=12\ncomputed offset: addr_uint=139743176826880 >> page_shift=12 -> offset=272935892240\npread returned: error=8 entry=0xa080000000000000\ncomputed offset: addr_uint=139743175778304 >> page_shift=12 -> offset=272935890192\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\npread returned: error=8 entry=0xa080000000000000\ncomputed offset: addr_uint=139743177875456 >> page_shift=12 -> offset=272935894288\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187e9a4000 addr_uint=139743179980800 phys_ptr=0x7f186c000b80 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned: error=8 entry=0xa080000000000000\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: addr=0x7f187e8a5000 addr_uint=139743178936320 phys_ptr=0x7f1860000b88 _metal.pagemap_fd=4 _metal.page_shift=12\npread returned: error=8 entry=0xa080000000000000\ncomputed phys: entry=0xa080000000000000 page_shift=12 -> phys=0x0\nenter metal_virt2phys: ad\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_virt2phys:\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In metal_virt2phys the parameter addr is only read (it is cast to uintptr_t and never used to modify the pointed object), so per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. const void *addr). The phys output parameter must remain non-const because the function writes to *phys. Changing the prototype to static int metal_virt2phys(const void *addr, unsigned long *phys) is source-compatible with all current call sites (passing a non-const uint8_t * or void * to a const void * is allowed) and the function is static (file-local), so there is no ABI/function-pointer compatibility concern in this code. The report of a Rule 8.13 violation is therefore correct."
}