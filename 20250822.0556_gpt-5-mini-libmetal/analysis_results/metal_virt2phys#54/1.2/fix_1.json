{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nint metal_log(int level, const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Mirror the message into the persistent probe log for evidence. */\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"metal_log(level=%d): \", level);\n        vfprintf(f, fmt, ap);\n        fclose(f);\n    }\n\n    /* Also emit to stderr so behavior resembles a real logger. */\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n\n    return 0;\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Log entry state */\n    metal_probe_log(\"enter metal_virt2phys: addr=%p, pagemap_fd=%d, page_shift=%u\",\n                    addr, _metal.pagemap_fd, _metal.page_shift);\n\n    if (_metal.pagemap_fd < 0) {\n        metal_probe_log(\"pagemap_fd < 0: %d -> returning -EINVAL\", _metal.pagemap_fd);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n    metal_probe_log(\"computed offset=0x%llx (addr=%p >> %u)\",\n                    (unsigned long long)offset, addr, _metal.page_shift);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    metal_probe_log(\"pread returned %d, errno=%d (%s)\", error, errno, strerror(errno));\n\n    if (error < 0) {\n        metal_log(0, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(errno));\n        metal_probe_log(\"after pread error path: offset=0x%llx, strerror=%s\",\n                        (unsigned long long)offset, strerror(errno));\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    metal_probe_log(\"pagemap entry read: offset=0x%llx, entry=0x%llx\",\n                    (unsigned long long)offset, (unsigned long long)entry);\n\n    if ((entry >> 62) != 2) {\n        metal_log(0, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n        metal_probe_log(\"page not present check failed: entry=0x%llx -> returning -ENOENT\",\n                        (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n    metal_probe_log(\"mapped phys=0x%llx (entry=0x%llx, page_shift=%u)\",\n                    (unsigned long long)*phys, (unsigned long long)entry, _metal.page_shift);\n    return 0;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n-- Build type:  \n-- Host:    Linux/x86_64\n-- Target:  Linux/x86_64\n-- Machine: Generic\n-- Vendor: none\nIn file included from /tmp/tmpfq8gu4ur/build/lib/include/metal/sys.h:18,\n                 from /tmp/tmpfq8gu4ur/build/lib/include/metal/io.h:22,\n                 from /tmp/tmpfq8gu4ur/build/lib/include/metal/shmem.h:15,\n                 from /tmp/tmpfq8gu4ur/src/lib/system/linux/shmem.c:24:\n/tmp/tmpfq8gu4ur/build/lib/include/metal/log.h:98:37: error: expected identifier or '(' before '{' token\n   98 | #define metal_log(level, fmt, ...) ({                              \\\n      |                                     ^\n/tmp/tmpfq8gu4ur/src/lib/system/linux/shmem.c:55:5: note: in expansion of macro 'metal_log'\n   55 | int metal_log(int level, const char *fmt, ...)\n      |     ^~~~~~~~~\ngmake[2]: *** [lib/CMakeFiles/metal-shared.dir/build.make:258: lib/CMakeFiles/metal-shared.dir/system/linux/shmem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:291: lib/CMakeFiles/metal-shared.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Minimal global state used by metal_virt2phys to preserve original logic. */\nstruct {\n    int pagemap_fd;\n    unsigned page_shift;\n} _metal = { -1, 12 };\n\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Renamed to avoid collision with possible macro named metal_log in headers. */\nint metal_log_impl(int level, const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Mirror the message into the persistent probe log for evidence. */\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"metal_log(level=%d): \", level);\n        vfprintf(f, fmt, ap);\n        fclose(f);\n    }\n    va_end(ap);\n\n    /* Also emit to stderr so behavior resembles a real logger. */\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n\n    return 0;\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    ssize_t error;\n\n    /* Log entry state */\n    metal_probe_log(\"enter metal_virt2phys: addr=%p, pagemap_fd=%d, page_shift=%u\",\n                    addr, _metal.pagemap_fd, _metal.page_shift);\n\n    if (_metal.pagemap_fd < 0) {\n        metal_probe_log(\"pagemap_fd < 0: %d -> returning -EINVAL\", _metal.pagemap_fd);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n    metal_probe_log(\"computed offset=0x%llx (addr=%p >> %u)\",\n                    (unsigned long long)offset, addr, _metal.page_shift);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    metal_probe_log(\"pread returned %zd, errno=%d (%s)\", error, errno, strerror(errno));\n\n    if (error < 0) {\n        metal_log_impl(0, \"failed pagemap pread (offset %llx) - %s\\n\",\n                       (unsigned long long)offset, strerror(errno));\n        metal_probe_log(\"after pread error path: offset=0x%llx, strerror=%s\",\n                        (unsigned long long)offset, strerror(errno));\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    metal_probe_log(\"pagemap entry read: offset=0x%llx, entry=0x%llx\",\n                    (unsigned long long)offset, (unsigned long long)entry);\n\n    if ((entry >> 62) != 2) {\n        metal_log_impl(0, \"pagemap page not present, %llx -> %llx\\n\",\n                       (unsigned long long)offset, (unsigned long long)entry);\n        metal_probe_log(\"page not present check failed: entry=0x%llx -> returning -ENOENT\",\n                        (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n    metal_probe_log(\"mapped phys=0x%llx (entry=0x%llx, page_shift=%u)\",\n                    (unsigned long long)*phys, (unsigned long long)entry, _metal.page_shift);\n    return 0;\n}\n",
  "explanation": "The original failed because a macro named metal_log in included headers conflicted with the function name metal_log, causing a syntax error. I avoided that by renaming the function to metal_log_impl and updated internal calls to use the new name. I also added necessary includes and a minimal _metal global to make the unit self-contained and compilable. I fixed va_list usage in metal_log_impl by ending and restarting the va_list between uses to avoid undefined behavior. No macros were defined."
}