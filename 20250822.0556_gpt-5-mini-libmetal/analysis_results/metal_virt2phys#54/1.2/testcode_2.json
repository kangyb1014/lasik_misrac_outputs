{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro 'metal_log' uses GCC/Clang statement-expressions '({ ... })' and the GNU comma-elision token-pasting '##__VA_ARGS__' extension. The '({ ... })' construct and the use of '##__VA_ARGS__' to swallow the comma are documented compiler extensions (GNU C), so this macro violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/540.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Minimal stand-in for the external _metal state used by metal_virt2phys. */\nstruct metal_state {\n    int pagemap_fd;\n    unsigned page_shift;\n} _metal = { -1, 12 };\n\n/*\n * A probe helper that appends human-readable trace lines to\n * /tmp/logs/540.txt so other agents can reproduce the control flow and\n * inspect runtime state at the decision points in metal_virt2phys.\n */\nstatic void metal_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Provide a simple metal_log function so the translation unit is\n * self-contained and executable. It also records every invocation to\n * the probe log (in addition to printing to stderr) so callers of\n * metal_log are visible in /tmp/logs/540.txt.\n */\nint metal_log(int level, const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Mirror the message into the persistent probe log for evidence. */\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"metal_log(level=%d): \", level);\n        vfprintf(f, fmt, ap);\n        fclose(f);\n    }\n\n    /* Also emit to stderr so behavior resembles a real logger. */\n    va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    va_end(ap);\n\n    return 0;\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    /* Log entry state */\n    metal_probe_log(\"enter metal_virt2phys: addr=%p, pagemap_fd=%d, page_shift=%u\",\n                    addr, _metal.pagemap_fd, _metal.page_shift);\n\n    if (_metal.pagemap_fd < 0) {\n        metal_probe_log(\"pagemap_fd < 0: %d -> returning -EINVAL\", _metal.pagemap_fd);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n    metal_probe_log(\"computed offset=0x%llx (addr=%p >> %u)\",\n                    (unsigned long long)offset, addr, _metal.page_shift);\n\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    metal_probe_log(\"pread returned %d, errno=%d (%s)\", error, errno, strerror(errno));\n\n    if (error < 0) {\n        metal_log(0, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(errno));\n        metal_probe_log(\"after pread error path: offset=0x%llx, strerror=%s\",\n                        (unsigned long long)offset, strerror(errno));\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    metal_probe_log(\"pagemap entry read: offset=0x%llx, entry=0x%llx\",\n                    (unsigned long long)offset, (unsigned long long)entry);\n\n    if ((entry >> 62) != 2) {\n        metal_log(0, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n        metal_probe_log(\"page not present check failed: entry=0x%llx -> returning -ENOENT\",\n                        (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n    metal_probe_log(\"mapped phys=0x%llx (entry=0x%llx, page_shift=%u)\",\n                    (unsigned long long)*phys, (unsigned long long)entry, _metal.page_shift);\n    return 0;\n}\n"
}