{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log invocation expands to a macro defined using GCC compiler extensions: the macro uses a statement-expression ({ ... }) and the '##__VA_ARGS__' token-pasting trick to swallow the comma. Both are documented compiler extensions (GCC) and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/540.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n\n/* Probe logger: writes control-flow and state information to /tmp/logs/540.txt.\n * Kept as simple C (no macros, no compiler extensions) so it can be compiled\n * and linked into the existing code base. */\nstatic void metal_probe_log(const char *stage, void *addr, off_t offset,\n                            uint64_t entry, int err, int pagemap_fd, int page_shift)\n{\n    FILE *f = fopen(\"/tmp/logs/540.txt\", \"a\");\n    if (!f) {\n        /* Best-effort logging; do not change program flow on failure to log. */\n        return;\n    }\n\n    fprintf(f, \"[metal_virt2phys] stage=%s addr=%p pagemap_fd=%d page_shift=%d offset=0x%llx entry=0x%llx err=%d errstr=%s\\n\",\n            stage,\n            addr,\n            pagemap_fd,\n            page_shift,\n            (unsigned long long)offset,\n            (unsigned long long)entry,\n            err,\n            (err != 0) ? strerror(err) : \"(none)\");\n\n    fclose(f);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\t/* Log function entry and key _metal values for reproducing the scenario. */\n\tmetal_probe_log(\"entry\", addr, (off_t)-1, 0ULL, 0, _metal.pagemap_fd, _metal.page_shift);\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tmetal_probe_log(\"pagemap_fd_invalid\", addr, (off_t)-1, 0ULL, 0, _metal.pagemap_fd, _metal.page_shift);\n\t\treturn -EINVAL;\n\t}\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\tmetal_probe_log(\"computed_offset\", addr, offset, 0ULL, 0, _metal.pagemap_fd, _metal.page_shift);\n\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\t/* Capture errno and other context before returning. */\n\t\tmetal_probe_log(\"pread_failed\", addr, offset, 0ULL, errno, _metal.pagemap_fd, _metal.page_shift);\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Log the raw entry read from pagemap. */\n\tmetal_probe_log(\"after_pread\", addr, offset, entry, 0, _metal.pagemap_fd, _metal.page_shift);\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_probe_log(\"page_not_present\", addr, offset, entry, 0, _metal.pagemap_fd, _metal.page_shift);\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\tmetal_probe_log(\"success\", addr, offset, entry, 0, _metal.pagemap_fd, _metal.page_shift);\n\treturn 0;\n}\n"
}