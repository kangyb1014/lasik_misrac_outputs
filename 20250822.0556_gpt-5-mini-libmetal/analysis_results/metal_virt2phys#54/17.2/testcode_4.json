{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the runtime log handler (_metal.common.log_handler) points to a function that itself calls metal_log (directly or via another function that calls metal_log), an indirect recursive call chain is created. Example:\n\nstatic void my_logger(int level, const char *fmt, ...)\n{\n    /* anything that calls metal_log again, e.g. to log errors inside the logger */\n    metal_log(METAL_LOG_ERROR, \"logger internal error\\n\");\n}\n\n/* at runtime */ _metal.common.log_handler = my_logger;\n\nThen a call to metal_log(...) expands to call _metal.common.log_handler(...), which calls my_logger, which calls metal_log(...), and so on. This is an indirect recursion and therefore violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/546.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helpers that write directly to a file to avoid using metal_log\n * (so they do not participate in any potential metal_log recursion). */\nstatic void metal_probe_log_raw(const char *msg, size_t len)\n{\n    int fd = open(\"/tmp/logs/546.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0) {\n        /* best-effort write; ignore errors */\n        ssize_t r = write(fd, msg, len);\n        (void)r;\n        write(fd, \"\\n\", 1);\n        close(fd);\n    }\n}\n\nstatic void metal_probe_logf(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    if (n > 0) {\n        size_t len = (size_t)n;\n        if (len > sizeof(buf))\n            len = sizeof(buf);\n        metal_probe_log_raw(buf, len);\n    }\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\t/* Probe: entry to function and key state */\n\tmetal_probe_logf(\"ENTER metal_virt2phys: addr=%p, phys_ptr=%p, pagemap_fd=%d, page_shift=%d\",\n\t                 addr, (void *)phys, _metal.pagemap_fd, _metal.page_shift);\n\n\tif (_metal.pagemap_fd < 0)\n\t{\n\t\tmetal_probe_logf(\"EXIT metal_virt2phys: invalid pagemap_fd=%d -> return -EINVAL\", _metal.pagemap_fd);\n\t\treturn -EINVAL;\n\t}\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\tmetal_probe_logf(\"calculated offset=0x%llx (addr=%p >> %d)\", (unsigned long long)offset, addr, _metal.page_shift);\n\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tmetal_probe_logf(\"pread returned %d, errno=%d (%s)\", error, errno, strerror(errno));\n\tif (error < 0) {\n\t\t/* Preserve original behavior: still call metal_log for the original code path. */\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\n\t\tmetal_probe_logf(\"EXIT metal_virt2phys: pagemap pread failed, offset=0x%llx, strerror=%s -> return -%d\",\n\t\t                 (unsigned long long)offset, strerror(errno), errno);\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tmetal_probe_logf(\"pagemap entry read: 0x%llx\", (unsigned long long)entry);\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\n\t\tmetal_probe_logf(\"EXIT metal_virt2phys: page not present (entry=0x%llx, offset=0x%llx) -> return -ENOENT\",\n\t\t                 (unsigned long long)entry, (unsigned long long)offset);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\tmetal_probe_logf(\"computed phys=0x%lx (from entry=0x%llx)\", *phys, (unsigned long long)entry);\n\tmetal_probe_logf(\"EXIT metal_virt2phys: success -> return 0\");\n\treturn 0;\n}\n"
}