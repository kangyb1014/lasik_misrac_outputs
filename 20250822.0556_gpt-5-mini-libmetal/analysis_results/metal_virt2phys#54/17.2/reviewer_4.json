{
  "user_message": "An agent A claimed that the following metal_virt2phys code violates the MISRA C 2023 rule 17.2.\n<misra_rule>\nMISRA C 2023 Rule 17.2 is Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_virt2phys.\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the runtime log handler (_metal.common.log_handler) points to a function that itself calls metal_log (directly or via another function that calls metal_log), an indirect recursive call chain is created. Example:\n\nstatic void my_logger(int level, const char *fmt, ...)\n{\n    /* anything that calls metal_log again, e.g. to log errors inside the logger */\n    metal_log(METAL_LOG_ERROR, \"logger internal error\\n\");\n}\n\n/* at runtime */ _metal.common.log_handler = my_logger;\n\nThen a call to metal_log(...) expands to call _metal.common.log_handler(...), which calls my_logger, which calls metal_log(...), and so on. This is an indirect recursion and therefore violates MISRA C 2023 Rule 17.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_virt2phys: addr=0x7f7917da6000, phys_ptr=0x7f7908000b70, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8bed30 (addr=0x7f7917da6000 >> 12)\nENTER metal_virt2phys: addr=0x7f7917ca6000, phys_ptr=0x7f790c000b70, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8be530 (addr=0x7f7917ca6000 >> 12)\npread returned 8, errno=0 (Success)\npagemap entry read: 0xa080000000000000\ncomputed phys=0x0 (from entry=0xa080000000000000)\nEXIT metal_virt2phys: success -> return 0\nENTER metal_virt2phys: addr=0x7f7917da7000, phys_ptr=0x7f7908000b78, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8bed38 (addr=0x7f7917da7000 >> 12)\npread returned 8, errno=0 (Success)\npagemap entry read: 0xa080000000000000\npread returned 8, errno=0 (Success)computed phys=0x0 (from entry=0xa080000000000000)\n\npagemap entry read: 0xa080000000000000EXIT metal_virt2phys: success -> return 0\n\ncomputed phys=0x0 (from entry=0xa080000000000000)ENTER metal_virt2phys: addr=0x7f7917da8000, phys_ptr=0x7f7908000b80, pagemap_fd=4, page_shift=12\n\nEXIT metal_virt2phys: success -> return 0calculated offset=0x3fbc8bed40 (addr=0x7f7917da8000 >> 12)\n\nENTER metal_virt2phys: addr=0x7f7917ca7000, phys_ptr=0x7f790c000b78, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8be538 (addr=0x7f7917ca7000 >> 12)\nENTER metal_virt2phys: addr=0x7f7917ba6000, phys_ptr=0x7f7900000b70, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8bdd30 (addr=0x7f7917ba6000 >> 12)\npread returned 8, errno=0 (Success)\npagemap entry read: 0xa080000000000000pread returned 8, errno=0 (Success)ENTER metal_virt2phys: addr=0x7f79171a5000, phys_ptr=0x7f78f4000b70, pagemap_fd=4, page_shift=12ENTER metal_virt2phys: addr=0x7f79172a5000, phys_ptr=0x7f78fc000b70, pagemap_fd=4, page_shift=12\npread returned 8, errno=0 (Success)\n\nENTER metal_virt2phys: addr=0x7f79170a5000, phys_ptr=0x7f78f8000b70, pagemap_fd=4, page_shift=12\n\ncomputed phys=0x0 (from entry=0xa080000000000000)pagemap entry read: 0xa080000000000000calculated offset=0x3fbc8b8d28 (addr=0x7f79171a5000 >> 12)\n\ncalculated offset=0x3fbc8b9528 (addr=0x7f79172a5000 >> 12)\npagemap entry read: 0xa080000000000000\n\nEXIT metal_virt2phys: success -> return 0calculated offset=0x3fbc8b8528 (addr=0x7f79170a5000 >> 12)\ncomputed phys=0x0 (from entry=0xa080000000000000)\n\n\ncomputed phys=0x0 (from entry=0xa080000000000000)ENTER metal_virt2phys: addr=0x7f7917da9000, phys_ptr=0x7f7908000b88, pagemap_fd=4, page_shift=12\nEXIT metal_virt2phys: success -> return 0\nEXIT metal_virt2phys: success -> return 0\n\ncalculated offset=0x3fbc8bed48 (addr=0x7f7917da9000 >> 12)\nENTER metal_virt2phys: addr=0x7f7917ba7000, phys_ptr=0x7f7900000b78, pagemap_fd=4, page_shift=12ENTER metal_virt2phys: addr=0x7f7917ca8000, phys_ptr=0x7f790c000b80, pagemap_fd=4, page_shift=12\n\ncalculated offset=0x3fbc8bdd38 (addr=0x7f7917ba7000 >> 12)calculated offset=0x3fbc8be540 (addr=0x7f7917ca8000 >> 12)\n\nENTER metal_virt2phys: addr=0x7f7916fa5000, phys_ptr=0x7f78ec000b70, pagemap_fd=4, page_shift=12\ncalculated offset=0x3fbc8b7d28 (addr=0x7f7916fa5000 >> 12)pread returned 8, errno=0 (Success)pread returned 8, errno=0 (Success)pread returned 8, errno=0 (Success)\n\n\n\npread returned 8, errno=0 (Success)pread returned 8, errno=0 (Success)pread returned 8, errno=0 (Success)pagemap entry read: 0xa080000000000000pagemap entry read: 0xa080000000000000\npagemap entry read: 0xa080000000000000\n\n\n\n\npagemap entry read: 0xa080000000000000pagemap entry read: 0xa080000000000000computed phys=0x0 (from entry=0xa080000000000000)pagemap entry read: 0xa080000000000000\ncomputed phys=0x0 (from entry=0xa080000000000000)computed phys=0x0 (from entry=0xa080000000000000)\n\n\n\n\ncomputed phys=0x0 (from entry=0xa080000000000000)computed phys=0x0 (from entry=0xa080000000000000)EXIT metal_virt2phys: success -> return 0computed phys=0x0 (from entry=0xa080000000000000)EXIT metal_virt2phys: success -> return 0\nEXIT metal_virt2phys: success -> return 0\n\n\n\n\nEXIT metal_virt2phys: success -> return 0EXIT metal_virt2phys: success -> return 0ENTER metal_virt2phys: addr=0x7f79171a6000, phys_ptr=0x7f78f4000b78, pagemap_fd=4, page_shift=12ENTER metal_\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_virt2phys:\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n...\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n...\nint metal_unmap(void *mem, size_t size)\n{\n\treturn munmap(mem, size) < 0 ? -errno : 0;\n}\n...\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n...\nint metal_shmem_open(const char *name, size_t size,\n\t\t     struct metal_io_region **result)\n{\n\tstruct metal_page_size *ps;\n\tint fd, error;\n\n\terror = metal_shmem_open_generic(name, size, result);\n\tif (!error)\n\t\treturn error;\n\n\terror = metal_open(name, 1);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to open shmem file :%s\\n\", name);\n\t\treturn error;\n\t}\n\tfd = error;\n\n\t/* Iterate through page sizes in decreasing order. */\n\tmetal_for_each_page_size_down(ps) {\n\t\tif (ps->page_size > 2 * size)\n\t\t\tcontinue;\n\t\terror = metal_shmem_try_map(ps, fd, size, result);\n\t\tif (!error)\n\t\t\tbreak;\n\t}\n\n\tclose(fd);\n\treturn error;\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. metal_virt2phys itself does not call itself (neither directly nor via other functions in the library): it calls metal_log (a macro that invokes the function pointer _metal.common.log_handler). An indirect recursion could only occur at runtime if the user-supplied log_handler calls back into metal_log (or otherwise calls a function that leads back to the same handler). That would make the user handler (or the pair handler<->metal_log) indirectly recursive, but it is not an intrinsic recursion introduced by metal_virt2phys or the library\u2019s static call graph. In short: the potential recursion is caused by a user-provided handler implementation (or improper handler selection), not by metal_virt2phys itself, so flagging metal_virt2phys as violating MISRA C 2023 Rule 17.2 is incorrect."
}