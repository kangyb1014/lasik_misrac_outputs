{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes src and len to a function pointer without ensuring that the object referenced by src is at least len bytes. If io->ops.block_write is implemented using a <string.h> routine (e.g. memcpy(dst, src, len) or similar), and the caller supplied src that points to a smaller object than len, that implementation will read beyond the bounds of the src object. For example, if src points to a buffer of N bytes with N < len, the block_write's memcpy will access bytes past the end of src \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/129.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Probe helper: append logs to /tmp/logs/129.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/129.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    /* Snapshot initial state for logging */\n    int initial_len = len;\n    probe_log(\"ENTER metal_io_block_write: io=%p offset=%lu src=%p len=%d io->size=%lu\",\n              (void *)io, offset, src, initial_len, (unsigned long)io->size);\n\n    if (!ptr) {\n        probe_log(\"virtual address is NULL -> returning -ERANGE\");\n        return -ERANGE;\n    }\n\n    if ((offset + len) > io->size) {\n        probe_log(\"Truncating len: offset+len=%lu > io->size=%lu; old len=%d\",\n                  offset + (unsigned long)len, (unsigned long)io->size, len);\n        len = io->size - offset;\n        probe_log(\"New len after truncation = %d\", len);\n    }\n\n    retlen = len;\n    probe_log(\"retlen initially set to %d\", retlen);\n\n    if (io->ops.block_write) {\n        /* Log the fact we're about to invoke the backend block_write. */\n        probe_log(\"Using ops.block_write at address 0x%lx, about to call with len=%d\",\n                  (unsigned long)(uintptr_t)io->ops.block_write, len);\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        probe_log(\"ops.block_write returned %d\", retlen);\n    } else {\n        /* Software copy path. Log entry and snapshot pointers/lengths. */\n        unsigned char *ptr_start = ptr;\n        const unsigned char *source_start = source;\n        int len_start = len;\n\n        probe_log(\"No ops.block_write: entering software copy. ptr=%p source=%p len=%d\",\n                  (void *)ptr, (const void *)source, len);\n\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n        for (; len != 0; ptr++, source++, len--)\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Compute totals and log results without changing behavior. */\n        int bytes_copied = (int)(ptr - ptr_start);\n        probe_log(\"Software copy completed: requested=%d bytes_copied=%d ptr_end=%p source_end=%p remaining_len=%d\",\n                  len_start, bytes_copied, (void *)ptr, (const void *)source, len);\n        probe_log(\"atomic_thread_fence(memory_order_seq_cst) executed\");\n    }\n\n    probe_log(\"EXIT metal_io_block_write returning %d\", retlen);\n    return retlen;\n}\n"
}