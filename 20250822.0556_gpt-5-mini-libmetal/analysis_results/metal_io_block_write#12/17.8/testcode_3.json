{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'len' (an int parameter) is assigned a new value in the fragment: if ((offset + len) > io->size) len = io->size - offset; \u2014 this modifies the parameter rather than using a local copy, which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/127.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/127.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n    /* Ensure directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/127.txt\", \"a\");\n    if (!f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n    unsigned long io_size = (io != NULL) ? io->size : 0UL;\n\n    probe_log(\"ENTER: metal_io_block_write io=%p offset=%lu len=%d io_size=%lu ptr=%p src=%p\\n\",\n              (void *)io, offset, len, io_size, (void *)ptr, src);\n\n    if (!ptr) {\n        probe_log(\"EXIT: ptr is NULL -> return -ERANGE\\n\");\n        return -ERANGE;\n    }\n\n    /* Log the boundary check and the values involved before potential modification */\n    probe_log(\"CHECK: offset + len = %lu (offset=%lu + len=%d) io->size=%lu\\n\",\n              (unsigned long)(offset + (unsigned long)len), offset, len, io_size);\n\n    if ((offset + len) > io->size) {\n        probe_log(\"ACTION: (offset + len) > io->size -> modifying parameter 'len' from %d\", len);\n        /* capture the new computed len before assignment for traceability */\n        probe_log(\" to %ld\\n\", (long)(io->size - offset));\n        len = io->size - offset;\n        probe_log(\"AFTER MODIFY: len=%d\\n\", len);\n    }\n\n    retlen = len;\n    probe_log(\"BEFORE_WRITE: retlen=%d io->ops.block_write=%p\\n\",\n              retlen, (void *)io->ops.block_write);\n\n    if (io->ops.block_write) {\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        probe_log(\"OP_BLOCK_WRITE_CALLED: returned retlen=%d\\n\", retlen);\n    } else {\n        probe_log(\"FALLBACK_BYTE_COPY_START: len=%d ptr=%p source=%p\\n\", len, (void *)ptr, (void *)source);\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n        }\n        probe_log(\"AFTER_UNALIGNED_COPY: len=%d ptr=%p source=%p\\n\", len, (void *)ptr, (void *)source);\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n        for (; len != 0; ptr++, source++, len--)\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"FALLBACK_BYTE_COPY_END: remaining len=%d ptr=%p source=%p\\n\", len, (void *)ptr, (void *)source);\n    }\n\n    probe_log(\"EXIT: returning retlen=%d\\n\", retlen);\n    return retlen;\n}\n"
}