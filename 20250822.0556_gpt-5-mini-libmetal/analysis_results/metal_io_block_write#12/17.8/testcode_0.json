{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'len' (type int) is modified in the loop. In the fragment the loop expression contains 'len -= sizeof(int)' (and elsewhere in the function 'len--' is used), so the parameter 'len' is being changed \u2014 this violates MISRA C 2023 Rule 17.8. Fix by iterating on a local copy (e.g. int remaining = len) instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/127.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <errno.h>\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    FILE *log = fopen(\"/tmp/logs/127.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTRY: io=%p offset=%lu src=%p len=%d\\n\", (void *)io, offset, src, len);\n    }\n\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    if (!ptr) {\n        if (log) {\n            fprintf(log, \"PTR_NULL: ptr=%p -> returning -ERANGE\\n\", (void *)ptr);\n            fclose(log);\n        }\n        return -ERANGE;\n    }\n\n    if ((offset + len) > io->size) {\n        if (log) {\n            fprintf(log, \"TRUNCATE_CHECK: offset+len=%lu > io->size=%lu, old_len=%d\\n\",\n                    (unsigned long)(offset + (unsigned long)len), (unsigned long)io->size, len);\n        }\n        len = io->size - offset;\n        if (log) {\n            fprintf(log, \"TRUNCATED: new len=%d\\n\", len);\n        }\n    }\n\n    retlen = len;\n\n    if (io->ops.block_write) {\n        if (log) {\n            fprintf(log, \"BLOCK_WRITE_PATH: calling block_write(io=%p, offset=%lu, src=%p, len=%d)\\n\",\n                    (void *)io, offset, src, len);\n        }\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        if (log) {\n            fprintf(log, \"BLOCK_WRITE_RETURNED: retlen=%d\\n\", retlen);\n            fclose(log);\n        }\n    } else {\n        if (log) {\n            fprintf(log, \"FALLBACK_PATH: starting manual copy: ptr=%p source=%p initial_len=%d\\n\",\n                    (void *)ptr, (void *)source, len);\n        }\n\n        int iter1 = 0, iter2 = 0, iter3 = 0;\n\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            if (log) {\n                fprintf(log, \"LOOP1 iter=%d pre_copy len=%d ptr=%p source=%p\\n\",\n                        iter1, len, (void *)ptr, (void *)source);\n            }\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n            iter1++;\n        }\n\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int)) {\n            if (log) {\n                fprintf(log, \"LOOP2 iter=%d pre_copy len=%d ptr=%p source=%p\\n\",\n                        iter2, len, (void *)ptr, (void *)source);\n            }\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n            iter2++;\n        }\n\n        for (; len != 0; ptr++, source++, len--) {\n            if (log) {\n                fprintf(log, \"LOOP3 iter=%d pre_copy len=%d ptr=%p source=%p\\n\",\n                        iter3, len, (void *)ptr, (void *)source);\n            }\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            iter3++;\n        }\n\n        atomic_thread_fence(memory_order_seq_cst);\n\n        if (log) {\n            fprintf(log, \"FALLBACK_DONE: retlen=%d final_len_remainder=%d iter1=%d iter2=%d iter3=%d\\n\",\n                    retlen, len, iter1, iter2, iter3);\n            fclose(log);\n        }\n    }\n\n    return retlen;\n}\n"
}