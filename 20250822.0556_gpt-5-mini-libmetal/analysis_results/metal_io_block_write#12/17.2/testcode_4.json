{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls a function pointer io->ops.block_write without preventing it from being the same function. If io->ops.block_write is set to metal_io_block_write (i.e. the function pointer points back to the same implementation), the call retlen = (*io->ops.block_write)(...) results in an indirect recursive call to metal_io_block_write, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/126.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "int metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    /* Open probe log (append) to record control flow and state */\n    FILE *fp = fopen(\"/tmp/logs/126.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"ENTER metal_io_block_write: io=%p offset=%lu src=%p len=%d io->size=%lu ptr=%p\\n\",\n                (void *)io, offset, src, len, (unsigned long)io->size, (void *)ptr);\n        /* Log the function pointer value (may be NULL) and address of this function */\n        fprintf(fp, \"  ops.block_write=%p, metal_io_block_write=%p\\n\",\n                (void *)io->ops.block_write, (void *)metal_io_block_write);\n        /* Detect and log potential indirect recursion scenario */\n        if (io->ops.block_write == metal_io_block_write) {\n            fprintf(fp, \"  WARNING: ops.block_write points to metal_io_block_write (possible indirect recursion)\\n\");\n        }\n        fclose(fp);\n    }\n\n    if (!ptr)\n        return -ERANGE;\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    if (io->ops.block_write) {\n        /* Log right before invoking the function pointer */\n        fp = fopen(\"/tmp/logs/126.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"  About to call ops.block_write (addr=%p) with offset=%lu len=%d\\n\",\n                    (void *)io->ops.block_write, offset, len);\n            fclose(fp);\n        }\n\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n\n        /* Log the return from the function pointer call */\n        fp = fopen(\"/tmp/logs/126.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"  Returned from ops.block_write: retlen=%d\\n\", retlen);\n            fclose(fp);\n        }\n    } else {\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n        for (; len != 0; ptr++, source++, len--)\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Log completion of the fallback write path */\n        fp = fopen(\"/tmp/logs/126.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"  Completed inline write path, retlen=%d\\n\", retlen);\n            fclose(fp);\n        }\n    }\n\n    /* Final log and return */\n    fp = fopen(\"/tmp/logs/126.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"EXIT metal_io_block_write: returning %d\\n\", retlen);\n        fclose(fp);\n    }\n    return retlen;\n}\n"
}