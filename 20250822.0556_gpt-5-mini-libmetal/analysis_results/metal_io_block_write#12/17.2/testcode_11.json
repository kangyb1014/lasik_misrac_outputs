{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer io->ops.block_set is (directly or indirectly) set to point to metal_io_block_set itself, the call (*io->ops.block_set)(...) will invoke metal_io_block_set from within metal_io_block_set, causing indirect recursion. For example, if during initialization ops.block_set = metal_io_block_set, then metal_io_block_set -> (*ops.block_set) -> metal_io_block_set ... (infinite recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/126.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probes/logging helpers for diagnosing potential indirect recursion\n * and capturing control-flow/state for metal_io_block_write.\n * Logs are appended to /tmp/logs/126.txt.\n */\nstatic void metal_io_log_basic(const char *msg, void *io_ptr, void *op_ptr,\n                               unsigned long offset, const void *source,\n                               const void *ptr, unsigned long io_size, int len)\n{\n    FILE *f = fopen(\"/tmp/logs/126.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fprintf(f, \"  io=%p ops.block_write=%p this_fn=%p\\n\",\n            io_ptr, op_ptr, (void *)metal_io_block_write);\n    fprintf(f, \"  offset=%lu len=%d io->size=%lu\\n\",\n            offset, len, io_size);\n    fprintf(f, \"  source=%p ptr=%p\\n\", source, ptr);\n    fclose(f);\n}\n\nstatic void metal_io_log_callsite(const char *stage, void *op_ptr,\n                                  unsigned long offset, int len, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/126.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[%s] ops.block_write=%p offset=%lu len=%d returned=%d\\n\",\n            stage, op_ptr, offset, len, ret);\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    /* Log entry state */\n    metal_io_log_basic(\"metal_io_block_write ENTRY\", (void *)io,\n                       (void *)(io ? io->ops.block_write : NULL),\n                       offset, source, (void *)ptr,\n                       (unsigned long)(io ? io->size : 0U), len);\n\n    if (!ptr) {\n        metal_io_log_basic(\"metal_io_block_write EARLY RETURN: ptr == NULL\",\n                           (void *)io, (void *)(io ? io->ops.block_write : NULL),\n                           offset, source, (void *)ptr,\n                           (unsigned long)(io ? io->size : 0U), len);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    if (io->ops.block_write) {\n        /* Detect and log if the function pointer equals this function.\n         * This helps reproduce direct-recursion misconfiguration. */\n        if (io->ops.block_write == metal_io_block_write) {\n            FILE *f = fopen(\"/tmp/logs/126.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"DETECTED: ops.block_write == metal_io_block_write (possible direct recursion)\\n\");\n                fprintf(f, \"  io=%p ops.block_write=%p this_fn=%p offset=%lu len=%d\\n\",\n                        (void *)io, (void *)io->ops.block_write, (void *)metal_io_block_write,\n                        offset, len);\n                fclose(f);\n            }\n        }\n\n        metal_io_log_callsite(\"BEFORE_CALL\", (void *)io->ops.block_write, offset, len, -1);\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        metal_io_log_callsite(\"AFTER_CALL\", (void *)io->ops.block_write, offset, len, retlen);\n    } else {\n        /* Log that we are taking the fallback memcpy-like path */\n        FILE *f = fopen(\"/tmp/logs/126.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"TAKING_FALLBACK_WRITE_PATH: manual copy loop\\n\");\n            fprintf(f, \"  io=%p offset=%lu initial_len=%d\\n\",\n                    (void *)io, offset, len);\n            fclose(f);\n        }\n\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n        for (; len != 0; ptr++, source++, len--)\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Log completion of fallback path */\n        metal_io_log_basic(\"FALLBACK_PATH_COMPLETE\", (void *)io,\n                           NULL, offset, src, (void *)ptr,\n                           (unsigned long)(io ? io->size : 0U), retlen);\n    }\n\n    /* Final state log before returning */\n    metal_io_log_basic(\"metal_io_block_write EXIT\", (void *)io,\n                       (void *)(io ? io->ops.block_write : NULL),\n                       offset, src, (void *)ptr,\n                       (unsigned long)(io ? io->size : 0U), retlen);\n\n    return retlen;\n}\n"
}