{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer io->ops.block_read (or io->ops.block_write in the write variant) is set to point to the wrapper function itself (e.g. io->ops.block_read == metal_io_block_read) or to any other function that eventually calls back to metal_io_block_read, then the call through the pointer becomes an indirect recursive call. In that setup the wrapper will call itself indirectly, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/126.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdatomic.h>\n\nstatic void io_log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/126.txt\", \"a\");\n    if (!f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    io_log_probe(\"ENTER metal_io_block_write: io=%p, offset=%lu, src=%p, len=%d, io_size=%lu, ops.block_write=%p\",\n                 (void *)io, offset, src, len, (io ? (unsigned long)io->size : 0UL),\n                 (io && io->ops.block_write) ? (void *)io->ops.block_write : NULL);\n\n    if (!ptr) {\n        io_log_probe(\"NULL virtual pointer returned for offset %lu -> returning -ERANGE\", offset);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        int old_len = len;\n        len = io->size - offset;\n        io_log_probe(\"Adjusted len from %d to %d because offset+len (%lu) > io->size (%lu)\", old_len, len, offset + (unsigned long)old_len, (unsigned long)io->size);\n    }\n    retlen = len;\n\n    if (io->ops.block_write) {\n        /* Log pointer values and detect direct pointer equality to this wrapper */\n        io_log_probe(\"About to call through ops.block_write: ptr=%p, wrapper_addr=%p\",\n                     (void *)io->ops.block_write, (void *)metal_io_block_write);\n        if ((void *)io->ops.block_write == (void *)metal_io_block_write) {\n            io_log_probe(\"WARNING: ops.block_write points directly to metal_io_block_write -> direct indirect-recursive scenario detected\");\n        }\n        io_log_probe(\"Calling ops.block_write(io=%p, offset=%lu, src=%p, memory_order_seq_cst, len=%d)\", (void *)io, offset, src, len);\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        io_log_probe(\"Returned from ops.block_write with retlen=%d\", retlen);\n    } else {\n        io_log_probe(\"No ops.block_write provided; performing default memory copy. ptr=%p, source=%p, len=%d\",\n                     (void *)ptr, (void *)source, len);\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n        }\n        io_log_probe(\"After byte-alignment loop: ptr=%p, source=%p, remaining len=%d\",\n                     (void *)ptr, (void *)source, len);\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n        io_log_probe(\"After word-copy loop: ptr=%p, source=%p, remaining len=%d\",\n                     (void *)ptr, (void *)source, len);\n        for (; len != 0; ptr++, source++, len--)\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n        io_log_probe(\"Completed default copy; performing atomic_thread_fence\");\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n\n    io_log_probe(\"EXIT metal_io_block_write: returning retlen=%d\", retlen);\n    return retlen;\n}"
}