{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for statement's third clause (ptr++, source++, len--) modifies more than the loop counter. MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter; here ptr and source are also modified, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/124.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <errno.h>\n#include <stdatomic.h>\n\nstatic void log_state(const char *tag,\n                      const unsigned char *ptr,\n                      const unsigned char *source,\n                      int len,\n                      int retlen)\n{\n    FILE *f = fopen(\"/tmp/logs/124.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: ptr=%#\" PRIxPTR \", source=%#\" PRIxPTR \", len=%d, retlen=%d\\n\",\n            tag, (uintptr_t)ptr, (uintptr_t)source, len, retlen);\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    if (!ptr)\n        return -ERANGE;\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n\n    /* Log entry state */\n    log_state(\"enter\", ptr, source, len, retlen);\n\n    if (io->ops.block_write) {\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n    } else {\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n\n            /* Log each byte-copy iteration for unaligned prefix */\n            log_state(\"unaligned_byte_iter_before_inc\", ptr, source, len, retlen);\n\n            ptr++;\n            source++;\n            len--;\n\n            log_state(\"unaligned_byte_iter_after_inc\", ptr, source, len, retlen);\n        }\n\n        /* Log state before the word-copy for-loop (this loop's third clause\n         * modifies ptr, source and len) */\n        log_state(\"before_word_for\", ptr, source, len, retlen);\n\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int)) {\n            *(unsigned int *)ptr = *(const unsigned int *)source;\n\n            /* Log current iteration state (values as seen inside body) */\n            log_state(\"word_iter_body\", ptr, source, len, retlen);\n\n            /* Predict values that the for-loop third clause will produce\n             * (this demonstrates that ptr, source and len are modified by\n             * the third clause, not just a single loop counter). */\n            log_state(\"word_iter_predicted_after_third\",\n                      (const unsigned char *)((uintptr_t)ptr + sizeof(int)),\n                      (const unsigned char *)((uintptr_t)source + sizeof(int)),\n                      (int)(len - (int)sizeof(int)), retlen);\n        }\n\n        /* Log state after word-copy loop */\n        log_state(\"after_word_for\", ptr, source, len, retlen);\n\n        for (; len != 0; ptr++, source++, len--) {\n            *(unsigned char *)ptr =\n                *(const unsigned char *)source;\n\n            /* Log current iteration state for the final byte-copy loop */\n            log_state(\"tail_byte_iter_body\", ptr, source, len, retlen);\n\n            /* Predict the values that the for-loop third clause will apply */\n            log_state(\"tail_byte_iter_predicted_after_third\",\n                      (const unsigned char *)((uintptr_t)ptr + 1),\n                      (const unsigned char *)((uintptr_t)source + 1),\n                      (int)(len - 1), retlen);\n        }\n\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Final state before return */\n        log_state(\"exit\", ptr, source, len, retlen);\n    }\n    return retlen;\n}\n"
}