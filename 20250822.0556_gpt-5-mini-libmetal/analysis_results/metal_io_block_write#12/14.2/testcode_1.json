{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement\u2019s third clause modifies more than the loop counter: it updates ptr and source as well as len (ptr += sizeof(int), source += sizeof(int), len -= sizeof(int)). MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter. Therefore this for loop is not well-formed and violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/124.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_write:\n```c\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n\t       const void *restrict src, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tconst unsigned char *source = src;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_write) {\n\t\tretlen = (*io->ops.block_write)(\n\t\t\tio, offset, src, memory_order_seq_cst, len);\n\t} else {\n\t\twhile ( len && (\n\t\t\t((uintptr_t)ptr % sizeof(int)) ||\n\t\t\t((uintptr_t)source % sizeof(int)))) {\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\t\tptr++;\n\t\t\tsource++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\tsource += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = *(const unsigned int *)source;\n\t\tfor (; len != 0; ptr++, source++, len--)\n\t\t\t*(unsigned char *)ptr =\n\t\t\t\t*(const unsigned char *)source;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/124.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_io_block_write(struct metal_io_region *io, unsigned long offset,\n           const void *restrict src, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    const unsigned char *source = src;\n    int retlen;\n\n    probe_log(\"ENTER metal_io_block_write: io=%p offset=%lu src=%p len=%d\", (void *)io, offset, src, len);\n    probe_log(\"virt ptr=%p io->size=%lu\", (void *)ptr, (unsigned long)io->size);\n\n    if (!ptr) {\n        probe_log(\"NULL ptr detected, returning -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        probe_log(\"offset+len exceeds io->size: offset=%lu len=%d io->size=%lu; adjusting len\", offset, len, (unsigned long)io->size);\n        len = io->size - offset;\n    }\n    probe_log(\"post-adjust len=%d\", len);\n    retlen = len;\n    if (io->ops.block_write) {\n        probe_log(\"using ops.block_write: calling block_write(io=%p, offset=%lu, src=%p, len=%d)\", (void *)io, offset, src, len);\n        retlen = (*io->ops.block_write)(\n            io, offset, src, memory_order_seq_cst, len);\n        probe_log(\"block_write returned retlen=%d\", retlen);\n    } else {\n        probe_log(\"entering fallback write path\");\n        /* initial byte-wise copy until aligned */\n        while ( len && (\n            ((uintptr_t)ptr % sizeof(int)) ||\n            ((uintptr_t)source % sizeof(int)))) {\n            probe_log(\"byte-loop-before: ptr=%p source=%p len=%d byte=*%02x\",\n                      (void *)ptr, (const void *)source, len, (unsigned int)*(const unsigned char *)source);\n            *(unsigned char *)ptr = *(const unsigned char *)source;\n            ptr++;\n            source++;\n            len--;\n            probe_log(\"byte-loop-after: ptr=%p source=%p len=%d\",\n                      (void *)ptr, (const void *)source, len);\n        }\n\n        /* word-sized copies: this is the clause in question; the third clause\n           of the for modifies ptr, source and len. We log before the store\n           and compute/log what the values will be after the for's third clause\n           to provide evidence of those modifications. */\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                    source += sizeof(int),\n                    len -= sizeof(int)) {\n            unsigned int v = *(const unsigned int *)source;\n            probe_log(\"word-loop-before: ptr=%p source=%p len=%d value=*0x%08x\",\n                      (void *)ptr, (const void *)source, len, v);\n            *(unsigned int *)ptr = v;\n            /* The for-loop's third clause will execute after this block; log the\n               expected next values to show that ptr, source and len are changed\n               by the third clause. */\n            probe_log(\"word-loop-after_third_clause_expected: ptr_next=%p source_next=%p len_next=%d\",\n                      (void *)(ptr + sizeof(int)), (const void *)(source + sizeof(int)), len - (int)sizeof(int));\n        }\n\n        /* remaining bytes */\n        for (; len != 0; ptr++, source++, len--) {\n            probe_log(\"tail-byte-before: ptr=%p source=%p len=%d byte=*%02x\",\n                      (void *)ptr, (const void *)source, len, (unsigned int)*(const unsigned char *)source);\n            *(unsigned char *)ptr = *(const unsigned char *)source;\n            probe_log(\"tail-byte-after: ptr=%p source=%p len=%d\",\n                      (void *)ptr + 1, (const void *)source + 1, len - 1);\n        }\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"fallback path complete, final ptr=%p source=%p len=%d\", (void *)ptr, (const void *)source, len);\n    }\n    probe_log(\"EXIT metal_io_block_write returning retlen=%d\", retlen);\n    return retlen;\n}\n"
}