{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor_each_linux_bus(lbus) {\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation for the fragment as written. The fragment \u2018for_each_linux_bus(lbus) { \u2026 }\u2019 by itself does not create unreachable code; in typical implementations it expands to a loop that iterates over bus entries so the loop body is reachable. A concrete violation scenario would require the macro to be defined so that the loop body can never be entered\u2014for example, if the macro were (incorrectly) defined as \u2018#define for_each_linux_bus(lbus) while(0)\u2019 or expanded to include a prior return/goto that exits before the body, then the loop body would be unreachable and Rule 2.1 would be violated."
}