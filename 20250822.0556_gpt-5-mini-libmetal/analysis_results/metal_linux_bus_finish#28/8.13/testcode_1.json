{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_linux_bus_finish, lbus is declared as 'struct linux_bus *lbus' but is only used for read access (lbus->bus_name passed to metal_bus_find). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. 'const struct linux_bus *lbus'). Therefore, unless the for_each_linux_bus macro requires a non-const pointer, this is a violation: lbus should be 'const struct linux_bus *'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_finish code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers to log control flow and state for metal_linux_bus_finish.\n * Logs are appended to /tmp/logs/283.txt. The helpers try to create the\n * directory /tmp/logs if it does not exist. These helpers are intentionally\n * minimal and preserve the original logic of metal_linux_bus_finish.\n */\nstatic void probe_ensure_dir(void)\n{\n    /* Ignore errors; if mkdir fails because the dir exists that's fine. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log_start(void)\n{\n    FILE *f;\n    probe_ensure_dir();\n    f = fopen(\"/tmp/logs/283.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"metal_linux_bus_finish: enter\\n\");\n        fclose(f);\n    }\n}\n\nstatic void probe_log_bus(const void *lbus_ptr, const char *bus_name, const void *bus_ptr, int find_ret)\n{\n    FILE *f;\n    f = fopen(\"/tmp/logs/283.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"  lbus=%p\", lbus_ptr);\n    if (bus_name != NULL) {\n        fprintf(f, \" name=\\\"%s\\\"\", bus_name);\n    } else {\n        fprintf(f, \" name=(NULL)\");\n    }\n    fprintf(f, \" find_ret=%d bus=%p\\n\", find_ret, bus_ptr);\n    fclose(f);\n}\n\nstatic void probe_log_end(void)\n{\n    FILE *f;\n    f = fopen(\"/tmp/logs/283.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"metal_linux_bus_finish: exit\\n\");\n        fclose(f);\n    }\n}\n\n/* Original function with probes inserted. Logic is preserved. */\nvoid metal_linux_bus_finish(void)\n{\n    struct linux_bus *lbus;\n    struct metal_bus *bus;\n    int ret;\n\n    probe_log_start();\n\n    for_each_linux_bus(lbus) {\n        /* Capture return value for logging, preserve original call and behavior. */\n        ret = metal_bus_find(lbus->bus_name, &bus);\n        /* Log the current lbus pointer, its bus_name (if any), the return code and bus pointer. */\n        probe_log_bus((const void *)lbus, lbus ? lbus->bus_name : NULL, (const void *)bus, ret);\n        if (ret == 0)\n            metal_bus_unregister(bus);\n    }\n\n    probe_log_end();\n}\n"
}