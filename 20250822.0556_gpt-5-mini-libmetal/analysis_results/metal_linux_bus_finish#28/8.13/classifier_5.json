{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_bus_unregister(bus);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Based on the fragment alone, there is no definitive violation. The pointer variable is declared as 'struct metal_bus *bus' and is passed to metal_bus_unregister(bus). This is acceptable if metal_bus_unregister is intended to modify or unregister the bus object (i.e. its prototype expects a non-const pointer). A violation of MISRA C 2023 Rule 8.13 would occur if metal_bus_unregister does not modify the pointed-to object but nevertheless declares/accepts a non-const pointer (and the local 'bus' could be declared 'const struct metal_bus *'). Conversely, if the API requires modification (or metal_bus_find returns a non-const pointer via struct metal_bus **), then using a non-const pointer is appropriate and not a Rule 8.13 violation."
}