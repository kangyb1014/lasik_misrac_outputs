{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct linux_bus declares bus_name as a non-const pointer (for example: char *bus_name) but the member is only read (here it is passed to metal_bus_find for lookup), then the pointer is not const-qualified even though it could be. This violates MISRA C 2023 Rule 8.13. Fix: declare bus_name as const char *bus_name (and propagate const where appropriate). If, instead, bus_name is already declared const (const char *), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_finish code.\n",
  "test_code": "void metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\tFILE *log = fopen(\"/tmp/logs/283.txt\", \"a\");\n\tif (log != NULL) {\n\t\tfprintf(log, \"metal_linux_bus_finish: entry\\n\");\n\t\tfflush(log);\n\t}\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (log != NULL) {\n\t\t\tfprintf(log, \"iter: lbus=%p, bus_name_ptr=%p\", (void *)lbus, (void *)lbus->bus_name);\n\t\t\tif (lbus->bus_name != NULL) {\n\t\t\t\t/* print as string; if not a valid string this may show garbage but is useful for diagnostics */\n\t\t\t\tfprintf(log, \", bus_name_str=\\\"%s\\\"\", lbus->bus_name);\n\t\t\t}\n\t\t\tfprintf(log, \"\\n\");\n\t\t\tfflush(log);\n\t\t}\n\n\t\tint rc = metal_bus_find(lbus->bus_name, &bus);\n\t\tif (log != NULL) {\n\t\t\tfprintf(log, \"metal_bus_find returned %d, bus=%p\\n\", rc, (void *)bus);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tif (rc == 0)\n\t\t{\n\t\t\tif (log != NULL) {\n\t\t\t\tfprintf(log, \"metal_bus_unregister called for bus=%p\\n\", (void *)bus);\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t\tmetal_bus_unregister(bus);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (log != NULL) {\n\t\t\t\tfprintf(log, \"metal_bus_find did not find bus for name \\\"%s\\\"\\n\",\n\t\t\t\t\t(lbus->bus_name != NULL) ? lbus->bus_name : \"(null)\");\n\t\t\t\tfflush(log);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (log != NULL) {\n\t\tfprintf(log, \"metal_linux_bus_finish: exit\\n\");\n\t\tfclose(log);\n\t}\n}\n"
}