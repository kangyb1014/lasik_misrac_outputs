{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer lbus is only used for read access in the loop (iteration via for_each_linux_bus and reading lbus->bus_name). It can and should be declared as const: \"const struct linux_bus *lbus;\". Declaring it non-const violates MISRA C 2023 Rule 8.13 unless the for_each_linux_bus macro requires a non-const pointer (in which case the macro/interface should be changed to accept const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_finish as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_finish code.\n",
  "test_code": "#include <stdio.h>\n\nvoid metal_linux_bus_finish(void)\n{\n    struct linux_bus *lbus;\n    struct metal_bus *bus;\n    FILE *log = fopen(\"/tmp/logs/283.txt\", \"a\");\n\n    if (log != NULL) {\n        fprintf(log, \"metal_linux_bus_finish: enter\\n\");\n        fflush(log);\n    }\n\n    for_each_linux_bus(lbus) {\n        /* Log the pointer and the bus_name safely (guard against NULL) */\n        if (log != NULL) {\n            const char *name = \"(null)\";\n            if (lbus != NULL && lbus->bus_name != NULL) {\n                name = lbus->bus_name;\n            }\n            fprintf(log, \"iter: lbus=%p bus_name=%s\\n\", (void *)lbus, name);\n            fflush(log);\n        }\n\n        if (metal_bus_find(lbus->bus_name, &bus) == 0) {\n            if (log != NULL) {\n                fprintf(log, \"metal_bus_find: found bus=%p (will unregister)\\n\", (void *)bus);\n                fflush(log);\n            }\n            metal_bus_unregister(bus);\n        } else {\n            if (log != NULL) {\n                const char *name = \"(null)\";\n                if (lbus != NULL && lbus->bus_name != NULL) {\n                    name = lbus->bus_name;\n                }\n                fprintf(log, \"metal_bus_find: not found for bus_name=%s\\n\", name);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL) {\n        fprintf(log, \"metal_linux_bus_finish: exit\\n\");\n        fclose(log);\n    }\n}\n"
}