{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor_each_linux_bus(lbus) {\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in typical use: for_each_linux_bus is expected to expand to a loop whose controlling expression depends on lbus (e.g. for (lbus = first_linux_bus(); lbus != NULL; lbus = next_linux_bus(lbus))) so the controlling expression is not invariant. A violation would occur if the macro expanded to an invariant controlling expression that is not an allowed exception \u2014 for example if it expanded to for (; 0; ) (constant false) which is not permitted by the exceptions (do-while(false) is allowed, infinite loops are allowed, but a for-loop with a constant false/true that is not intended as an infinite loop would violate Rule 14.3)."
}