{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_bus_unregister(bus);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call metal_bus_unregister(bus); itself does not demonstrate a violation of MISRA C 2023 Rule 17.8. The rule concerns modification of a function's parameter inside the function definition (the pointer parameter itself must not be assigned). This call only passes the pointer by value; modifying the object pointed to (e.g. bus->field = ...) is permitted. A violation would occur only if metal_bus_unregister were defined to assign to its pointer parameter (for example: void metal_bus_unregister(struct metal_bus *bus) { bus = NULL; }), which cannot be determined from the call site alone."
}