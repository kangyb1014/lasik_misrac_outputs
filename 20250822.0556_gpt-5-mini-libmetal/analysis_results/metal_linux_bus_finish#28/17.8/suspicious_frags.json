{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_finish:\n```c\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for_each_linux_bus(lbus)",
    "if (metal_bus_find(lbus->bus_name, &bus) == 0)",
    "metal_bus_unregister(bus);"
  ],
  "explanation": "The function metal_linux_bus_finish has no formal parameters, so the MISRA C Rule 17.8 concerns arise only from calls that pass pointer arguments to other functions (where those callee functions might modify pointer parameters). The local pointer declarations (struct linux_bus *lbus; struct metal_bus *bus;) and the loop/iteration over local variables themselves do not violate Rule 17.8. The only places that need investigation are the calls that pass pointer(s): the for_each_linux_bus(lbus) loop construct (which may expand to code that passes lbus to iterators/helpers), the call to metal_bus_find(lbus->bus_name, &bus) (passes a pointer-to-object and the address of a pointer variable), and the call to metal_bus_unregister(bus) (passes a pointer). These calls should be inspected to ensure the callee functions do not modify their pointer parameters (they may modify the objects pointed to, as permitted). Other code in the function does not involve passing function parameters and therefore does not need investigation for Rule 17.8."
}