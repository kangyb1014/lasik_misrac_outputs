{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen DEFAULT_LOGGER_ON is not defined, the statement '(void)level;' is an evaluated expression statement with no side effects. Removing it does not change the observable behaviour of the program (it only suppresses an unused-parameter warning), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_default_log_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/192.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_default_log_handler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\nPlease provide the modified metal_default_log_handler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\nvoid metal_default_log_handler(enum metal_log_level level,\n                               const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n    char msg[1024];\n    va_list args;\n    static const char * const level_strs[] = {\n        \"metal: emergency: \",\n        \"metal: alert:     \",\n        \"metal: critical:  \",\n        \"metal: error:     \",\n        \"metal: warning:   \",\n        \"metal: notice:    \",\n        \"metal: info:      \",\n        \"metal: debug:     \",\n    };\n\n    va_start(args, format);\n    vsnprintf(msg, sizeof(msg), format, args);\n    va_end(args);\n\n    if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n        level = METAL_LOG_EMERGENCY;\n\n    fprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n    /* Preserve original unused-parameter casts (these are the items\n       reported as dead code in the violation scenario). */\n    (void)level;\n    (void)format;\n\n    /* Probe: capture control flow and state to /tmp/logs/192.txt so the\n       scenario can be reproduced and inspected. This probe intentionally\n       does not alter the original logic beyond emitting diagnostics to\n       a side log file. */\n    FILE *probe = fopen(\"/tmp/logs/192.txt\", \"a\");\n    if (probe != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(probe, \"time=%ld: metal_default_log_handler: DEFAULT_LOGGER_ON disabled; executed branch with (void)level; (void)format;\\n\",\n                (long)t);\n\n        /* Log the state values: level as integer, format pointer and a\n           small sample of the format string if present. */\n        fprintf(probe, \"  level_value=%d, format_ptr=%p\",\n                (int)level, (const void *)format);\n\n        if (format != NULL)\n        {\n            /* print up to 128 characters of the format string to avoid\n               unbounded output and to remain robust if the format is\n               long. */\n            fprintf(probe, \", format_sample=\\\"\");\n            fwrite(format, 1, strnlen(format, 128), probe);\n            if (strnlen(format, 128) == 128)\n            {\n                fprintf(probe, \"...\");\n            }\n            fprintf(probe, \"\\\"\");\n        }\n        fprintf(probe, \"\\n\\n\");\n        fclose(probe);\n    }\n#endif\n}\n"
}