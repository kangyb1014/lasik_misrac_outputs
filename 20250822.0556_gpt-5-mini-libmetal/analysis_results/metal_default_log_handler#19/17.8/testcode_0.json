{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter 'level' (enum metal_log_level) with the statement 'level = METAL_LOG_EMERGENCY;'. This modifies a non-pointer function parameter, which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_default_log_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/197.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_default_log_handler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_default_log_handler:\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\nPlease provide the modified metal_default_log_handler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe helper: append diagnostic lines to /tmp/logs/197.txt */\nstatic void probe_log_change(const char *stage, enum metal_log_level before, enum metal_log_level after, bool branch_taken)\n{\n    FILE *f = fopen(\"/tmp/logs/197.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, numeric values of enum before/after, and whether branch was taken */\n        fprintf(f, \"%s: before=%d after=%d branch_taken=%d\\n\",\n                stage, (int)before, (int)after, branch_taken ? 1 : 0);\n        fclose(f);\n    }\n}\n\nvoid metal_default_log_handler(enum metal_log_level level,\n                               const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n    char msg[1024];\n    va_list args;\n    static const char * const level_strs[] = {\n        \"metal: emergency: \",\n        \"metal: alert:     \",\n        \"metal: critical:  \",\n        \"metal: error:     \",\n        \"metal: warning:   \",\n        \"metal: notice:    \",\n        \"metal: info:      \",\n        \"metal: debug:     \",\n    };\n\n    va_start(args, format);\n    vsnprintf(msg, sizeof(msg), format, args);\n    va_end(args);\n\n    /* Record original level for probes */\n    enum metal_log_level orig_level = level;\n    bool out_of_range = (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG);\n\n    if (out_of_range)\n    {\n        /* Log that the check was true and we are about to assign to the non-pointer parameter */\n        probe_log_change(\"check_true_before_assignment\", orig_level, level, true);\n\n        /* This assignment modifies the non-pointer parameter 'level' (intended behavior retained) */\n        level = METAL_LOG_EMERGENCY;\n\n        /* Log the state after assignment */\n        probe_log_change(\"after_assignment\", orig_level, level, true);\n    }\n    else\n    {\n        /* Log that no assignment occurred */\n        probe_log_change(\"check_false_no_assignment\", orig_level, level, false);\n    }\n\n    fprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n    (void)level;\n    (void)format;\n#endif\n}\n"
}