{
  "user_message": "An agent A claimed that the following metal_default_log_handler code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of metal_default_log_handler.\n```c\nvoid metal_default_log_handler(enum metal_log_level level,\n\t\t\t       const char *format, ...)\n{\n#ifdef DEFAULT_LOGGER_ON\n\tchar msg[1024];\n\tva_list args;\n\tstatic const char * const level_strs[] = {\n\t\t\"metal: emergency: \",\n\t\t\"metal: alert:     \",\n\t\t\"metal: critical:  \",\n\t\t\"metal: error:     \",\n\t\t\"metal: warning:   \",\n\t\t\"metal: notice:    \",\n\t\t\"metal: info:      \",\n\t\t\"metal: debug:     \",\n\t};\n\n\tva_start(args, format);\n\tvsnprintf(msg, sizeof(msg), format, args);\n\tva_end(args);\n\n\tif (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)\n\t\tlevel = METAL_LOG_EMERGENCY;\n\n\tfprintf(stderr, \"%s%s\", level_strs[level], msg);\n#else\n\t(void)level;\n\t(void)format;\n#endif\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function assigns to the parameter 'level' (enum metal_log_level) with the statement 'level = METAL_LOG_EMERGENCY;'. This modifies a non-pointer function parameter, which violates MISRA C 2023 Rule 17.8.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=4 after=4 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=6 after=6 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\ncheck_false_no_assignment: before=7 after=7 branch_taken=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_default_log_handler:\nenum metal_log_level {\n\tMETAL_LOG_EMERGENCY,\t/**< system is unusable.               */\n\tMETAL_LOG_ALERT,\t/**< action must be taken immediately. */\n\tMETAL_LOG_CRITICAL,\t/**< critical conditions.              */\n\tMETAL_LOG_ERROR,\t/**< error conditions.                 */\n\tMETAL_LOG_WARNING,\t/**< warning conditions.               */\n\tMETAL_LOG_NOTICE,\t/**< normal but significant condition. */\n\tMETAL_LOG_INFO,\t\t/**< informational messages.           */\n\tMETAL_LOG_DEBUG,\t/**< debug-level messages.             */\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In the enabled branch of the function the statement\n\n    level = METAL_LOG_EMERGENCY;\n\nassigns to the non\u2011pointer parameter 'level' (an enum passed by value), which is a direct modification of the parameter object and therefore violates Rule 17.8. The pointer exception in the rule does not apply here because 'level' is not a pointer.\n\nA compliant fix is to avoid modifying the parameter and use a local variable instead, for example:\n\n    enum metal_log_level lvl = level;\n    if (lvl <= METAL_LOG_EMERGENCY || lvl > METAL_LOG_DEBUG)\n        lvl = METAL_LOG_EMERGENCY;\n    fprintf(stderr, \"%s%s\", level_strs[lvl], msg);\n\nThis preserves the intended behavior while not assigning to the function parameter itself."
}