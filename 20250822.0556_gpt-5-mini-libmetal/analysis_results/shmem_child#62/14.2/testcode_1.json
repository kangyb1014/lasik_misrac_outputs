{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for-loop first clause is 'virt = mem, page = 0' which assigns to virt in addition to initializing the loop counter page. MISRA C 2023 Rule 14.2 requires the first clause to be empty or only to set/define the loop counter; it must not have side effects on other objects used in the loop body. Therefore the loop is not well\u2011formed under Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/624.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/624.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt;\n    struct metal_io_region *io;\n    unsigned long phys;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    /* Log entry and input state */\n    log_probe(\"shmem_child: entry, name=%s, size=%zu, arg_ptr=%p\", (name != NULL) ? name : \"(null)\", size, arg);\n\n    error = metal_shmem_open(name, size, &io);\n    log_probe(\"shmem_child: metal_shmem_open returned error=%d, io_ptr=%p\", error, (void *)io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        atomic_fetch_add(&nb_err, 1);\n        log_probe(\"shmem_child: early return due to error=%d\", error);\n        return NULL;\n    }\n\n    virt = metal_io_virt(io, 0);\n    phys = metal_io_phys(io, 0);\n    log_probe(\"shmem_child: virt=%p, phys=%lu (0x%lx)\", (void *)virt, phys, (unsigned long)phys);\n\n    if (phys != METAL_BAD_OFFSET) {\n        void *phys_to_virt = metal_io_phys_to_virt(io, phys);\n        unsigned long virt_to_phys = metal_io_virt_to_phys(io, virt);\n\n        log_probe(\"shmem_child: metal_io_phys_to_virt(io, phys) -> %p\", phys_to_virt);\n        log_probe(\"shmem_child: metal_io_virt_to_phys(io, virt) -> %lu (0x%lx)\", virt_to_phys, (unsigned long)virt_to_phys);\n\n        if (virt != phys_to_virt) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n            log_probe(\"shmem_child: mismatch virt (%p) != phys_to_virt (%p)\", (void *)virt, phys_to_virt);\n        }\n        if (phys != virt_to_phys) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n            log_probe(\"shmem_child: mismatch phys (%lu) != virt_to_phys (%lu)\", phys, virt_to_phys);\n        }\n    } else {\n        log_probe(\"shmem_child: phys == METAL_BAD_OFFSET (value=%lu)\", phys);\n    }\n\n    metal_io_finish(io);\n    log_probe(\"shmem_child: finished, returning NULL\");\n    return NULL;\n}\n"
}