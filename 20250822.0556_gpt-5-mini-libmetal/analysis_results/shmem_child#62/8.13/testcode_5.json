{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'arg' is declared as 'void *arg' but is only used as read-only (assigned to 'const char *name = arg'). According to MISRA C 2023 Rule 8.13, the pointer parameter should be const-qualified when possible (e.g. 'const void *arg' or 'const char *arg'). Declaring it non-const when it is not modified violates the rule (unless the function signature is constrained by an external API such as a thread-start callback that requires 'void *').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tFILE *log = fopen(\"/tmp/logs/623.txt\", \"a\");\n\tif (log) {\n\t\t/* Log entry and initial state: pointer value and interpreted name. */\n\t\tfprintf(log, \"shmem_child: entry - arg=%p, name=%s\\n\",\n\t\t\t(void *)arg, (name != NULL) ? name : \"(null)\");\n\t} else {\n\t\tmetal_log(METAL_LOG_ERROR, \"shmem_child: failed to open log file.\\n\");\n\t}\n\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\t/* Log failure to open shared memory and the error code */\n\t\tif (log) {\n\t\t\tfprintf(log, \"shmem_child: metal_shmem_open failed - name=%s, size=%zu, error=%d\\n\",\n\t\t\t\t(name != NULL) ? name : \"(null)\", size, error);\n\t\t\tfclose(log);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\t/* Log successful open and io pointer */\n\tif (log) {\n\t\tfprintf(log, \"shmem_child: metal_shmem_open succeeded - io=%p\\n\", (void *)io);\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\n\t/* Log virtual pointer and physical offset */\n\tif (log) {\n\t\tfprintf(log, \"shmem_child: virt=%p, phys=%lu\\n\", (void *)virt, phys);\n\t}\n\n\tif (phys != METAL_BAD_OFFSET) {\n\t\t/* Check virt/phys consistency and log each check and result. */\n\t\tvoid *phys_to_virt = metal_io_phys_to_virt(io, phys);\n\t\tif (virt != phys_to_virt) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"shmem_child: mismatch virt(%p) != phys_to_virt(%p)\\n\",\n\t\t\t\t\t(void *)virt, phys_to_virt);\n\t\t\t}\n\t\t} else if (log) {\n\t\t\tfprintf(log, \"shmem_child: virt matches phys_to_virt (%p)\\n\", (void *)virt);\n\t\t}\n\n\t\tunsigned long virt_to_phys = metal_io_virt_to_phys(io, virt);\n\t\tif (phys != virt_to_phys) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"shmem_child: mismatch phys(%lu) != virt_to_phys(%lu)\\n\",\n\t\t\t\t\tphys, virt_to_phys);\n\t\t\t}\n\t\t} else if (log) {\n\t\t\tfprintf(log, \"shmem_child: phys matches virt_to_phys (%lu)\\n\", virt_to_phys);\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\n\tif (log) {\n\t\t/* Log exit and reaffirm that 'arg' was only read and not modified. */\n\t\tfprintf(log, \"shmem_child: exit - arg=%p, name=%s (read-only)\\n\",\n\t\t\t(void *)arg, (name != NULL) ? name : \"(null)\");\n\t\tfclose(log);\n\t}\n\n\treturn NULL;\n}\n"
}