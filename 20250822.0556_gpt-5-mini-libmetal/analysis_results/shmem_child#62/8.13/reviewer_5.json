{
  "user_message": "An agent A claimed that the following shmem_child code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of shmem_child.\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'arg' is declared as 'void *arg' but is only used as read-only (assigned to 'const char *name = arg'). According to MISRA C 2023 Rule 8.13, the pointer parameter should be const-qualified when possible (e.g. 'const void *arg' or 'const char *arg'). Declaring it non-const when it is not modified violates the rule (unless the function signature is constrained by an external API such as a thread-start callback that requires 'void *').\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ef0002570\nshmem_child: virt=0x7f9f0a0a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a0a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9eec002570\nshmem_child: virt=0x7f9f0a2a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a2a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ee0002570\nshmem_child: virt=0x7f9f0a2a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a2a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ee8002570\nshmem_child: virt=0x7f9f0a0a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a0a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ee00025f0\nshmem_child: virt=0x7f9f0a2a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a2a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ef4002570\nshmem_child: virt=0x7f9f0a4a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a4a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ef00025f0\nshmem_child: virt=0x7f9f0a0a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a0a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9efc002570\nshmem_child: virt=0x7f9f0a3a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a3a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9ef8002570\nshmem_child: virt=0x7f9f0a1a4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f0a1a4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55c217c4b3a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f9eec0025f0\nshmem_child: virt=0x7f9f09fa4000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f9f09fa4000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55c217c4b3a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55858b8d03a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f076c002570\nshmem_child: virt=0x7f077a5fd000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f077a5fd000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55858b8d03a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55858b8d03a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f0768002570\nshmem_child: virt=0x7f07793fb000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f07793fb000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55858b8d03a9, name=/foo (read-only)\nshmem_child: entry - arg=0x55858b8d03a9, name=/foo\nshmem_child: metal_shmem_open succeeded - io=0x7f0764002570\nshmem_child: virt=0x7f07795fb000, phys=0\nshmem_child: virt matches phys_to_virt (0x7f07795fb000)\nshmem_child: phys matches virt_to_phys (0)\nshmem_child: exit - arg=0x55858b8d03a9, name=/foo (read-only)\nshmem_child: entry - arg=0x\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Rule 8.13 indeed recommends that pointer types be const-qualified when the pointee is not modified. In isolation, the parameter 'arg' is only read and could be represented as 'const void *' or the function could accept 'const char *name' directly. However, shmem_child is written with the exact signature required for thread-start callbacks (void *(*)(void *)), and the execution log strongly indicates it is used that way. MISRA permits retaining a non-const parameter when the function must match an external API whose prototype is non-const. Given that constraint, the non-const 'void *arg' is justified and not a violation of Rule 8.13. If this function were not an external/API callback, the report would be correct; but in this context the report is not correct."
}