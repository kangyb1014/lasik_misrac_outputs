{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is declared as a pointer to a non-const anonymous struct but is only used for read-only operations (assigned and compared). In the fragment if (virt != metal_io_phys_to_virt(io, phys)) { ... } 'virt' could and should be declared to point to a const-qualified type (e.g. const struct { ... } *virt) to express immutability. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\tFILE *log = fopen(\"/tmp/logs/623.txt\", \"a\");\n\n\tif (log) {\n\t\tfprintf(log, \"shmem_child: entry name=%s size=%zu\\n\", name ? name : \"(null)\", size);\n\t\tfflush(log);\n\t}\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tif (log) fprintf(log, \"shmem_child: metal_shmem_open failed error=%d\\n\", error);\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\tif (log) {\n\t\t\tfprintf(log, \"shmem_child: incremented nb_err due to shmem_open failure\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn NULL;\n\t}\n\n\tif (log) fprintf(log, \"shmem_child: metal_shmem_open succeeded io=%p\\n\", (void *)io);\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (log) fprintf(log, \"shmem_child: virt=%p phys=0x%lx\\n\", (void *)virt, phys);\n\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tvoid *calc_virt = metal_io_phys_to_virt(io, phys);\n\t\tif (log) fprintf(log, \"shmem_child: metal_io_phys_to_virt(io, phys) -> %p\\n\", calc_virt);\n\n\t\tif (virt != calc_virt) {\n\t\t\tif (log) fprintf(log, \"shmem_child: comparison: virt != calc_virt (observed violation)\\n\");\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t} else {\n\t\t\tif (log) fprintf(log, \"shmem_child: comparison: virt == calc_virt\\n\");\n\t\t}\n\n\t\tunsigned long calc_phys = metal_io_virt_to_phys(io, virt);\n\t\tif (log) fprintf(log, \"shmem_child: metal_io_virt_to_phys(io, virt) -> 0x%lx\\n\", calc_phys);\n\n\t\tif (phys != calc_phys) {\n\t\t\tif (log) fprintf(log, \"shmem_child: comparison: phys != calc_phys (observed violation)\\n\");\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t} else {\n\t\t\tif (log) fprintf(log, \"shmem_child: comparison: phys == calc_phys\\n\");\n\t\t}\n\t} else {\n\t\tif (log) fprintf(log, \"shmem_child: phys == METAL_BAD_OFFSET (no mapping)\\n\");\n\t}\n\n\tmetal_io_finish(io);\n\tif (log) {\n\t\tfprintf(log, \"shmem_child: exit\\n\");\n\t\tfclose(log);\n\t}\n\treturn NULL;\n}\n"
}