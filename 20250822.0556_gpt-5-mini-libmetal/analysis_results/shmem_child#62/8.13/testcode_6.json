{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is declared as a non-const pointer to the anonymous struct but is only used for reads/addresses (assigned from metal_io_virt(io, 0) and later only compared or passed to metal_io_virt_to_phys). Because the pointed-to object is not modified, 'virt' could and should be declared to point to a const-qualified type (e.g. 'const struct { ... } *virt'), so the current code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt;\n    struct metal_io_region *io;\n    unsigned long phys;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    log_probe(\"shmem_child ENTRY: name=%s, size=%zu\", name ? name : \"(null)\", size);\n\n    error = metal_shmem_open(name, size, &io);\n    log_probe(\"metal_shmem_open returned %d, io=%p\", error, (void *)io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        atomic_fetch_add(&nb_err, 1);\n        log_probe(\"shmem_child EXIT (open error): nb_err incremented, returning NULL\");\n        return NULL;\n    }\n\n    virt = metal_io_virt(io, 0);\n    log_probe(\"metal_io_virt returned virt=%p (sizeof *virt=%zu)\", (void *)virt, sizeof *virt);\n\n    phys = metal_io_phys(io, 0);\n    log_probe(\"metal_io_phys returned phys=%lu\", phys);\n\n    if (phys != METAL_BAD_OFFSET) {\n        void *phys_to_virt = metal_io_phys_to_virt(io, phys);\n        unsigned long virt_to_phys = metal_io_virt_to_phys(io, virt);\n\n        log_probe(\"metal_io_phys_to_virt(io, phys) -> %p\", phys_to_virt);\n        log_probe(\"metal_io_virt_to_phys(io, virt) -> %lu\", virt_to_phys);\n\n        if (virt != phys_to_virt) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n            log_probe(\"Mismatch detected: virt (%p) != phys_to_virt (%p). nb_err incremented\", (void *)virt, phys_to_virt);\n        } else {\n            log_probe(\"virt equals phys_to_virt: %p == %p\", (void *)virt, phys_to_virt);\n        }\n\n        if (phys != virt_to_phys) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n            log_probe(\"Mismatch detected: phys (%lu) != virt_to_phys (%lu). nb_err incremented\", phys, virt_to_phys);\n        } else {\n            log_probe(\"phys equals virt_to_phys: %lu == %lu\", phys, virt_to_phys);\n        }\n    } else {\n        log_probe(\"phys == METAL_BAD_OFFSET (%lu), skipping conversions\", phys);\n    }\n\n    log_probe(\"calling metal_io_finish(io=%p)\", (void *)io);\n    metal_io_finish(io);\n    log_probe(\"shmem_child EXIT: finished and returning NULL\");\n\n    return NULL;\n}\n"
}