{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is declared as a non-const pointer but is only used for address translation/inspection (metal_io_virt and metal_io_virt_to_phys) and never used to modify the pointee. Therefore it could and should be declared as a pointer to a const-qualified type (e.g. const struct { ... } *virt). Passing a non-const pointer here violates MISRA C 2023 Rule 8.13. (To fully comply, the called API should accept a const void * if it does not modify the memory.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void *shmem_child(void *arg)\n{\n    const char *name = arg;\n    struct {\n        metal_mutex_t\tmutex;\n        int\t\t\tcounter;\n    } *virt;\n    struct metal_io_region *io;\n    unsigned long phys;\n    size_t size = 1 * 1024 * 1024;\n    int error;\n\n    probe_log(\"shmem_child start: name=%s, requested_size=%zu\", name, size);\n\n    error = metal_shmem_open(name, size, &io);\n    probe_log(\"metal_shmem_open returned error=%d, io=%p\", error, (void *)io);\n    if (error) {\n        metal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n        probe_log(\"shmem_open failed, incrementing nb_err\");\n        atomic_fetch_add(&nb_err, 1);\n        return NULL;\n    }\n\n    virt = metal_io_virt(io, 0);\n    phys = metal_io_phys(io, 0);\n\n    probe_log(\"metal_io_virt returned virt=%p\", (void *)virt);\n    probe_log(\"metal_io_phys returned phys=%lu\", phys);\n\n    /* If virt is non-NULL, log observed fields to show it is only inspected */\n    if (virt != NULL) {\n        /* Accessing the counter for logging purposes only (no modification). */\n        probe_log(\"observed virt->counter=%d\", virt->counter);\n        probe_log(\"address of virt->mutex=%p\", (void *)&virt->mutex);\n    } else {\n        probe_log(\"virt is NULL, skipping field inspection\");\n    }\n\n    if (phys != METAL_BAD_OFFSET) {\n        void *virt_from_phys = metal_io_phys_to_virt(io, phys);\n        unsigned long phys_from_virt = metal_io_virt_to_phys(io, virt);\n\n        probe_log(\"metal_io_phys_to_virt(%lu) returned %p\", phys, virt_from_phys);\n        probe_log(\"metal_io_virt_to_phys(%p) returned %lu\", (void *)virt, phys_from_virt);\n\n        if (virt != virt_from_phys) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n            probe_log(\"mismatch: virt (%p) != metal_io_phys_to_virt(%lu) (%p)\", (void *)virt, phys, virt_from_phys);\n        }\n        if (phys != phys_from_virt) {\n            atomic_fetch_add(&nb_err, 1);\n            metal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n            probe_log(\"mismatch: phys (%lu) != metal_io_virt_to_phys(%p) (%lu)\", phys, (void *)virt, phys_from_virt);\n        }\n    } else {\n        probe_log(\"physical offset is METAL_BAD_OFFSET (%lu)\", phys);\n    }\n\n    probe_log(\"calling metal_io_finish for io=%p\", (void *)io);\n    metal_io_finish(io);\n    probe_log(\"shmem_child end for name=%s\", name);\n    return NULL;\n}\n"
}