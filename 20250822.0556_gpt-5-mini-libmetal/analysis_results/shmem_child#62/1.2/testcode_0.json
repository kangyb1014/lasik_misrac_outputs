{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC-specific statement-expression syntax ({ ... }) and the GCC extension token-pasting form '##__VA_ARGS__' to swallow the comma when no variadic args are provided. Both are documented compiler extensions (GCC) and thus violate MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified shmem_child code that contains useful probe functions that print useful logs to a file \"/tmp/logs/620.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of shmem_child as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of shmem_child:\n```c\nstatic void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\terror = metal_shmem_open(name, size, &io);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified shmem_child code.\n",
  "test_code": "static void *shmem_child(void *arg)\n{\n\tconst char *name = arg;\n\tstruct {\n\t\tmetal_mutex_t\tmutex;\n\t\tint\t\t\tcounter;\n\t} *virt;\n\tstruct metal_io_region *io;\n\tunsigned long phys;\n\tsize_t size = 1 * 1024 * 1024;\n\tint error;\n\n\t/* Probe log: entry */\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"ENTRY: shmem_child start\\n\");\n\t\t\tfprintf(log, \"ENTRY: arg(name) pointer=%p\\n\", (void *)name);\n\t\t\tfprintf(log, \"ENTRY: name string='%s'\\n\", name ? name : \"(null)\");\n\t\t\tfprintf(log, \"ENTRY: requested size=%zu\\n\", size);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\terror = metal_shmem_open(name, size, &io);\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"EVENT: metal_shmem_open returned error=%d\\n\", error);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\tif (error) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed shmem_open: %d.\\n\", error);\n\t\tatomic_fetch_add(&nb_err, 1);\n\n\t\t/* Probe log: early return due to error */\n\t\t{\n\t\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"EXIT: shmem_child returning NULL due to shmem_open error=%d\\n\", error);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t}\n\n\t\treturn NULL;\n\t}\n\n\tvirt = metal_io_virt(io, 0);\n\tphys = metal_io_phys(io, 0);\n\n\t/* Probe log: after obtaining virt and phys */\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"STATE: virt=%p\\n\", (void *)virt);\n\t\t\tfprintf(log, \"STATE: phys=%lu\\n\", phys);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\tif (phys != METAL_BAD_OFFSET) {\n\t\tif (virt != metal_io_phys_to_virt(io, phys)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed virt != phys.\\n\");\n\n\t\t\t{\n\t\t\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\t\t\tif (log) {\n\t\t\t\t\tvoid *v_from_phys = metal_io_phys_to_virt(io, phys);\n\t\t\t\t\tfprintf(log, \"CHECK: virt (%p) != metal_io_phys_to_virt(io, phys) (%p) -> mismatch\\n\",\n\t\t\t\t\t\t(void *)virt, v_from_phys);\n\t\t\t\t\tfclose(log);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (phys != metal_io_virt_to_phys(io, virt)) {\n\t\t\tatomic_fetch_add(&nb_err, 1);\n\t\t\tmetal_log(METAL_LOG_ERROR, \"Failed phys != virt.\\n\");\n\n\t\t\t{\n\t\t\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\t\t\tif (log) {\n\t\t\t\t\tunsigned long p_from_virt = metal_io_virt_to_phys(io, virt);\n\t\t\t\t\tfprintf(log, \"CHECK: phys (%lu) != metal_io_virt_to_phys(io, virt) (%lu) -> mismatch\\n\",\n\t\t\t\t\t\tphys, p_from_virt);\n\t\t\t\t\tfclose(log);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmetal_io_finish(io);\n\n\t/* Probe log: exit */\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/620.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"EXIT: shmem_child finished normally\\n\");\n\t\t\tfprintf(log, \"EXIT: final state virt=%p phys=%lu\\n\", (void *)virt, phys);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\treturn NULL;\n}\n"
}