{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen sg_out != sg_in and nents_in is greater than the number of elements actually allocated/available in the sg_out array: the memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)) will copy past the bounds of sg_out, causing out\u2011of\u2011bounds accesses. The subsequent loop accessing sg_out[i].virt and sg_out[i].len can then read/write beyond the object bounds. This use of memcpy can therefore result in accesses beyond object bounds and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append log lines to /tmp/logs/59.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    log_probe(\"ENTER metal_generic_dev_dma_map: sg_in=%p sg_out=%p nents_in=%d dir=%u\",\n              (void *)sg_in, (void *)sg_out, nents_in, (unsigned)dir);\n\n    if (sg_out != sg_in) {\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        log_probe(\"About to memcpy: bytes=%zu sg_in=%p sg_out=%p\",\n                  bytes, (void *)sg_in, (void *)sg_out);\n        /* Preserve original behavior */\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n        log_probe(\"memcpy completed: sg_out=%p (first entry virt=%p len=%zu)\",\n                  (void *)sg_out,\n                  (void *)(sg_out ? sg_out[0].virt : NULL),\n                  (size_t)(sg_out ? sg_out[0].len : 0));\n    } else {\n        log_probe(\"No memcpy: sg_out == sg_in\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each access to sg_out prior to cache operations to capture\n           the control flow and values that may demonstrate out-of-bounds\n           behavior. */\n        log_probe(\"Loop index %d/%d: sg_out[%d]=%p len=%zu\",\n                  i, nents_in, i,\n                  (void *)(sg_out ? sg_out[i].virt : NULL),\n                  (size_t)(sg_out ? sg_out[i].len : 0));\n\n        if (dir == METAL_DMA_DEV_W) {\n            log_probe(\"Calling metal_cache_flush for index %d virt=%p len=%zu\",\n                      i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n\n        log_probe(\"Calling metal_cache_invalidate for index %d virt=%p len=%zu\",\n                  i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    log_probe(\"EXIT metal_generic_dev_dma_map: returning %d\", nents_in);\n    return nents_in;\n}\n"
}