{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct metal_device *device' but the function does not modify the object (it only does '(void)device;'). Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible, e.g. 'const struct metal_device *device'. Thus the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                 struct metal_device *device,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i;\n\n    /* Log entry and parameter values to provide evidence that 'device' is not used */\n    probe_log(\"ENTER: metal_generic_dev_dma_map: bus=%p device=%p dir=%u sg_in=%p nents_in=%d sg_out=%p\",\n              (void *)bus, (void *)device, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n\n    if (sg_out != sg_in) {\n        probe_log(\"memcpy: sg_out != sg_in, copying %d entries (total_bytes=%zu)\",\n                  nents_in, (size_t)(nents_in * (sizeof(struct metal_sg))));\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n    } else {\n        probe_log(\"no memcpy: sg_out == sg_in\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        probe_log(\"entry %d: virt=%p len=%zu\", i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n        if (dir == METAL_DMA_DEV_W) {\n            probe_log(\"entry %d: dir == METAL_DMA_DEV_W -> calling metal_cache_flush(virt=%p, len=%zu)\",\n                      i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        } else {\n            probe_log(\"entry %d: dir != METAL_DMA_DEV_W (dir=%u) -> skip flush\", i, (unsigned)dir);\n        }\n        probe_log(\"entry %d: calling metal_cache_invalidate(virt=%p, len=%zu)\",\n                  i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    probe_log(\"RETURN: %d\", nents_in);\n    return nents_in;\n}\n"
}