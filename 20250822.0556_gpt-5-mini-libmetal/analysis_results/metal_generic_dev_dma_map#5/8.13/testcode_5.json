{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct metal_sg *sg_in' is used only as a source (copied via memcpy) and never modified. According to MISRA C 2023 Rule 8.13, it should be a pointer to a const-qualified type (e.g. 'const struct metal_sg *sg_in'). Therefore the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\tFILE *log = fopen(\"/tmp/logs/53.txt\", \"a\");\n\n\t/* preserve original unused parameters handling */\n\t(void)bus;\n\t(void)device;\n\n\tif (log) {\n\t\tfprintf(log, \"ENTER: metal_generic_dev_dma_map\\n\");\n\t\tfprintf(log, \"  params: bus=%p device=%p dir=%u sg_in=%p nents_in=%d sg_out=%p\\n\",\n\t\t\t(void *)bus, (void *)device, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n\n\t\t/* Report that sg_in is only used as source (read-only) in this function */\n\t\tfprintf(log, \"  note: sg_in is treated as source-only (not modified) in this function\\n\");\n\t}\n\n\tif (sg_out != sg_in) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"  action: sg_out != sg_in -> perform memcpy of %d entries (bytes=%zu)\\n\",\n\t\t\t\t nents_in, (size_t)nents_in * sizeof(struct metal_sg));\n\t\t}\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\t\tif (log) fprintf(log, \"  memcpy completed\\n\");\n\t} else {\n\t\tif (log) fprintf(log, \"  action: sg_out == sg_in -> skip memcpy (in-place)\\n\");\n\t}\n\n\tfor (i = 0; i < nents_in; i++) {\n\t\t/* Log the per-entry state before cache operations */\n\t\tif (log) {\n\t\t\t/* We assume struct metal_sg has members 'virt' and 'len' as used below */\n\t\t\tfprintf(log, \"  entry %d: sg_out[%d].virt=%p sg_out[%d].len=%zu\\n\",\n\t\t\t\ti, i, i, (size_t)sg_out[i].len);\n\t\t}\n\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tif (log) fprintf(log, \"    dir indicates device write -> calling metal_cache_flush(virt=%p, len=%zu)\\n\",\n\t\t\t\t(void *)sg_out[i].virt, (size_t)sg_out[i].len);\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tif (log) fprintf(log, \"    calling metal_cache_invalidate(virt=%p, len=%zu)\\n\",\n\t\t\t(void *)sg_out[i].virt, (size_t)sg_out[i].len);\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"EXIT: metal_generic_dev_dma_map -> return %d\\n\\n\", nents_in);\n\t\tfclose(log);\n\t}\n\n\treturn nents_in;\n}\n"
}