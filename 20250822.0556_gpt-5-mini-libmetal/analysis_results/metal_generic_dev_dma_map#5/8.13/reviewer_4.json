{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_map.\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct metal_device *device' but the function does not modify the object (it only does '(void)device;'). Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible, e.g. 'const struct metal_device *device'. Thus the current declaration violates the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The claim is correct in principle. MISRA C 2023 R8.13 says a pointer should point to a const-qualified type whenever possible. In the posted function the parameter 'struct metal_device *device' is not used (it is cast to void) and the function does not modify the pointed-at object, so it could be declared as 'const struct metal_device *device'. The same observation also applies to 'struct metal_bus *bus' (also unused) and to 'struct metal_sg *sg_in' (sg_in is only read/copied and therefore could be 'const struct metal_sg *').\n\nCaveat: if this function must match an existing non-const API or function-pointer signature (i.e. it overrides or implements an external interface that requires a non-const parameter), then changing the parameter to const would break that contract and the non-const declaration would be justified. Absent such an external constraint, the report is correct and a const qualification should be used."
}