{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_map.\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct metal_sg *sg_in' is used only as a source (copied via memcpy) and never modified. According to MISRA C 2023 Rule 8.13, it should be a pointer to a const-qualified type (e.g. 'const struct metal_sg *sg_in'). Therefore the current declaration violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The parameter sg_in is only read (used as the source for memcpy) and never modified by the function. According to MISRA C:2023 Rule 8.13 a pointer parameter that is not used to modify the pointed-to object should be const-qualified. Making sg_in a const struct metal_sg * is compatible with memcpy (which takes a const void *src) and does not conflict with the existing alias check (sg_out != sg_in). The only reason not to make it const would be an external API/signature compatibility requirement (e.g. this function must match a non-const prototype). Given the code shown, the agent A\u2019s report is correct: this is a violation unless there is an overriding API constraint."
}