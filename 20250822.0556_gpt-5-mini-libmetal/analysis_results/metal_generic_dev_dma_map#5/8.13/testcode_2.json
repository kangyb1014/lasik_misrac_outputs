{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function reads from sg_in (uses memcpy(sg_out, sg_in, ...)) but sg_in is declared as struct metal_sg * (non-const). Since the code only reads from sg_in and does not modify it, sg_in should be declared as const struct metal_sg *sg_in. The missing const qualification on sg_in violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/53.txt */\nstatic void probe_append_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n    if (f == NULL) {\n        return; /* If logging fails, do not change program behavior */\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to log an array of struct metal_sg entries. This only reads fields. */\nstatic void probe_log_sg_array(const char *label, struct metal_sg *sg, int n)\n{\n    int j;\n    probe_append_log(\"%s: array ptr=%p, n=%d\", label, (void *)sg, n);\n    for (j = 0; j < n; j++) {\n        /* Log the virt pointer and len for each entry. Use casts to avoid format issues. */\n        probe_append_log(\"%s[%d]: virt=%p, len=%llu\", label, j,\n                         (void *)sg[j].virt,\n                         (unsigned long long)sg[j].len);\n    }\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                 struct metal_device *device,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Log entry and key parameters to demonstrate the read-only usage of sg_in. */\n    probe_append_log(\"ENTER metal_generic_dev_dma_map: dir=%u, nents_in=%d, sg_in=%p, sg_out=%p\",\n                     (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n\n    if (sg_out != sg_in) {\n        /* Log contents of sg_in before copy to show it is only read. */\n        probe_log_sg_array(\"sg_in_before_copy\", sg_in, nents_in);\n\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n\n        /* Log contents of sg_out after copy to show data was copied from sg_in. */\n        probe_log_sg_array(\"sg_out_after_copy\", sg_out, nents_in);\n\n        probe_append_log(\"memcpy performed: sg_out != sg_in\");\n    } else {\n        probe_append_log(\"no memcpy: sg_out == sg_in\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        probe_append_log(\"loop idx=%d: dir=%u, sg_out[%d].virt=%p, sg_out[%d].len=%llu\",\n                         i, (unsigned)dir, i, (void *)sg_out[i].virt, i,\n                         (unsigned long long)sg_out[i].len);\n\n        if (dir == METAL_DMA_DEV_W) {\n            probe_append_log(\"calling metal_cache_flush for index %d\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n        probe_append_log(\"calling metal_cache_invalidate for index %d\", i);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    probe_append_log(\"EXIT metal_generic_dev_dma_map returning %d\", nents_in);\n\n    return nents_in;\n}\n"
}