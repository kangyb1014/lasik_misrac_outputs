{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)device;' is a no-op expression statement used only to silence an unused-parameter warning. It is executed but has no effect on program behaviour; removing it does not change the function semantics. Therefore it constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/52.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper probe function: append human-readable logs to /tmp/logs/52.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/52.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                 struct metal_device *device,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i;\n    /* Original explicit void cast left in place (the reported dead code) */\n    (void)bus;\n\n    /* Log just before the no-op to show it is executed */\n    probe_log(\"enter metal_generic_dev_dma_map: bus=%p device=%p dir=%u nents_in=%d sg_in=%p sg_out=%p\",\n              (void *)bus, (void *)device, (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n\n    /* The no-op that was reported as dead code \u2014 keep it to preserve original behaviour */\n    (void)device;\n\n    /* Log immediately after executing the no-op to provide evidence it ran */\n    probe_log(\"after no-op (void)device; executed \u2014 device pointer=%p\", (void *)device);\n\n    if (sg_out != sg_in) {\n        probe_log(\"sg_out != sg_in: copying %d entries (bytes=%zu)\", nents_in, (size_t)(nents_in * sizeof(struct metal_sg)));\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n    } else {\n        probe_log(\"sg_out == sg_in: no memcpy performed\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log entry state before cache operations */\n        probe_log(\"entry %d: virt=%p len=%lu\", i, (void *)sg_out[i].virt, (unsigned long)sg_out[i].len);\n\n        if (dir == METAL_DMA_DEV_W) {\n            probe_log(\"entry %d: dir == METAL_DMA_DEV_W -> calling metal_cache_flush(virt=%p, len=%lu)\",\n                      i, (void *)sg_out[i].virt, (unsigned long)sg_out[i].len);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        } else {\n            probe_log(\"entry %d: dir != METAL_DMA_DEV_W -> skip flush\", i);\n        }\n\n        probe_log(\"entry %d: calling metal_cache_invalidate(virt=%p, len=%lu)\",\n                  i, (void *)sg_out[i].virt, (unsigned long)sg_out[i].len);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    probe_log(\"exit metal_generic_dev_dma_map: returning %d\", nents_in);\n    return nents_in;\n}\n"
}