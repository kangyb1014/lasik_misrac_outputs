{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement \u2018\u2018(void)bus;\u2019\u2019 is an executed no-op used to suppress an unused-parameter warning. Its removal does not change program behaviour (only compiler diagnostics), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/52.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/52.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/52.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    /* Log entry and parameter state to provide evidence that (void)bus; and (void)device; are executed no-ops */\n    probe_log(\"ENTER: metal_generic_dev_dma_map: bus=%p device=%p dir=%u sg_in=%p sg_out=%p nents_in=%d\",\n              (void *)bus, (void *)device, (unsigned)dir, (void *)sg_in, (void *)sg_out, nents_in);\n\n    (void)bus;\n    probe_log(\"EXECUTED_NOOP: (void)bus; executed to suppress unused-parameter warning\");\n    (void)device;\n    probe_log(\"EXECUTED_NOOP: (void)device; executed to suppress unused-parameter warning\");\n\n    if (sg_out != sg_in) {\n        probe_log(\"BRANCH: sg_out != sg_in -> memcpy called: dst=%p src=%p bytes=%zu\",\n                  (void *)sg_out, (void *)sg_in, (size_t)(nents_in * (sizeof(struct metal_sg))));\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n        probe_log(\"AFTER memcpy: first_dst_virt=%p first_dst_len=%llu\",\n                  (void *)sg_out[0].virt, (unsigned long long)sg_out[0].len);\n    } else {\n        probe_log(\"BRANCH: sg_out == sg_in -> no memcpy performed\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        probe_log(\"LOOP: i=%d entry_virt=%p entry_len=%llu\", i,\n                  (void *)sg_out[i].virt, (unsigned long long)sg_out[i].len);\n        if (dir == METAL_DMA_DEV_W) {\n            probe_log(\"CONDITION: dir == METAL_DMA_DEV_W -> cache flush for entry %d: virt=%p len=%llu\",\n                      i, (void *)sg_out[i].virt, (unsigned long long)sg_out[i].len);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n            probe_log(\"DONE: metal_cache_flush for entry %d\", i);\n        } else {\n            probe_log(\"CONDITION: dir != METAL_DMA_DEV_W -> skip cache flush for entry %d\", i);\n        }\n        probe_log(\"ACTION: cache invalidate for entry %d: virt=%p len=%llu\",\n                  i, (void *)sg_out[i].virt, (unsigned long long)sg_out[i].len);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n        probe_log(\"DONE: metal_cache_invalidate for entry %d\", i);\n    }\n\n    probe_log(\"RETURN: %d\", nents_in);\n    return nents_in;\n}\n"
}