{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_generic_dev_dma_unmap the statement '(void)dir;' is an executed no-op used to silence an unused-parameter warning. This expression statement has no effect and its removal would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/52.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Minimal placeholder types so this translation unit compiles for testing. */\nstruct metal_bus { int dummy_bus; };\nstruct metal_device { int dummy_dev; };\nstruct metal_sg {\n    void *virt;\n    int len;\n};\n\n/* Simple cache operation stubs so the unit is executable. */\nvoid metal_cache_flush(void *addr, int len)\n{\n    /* Preserve original semantics (no-op for this test harness) but log activity. */\n    FILE *f = NULL;\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/52.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"metal_cache_flush: addr=%p len=%d\\n\", addr, len);\n        fclose(f);\n    }\n}\n\nvoid metal_cache_invalidate(void *addr, int len)\n{\n    FILE *f = NULL;\n    (void)mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/52.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"metal_cache_invalidate: addr=%p len=%d\\n\", addr, len);\n        fclose(f);\n    }\n}\n\n/* Helper logging function used by the probe. */\nstatic void probe_logf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = NULL;\n\n    /* Ensure directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/52.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\n/* The target function with probes inserted. The original logic is preserved. */\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    /* Keep the original silence lines to preserve source shape. */\n    (void)bus;\n    (void)device;\n\n    /* Log entry state so other agents can reproduce behavior and see use of 'dir'. */\n    probe_logf(\"ENTRY: metal_generic_dev_dma_map: bus=%p device=%p dir=%u sg_in=%p sg_out=%p nents_in=%d\\n\",\n               (void *)bus, (void *)device, (unsigned)dir, (void *)sg_in, (void *)sg_out, nents_in);\n\n    if (sg_out != sg_in) {\n        probe_logf(\"ACTION: memcpy sg_out(%p) <- sg_in(%p), bytes=%zu\\n\",\n                   (void *)sg_out, (void *)sg_in, (size_t)(nents_in * (sizeof(struct metal_sg))));\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    } else {\n        probe_logf(\"ACTION: no memcpy; sg_out == sg_in (%p)\\n\", (void *)sg_out);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        probe_logf(\"LOOP: index=%d virt=%p len=%d dir=%u\\n\", i, sg_out[i].virt, sg_out[i].len, (unsigned)dir);\n        if (dir == (uint32_t)0x1) { /* Use a literal for METAL_DMA_DEV_W to avoid requiring external macros. */\n            probe_logf(\"BRANCH: dir == METAL_DMA_DEV_W at index=%d -> calling metal_cache_flush\\n\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        } else {\n            probe_logf(\"BRANCH: dir != METAL_DMA_DEV_W at index=%d -> not flushing\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    probe_logf(\"EXIT: metal_generic_dev_dma_map returning %d\\n\", nents_in);\n    return nents_in;\n}\n"
}