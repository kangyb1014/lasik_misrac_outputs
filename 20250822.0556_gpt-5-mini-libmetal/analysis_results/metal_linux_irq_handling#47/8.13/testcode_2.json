{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes irqs_enabled to metal_bitmap_for_each_set_bit for read-only iteration. If irqs_enabled is declared as a non-const pointer (e.g. unsigned long *irqs_enabled or similar), this violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type when only read. The correct form would be to declare irqs_enabled as a pointer to const (for example const unsigned long *irqs_enabled) or ensure the macro/function prototype accepts a const-qualified pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_handling code.\n",
  "test_code": "static void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\tFILE *logf = NULL;\n\n\t(void)args;\n\n\t/* Entry log */\n\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: %s args=%p\\n\", __func__, args);\n\t\tfclose(logf);\n\t}\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: failed to allocate irq fds mem. pfds=NULL\\n\", __func__);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"%s: allocated pfds=%p size=%zu\\n\", __func__, (void *)pfds, (size_t)(FD_SETSIZE * sizeof(struct pollfd)));\n\t\tfclose(logf);\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\t/* log scheduler attempt */\n\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"%s: sched_setscheduler ret=%d priority=%d\\n\", __func__, ret, param.sched_priority);\n\t\tfclose(logf);\n\t}\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: loop start\\n\", __func__);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: acquired irq_lock\\n\", __func__);\n\t\t\tfclose(logf);\n\t\t}\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"%s: irq_handling_stop set, exiting thread\\n\", __func__);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\n\t\t/* Probe: log pointer to irqs_enabled and bitmap size before iteration */\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: before bitmap iteration irqs_enabled=%p linux_irq_cntr.irq_num=%d starting_j=%d\\n\",\n\t\t\t\t__func__, (void *)irqs_enabled, linux_irq_cntr.irq_num, j);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t  linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\t/* Log each discovered set bit (the fd added) */\n\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"%s: bitmap bit set found i=%d assigned to pfds[%d]\\n\",\n\t\t\t\t\t__func__, i, j);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\n\t\t/* After building pfds, log summary of pfds added */\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: after bitmap iteration total_fds=%d listing fds:\\n\", __func__, j);\n\t\t\tfor (i = 0; i < j; i++) {\n\t\t\t\tfprintf(logf, \"  pfds[%d]: fd=%d events=0x%x\\n\", i, pfds[i].fd, pfds[i].events);\n\t\t\t}\n\t\t\tfclose(logf);\n\t\t}\n\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"%s: poll returned ret=%d j=%d errno=%d\\n\", __func__, ret, j, errno);\n\t\t\tfclose(logf);\n\t\t}\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"%s: notify fd triggered pfds[%d].fd=%d\\n\",\n\t\t\t\t\t\t__func__, i, pfds[i].fd);\n\t\t\t\t\tfclose(logf);\n\t\t\t\t}\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"%s: handling fd=%d dev=%p before handle\\n\", __func__, fd, (void *)dev);\n\t\t\t\t\tfclose(logf);\n\t\t\t\t}\n\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\n\t\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"%s: handled fd=%d irq_handled=%d dev=%p\\n\",\n\t\t\t\t\t\t__func__, fd, irq_handled, (void *)dev);\n\t\t\t\t\tfclose(logf);\n\t\t\t\t}\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\t\t\t\tif (logf) {\n\t\t\t\t\tfprintf(logf, \"%s: unexpected revents pfds[%d].fd=%d revents=0x%x\\n\",\n\t\t\t\t\t\t__func__, i, pfds[i].fd, pfds[i].revents);\n\t\t\t\t\tfclose(logf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\tlogf = fopen(\"/tmp/logs/473.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"%s: thread exiting free(pfds) done\\n\", __func__);\n\t\tfclose(logf);\n\t}\n\treturn NULL;\n}\n"
}