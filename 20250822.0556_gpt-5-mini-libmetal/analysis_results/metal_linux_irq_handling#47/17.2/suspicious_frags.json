{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "metal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t      linux_irq_cntr.irq_num) {",
    "if (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\tdev->bus, dev, fd);",
    "metal_log(METAL_LOG_ERROR,\n\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);",
    "metal_log(METAL_LOG_ERROR,\n\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t  __func__, pfds[i].fd);",
    "ret = poll(pfds, j, -1);",
    "metal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t  __func__, strerror(errno));",
    "param.sched_priority = sched_get_priority_max(SCHED_FIFO);",
    "if (metal_irq_handle(&irqs[fd], fd)\n\t\t\t    == METAL_IRQ_HANDLED)",
    "pfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));",
    "ret = sched_setscheduler(0, SCHED_FIFO, &param);",
    "free(pfds);",
    "if (read(pfds[i].fd,\n\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)",
    "memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));",
    "metal_mutex_acquire(&irq_lock);",
    "metal_log(METAL_LOG_WARNING,\n\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t  strerror(ret));",
    "metal_mutex_release(&irq_lock);",
    "dev = irqs_devs[fd];"
  ],
  "explanation": "I have listed every site in this function that invokes another function or macro which could possibly lead to an indirect call back to metal_linux_irq_handling. These include explicit function calls, system/library calls, device callback invocations, and the bitmap iteration macro (which may expand to code that calls functions). Other fragments in the function that I did NOT list are plain language constructs and data operations (for example: variable declarations, assignments that do not call functions, loop/if control structures, direct struct field accesses, constant expressions, and the poll/fd array element assignments). Those non-call expressions cannot themselves produce a call chain that would lead to recursive invocation of this function, so they do not need investigation for Rule 17.2. If any of the listed call sites (especially metal_irq_handle, dev->bus->ops.dev_irq_ack, or the bitmap macro) are implemented elsewhere such that they call back into this thread function, those implementations should be inspected for indirect recursion."
}