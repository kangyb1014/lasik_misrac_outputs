{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro definition uses compiler-specific extensions: the GCC statement-expression construct '({ ... })' and the GNU token-pasting trick '##__VA_ARGS__' to allow an optional comma for empty variadic arguments. Both are documented GCC extensions (non\u2011standard C) so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_handling code that contains useful probe functions that print useful logs to a file \"/tmp/logs/470.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_handling as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_handling:\n```c\nstatic void *metal_linux_irq_handling(void *args)\n{\n\tstruct sched_param param;\n\tuint64_t val;\n\tint ret;\n\tint i, j, pfds_total;\n\tstruct pollfd *pfds;\n\n\t(void)args;\n\n\tpfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n\tif (!pfds) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n\t\treturn NULL;\n\t}\n\n\tparam.sched_priority = sched_get_priority_max(SCHED_FIFO);\n\t/* Ignore the set scheduler error */\n\tret = sched_setscheduler(0, SCHED_FIFO, &param);\n\tif (ret) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n\t\t\t  strerror(ret));\n\t}\n\n\twhile (1) {\n\t\tmetal_mutex_acquire(&irq_lock);\n\t\tif (irq_handling_stop) {\n\t\t\t/* Killing this IRQ handling thread */\n\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Get the fdset */\n\t\tmemset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n\t\tpfds[0].fd = irq_notify_fd;\n\t\tpfds[0].events = POLLIN;\n\t\tj = 1;\n\t\tmetal_bitmap_for_each_set_bit(irqs_enabled, i,\n\t\t\t\t\t      linux_irq_cntr.irq_num) {\n\t\t\tpfds[j].fd = i;\n\t\t\tpfds[j].events = POLLIN;\n\t\t\tj++;\n\t\t}\n\t\tmetal_mutex_release(&irq_lock);\n\t\t/* Wait for interrupt */\n\t\tret = poll(pfds, j, -1);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n\t\t\t\t  __func__, strerror(errno));\n\t\t\tbreak;\n\t\t}\n\t\t/* Waken up from interrupt */\n\t\tpfds_total = j;\n\t\tfor (i = 0; i < pfds_total; i++) {\n\t\t\tif ((pfds[i].fd == irq_notify_fd) &&\n\t\t\t    (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\t/* IRQ registration change notification */\n\t\t\t\tif (read(pfds[i].fd,\n\t\t\t\t\t (void *)&val, sizeof(uint64_t)) < 0)\n\t\t\t\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t\t\t\t  \"%s, read irq fd %d failed\\n\",\n\t\t\t\t\t\t  __func__, pfds[i].fd);\n\t\t\t} else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n\t\t\t\tstruct metal_device *dev = NULL;\n\t\t\t\tint irq_handled = 0;\n\t\t\t\tint fd;\n\n\t\t\t\tfd = pfds[i].fd;\n\t\t\t\tdev = irqs_devs[fd];\n\t\t\t\tmetal_mutex_acquire(&irq_lock);\n\t\t\t\tif (metal_irq_handle(&irqs[fd], fd)\n\t\t\t\t    == METAL_IRQ_HANDLED)\n\t\t\t\t\tirq_handled = 1;\n\t\t\t\tif (irq_handled) {\n\t\t\t\t\tif (dev && dev->bus->ops.dev_irq_ack)\n\t\t\t\t\t\tdev->bus->ops.dev_irq_ack(\n\t\t\t\t\t\t\tdev->bus, dev, fd);\n\t\t\t\t}\n\t\t\t\tmetal_mutex_release(&irq_lock);\n\t\t\t} else if (pfds[i].revents) {\n\t\t\t\tmetal_log(METAL_LOG_DEBUG,\n\t\t\t\t\t  \"%s: poll unexpected. fd %d: %d\\n\",\n\t\t\t\t\t  __func__,\n\t\t\t\t\t  pfds[i].fd, pfds[i].revents);\n\t\t\t}\n\t\t}\n\t}\n\tfree(pfds);\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_handling code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <poll.h>\n#include <sched.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/470.txt.\n * Does not change program logic; side-effect is writing to a file.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/470.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm)) {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n            fprintf(f, \"[%s] \", timebuf);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified irq handling thread with probes. Preserves original logic. */\nstatic void *metal_linux_irq_handling(void *args)\n{\n    struct sched_param param;\n    uint64_t val;\n    int ret;\n    int i, j, pfds_total;\n    struct pollfd *pfds;\n\n    (void)args;\n\n    probe_log(\"Entered metal_linux_irq_handling\");\n\n    pfds = (struct pollfd *)malloc(FD_SETSIZE * sizeof(struct pollfd));\n    if (!pfds) {\n        probe_log(\"malloc failed for pfds (FD_SETSIZE=%d)\", FD_SETSIZE);\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to allocate irq fds mem.\\n\", __func__);\n        return NULL;\n    }\n    probe_log(\"Allocated pfds at %p\", (void *)pfds);\n\n    param.sched_priority = sched_get_priority_max(SCHED_FIFO);\n    /* Ignore the set scheduler error */\n    ret = sched_setscheduler(0, SCHED_FIFO, &param);\n    if (ret) {\n        probe_log(\"sched_setscheduler returned %d: %s\", ret, strerror(ret));\n        metal_log(METAL_LOG_WARNING,\n                  \"%s: Failed to set scheduler: %s.\\n\", __func__,\n                  strerror(ret));\n    } else {\n        probe_log(\"sched_setscheduler succeeded; priority=%d\", param.sched_priority);\n    }\n\n    while (1) {\n        probe_log(\"Loop top: acquiring irq_lock\");\n        metal_mutex_acquire(&irq_lock);\n        probe_log(\"Acquired irq_lock\");\n        if (irq_handling_stop) {\n            probe_log(\"irq_handling_stop is set; preparing to exit thread\");\n            /* Killing this IRQ handling thread */\n            metal_mutex_release(&irq_lock);\n            probe_log(\"Released irq_lock and breaking loop\");\n            break;\n        }\n\n        /* Get the fdset */\n        memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd));\n        pfds[0].fd = irq_notify_fd;\n        pfds[0].events = POLLIN;\n        j = 1;\n        probe_log(\"Building pfds: start with irq_notify_fd=%d\", irq_notify_fd);\n        metal_bitmap_for_each_set_bit(irqs_enabled, i,\n                                      linux_irq_cntr.irq_num) {\n            pfds[j].fd = i;\n            pfds[j].events = POLLIN;\n            probe_log(\"Added pfds[%d] fd=%d events=0x%x\", j, i, pfds[j].events);\n            j++;\n        }\n        probe_log(\"Finished building pfds; total fds=%d\", j);\n        metal_mutex_release(&irq_lock);\n        probe_log(\"Released irq_lock before poll\");\n\n        /* Wait for interrupt */\n        ret = poll(pfds, j, -1);\n        probe_log(\"poll returned %d (errno=%d:%s)\", ret, errno, strerror(errno));\n        if (ret < 0) {\n            metal_log(METAL_LOG_ERROR, \"%s: poll() failed: %s.\\n\",\n                      __func__, strerror(errno));\n            break;\n        }\n        /* Waken up from interrupt */\n        pfds_total = j;\n        for (i = 0; i < pfds_total; i++) {\n            probe_log(\"Inspecting pfds[%d]: fd=%d events=0x%x revents=0x%x\",\n                      i, pfds[i].fd, pfds[i].events, pfds[i].revents);\n            if ((pfds[i].fd == irq_notify_fd) &&\n                (pfds[i].revents & (POLLIN | POLLRDNORM))) {\n                /* IRQ registration change notification */\n                probe_log(\"irq_notify_fd signaled on fd=%d\", pfds[i].fd);\n                if (read(pfds[i].fd,\n                         (void *)&val, sizeof(uint64_t)) < 0) {\n                    probe_log(\"read from irq_notify_fd %d failed (errno=%d:%s)\",\n                              pfds[i].fd, errno, strerror(errno));\n                    metal_log(METAL_LOG_ERROR,\n                              \"%s, read irq fd %d failed\\n\",\n                              __func__, pfds[i].fd);\n                } else {\n                    probe_log(\"read value from irq_notify_fd %d: 0x%llx\",\n                              pfds[i].fd, (unsigned long long)val);\n                }\n            } else if ((pfds[i].revents & (POLLIN | POLLRDNORM))) {\n                struct metal_device *dev = NULL;\n                int irq_handled = 0;\n                int fd;\n\n                fd = pfds[i].fd;\n                dev = irqs_devs[fd];\n                probe_log(\"Handling IRQ fd=%d dev=%p\", fd, (void *)dev);\n                metal_mutex_acquire(&irq_lock);\n                probe_log(\"Acquired irq_lock for fd=%d\", fd);\n                int handle_res = metal_irq_handle(&irqs[fd], fd);\n                probe_log(\"metal_irq_handle(&irqs[%d], %d) returned %d\", fd, fd, handle_res);\n                if (handle_res == METAL_IRQ_HANDLED)\n                    irq_handled = 1;\n                if (irq_handled) {\n                    probe_log(\"IRQ handled for fd=%d; irq_handled=%d\", fd, irq_handled);\n                    if (dev && dev->bus->ops.dev_irq_ack) {\n                        probe_log(\"Calling dev_irq_ack for dev=%p bus=%p fd=%d (ack func=%p)\",\n                                  (void *)dev, (void *)dev->bus, fd,\n                                  (void *)dev->bus->ops.dev_irq_ack);\n                        dev->bus->ops.dev_irq_ack(dev->bus, dev, fd);\n                        probe_log(\"Returned from dev_irq_ack for fd=%d\", fd);\n                    } else {\n                        probe_log(\"No dev_irq_ack to call for fd=%d (dev=%p)\", fd, (void *)dev);\n                    }\n                } else {\n                    probe_log(\"IRQ not handled for fd=%d (irq_handled=%d)\", fd, irq_handled);\n                }\n                metal_mutex_release(&irq_lock);\n                probe_log(\"Released irq_lock after handling fd=%d\", fd);\n            } else if (pfds[i].revents) {\n                probe_log(\"Unexpected poll revents on fd %d: 0x%x\", pfds[i].fd, pfds[i].revents);\n                metal_log(METAL_LOG_DEBUG,\n                          \"%s: poll unexpected. fd %d: %d\\n\",\n                          __func__,\n                          pfds[i].fd, pfds[i].revents);\n            }\n        }\n    }\n    probe_log(\"Exiting irq handling thread; freeing pfds %p\", (void *)pfds);\n    free(pfds);\n    probe_log(\"Freed pfds and returning NULL\");\n    return NULL;\n}\n"
}