{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The function stores a non-const pointer to a metal_bus into the out-parameter typed as struct metal_bus **. Rule 8.13 expects pointers to point to a const-qualified type when possible. The function does not modify the returned bus, so the out-parameter should be const-qualified (for example: int metal_bus_find(const char *name, const struct metal_bus **result) and use const struct metal_bus *bus), otherwise the assignment \"*result = bus;\" permits callers to obtain a non-const pointer and modify the object, violating the recommendation to use const where possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "int metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\tFILE *log = fopen(\"/tmp/logs/23.txt\", \"a\");\n\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_bus_find: name=\\\"%s\\\", result=%p\\n\", name ? name : \"(null)\", (void *)result);\n\t\tfflush(log);\n\t}\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (log) {\n\t\t\tfprintf(log, \"ITER node=%p, bus=%p, bus->name=\\\"%s\\\"\\n\",\n\t\t\t\t(void *)node, (void *)bus, (bus && bus->name) ? bus->name : \"(null)\");\n\t\t\tfflush(log);\n\t\t}\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"MATCH found: assigning *result = %p (bus name=\\\"%s\\\")\\n\", (void *)bus, bus->name ? bus->name : \"(null)\");\n\t\t\t\tfflush(log);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"EXIT metal_bus_find: not found, returning -ENOENT\\n\");\n\t\tfflush(log);\n\t\tfclose(log);\n\t}\n\treturn -ENOENT;\n}\n"
}