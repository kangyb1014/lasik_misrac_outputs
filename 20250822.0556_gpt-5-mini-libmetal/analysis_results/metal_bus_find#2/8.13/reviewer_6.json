{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe iterator variable 'node' is declared as 'struct metal_list *node;' even though the function only reads the list elements and does not modify them. According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type when possible (e.g. 'const struct metal_list *node;'). Declaring it non-const loses const-protection and allows accidental modification. (If the metal_container_of macro or other APIs prevent using a const-qualified pointer, those APIs should be updated to preserve const-correctness or an explicit, justified cast used.)\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_bus_find: name='platform', result=(nil)\nEXIT metal_bus_find: returning -ENOENT (-2)\nENTER metal_bus_find: name='pci', result=(nil)\nITER 1: node=0x7f61e8b55be8\nITER 1: bus=0x7f61e8b55ba0\nITER 1: bus->name=platform\nITER 1: no match (bus->name='platform', target='pci')\nEXIT metal_bus_find: returning -ENOENT (-2)\nENTER metal_bus_find: name='platform', result=0x7fffb24186e8\nITER 1: node=0x7f61e8b55be8\nITER 1: bus=0x7f61e8b55ba0\nITER 1: bus->name=platform\nITER 1: match found (bus=0x7f61e8b55ba0, name='platform'), assigning to result=0x7fffb24186e8\nEXIT metal_bus_find: returning 0 (found)\nENTER metal_bus_find: name='pci', result=0x7fffb24186e8\nITER 1: node=0x7f61e8b56e50\nITER 1: bus=0x7f61e8b56e08\nITER 1: bus->name=pci\nITER 1: match found (bus=0x7f61e8b56e08, name='pci'), assigning to result=0x7fffb24186e8\nEXIT metal_bus_find: returning 0 (found)\nENTER metal_bus_find: name='platform', result=(nil)\nEXIT metal_bus_find: returning -ENOENT (-2)\nENTER metal_bus_find: name='pci', result=(nil)\nITER 1: node=0x5630ca4232a8\nITER 1: bus=0x5630ca423260\nITER 1: bus->name=platform\nITER 1: no match (bus->name='platform', target='pci')\nEXIT metal_bus_find: returning -ENOENT (-2)\nENTER metal_bus_find: name='platform', result=0x7ffcfcb8d338\nITER 1: node=0x5630ca4232a8\nITER 1: bus=0x5630ca423260\nITER 1: bus->name=platform\nITER 1: match found (bus=0x5630ca423260, name='platform'), assigning to result=0x7ffcfcb8d338\nEXIT metal_bus_find: returning 0 (found)\nENTER metal_bus_find: name='pci', result=0x7ffcfcb8d338\nITER 1: node=0x5630ca424510\nITER 1: bus=0x5630ca4244c8\nITER 1: bus->name=pci\nITER 1: match found (bus=0x5630ca4244c8, name='pci'), assigning to result=0x7ffcfcb8d338\nEXIT metal_bus_find: returning 0 (found)\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. The iterator variable cannot be unambiguously made const in the current API/implementation without wider changes. Although node is only read, it is passed to metal_container_of to obtain a struct metal_bus * that is later returned via the non-const output parameter (result). The common container_of/list macros in this style do not preserve const qualification, and making node a const struct metal_list * would either (a) force container_of to produce a const struct metal_bus * (incompatible with the existing non-const result parameter), or (b) require casting away const (introducing another problem). In short, the pointer cannot safely be made const without changing the container_of/list APIs or the function signature, so flagging this as a MISRA 8.13 violation here is not justified. If the project were to make the list/container macros and APIs const-correct (so that const struct metal_list * yields const struct metal_bus *), then declaring node const would be appropriate."
}