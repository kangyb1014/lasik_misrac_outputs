{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator variable 'node' is declared as 'struct metal_list *node;' even though the function only reads the list elements and does not modify them. According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type when possible (e.g. 'const struct metal_list *node;'). Declaring it non-const loses const-protection and allows accidental modification. (If the metal_container_of macro or other APIs prevent using a const-qualified pointer, those APIs should be updated to preserve const-correctness or an explicit, justified cast used.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Probe logging helper: append messages to /tmp/logs/23.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging can't open the file, there's nothing we can do without\n         * changing program behavior, so just return. Keep original logic.\n         */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node; /* Intentionally non-const to reproduce the reported scenario */\n    struct metal_bus *bus;\n    unsigned int iter = 0U;\n\n    probe_log(\"ENTER metal_bus_find: name='%s', result=%p\", name, (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        ++iter;\n        probe_log(\"ITER %u: node=%p\", iter, (void *)node);\n\n        bus = metal_container_of(node, struct metal_bus, node);\n        probe_log(\"ITER %u: bus=%p\", iter, (void *)bus);\n\n        if (bus != NULL) {\n            probe_log(\"ITER %u: bus->name=%s\", iter, bus->name ? bus->name : \"(null)\");\n        } else {\n            probe_log(\"ITER %u: bus is NULL\", iter);\n        }\n\n        /* Preserve original logic exactly: strcmp is used for comparison */\n        if (strcmp(bus->name, name) == 0 && result) {\n            probe_log(\"ITER %u: match found (bus=%p, name='%s'), assigning to result=%p\", iter, (void *)bus, bus->name, (void *)result);\n            *result = bus;\n            probe_log(\"EXIT metal_bus_find: returning 0 (found)\");\n            return 0;\n        } else {\n            probe_log(\"ITER %u: no match (bus->name='%s', target='%s')\", iter, bus->name ? bus->name : \"(null)\", name ? name : \"(null)\");\n        }\n    }\n\n    probe_log(\"EXIT metal_bus_find: returning -ENOENT (%d)\", -ENOENT);\n    return -ENOENT;\n}\n"
}