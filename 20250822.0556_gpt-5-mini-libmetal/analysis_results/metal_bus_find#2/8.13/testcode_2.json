{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'bus' is assigned from metal_container_of(node, struct metal_bus, node) to a non-const type (struct metal_bus *). In this function 'bus' is only read (used in strcmp to read bus->name) and is not modified, so it could (and per MISRA 8.13 should) be declared as 'const struct metal_bus *bus'. Additionally the out-parameter is 'struct metal_bus **result', which permits returning a non-const pointer; to fully comply the API should return a pointer-to-const (e.g. 'const struct metal_bus **result') or otherwise justify the removal of const. As written, the assignment to a non-const pointer violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    probe_log(\"enter: metal_bus_find name=%s result=%p\", name ? name : \"(null)\", (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        probe_log(\"iter node=%p\", (void *)node);\n        bus = metal_container_of(node, struct metal_bus, node);\n        probe_log(\"cast bus=%p bus->name=%s\", (void *)bus, (bus && bus->name) ? bus->name : \"(null)\");\n\n        /* perform comparison once and reuse result to avoid double strcmp */\n        int cmp = strcmp(bus->name, name);\n        if (cmp == 0 && result) {\n            probe_log(\"match found: assigning *result=%p (bus name=%s)\", (void *)bus, bus->name ? bus->name : \"(null)\");\n            *result = bus;\n            probe_log(\"returning 0\");\n            return 0;\n        } else {\n            if (cmp == 0) {\n                probe_log(\"name matches but result is NULL; skipping assignment (bus=%p name=%s)\", (void *)bus, bus->name ? bus->name : \"(null)\");\n            } else {\n                probe_log(\"no match: bus->name=%s vs name=%s\", bus->name ? bus->name : \"(null)\", name ? name : \"(null)\");\n            }\n        }\n    }\n\n    probe_log(\"not found, returning -ENOENT\");\n    return -ENOENT;\n}\n"
}