{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in this code as written: the function returns (via the output parameter) a pointer to a mutable struct metal_bus so the pointer type struct metal_bus ** is appropriate. The input name parameter is already const-qualified. Specific violation scenario: if metal_bus objects are intended to be immutable (callers must not modify them), then the API should use a pointer to const (for example const struct metal_bus **result or const struct metal_bus * *result depending on intended constness), and the current signature (struct metal_bus **) would violate MISRA C 2023 Rule 8.13 because it fails to qualify the pointed-to type as const when possible."
}