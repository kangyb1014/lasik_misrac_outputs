{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The function stores a non-const pointer to a metal_bus into the out-parameter typed as struct metal_bus **. Rule 8.13 expects pointers to point to a const-qualified type when possible. The function does not modify the returned bus, so the out-parameter should be const-qualified (for example: int metal_bus_find(const char *name, const struct metal_bus **result) and use const struct metal_bus *bus), otherwise the assignment \"*result = bus;\" permits callers to obtain a non-const pointer and modify the object, violating the recommendation to use const where possible.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nENTER metal_bus_find: name=\"platform\", result=(nil)\nEXIT metal_bus_find: not found, returning -ENOENT\nENTER metal_bus_find: name=\"pci\", result=(nil)\nITER node=0x7f8ada804ba8, bus=0x7f8ada804b60, bus->name=\"platform\"\nEXIT metal_bus_find: not found, returning -ENOENT\nENTER metal_bus_find: name=\"platform\", result=0x7ffd22741028\nITER node=0x7f8ada804ba8, bus=0x7f8ada804b60, bus->name=\"platform\"\nMATCH found: assigning *result = 0x7f8ada804b60 (bus name=\"platform\")\nENTER metal_bus_find: name=\"pci\", result=0x7ffd22741028\nITER node=0x7f8ada805e10, bus=0x7f8ada805dc8, bus->name=\"pci\"\nMATCH found: assigning *result = 0x7f8ada805dc8 (bus name=\"pci\")\nENTER metal_bus_find: name=\"platform\", result=(nil)\nEXIT metal_bus_find: not found, returning -ENOENT\nENTER metal_bus_find: name=\"pci\", result=(nil)\nITER node=0x55ec39d742a8, bus=0x55ec39d74260, bus->name=\"platform\"\nEXIT metal_bus_find: not found, returning -ENOENT\nENTER metal_bus_find: name=\"platform\", result=0x7ffdcf5c1888\nITER node=0x55ec39d742a8, bus=0x55ec39d74260, bus->name=\"platform\"\nMATCH found: assigning *result = 0x55ec39d74260 (bus name=\"platform\")\nENTER metal_bus_find: name=\"pci\", result=0x7ffdcf5c1888\nITER node=0x55ec39d75510, bus=0x55ec39d754c8, bus->name=\"pci\"\nMATCH found: assigning *result = 0x55ec39d754c8 (bus name=\"pci\")\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 R8.13 recommends using pointers to const where it is safe and reasonable to do so, but you cannot conclude from the snippet alone that a const-qualified pointee is possible. The function returns a pointer into internal data structures; if the public API is supposed to give callers a mutable struct metal_bus * (so they can call non-const operations or modify fields), then the current signature is appropriate. Converting the out-parameter to const struct metal_bus ** (and the local bus to const struct metal_bus *) would only be correct if callers must not modify the bus; that is a design decision and not something the rule can force without knowledge of callers and API intent. Also note that making the local bus variable const would conflict with the current non-const out-parameter (assigning const T* to T* is not allowed), so you cannot unilaterally change the local declaration without changing the API. If the API should prevent modification, then the change A suggests would be appropriate \u2014 otherwise the report is not a definite MISRA violation. Therefore the reported violation is not proven here."
}