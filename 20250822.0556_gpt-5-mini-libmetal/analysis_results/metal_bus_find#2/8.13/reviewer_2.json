{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'bus' is assigned from metal_container_of(node, struct metal_bus, node) to a non-const type (struct metal_bus *). In this function 'bus' is only read (used in strcmp to read bus->name) and is not modified, so it could (and per MISRA 8.13 should) be declared as 'const struct metal_bus *bus'. Additionally the out-parameter is 'struct metal_bus **result', which permits returning a non-const pointer; to fully comply the API should return a pointer-to-const (e.g. 'const struct metal_bus **result') or otherwise justify the removal of const. As written, the assignment to a non-const pointer violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter: metal_bus_find name=platform result=(nil)\nnot found, returning -ENOENT\nenter: metal_bus_find name=pci result=(nil)\niter node=0x7ff0653d6be8\ncast bus=0x7ff0653d6ba0 bus->name=platform\nno match: bus->name=platform vs name=pci\nnot found, returning -ENOENT\nenter: metal_bus_find name=platform result=0x7ffe798f8c98\niter node=0x7ff0653d6be8\ncast bus=0x7ff0653d6ba0 bus->name=platform\nmatch found: assigning *result=0x7ff0653d6ba0 (bus name=platform)\nreturning 0\nenter: metal_bus_find name=pci result=0x7ffe798f8c98\niter node=0x7ff0653d7e50\ncast bus=0x7ff0653d7e08 bus->name=pci\nmatch found: assigning *result=0x7ff0653d7e08 (bus name=pci)\nreturning 0\nenter: metal_bus_find name=platform result=(nil)\nnot found, returning -ENOENT\nenter: metal_bus_find name=pci result=(nil)\niter node=0x555728d862a8\ncast bus=0x555728d86260 bus->name=platform\nno match: bus->name=platform vs name=pci\nnot found, returning -ENOENT\nenter: metal_bus_find name=platform result=0x7fff0d40f878\niter node=0x555728d862a8\ncast bus=0x555728d86260 bus->name=platform\nmatch found: assigning *result=0x555728d86260 (bus name=platform)\nreturning 0\nenter: metal_bus_find name=pci result=0x7fff0d40f878\niter node=0x555728d87510\ncast bus=0x555728d874c8 bus->name=pci\nmatch found: assigning *result=0x555728d874c8 (bus name=pci)\nreturning 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nstruct metal_bus {\n\tconst char\t\t*name;\n\tstruct metal_bus_ops\tops;\n\tstruct metal_list\tdevices;\n\tstruct metal_list\tnode;\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 8.13 recommends making pointers point to const-qualified types WHENEVER POSSIBLE, but it does not mandate adding const where doing so would be incompatible with the code\u2019s required behavior or API. In metal_bus_find the local variable bus is assigned into the out-parameter *result (type struct metal_bus **). Declaring bus as const struct metal_bus * would create a const-qualification mismatch when assigning to *result (attempting to store a const struct metal_bus * into a struct metal_bus *), so making bus const is not possible without changing the API (or using a cast to remove const). Thus the current declaration is reasonable and not a violation of 8.13. If the API were intended to return read-only pointers, the correct change would be to change the function signature to return const struct metal_bus * (or const struct metal_bus ** for the out-parameter) and then make bus const; otherwise the current form is acceptable."
}