{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: metal_bus_unregister calls bus->ops.bus_close(bus). If a bus_close implementation (for example a platform-specific bus_close in metal_linux_bus_ops) calls metal_bus_unregister (directly) or calls a function that leads to metal_bus_unregister (e.g. via metal_bus_find then unregister), this yields the call chain metal_bus_unregister -> bus_close -> metal_bus_unregister and thus an indirect recursive call violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/26.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    probe_log(\"ENTER metal_bus_find: name=%s, result=%p\", name ? name : \"(null)\", (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n        probe_log(\"ITER: node=%p, bus=%p, bus->name=%s\", (void *)node, (void *)bus,\n                  (bus && bus->name) ? bus->name : \"(null)\");\n\n        /* preserve original comparison semantics */\n        int cmp = strcmp(bus->name, name);\n        probe_log(\"COMPARE: strcmp(bus->name, name) = %d\", cmp);\n\n        if (cmp == 0 && result) {\n            *result = bus;\n            probe_log(\"MATCH: setting *result=%p and returning 0\", (void *)bus);\n            return 0;\n        }\n    }\n\n    probe_log(\"EXIT metal_bus_find: not found, returning -ENOENT\");\n    return -ENOENT;\n}\n"
}