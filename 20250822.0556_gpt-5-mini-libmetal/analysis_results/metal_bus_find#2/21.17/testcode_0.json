{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(bus_name) and strlen(dev_name) after only checking for NULL. Short\u2011circuit evaluation prevents a NULL dereference, but it does not ensure the pointers reference NUL\u2011terminated character arrays. If a caller supplies a non\u2011terminated buffer (e.g. char b[3] = {'a','b','c'} without '\\0'), strlen will read past the object's bounds searching for a terminator, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/29.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helper: append a log line to /tmp/logs/29.txt. */\nstatic void metal_bus_find_log_probe(unsigned int iter,\n                                    struct metal_list *node,\n                                    struct metal_bus *bus,\n                                    const char *name,\n                                    const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/29.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log iteration, node pointer, bus pointer, bus->name pointer, name pointer and stage. */\n    fprintf(f, \"stage=%s iter=%u node=%p bus=%p bus_name_ptr=%p name_ptr=%p\\n\",\n            stage, iter, (void *)node, (void *)bus,\n            (void *)(bus ? (void *)bus->name : NULL), (void *)name);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n    unsigned int iter = 0;\n\n    /* Iterate the bus list, logging state before the strcmp that may read beyond bounds\n     * if either string is not NUL-terminated. We deliberately do not attempt to read\n     * the pointed-to strings here to avoid introducing additional out-of-bounds reads; \n     * instead we log the pointer values so that an external observer can correlate a\n     * subsequent crash (e.g. inside strcmp) with the logged inputs. */\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log before the comparison. */\n        metal_bus_find_log_probe(iter, node, bus, name, \"before_strcmp\");\n\n        if (strcmp(bus->name, name) == 0 && result) {\n            /* Log the match and the fact that we will populate result. */\n            metal_bus_find_log_probe(iter, node, bus, name, \"match_found\");\n            *result = bus;\n            return 0;\n        }\n\n        /* Log after the comparison for each iteration. */\n        metal_bus_find_log_probe(iter, node, bus, name, \"after_strcmp\");\n        iter++;\n    }\n\n    /* Log that no match was found. */\n    metal_bus_find_log_probe(iter, NULL, NULL, name, \"not_found\");\n    return -ENOENT;\n}\n"
}