{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strcmp(bus->name, name) can read beyond object bounds if either pointer is invalid or not NUL-terminated. In particular, metal_bus_find does not check name for NULL or ensure both strings are NUL-terminated before calling strcmp. If metal_bus_find is ever called with name == NULL (or with a non-NUL-terminated name or bus->name), strcmp will dereference an invalid pointer or scan out-of-bounds, violating Rule 21.17. For example, a caller that mistakenly passes NULL for name will cause strcmp to access beyond the bounds of the object referenced by its second parameter.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n[before_strcmp] iter=0 node=0x7f1fbc2afbe8 bus=0x7f1fbc2afba0 bus->name=0x7f1fbc2a97d0 name=0x7f1fbc2a97fd name_is_null=0 bus_name_is_null=0\n[after_strcmp_no_match] iter=1 node=0x7f1fbc2afbe8 bus=0x7f1fbc2afba0 bus->name=0x7f1fbc2a97d0 name=0x7f1fbc2a97fd name_is_null=0 bus_name_is_null=0\n[before_strcmp] iter=0 node=0x7f1fbc2afbe8 bus=0x7f1fbc2afba0 bus->name=0x7f1fbc2a97d0 name=0x7f1fbc2a97d0 name_is_null=0 bus_name_is_null=0\n[match_found] iter=1 node=0x7f1fbc2afbe8 bus=0x7f1fbc2afba0 bus->name=0x7f1fbc2a97d0 name=0x7f1fbc2a97d0 name_is_null=0 bus_name_is_null=0\n[before_strcmp] iter=0 node=0x7f1fbc2b0e50 bus=0x7f1fbc2b0e08 bus->name=0x7f1fbc2a97fd name=0x7f1fbc2a97fd name_is_null=0 bus_name_is_null=0\n[match_found] iter=1 node=0x7f1fbc2b0e50 bus=0x7f1fbc2b0e08 bus->name=0x7f1fbc2a97fd name=0x7f1fbc2a97fd name_is_null=0 bus_name_is_null=0\n[before_strcmp] iter=0 node=0x563e8937e2a8 bus=0x563e8937e260 bus->name=0x563e89376220 name=0x563e8937624d name_is_null=0 bus_name_is_null=0\n[after_strcmp_no_match] iter=1 node=0x563e8937e2a8 bus=0x563e8937e260 bus->name=0x563e89376220 name=0x563e8937624d name_is_null=0 bus_name_is_null=0\n[before_strcmp] iter=0 node=0x563e8937e2a8 bus=0x563e8937e260 bus->name=0x563e89376220 name=0x563e89376220 name_is_null=0 bus_name_is_null=0\n[match_found] iter=1 node=0x563e8937e2a8 bus=0x563e8937e260 bus->name=0x563e89376220 name=0x563e89376220 name_is_null=0 bus_name_is_null=0\n[before_strcmp] iter=0 node=0x563e8937f510 bus=0x563e8937f4c8 bus->name=0x563e8937624d name=0x563e8937624d name_is_null=0 bus_name_is_null=0\n[match_found] iter=1 node=0x563e8937f510 bus=0x563e8937f4c8 bus->name=0x563e8937624d name=0x563e8937624d name_is_null=0 bus_name_is_null=0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n...\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n...\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 21.17 requires that calls to string.h functions must not result in accesses beyond the bounds of the objects referenced by their pointer parameters. metal_bus_find calls strcmp(bus->name, name) without checking the incoming parameter name for NULL (or otherwise demonstrating that it is a valid NUL-terminated string). If metal_bus_find were ever called with name == NULL (or with a non NUL-terminated object), strcmp would dereference/scan out of bounds and thus violate 21.17. Although the additional code shows common callers validate their inputs before calling metal_bus_find, the function itself does not encode that precondition or perform a check; absent a formally documented and enforced non-NULL/NUL-terminated precondition for name, the use of strcmp here is a potential MISRA 21.17 violation. To fix: either validate name (and optionally bus->name) before calling strcmp, or document/enforce the non-NULL NUL-terminated precondition and ensure static analysis can prove it for all call sites."
}