{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strlen(bus->name) is only guarded by a NULL check on bus and bus->name; that does not guarantee that bus->name points to a valid, NUL-terminated character array. If bus->name is non-NULL but not NUL-terminated (e.g. an uninitialized/truncated buffer, a pointer into the middle of an object, or a dangling pointer), strlen may read beyond the bounds of the referenced object. Example: char name[2] = {'A','B'}; bus->name = name; /* no NUL terminator */ metal_bus_register(&bus) calls strlen(bus->name) which can read past name\u2019s bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/29.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\tFILE *logf;\n\n\t/* Log entry to help reproduce potential out-of-bounds/string issues.\n\t * We only log pointer values (no dereference of bus->name contents) to\n\t * avoid introducing additional read accesses beyond the original logic.\n\t */\n\tlogf = fopen(\"/tmp/logs/29.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_bus_find called: name_ptr=%p\\n\", (const void *)name);\n\t\tfclose(logf);\n\t}\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\n\t\t/* Probe: record the control path and pointer state before strcmp is invoked.\n\t\t * Note: we purposely do not read bus->name contents here (no %s) to avoid\n\t\t * additional memory accesses that could themselves go out-of-bounds.\n\t\t */\n\t\tlogf = fopen(\"/tmp/logs/29.txt\", \"a\");\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"iter: node=%p bus=%p bus->name_ptr=%p name_ptr=%p\\n\",\n\t\t\t\t(void *)node, (void *)bus, (void *)bus->name, (const void *)name);\n\t\t\tfclose(logf);\n\t\t}\n\n\t\t/* Preserve original logic: strcmp may read the memory pointed to by\n\t\t * bus->name. We do not alter this behavior here; we only logged pointer\n\t\t * values to provide evidence of the situation leading up to the call.\n\t\t */\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\tlogf = fopen(\"/tmp/logs/29.txt\", \"a\");\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"match: bus=%p -> assigning result_ptr=%p\\n\", (void *)bus, (void *)result);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tlogf = fopen(\"/tmp/logs/29.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"metal_bus_find: not found\\n\");\n\t\tfclose(logf);\n\t}\n\n\treturn -ENOENT;\n}\n"
}