{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strlen(bus_name) and strlen(dev_name) after only checking for NULL. Short\u2011circuit evaluation prevents a NULL dereference, but it does not ensure the pointers reference NUL\u2011terminated character arrays. If a caller supplies a non\u2011terminated buffer (e.g. char b[3] = {'a','b','c'} without '\\0'), strlen will read past the object's bounds searching for a terminator, violating Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nstage=not_found iter=0 node=(nil) bus=(nil) bus_name_ptr=(nil) name_ptr=0x7fc8dcc277b0\nstage=before_strcmp iter=0 node=0x7fc8dcc2dbe8 bus=0x7fc8dcc2dba0 bus_name_ptr=0x7fc8dcc277b0 name_ptr=0x7fc8dcc277dd\nstage=after_strcmp iter=0 node=0x7fc8dcc2dbe8 bus=0x7fc8dcc2dba0 bus_name_ptr=0x7fc8dcc277b0 name_ptr=0x7fc8dcc277dd\nstage=not_found iter=1 node=(nil) bus=(nil) bus_name_ptr=(nil) name_ptr=0x7fc8dcc277dd\nstage=before_strcmp iter=0 node=0x7fc8dcc2dbe8 bus=0x7fc8dcc2dba0 bus_name_ptr=0x7fc8dcc277b0 name_ptr=0x7fc8dcc277b0\nstage=match_found iter=0 node=0x7fc8dcc2dbe8 bus=0x7fc8dcc2dba0 bus_name_ptr=0x7fc8dcc277b0 name_ptr=0x7fc8dcc277b0\nstage=before_strcmp iter=0 node=0x7fc8dcc2ee50 bus=0x7fc8dcc2ee08 bus_name_ptr=0x7fc8dcc277dd name_ptr=0x7fc8dcc277dd\nstage=match_found iter=0 node=0x7fc8dcc2ee50 bus=0x7fc8dcc2ee08 bus_name_ptr=0x7fc8dcc277dd name_ptr=0x7fc8dcc277dd\nstage=not_found iter=0 node=(nil) bus=(nil) bus_name_ptr=(nil) name_ptr=0x55bc4ac14220\nstage=before_strcmp iter=0 node=0x55bc4ac1c2a8 bus=0x55bc4ac1c260 bus_name_ptr=0x55bc4ac14220 name_ptr=0x55bc4ac1424d\nstage=after_strcmp iter=0 node=0x55bc4ac1c2a8 bus=0x55bc4ac1c260 bus_name_ptr=0x55bc4ac14220 name_ptr=0x55bc4ac1424d\nstage=not_found iter=1 node=(nil) bus=(nil) bus_name_ptr=(nil) name_ptr=0x55bc4ac1424d\nstage=before_strcmp iter=0 node=0x55bc4ac1c2a8 bus=0x55bc4ac1c260 bus_name_ptr=0x55bc4ac14220 name_ptr=0x55bc4ac14220\nstage=match_found iter=0 node=0x55bc4ac1c2a8 bus=0x55bc4ac1c260 bus_name_ptr=0x55bc4ac14220 name_ptr=0x55bc4ac14220\nstage=before_strcmp iter=0 node=0x55bc4ac1d510 bus=0x55bc4ac1d4c8 bus_name_ptr=0x55bc4ac1424d name_ptr=0x55bc4ac1424d\nstage=match_found iter=0 node=0x55bc4ac1d510 bus=0x55bc4ac1d4c8 bus_name_ptr=0x55bc4ac1424d name_ptr=0x55bc4ac1424d\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n...\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n...\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 21.17 forbids use of <string.h> routines when they may read past the bounds of the objects referenced by their pointer parameters. The shown code calls strlen() and strcmp() on caller-supplied pointers after only NULL checks and without any explicit bound/termination guarantees. strlen(bus->name) or strlen(bus_name) (and strcmp(bus->name, name)) will scan memory until a NUL is found; if the caller supplies a non-terminated buffer (e.g. char b[3] = {'a','b','c'}), these calls can read past the object\u2019s bounds and therefore violate Rule 21.17. The code as given does not perform a prior bounded-length check nor document/prove a caller-side guarantee of NUL termination, so the potential out-of-bounds reads make the report correct."
}