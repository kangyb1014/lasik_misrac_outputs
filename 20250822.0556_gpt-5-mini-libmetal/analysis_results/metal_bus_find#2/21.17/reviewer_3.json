{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The call to strlen(bus->name) is only guarded by a NULL check on bus and bus->name; that does not guarantee that bus->name points to a valid, NUL-terminated character array. If bus->name is non-NULL but not NUL-terminated (e.g. an uninitialized/truncated buffer, a pointer into the middle of an object, or a dangling pointer), strlen may read beyond the bounds of the referenced object. Example: char name[2] = {'A','B'}; bus->name = name; /* no NUL terminator */ metal_bus_register(&bus) calls strlen(bus->name) which can read past name\u2019s bounds, violating Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_find called: name_ptr=0x7f5aa6a5a7f0\nmetal_bus_find: not found\nmetal_bus_find called: name_ptr=0x7f5aa6a5a81d\niter: node=0x7f5aa6a60ba8 bus=0x7f5aa6a60b60 bus->name_ptr=0x7f5aa6a5a7f0 name_ptr=0x7f5aa6a5a81d\nmetal_bus_find: not found\nmetal_bus_find called: name_ptr=0x7f5aa6a5a7f0\niter: node=0x7f5aa6a60ba8 bus=0x7f5aa6a60b60 bus->name_ptr=0x7f5aa6a5a7f0 name_ptr=0x7f5aa6a5a7f0\nmatch: bus=0x7f5aa6a60b60 -> assigning result_ptr=0x7ffcdc580088\nmetal_bus_find called: name_ptr=0x7f5aa6a5a81d\niter: node=0x7f5aa6a61e10 bus=0x7f5aa6a61dc8 bus->name_ptr=0x7f5aa6a5a81d name_ptr=0x7f5aa6a5a81d\nmatch: bus=0x7f5aa6a61dc8 -> assigning result_ptr=0x7ffcdc580088\nmetal_bus_find called: name_ptr=0x5564ed1fa220\nmetal_bus_find: not found\nmetal_bus_find called: name_ptr=0x5564ed1fa24d\niter: node=0x5564ed2022a8 bus=0x5564ed202260 bus->name_ptr=0x5564ed1fa220 name_ptr=0x5564ed1fa24d\nmetal_bus_find: not found\nmetal_bus_find called: name_ptr=0x5564ed1fa220\niter: node=0x5564ed2022a8 bus=0x5564ed202260 bus->name_ptr=0x5564ed1fa220 name_ptr=0x5564ed1fa220\nmatch: bus=0x5564ed202260 -> assigning result_ptr=0x7ffdc25dfaf8\nmetal_bus_find called: name_ptr=0x5564ed1fa24d\niter: node=0x5564ed203510 bus=0x5564ed2034c8 bus->name_ptr=0x5564ed1fa24d name_ptr=0x5564ed1fa24d\nmatch: bus=0x5564ed2034c8 -> assigning result_ptr=0x7ffdc25dfaf8\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n...\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n...\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is essentially correct: metal_bus_find calls strcmp(bus->name, name) without any local checks that either pointer is non-NULL and NUL-terminated. strcmp (like other <string.h> routines) scans until a NUL byte and therefore can read beyond the bounds of the referenced objects if the strings are not properly terminated \u2014 this is exactly what MISRA C 2023 Rule 21.17 forbids. The agent\u2019s scenario shows how a non NUL-terminated name (or a dangling/invalid pointer) can lead to an out-of-bounds read. \n\nNote: the agent\u2019s narrative mentions strlen(bus->name) being guarded only by a NULL check \u2014 that refers to metal_bus_register (and highlights the same class of problem there). Whether the overall program in practice ensures all bus_name/name pointers are valid and NUL-terminated is a separate matter of higher-level invariants; from a standalone MISRA point of view metal_bus_find itself does not enforce the required guarantees and thus can violate Rule 21.17. \n\nTo be compliant, the code must ensure the objects referenced by bus->name and name are valid NUL-terminated strings before calling strcmp (for example by documented preconditions enforced at API boundaries, or by using bounded comparisons with explicit lengths after validating buffer sizes)."
}