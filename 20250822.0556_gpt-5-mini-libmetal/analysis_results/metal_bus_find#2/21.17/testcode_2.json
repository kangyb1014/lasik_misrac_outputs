{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(bus->name, name) can read beyond object bounds if either pointer is invalid or not NUL-terminated. In particular, metal_bus_find does not check name for NULL or ensure both strings are NUL-terminated before calling strcmp. If metal_bus_find is ever called with name == NULL (or with a non-NUL-terminated name or bus->name), strcmp will dereference an invalid pointer or scan out-of-bounds, violating Rule 21.17. For example, a caller that mistakenly passes NULL for name will cause strcmp to access beyond the bounds of the object referenced by its second parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/29.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper logger: append a line describing the current state to /tmp/logs/29.txt */\nstatic void metal_bus_find_log(const char *phase,\n                               struct metal_bus *bus,\n                               const char *name,\n                               struct metal_list *node,\n                               int iter)\n{\n    FILE *f = fopen(\"/tmp/logs/29.txt\", \"a\");\n    if (!f) return;\n\n    /* Log pointer values and NULL status only; do NOT dereference pointers. */\n    fprintf(f, \"[%s] iter=%d node=%p bus=%p bus->name=%p name=%p name_is_null=%d bus_name_is_null=%d\\n\",\n            phase,\n            iter,\n            (void *)node,\n            (void *)bus,\n            (void *)(bus ? bus->name : NULL),\n            (void *)name,\n            (name == NULL) ? 1 : 0,\n            (bus == NULL || bus->name == NULL) ? 1 : 0);\n\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n    int __log_iter = 0;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log state before the strcmp call so callers can reproduce and see pointer values. */\n        metal_bus_find_log(\"before_strcmp\", bus, name, node, __log_iter);\n        __log_iter++;\n\n        /* Preserve original logic: call strcmp as before. This may crash if name or bus->name is invalid\n           (this is the violation scenario we want to capture). */\n        if (strcmp(bus->name, name) == 0 && result) {\n            /* Log when a match is found. */\n            metal_bus_find_log(\"match_found\", bus, name, node, __log_iter);\n            *result = bus;\n            return 0;\n        }\n\n        /* Log after comparison for tracing if strcmp returned without match. */\n        metal_bus_find_log(\"after_strcmp_no_match\", bus, name, node, __log_iter);\n        __log_iter++;\n    }\n    return -ENOENT;\n}\n"
}