{
  "user_message": "An agent A claimed that the following metal_bus_find code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of metal_bus_find.\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nmetal_bus_find calls strcmp(bus->name, name) without validating the 'name' pointer. In metal_linux_bus_finish the call metal_bus_find(lbus->bus_name, &bus) can pass lbus->bus_name that may be NULL or not NUL-terminated. If lbus->bus_name is NULL (or not properly NUL-terminated), strcmp will dereference/read beyond the bounds of the object referenced by its pointer parameter, violating MISRA C 2023 Rule 21.17.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_bus_find entry: name=0x7faefed728b0, result=(nil)\nno bus found: returning -ENOENT\nmetal_bus_find entry: name=0x7faefed728dd, result=(nil)\niter: node=0x7faefed78be8 bus=0x7faefed78ba0 bus->name=0x7faefed728b0\n    name pointer=0x7faefed728dd\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    strcmp did not match or result was NULL\nno bus found: returning -ENOENT\nmetal_bus_find entry: name=0x7faefed728b0, result=0x7ffe132718c8\niter: node=0x7faefed78be8 bus=0x7faefed78ba0 bus->name=0x7faefed728b0\n    name pointer=0x7faefed728b0\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    match found: bus=0x7faefed78ba0 name=0x7faefed728b0 => returning 0\nmetal_bus_find entry: name=0x7faefed728dd, result=0x7ffe132718c8\niter: node=0x7faefed79e50 bus=0x7faefed79e08 bus->name=0x7faefed728dd\n    name pointer=0x7faefed728dd\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    match found: bus=0x7faefed79e08 name=0x7faefed728dd => returning 0\nmetal_bus_find entry: name=0x5641a5922220, result=(nil)\nno bus found: returning -ENOENT\nmetal_bus_find entry: name=0x5641a592224d, result=(nil)\niter: node=0x5641a592a2a8 bus=0x5641a592a260 bus->name=0x5641a5922220\n    name pointer=0x5641a592224d\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    strcmp did not match or result was NULL\nno bus found: returning -ENOENT\nmetal_bus_find entry: name=0x5641a5922220, result=0x7ffe98239288\niter: node=0x5641a592a2a8 bus=0x5641a592a260 bus->name=0x5641a5922220\n    name pointer=0x5641a5922220\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    match found: bus=0x5641a592a260 name=0x5641a5922220 => returning 0\nmetal_bus_find entry: name=0x5641a592224d, result=0x7ffe98239288\niter: node=0x5641a592b510 bus=0x5641a592b4c8 bus->name=0x5641a592224d\n    name pointer=0x5641a592224d\n    bus->name not NULL\n    name not NULL\n    about to call strcmp(bus->name, name)\n    match found: bus=0x5641a592b4c8 name=0x5641a592224d => returning 0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_bus_find:\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n...\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n...\nvoid metal_linux_bus_finish(void)\n{\n\tstruct linux_bus *lbus;\n\tstruct metal_bus *bus;\n\n\tfor_each_linux_bus(lbus) {\n\t\tif (metal_bus_find(lbus->bus_name, &bus) == 0)\n\t\t\tmetal_bus_unregister(bus);\n\t}\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. metal_bus_find calls strcmp(bus->name, name) without validating the caller-supplied pointer 'name' (or verifying both operands are valid NUL-terminated strings). strcmp will read through the pointed-to objects, so if name is NULL or not NUL-terminated the call can dereference NULL or read past the object bounds, which violates MISRA C 2023 Rule 21.17. \n\nAlthough some callers (e.g. metal_device_open, metal_bus_register) validate their arguments, metal_linux_bus_finish calls metal_bus_find(lbus->bus_name, &bus) without checking lbus->bus_name. Because there exists a feasible call path that passes an invalid string pointer to metal_bus_find, the function as written can enable out-of-bounds/NULL access through strcmp and thus breaches the rule. \n\nFix: validate name (and/or bus->name) before calling strcmp (e.g. check name != NULL and use bounded checks such as strnlen/strncmp or enforce a documented caller contract ensuring non-NULL NUL-terminated strings)."
}