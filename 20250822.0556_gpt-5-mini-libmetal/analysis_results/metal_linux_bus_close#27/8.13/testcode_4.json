{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter named sg_in is an input scatter\u2011gather list and is not const\u2011qualified. It should be declared as const struct metal_sg *sg_in if the function does not modify the pointee; as written the pointer to a non\u2011const type violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_bus_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_bus_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_close:\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_bus_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper that appends formatted logs to /tmp/logs/273.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    /* Ensure logs directory exists; ignore error if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/273.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Prepend a simple timestamp. */\n    time_t t = time(NULL);\n    if (t != (time_t)-1) {\n        struct tm tm;\n        if (localtime_r(&t, &tm) != NULL) {\n            char buf[64];\n            if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0) {\n                fprintf(f, \"%s - \", buf);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Preserve original function signature and logic; add probes to record\n   control flow and state relevant to the reported violation scenario. */\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_driver *ldrv;\n\n    probe_log(\"enter: metal_linux_bus_close(bus=%p, lbus=%p)\", (void *)bus, (void *)lbus);\n\n    for_each_linux_driver(lbus, ldrv) {\n        probe_log(\"loop: ldrv=%p, ldrv->sdrv=%p\", (void *)ldrv, (void *)ldrv->sdrv);\n        if (ldrv->sdrv) {\n            probe_log(\"calling sysfs_close_driver on sdrv=%p\", (void *)ldrv->sdrv);\n            sysfs_close_driver(ldrv->sdrv);\n            probe_log(\"returned from sysfs_close_driver for sdrv (original pointer)=%p\", (void *)ldrv->sdrv);\n        }\n        ldrv->sdrv = NULL;\n        probe_log(\"after: ldrv=%p, ldrv->sdrv set to NULL\", (void *)ldrv);\n    }\n\n    probe_log(\"before sysfs_close_bus: lbus->sbus=%p\", (void *)lbus->sbus);\n    sysfs_close_bus(lbus->sbus);\n    lbus->sbus = NULL;\n    probe_log(\"after sysfs_close_bus: lbus->sbus set to NULL\");\n\n    probe_log(\"exit: metal_linux_bus_close(bus=%p)\", (void *)bus);\n}\n"
}