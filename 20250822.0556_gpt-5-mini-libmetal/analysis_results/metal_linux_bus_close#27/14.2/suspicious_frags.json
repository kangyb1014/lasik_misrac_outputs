{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_close:\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_linux_bus_close:\n#define for_each_linux_driver(lbus, ldrv) for((ldrv)=lbus->drivers;(ldrv)->drv_name;(ldrv)++)\n...\nstatic struct linux_bus *to_linux_bus(struct metal_bus *bus)\n{\n\treturn metal_container_of(bus, struct linux_bus, bus);\n}\n...\nstruct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}\n...\nstruct linux_driver {\n\tconst char\t\t*drv_name;\n\tconst char\t\t*mod_name;\n\tconst char\t\t*cls_name;\n\tstruct sysfs_driver\t*sdrv;\n\tint\t\t\t(*dev_open)(struct linux_bus *lbus,\n\t\t\t\t\t    struct linux_device *ldev);\n\tvoid\t\t\t(*dev_close)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev);\n\tvoid\t\t\t(*dev_irq_ack)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev,\n\t\t\t\t\t     int irq);\n\tint\t\t\t(*dev_dma_map)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg_in,\n\t\t\t\t\t\tint nents_in,\n\t\t\t\t\t\tstruct metal_sg *sg_out);\n\tvoid\t\t\t(*dev_dma_unmap)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg,\n\t\t\t\t\t\tint nents);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}",
    "struct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}",
    "#define for_each_linux_driver(lbus, ldrv) for((ldrv)=lbus->drivers;(ldrv)->drv_name;(ldrv)++)",
    "struct linux_driver {\n\tconst char\t*drv_name;\n\tconst char\t*mod_name;\n\tconst char\t*cls_name;\n\tstruct sysfs_driver\t*sdrv;\n\tint\t\t(*dev_open)(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev);\n\tvoid\t\t(*dev_close)(struct linux_bus *lbus,\n\t\t\t\t     struct linux_device *ldev);\n\tvoid\t\t(*dev_irq_ack)(struct linux_bus *lbus,\n\t\t\t\t     struct linux_device *ldev,\n\t\t\t\t     int irq);\n\tint\t\t(*dev_dma_map)(struct linux_bus *lbus,\n\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\tuint32_t dir,\n\t\t\t\t\tstruct metal_sg *sg_in,\n\t\t\t\t\tint nents_in,\n\t\t\t\t\tstruct metal_sg *sg_out);\n\tvoid\t\t(*dev_dma_unmap)(struct linux_bus *lbus,\n\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\tuint32_t dir,\n\t\t\t\t\tstruct metal_sg *sg,\n\t\t\t\t\tint nents);\n}"
  ],
  "explanation": "The only for-style construct in the provided code is the macro-expanded for loop (for_each_linux_driver). The macro definition and its use together create the for statement whose three clauses must be validated against Rule 14.2, so both the macro and its use are reported. Also reported are the linux_bus->drivers declaration and the linux_driver structure members drv_name and sdrv because the loop condition uses drv_name and the loop body modifies sdrv; those relationships are precisely the aspects Rule 14.2 requires inspection of (use of loop counter, loop control flags, and objects modified in the body).\n\nOther fragments need not be investigated for Rule 14.2: the helper to_linux_bus() simply performs container_of and does not affect the for loop structure; sysfs_close_bus(lbus->sbus) and the subsequent lbus->sbus = NULL; are outside the for loop and do not affect the loop clauses; the metal_container_of usage and the definition of struct metal_bus are unrelated to for-loop well-formedness; function pointer declarations inside struct linux_driver are not used in the for loop clauses and are therefore not relevant to Rule 14.2. No other for loops or loop-like constructs are present in the provided code, so no additional fragments are necessary to examine for this rule."
}