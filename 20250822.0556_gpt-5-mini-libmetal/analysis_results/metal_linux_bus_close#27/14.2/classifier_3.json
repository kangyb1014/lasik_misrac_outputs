{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_bus_close:\n```c\nstatic void metal_linux_bus_close(struct metal_bus *bus)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_driver *ldrv;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\tif (ldrv->sdrv)\n\t\t\tsysfs_close_driver(ldrv->sdrv);\n\t\tldrv->sdrv = NULL;\n\t}\n\n\tsysfs_close_bus(lbus->sbus);\n\tlbus->sbus = NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_bus_close:\n#define for_each_linux_driver(lbus, ldrv) for((ldrv)=lbus->drivers;(ldrv)->drv_name;(ldrv)++)\n...\nstatic struct linux_bus *to_linux_bus(struct metal_bus *bus)\n{\n\treturn metal_container_of(bus, struct linux_bus, bus);\n}\n...\nstruct linux_bus {\n\tstruct metal_bus\tbus;\n\tconst char\t\t*bus_name;\n\tstruct linux_driver\tdrivers[MAX_DRIVERS];\n\tstruct sysfs_bus\t*sbus;\n}\n...\nstruct linux_driver {\n\tconst char\t\t*drv_name;\n\tconst char\t\t*mod_name;\n\tconst char\t\t*cls_name;\n\tstruct sysfs_driver\t*sdrv;\n\tint\t\t\t(*dev_open)(struct linux_bus *lbus,\n\t\t\t\t\t    struct linux_device *ldev);\n\tvoid\t\t\t(*dev_close)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev);\n\tvoid\t\t\t(*dev_irq_ack)(struct linux_bus *lbus,\n\t\t\t\t\t     struct linux_device *ldev,\n\t\t\t\t\t     int irq);\n\tint\t\t\t(*dev_dma_map)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg_in,\n\t\t\t\t\t\tint nents_in,\n\t\t\t\t\t\tstruct metal_sg *sg_out);\n\tvoid\t\t\t(*dev_dma_unmap)(struct linux_bus *lbus,\n\t\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\t\tuint32_t dir,\n\t\t\t\t\t\tstruct metal_sg *sg,\n\t\t\t\t\t\tint nents);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct linux_driver {\n\tconst char\t*drv_name;\n\tconst char\t*mod_name;\n\tconst char\t*cls_name;\n\tstruct sysfs_driver\t*sdrv;\n\tint\t\t(*dev_open)(struct linux_bus *lbus,\n\t\t\t\t    struct linux_device *ldev);\n\tvoid\t\t(*dev_close)(struct linux_bus *lbus,\n\t\t\t\t     struct linux_device *ldev);\n\tvoid\t\t(*dev_irq_ack)(struct linux_bus *lbus,\n\t\t\t\t     struct linux_device *ldev,\n\t\t\t\t     int irq);\n\tint\t\t(*dev_dma_map)(struct linux_bus *lbus,\n\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\tuint32_t dir,\n\t\t\t\t\tstruct metal_sg *sg_in,\n\t\t\t\t\tint nents_in,\n\t\t\t\t\tstruct metal_sg *sg_out);\n\tvoid\t\t(*dev_dma_unmap)(struct linux_bus *lbus,\n\t\t\t\t\tstruct linux_device *ldev,\n\t\t\t\t\tuint32_t dir,\n\t\t\t\t\tstruct metal_sg *sg,\n\t\t\t\t\tint nents);\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 14.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The presented fragment is a struct definition (struct linux_driver) and contains no for loop. The for loop used in metal_linux_bus_close is produced by the macro for_each_linux_driver: for ((ldrv) = lbus->drivers; (ldrv)->drv_name; (ldrv)++). This meets MISRA C 2023 Rule 14.2: the first clause initializes the single loop counter (ldrv), the second clause uses only the loop counter with no persistent side effects, and the third clause increments only the loop counter. The loop counter is not modified in the loop body, so the rule is not violated."
}