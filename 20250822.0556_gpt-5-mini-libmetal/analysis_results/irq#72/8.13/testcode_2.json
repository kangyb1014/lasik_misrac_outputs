{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable err_msg is declared as char *err_msg = \"\" and later assigned string literals (e.g. \"register irq 0 fail drv_id 1\\n\"). String literals should be pointed to by pointers to const char. In the fragment if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg); err_msg is a non-const pointer to a const object, so Rule 8.13 is violated. Fix by declaring err_msg as const char *err_msg = \"\" (and propagate const where needed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/eventfd.h>\n\n/* Probe helper: append diagnostic logs to /tmp/logs/723.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n    char timestr[32];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Lightweight probe to dump IRQ fd array state */\nstatic void probe_dump_state(const char *stage, int rc, char *err_msg,\n                             int tst_irq0, int tst_irq1, int i,\n                             int mll)\n{\n    /* Note: err_msg may point to a string literal; we log pointer and content. */\n    probe_log(\"stage=%s rc=%d err_msg_ptr=%p err_msg_content=\\\"%s\\\" tst_irq=[%d,%d] i=%d mll=%d\",\n              stage, rc, (void *)err_msg, (err_msg ? err_msg : \"(null)\"),\n              tst_irq0, tst_irq1, i, mll);\n}\n\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\t/* Initial probe: entry state */\n\tprobe_dump_state(\"entry\", rc, err_msg, -1, -1, -1, (int)mll);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\n\t\t/* probe after creating each fd */\n\t\tprobe_dump_state(\"after_eventfd\", rc, err_msg,\n\t\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\t/* log the assignment and relevant state for reproduction */\n\t\tprobe_dump_state(\"register0_fail_assigned\", rc, err_msg,\n\t\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\t\tgoto out;\n\t}\n\tprobe_dump_state(\"after_register0_success\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tprobe_dump_state(\"register1_fail_assigned\", rc, err_msg,\n\t\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\t\tgoto out;\n\t}\n\tprobe_dump_state(\"after_register1_success\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\n\tmetal_irq_unregister(tst_irq[0]);\n\tprobe_dump_state(\"after_unregister0\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tprobe_dump_state(\"register0_after_unreg_fail\", rc, err_msg,\n\t\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\t\tgoto out;\n\t}\n\tprobe_dump_state(\"after_register0_after_unreg_success\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\t/* probe just before error determination */\n\tprobe_dump_state(\"before_error_check\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\t/* final probe: before calling metal_log and return */\n\tprobe_dump_state(\"final\", rc, err_msg,\n\t                 tst_irq[0], tst_irq[1], i, (int)mll);\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n"
}