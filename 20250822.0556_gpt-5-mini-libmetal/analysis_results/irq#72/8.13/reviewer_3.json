{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe variable 'err_msg' is declared as 'char *err_msg = \"\";' \u2014 a pointer to non-const initialized with a string literal. Per MISRA C 2023 Rule 8.13, the pointer should be const-qualified (e.g. 'const char *err_msg = \"\";') because string literals must be treated as immutable. This declaration therefore violates Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-22 06:14:57 - ENTER irq: initial rc=0, err_msg=\"\", saved_log_level=7\n2025-08-22 06:14:57 - Set metal log level to METAL_LOG_CRITICAL\n2025-08-22 06:14:57 - Created eventfd: index=0, fd=6\n2025-08-22 06:14:57 - Created eventfd: index=1, fd=7\n2025-08-22 06:14:57 - Before first register: rc=0\n2025-08-22 06:14:57 - After register irq[0]: rc=0 (fd=6)\n2025-08-22 06:14:57 - After register irq[1]: rc=0 (fd=7)\n2025-08-22 06:14:57 - Unregistered irq[0] (fd=6)\n2025-08-22 06:14:57 - After re-register irq[0]: rc=0 (fd=6)\n2025-08-22 06:14:57 - Unregistered irq[0] and irq[1] after tests\n2025-08-22 06:14:57 - Closing fd: index=0, fd=6\n2025-08-22 06:14:57 - Closing fd: index=1, fd=7\n2025-08-22 06:14:57 - Restored original metal log level=7\n2025-08-22 06:14:57 - EXIT irq: final rc=0, err_msg=\"\"\n2025-08-22 06:14:58 - ENTER irq: initial rc=0, err_msg=\"\", saved_log_level=7\n2025-08-22 06:14:58 - Set metal log level to METAL_LOG_CRITICAL\n2025-08-22 06:14:58 - Created eventfd: index=0, fd=6\n2025-08-22 06:14:58 - Created eventfd: index=1, fd=7\n2025-08-22 06:14:58 - Before first register: rc=0\n2025-08-22 06:14:58 - After register irq[0]: rc=0 (fd=6)\n2025-08-22 06:14:58 - After register irq[1]: rc=0 (fd=7)\n2025-08-22 06:14:58 - Unregistered irq[0] (fd=6)\n2025-08-22 06:14:58 - After re-register irq[0]: rc=0 (fd=6)\n2025-08-22 06:14:58 - Unregistered irq[0] and irq[1] after tests\n2025-08-22 06:14:58 - Closing fd: index=0, fd=6\n2025-08-22 06:14:58 - Closing fd: index=1, fd=7\n2025-08-22 06:14:58 - Restored original metal log level=7\n2025-08-22 06:14:58 - EXIT irq: final rc=0, err_msg=\"\"\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible. In the code err_msg is declared as 'char *err_msg = \"\";' and later assigned various string literals. String literals are immutable (attempting to modify them is undefined behavior), and the code never modifies the pointed-to characters \u2014 it only reads them. Therefore err_msg should be declared as 'const char *err_msg = \"\";' to comply with Rule 8.13. If the code actually needed to modify the message buffer, it should use a modifiable array or allocate writable storage instead."
}