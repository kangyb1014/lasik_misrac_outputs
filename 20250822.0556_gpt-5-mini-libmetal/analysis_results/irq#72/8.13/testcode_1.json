{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes an integer cast to a plain void * ((void *)1) as the user data cookie. This uses a non-const pointer type; if the callee/handler does not modify the pointed-to data the parameter should be const-qualified (e.g. const void *). Casting an integer to void * also hides the lack of a real object and forecloses use of a const-qualified pointee. Recommended fixes: change the API to accept const void * (or pass a pointer to a const object), or use an integer type (intptr_t/uintptr_t) for integer handles instead of forging a void * from an integer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe helpers: write control flow and state to /tmp/logs/723.txt */\nstatic void log_probe_event(const char *event, int fd, const void *cookie, int rc)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (!f) return;\n    /* Print cookie both as pointer and integer width value for clarity */\n    fprintf(f, \"%s: fd=%d cookie_ptr=%p cookie_uint=%\" PRIuPTR \" rc=%d\\n\",\n            event, fd, cookie, (uintptr_t)cookie, rc);\n    fclose(f);\n}\n\nstatic void log_probe_msg(const char *msg, const char *detail)\n{\n    FILE *f = fopen(\"/tmp/logs/723.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"%s: %s\\n\", msg, detail ? detail : \"\");\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    /* Log initial state */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"initial log level=%d\", (int)mll);\n        log_probe_msg(\"irq:start\", buf);\n    }\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n        /* Log creation of eventfd and FD */\n        log_probe_event(\"eventfd_created\", tst_irq[i], NULL, tst_irq[i]);\n    }\n\n    /* Log intent to register with a forged integer cookie (void *)1 */\n    log_probe_event(\"before_register_irq0\", tst_irq[0], (const void *)1, -1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    /* Capture return code and cookie used */\n    log_probe_event(\"after_register_irq0\", tst_irq[0], (const void *)1, rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    log_probe_event(\"before_register_irq1\", tst_irq[1], (const void *)1, -1);\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    log_probe_event(\"after_register_irq1\", tst_irq[1], (const void *)1, rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        goto out;\n    }\n\n    log_probe_event(\"before_unregister_irq0_first\", tst_irq[0], (const void *)1, -1);\n    metal_irq_unregister(tst_irq[0]);\n    log_probe_event(\"after_unregister_irq0_first\", tst_irq[0], (const void *)1, 0);\n\n    log_probe_event(\"before_register_irq0_after_unreg\", tst_irq[0], (const void *)1, -1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    log_probe_event(\"after_register_irq0_after_unreg\", tst_irq[0], (const void *)1, rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        goto out;\n    }\n    log_probe_event(\"before_unregister_irq0_second\", tst_irq[0], (const void *)1, -1);\n    metal_irq_unregister(tst_irq[0]);\n    log_probe_event(\"after_unregister_irq0_second\", tst_irq[0], (const void *)1, 0);\n\n    log_probe_event(\"before_unregister_irq1\", tst_irq[1], (const void *)1, -1);\n    metal_irq_unregister(tst_irq[1]);\n    log_probe_event(\"after_unregister_irq1\", tst_irq[1], (const void *)1, 0);\n\nout:\n    for (i = 0; i < 2; i++) {\n        close(tst_irq[i]);\n        /* Log FD close action */\n        log_probe_event(\"fd_closed\", tst_irq[i], NULL, 0);\n    }\n    metal_set_log_level(mll);\n\n    /* Log final outcome and error message if any */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"final rc=%d err_msg='%s'\", rc, err_msg);\n        log_probe_msg(\"irq:out\", buf);\n    }\n\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n    return rc;\n}\n"
}