{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes (void *)1 as the user/context argument to metal_irq_register. If that argument is used only as a read-only identifier/context by the IRQ API, the pointer should be to a const-qualified type (e.g. const void *) and the function prototype should accept a const-qualified pointer. Here a non-const void * is used (and created by casting an integer), so the code violates the intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/eventfd.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/723.txt */\nstatic const char *probe_log_path = \"/tmp/logs/723.txt\";\n\nstatic void probe_ensure_dir(void)\n{\n    static int dir_created = 0;\n    if (!dir_created) {\n        /* attempt to create /tmp/logs; ignore errors if it already exists */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dir_created = 1;\n    }\n}\n\nstatic void probe_logf(const char *fmt, ...)\n{\n    probe_ensure_dir();\n    FILE *f = fopen(probe_log_path, \"a\");\n    if (!f) {\n        /* best-effort logging only */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified irq function with inserted probes. Original logic preserved.\n * External symbols used by original implementation are assumed defined\n * elsewhere: metal_get_log_level, metal_set_log_level, metal_log,\n * metal_irq_register, metal_irq_unregister, irq_handler.\n */\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    probe_logf(\"%s: enter\", __func__);\n    probe_logf(\"initial metal_log_level = %d\", (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n        probe_logf(\"%s: eventfd created tst_irq[%d]=%d\", __func__, i, tst_irq[i]);\n    }\n\n    probe_logf(\"%s: about to register irq 0: fd=%d handler=%p user=%p\",\n               __func__, tst_irq[0], (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_logf(\"%s: metal_irq_register(fd=%d) returned rc=%d\",\n               __func__, tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_logf(\"%s: error '%s'\", __func__, err_msg);\n        goto out;\n    }\n\n    probe_logf(\"%s: about to register irq 1: fd=%d handler=%p user=%p\",\n               __func__, tst_irq[1], (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_logf(\"%s: metal_irq_register(fd=%d) returned rc=%d\",\n               __func__, tst_irq[1], rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_logf(\"%s: error '%s'\", __func__, err_msg);\n        goto out;\n    }\n\n    probe_logf(\"%s: unregistering fd=%d\", __func__, tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    probe_logf(\"%s: re-registering fd=%d with same user pointer=%p\",\n               __func__, tst_irq[0], (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_logf(\"%s: metal_irq_register(fd=%d) after unregister returned rc=%d\",\n               __func__, tst_irq[0], rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_logf(\"%s: error '%s'\", __func__, err_msg);\n        goto out;\n    }\n    probe_logf(\"%s: final unregisters for fd=%d and fd=%d\", __func__, tst_irq[0], tst_irq[1]);\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    probe_logf(\"%s: closing fds and restoring log level. rc=%d err_msg='%s'\",\n               __func__, rc, err_msg);\n    for (i = 0; i < 2; i++) {\n        close(tst_irq[i]);\n        probe_logf(\"%s: closed tst_irq[%d]=%d\", __func__, i, tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    probe_logf(\"%s: exit rc=%d\", __func__, rc);\n    return rc;\n}\n"
}