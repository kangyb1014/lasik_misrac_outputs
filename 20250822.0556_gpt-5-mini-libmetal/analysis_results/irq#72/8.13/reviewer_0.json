{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes (void *)1 as the user/context argument to metal_irq_register. If that argument is used only as a read-only identifier/context by the IRQ API, the pointer should be to a const-qualified type (e.g. const void *) and the function prototype should accept a const-qualified pointer. Here a non-const void * is used (and created by casting an integer), so the code violates the intent of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nirq: enter\ninitial metal_log_level = 7\nirq: eventfd created tst_irq[0]=6\nirq: eventfd created tst_irq[1]=7\nirq: about to register irq 0: fd=6 handler=0x55fe9a3dfbe7 user=0x1\nirq: metal_irq_register(fd=6) returned rc=0\nirq: about to register irq 1: fd=7 handler=0x55fe9a3dfbe7 user=0x1\nirq: metal_irq_register(fd=7) returned rc=0\nirq: unregistering fd=6\nirq: re-registering fd=6 with same user pointer=0x1\nirq: metal_irq_register(fd=6) after unregister returned rc=0\nirq: final unregisters for fd=6 and fd=7\nirq: closing fds and restoring log level. rc=0 err_msg=''\nirq: closed tst_irq[0]=6\nirq: closed tst_irq[1]=7\nirq: exit rc=0\nirq: enter\ninitial metal_log_level = 7\nirq: eventfd created tst_irq[0]=6\nirq: eventfd created tst_irq[1]=7\nirq: about to register irq 0: fd=6 handler=0x55e46559dfc7 user=0x1\nirq: metal_irq_register(fd=6) returned rc=0\nirq: about to register irq 1: fd=7 handler=0x55e46559dfc7 user=0x1\nirq: metal_irq_register(fd=7) returned rc=0\nirq: unregistering fd=6\nirq: re-registering fd=6 with same user pointer=0x1\nirq: metal_irq_register(fd=6) after unregister returned rc=0\nirq: final unregisters for fd=6 and fd=7\nirq: closing fds and restoring log level. rc=0 err_msg=''\nirq: closed tst_irq[0]=6\nirq: closed tst_irq[1]=7\nirq: exit rc=0\n\n</execution_log>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C Rule 8.13 is about declaring pointers to point to const-qualified types when they can/should be const. From the snippet you cannot tell the prototype of metal_irq_register or whether the user/context pointer is intended to be read-only; therefore you cannot conclude that passing (void *)1 violates 8.13. The rule concerns the types used in declarations (and API design) and not every call site. If the API were designed to take a const-qualified pointer and the implementation never modifies the pointed-to object, then the API (and callers) should use const; however that is an API/design issue, not provable from this code alone.\n\nNote: the code does contain a clearer const-related problem: err_msg is declared as char *err_msg = \"\" but points at a string literal \u2014 that should be declared const char *err_msg. Also casting an integer to a pointer (void *)1 is suspect and may violate other MISRA rules about integer/pointer conversions, but that is a different rule than 8.13."
}