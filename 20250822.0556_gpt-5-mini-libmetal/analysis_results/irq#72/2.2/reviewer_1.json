{
  "user_message": "An agent A claimed that the following irq code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of irq.\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn irq_handler the statement '(void)priv;' is an executed no-op whose removal would not affect program behaviour (it merely discards the parameter value to suppress an \"unused parameter\" warning). As such it meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\n2025-08-22 06:13:54 pid=2137160: ENTER irq: initial_log_level=7\n2025-08-22 06:13:54 pid=2137160: irq: set log level to METAL_LOG_CRITICAL\n2025-08-22 06:13:54 pid=2137160: irq: created virtual irq index=0 fd=6 (errno=0:Success)\n2025-08-22 06:13:54 pid=2137160: irq: created virtual irq index=1 fd=7 (errno=0:Success)\n2025-08-22 06:13:54 pid=2137160: irq: registering irq 0 with handler=0x55bd74751c67 priv=0x1\n2025-08-22 06:13:54 pid=2137160: irq: metal_irq_register returned rc=0 for fd=6\n2025-08-22 06:13:54 pid=2137160: irq: registering irq 1 with handler=0x55bd74751c67 priv=0x1\n2025-08-22 06:13:54 pid=2137160: irq: metal_irq_register returned rc=0 for fd=7\n2025-08-22 06:13:54 pid=2137160: irq: unregistering irq 0 (fd=6)\n2025-08-22 06:13:54 pid=2137160: irq: re-registering irq 0 with handler=0x55bd74751c67 priv=0x1\n2025-08-22 06:13:54 pid=2137160: irq: metal_irq_register (re-register) returned rc=0 for fd=6\n2025-08-22 06:13:54 pid=2137160: irq: final unregister of irq 0 and irq 1\n2025-08-22 06:13:54 pid=2137160: irq: closing fd index=0 fd=6\n2025-08-22 06:13:54 pid=2137160: irq: closing fd index=1 fd=7\n2025-08-22 06:13:54 pid=2137160: irq: restored log level to 7\n2025-08-22 06:13:54 pid=2137160: EXIT irq: rc=0 err_msg=''\n2025-08-22 06:13:54 pid=2137368: ENTER irq: initial_log_level=7\n2025-08-22 06:13:54 pid=2137368: irq: set log level to METAL_LOG_CRITICAL\n2025-08-22 06:13:54 pid=2137368: irq: created virtual irq index=0 fd=6 (errno=0:Success)\n2025-08-22 06:13:54 pid=2137368: irq: created virtual irq index=1 fd=7 (errno=0:Success)\n2025-08-22 06:13:54 pid=2137368: irq: registering irq 0 with handler=0x555aa8cb7027 priv=0x1\n2025-08-22 06:13:54 pid=2137368: irq: metal_irq_register returned rc=0 for fd=6\n2025-08-22 06:13:54 pid=2137368: irq: registering irq 1 with handler=0x555aa8cb7027 priv=0x1\n2025-08-22 06:13:54 pid=2137368: irq: metal_irq_register returned rc=0 for fd=7\n2025-08-22 06:13:54 pid=2137368: irq: unregistering irq 0 (fd=6)\n2025-08-22 06:13:54 pid=2137368: irq: re-registering irq 0 with handler=0x555aa8cb7027 priv=0x1\n2025-08-22 06:13:54 pid=2137368: irq: metal_irq_register (re-register) returned rc=0 for fd=6\n2025-08-22 06:13:54 pid=2137368: irq: final unregister of irq 0 and irq 1\n2025-08-22 06:13:54 pid=2137368: irq: closing fd index=0 fd=6\n2025-08-22 06:13:54 pid=2137368: irq: closing fd index=1 fd=7\n2025-08-22 06:13:54 pid=2137368: irq: restored log level to 7\n2025-08-22 06:13:54 pid=2137368: EXIT irq: rc=0 err_msg=''\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function irq:\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nstatic int irq_handler(int irq, void *priv)\n{\n\t(void)irq;\n\t(void)priv;\n\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The two statements in irq_handler \u2014 (void)irq; and (void)priv; \u2014 evaluate their parameter expressions but do not affect program state or behaviour; removing them would not change runtime behaviour. Under the Rule 2.2 definition (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), these casts are dead code. (They would only be non-dead if the expressions had observable side\u2011effects, e.g. involved volatile accesses or function calls.)\n\nNote: the idiom (void)param; is commonly used to suppress unused\u2011parameter warnings; that addresses a compile\u2011time diagnostic but does not change the fact that the statement is an executed no\u2011op per the rule. To comply you can either avoid naming unused parameters in the function definition where possible or use a compiler attribute/annotation for intentionally unused parameters (or formally document and accept a deviation from Rule 2.2)."
}