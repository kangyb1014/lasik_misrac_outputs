{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn irq_handler the statement '(void)priv;' is an executed no-op whose removal would not affect program behaviour (it merely discards the parameter value to suppress an \"unused parameter\" warning). As such it meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n/* Note: project headers (for eventfd, metal_*) are assumed to be included\n   elsewhere in the build. This file only adds lightweight probes. */\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/722.txt\", \"a\");\n    if (!f) return;\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)\n    localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp) tm_buf = *tmp;\n        else memset(&tm_buf, 0, sizeof(tm_buf));\n    }\n#endif\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        strcpy(timestr, \"unknown-time\");\n\n    pid_t pid = getpid();\n\n    fprintf(f, \"%s pid=%d: \", timestr, (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    probe_log(\"ENTER %s: initial_log_level=%d\", __func__, (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n    probe_log(\"%s: set log level to METAL_LOG_CRITICAL\", __func__);\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        probe_log(\"%s: created virtual irq index=%d fd=%d (errno=%d:%s)\",\n                  __func__, i, tst_irq[i], errno, strerror(errno));\n\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n    }\n\n    probe_log(\"%s: registering irq 0 with handler=%p priv=%p\", __func__,\n              (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"%s: metal_irq_register returned rc=%d for fd=%d\", __func__, rc, tst_irq[0]);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_log(\"%s: error: %s\", __func__, err_msg);\n        goto out;\n    }\n\n    probe_log(\"%s: registering irq 1 with handler=%p priv=%p\", __func__,\n              (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_log(\"%s: metal_irq_register returned rc=%d for fd=%d\", __func__, rc, tst_irq[1]);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_log(\"%s: error: %s\", __func__, err_msg);\n        goto out;\n    }\n\n    probe_log(\"%s: unregistering irq 0 (fd=%d)\", __func__, tst_irq[0]);\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"%s: re-registering irq 0 with handler=%p priv=%p\", __func__,\n              (void *)irq_handler, (void *)1);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"%s: metal_irq_register (re-register) returned rc=%d for fd=%d\", __func__, rc, tst_irq[0]);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_log(\"%s: error: %s\", __func__, err_msg);\n        goto out;\n    }\n    probe_log(\"%s: final unregister of irq 0 and irq 1\", __func__);\n    metal_irq_unregister(tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n\nout:\n    for (i = 0; i < 2; i++) {\n        probe_log(\"%s: closing fd index=%d fd=%d\", __func__, i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    probe_log(\"%s: restored log level to %d\", __func__, (int)mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\n    probe_log(\"EXIT %s: rc=%d err_msg='%s'\", __func__, rc, err_msg);\n    return rc;\n}\n"
}