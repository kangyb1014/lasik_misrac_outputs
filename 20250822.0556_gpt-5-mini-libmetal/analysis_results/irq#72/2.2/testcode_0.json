{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \u201c(void)irq;\u201d is an executed expression statement that only evaluates and discards the non-volatile parameter irq. Its removal would not affect program behaviour (irq is a plain int parameter and the read has no side effects), so it constitutes dead code under MISRA C 2023 Rule 2.2. (If irq were volatile or its evaluation had side effects, this would be different, but in the provided code it is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified irq code that contains useful probe functions that print useful logs to a file \"/tmp/logs/722.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of irq as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of irq:\n```c\nstatic int irq(void)\n{\n\tint rc = 0;\n\tchar *err_msg=\"\";\n\tenum metal_log_level mll= metal_get_log_level();\n\tint i, tst_irq[2];\n\n\t/* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n\tmetal_set_log_level(METAL_LOG_CRITICAL);\n\n\tfor (i = 0; i < 2; i++) {\n\t\t/* we only want to test the lib API, so create 'virtual' IRQs */\n\t\ttst_irq[i] = eventfd(0,0);\n\t\tmetal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n\t\t\t  __func__, i, tst_irq[i]);\n\t}\n\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\trc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 1 fail drv_id 1\\n\";\n\t\tgoto out;\n\t}\n\n\tmetal_irq_unregister(tst_irq[0]);\n\trc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n\tif (rc) {\n\t\terr_msg = \"register irq 0 after unregistering failed\\n\";\n\t\tgoto out;\n\t}\n\tmetal_irq_unregister(tst_irq[0]);\n\tmetal_irq_unregister(tst_irq[1]);\n\nout:\n\tfor (i = 0; i < 2; i++) {\n\t\tclose(tst_irq[i]);\n\t}\n\tmetal_set_log_level(mll);\n\tif ((err_msg[0] != '\\0') && (!rc))\n\t\trc = -EINVAL;\n\tif (rc) metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n\treturn rc;\n}\n```\n</target_code>\nPlease provide the modified irq code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/eventfd.h>\n#include <errno.h>\n#include <string.h>\n\n/* Minimal declarations for external API used by irq() so this TU is\n   compilable. Implementations are expected to be provided at link time. */\nenum metal_log_level { METAL_LOG_CRITICAL = 0, METAL_LOG_ERROR = 1, METAL_LOG_DEBUG = 2 };\n\nextern enum metal_log_level metal_get_log_level(void);\nextern void metal_set_log_level(enum metal_log_level lvl);\nextern void metal_log(enum metal_log_level lvl, const char *fmt, ...);\nextern int metal_irq_register(int fd, void (*handler)(int, void *), void *param);\nextern void metal_irq_unregister(int fd);\nextern void irq_handler(int, void *);\n\n/* Probe logger: append human-readable trace information to the test log\n   file. This preserves the original irq() semantics while capturing the\n   control flow and state so other agents can reproduce and reason about\n   the reported violation scenario. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/722.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging cannot be performed, do not change behaviour. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int irq(void)\n{\n    int rc = 0;\n    char *err_msg = \"\";\n    enum metal_log_level mll = metal_get_log_level();\n    int i, tst_irq[2];\n\n    probe_log(\"irq(): entry, previous_log_level=%d\", (int)mll);\n\n    /* Do not show LOG_ERROR or LOG_DEBUG for expected fail case */\n    metal_set_log_level(METAL_LOG_CRITICAL);\n    probe_log(\"irq(): set log level to METAL_LOG_CRITICAL\");\n\n    for (i = 0; i < 2; i++) {\n        /* we only want to test the lib API, so create 'virtual' IRQs */\n        tst_irq[i] = eventfd(0, 0);\n        probe_log(\"irq(): created virtual irq index=%d fd=%d\", i, tst_irq[i]);\n        metal_log(METAL_LOG_DEBUG, \"%s: irq %d associated with fd %d\\n\",\n                  __func__, i, tst_irq[i]);\n    }\n\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"irq(): register irq 0 returned rc=%d\", rc);\n    if (rc) {\n        err_msg = \"register irq 0 fail drv_id 1\\n\";\n        probe_log(\"irq(): error -> %s\", err_msg);\n        goto out;\n    }\n    rc = metal_irq_register(tst_irq[1], irq_handler, (void *)1);\n    probe_log(\"irq(): register irq 1 returned rc=%d\", rc);\n    if (rc) {\n        err_msg = \"register irq 1 fail drv_id 1\\n\";\n        probe_log(\"irq(): error -> %s\", err_msg);\n        goto out;\n    }\n\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"irq(): unregistered irq 0 (fd=%d)\", tst_irq[0]);\n    rc = metal_irq_register(tst_irq[0], irq_handler, (void *)1);\n    probe_log(\"irq(): register irq 0 after unregister returned rc=%d\", rc);\n    if (rc) {\n        err_msg = \"register irq 0 after unregistering failed\\n\";\n        probe_log(\"irq(): error -> %s\", err_msg);\n        goto out;\n    }\n    metal_irq_unregister(tst_irq[0]);\n    probe_log(\"irq(): unregistered irq 0 (fd=%d) second time\", tst_irq[0]);\n    metal_irq_unregister(tst_irq[1]);\n    probe_log(\"irq(): unregistered irq 1 (fd=%d)\", tst_irq[1]);\n\nout:\n    probe_log(\"irq(): cleanup start\");\n    for (i = 0; i < 2; i++) {\n        probe_log(\"irq(): closing fd index=%d fd=%d\", i, tst_irq[i]);\n        close(tst_irq[i]);\n    }\n    metal_set_log_level(mll);\n    probe_log(\"irq(): restored previous_log_level=%d\", (int)mll);\n    if ((err_msg[0] != '\\0') && (!rc))\n        rc = -EINVAL;\n    if (rc) {\n        metal_log(METAL_LOG_ERROR, \"%s\", err_msg);\n        probe_log(\"irq(): final rc=%d err_msg=%s\", rc, err_msg);\n    } else {\n        probe_log(\"irq(): final rc=%d no error\", rc);\n    }\n    probe_log(\"irq(): exit\");\n    return rc;\n}\n"
}