{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement '(void)irq;' is a no-op used solely to suppress an \"unused parameter\" warning. It is executed but has no observable effect; removing it would not change program behaviour. Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_irq_ack code that contains useful probe functions that print useful logs to a file \"/tmp/logs/412.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_irq_ack as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_irq_ack:\n```c\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t int irq)\n{\n\t(void)lbus;\n\t(void)irq;\n\tint irq_info = 1;\n\tunsigned int val;\n\tint ret;\n\n\tret = read(ldev->fd, (void *)&val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, ret);\n\t\treturn;\n\t}\n\tret = write(ldev->fd, &irq_info, sizeof(irq_info));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, errno);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_irq_ack code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe helper: append formatted diagnostics to /tmp/logs/412.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/412.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 int irq)\n{\n    /* original suppression of unused-parameter warnings (kept as-is)\n     * The presence and execution of these statements is what the\n     * violation report concerns; we log shortly after to show they\n     * were reached at runtime. */\n    (void)lbus;\n    (void)irq;\n\n    probe_log(\"ENTER %s: reached suppression statements '(void)lbus' and '(void)irq'. ldev=%p, fd=%d\\n\",\n              __func__, (void *)ldev, ldev ? ldev->fd : -1);\n\n    int irq_info = 1;\n    unsigned int val;\n    int ret;\n\n    probe_log(\"%s: about to read from uio fd=%d\\n\", __func__, ldev->fd);\n    ret = read(ldev->fd, (void *)&val, sizeof(val));\n    probe_log(\"%s: read returned ret=%d, errno=%d\\n\", __func__, ret, errno);\n    if (ret >= 0) {\n        probe_log(\"%s: read value val=%u\\n\", __func__, val);\n    }\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, ret);\n        probe_log(\"%s: read failed, returning early.\\n\", __func__);\n        return;\n    }\n\n    probe_log(\"%s: about to write irq_info=%d to fd=%d\\n\", __func__, irq_info, ldev->fd);\n    ret = write(ldev->fd, &irq_info, sizeof(irq_info));\n    probe_log(\"%s: write returned ret=%d, errno=%d\\n\", __func__, ret, errno);\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, errno);\n        probe_log(\"%s: write failed.\\n\", __func__);\n    }\n}\n"
}