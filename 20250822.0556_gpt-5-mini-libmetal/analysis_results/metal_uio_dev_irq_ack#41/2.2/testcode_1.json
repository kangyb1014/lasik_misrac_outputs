{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void)lbus;' is a no-op used to silence an unused-parameter warning. It has no side effects and removing it does not change program behaviour, so it constitutes dead code in the sense of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_irq_ack code that contains useful probe functions that print useful logs to a file \"/tmp/logs/412.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_irq_ack as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_irq_ack:\n```c\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t int irq)\n{\n\t(void)lbus;\n\t(void)irq;\n\tint irq_info = 1;\n\tunsigned int val;\n\tint ret;\n\n\tret = read(ldev->fd, (void *)&val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, ret);\n\t\treturn;\n\t}\n\tret = write(ldev->fd, &irq_info, sizeof(irq_info));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, errno);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_irq_ack code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe helper: append structured logs to /tmp/logs/412.txt. */\nstatic void metal_uio_dev_irq_ack_probe(const char *phase,\n                                       const char *caller,\n                                       struct linux_bus *lbus,\n                                       struct linux_device *ldev,\n                                       int irq,\n                                       int ret,\n                                       unsigned int val)\n{\n    FILE *fp = fopen(\"/tmp/logs/412.txt\", \"a\");\n    if (!fp) {\n        /* If logging fails, do not change behaviour of function. */\n        return;\n    }\n\n    fprintf(fp, \"[%s] caller=%s phase=%s lbus=%p ldev=%p \", __TIME__, caller, phase, (void *)lbus, (void *)ldev);\n    if (ldev) {\n        fprintf(fp, \"ldev->fd=%d \", ldev->fd);\n    } else {\n        fprintf(fp, \"ldev->fd=(null) \");\n    }\n    fprintf(fp, \"irq=%d ret=%d val=%u\\n\", irq, ret, val);\n    fclose(fp);\n}\n\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n                                 struct linux_device *ldev,\n                                 int irq)\n{\n    /* Keep the original no-op casts to preserve original source shape. */\n    (void)lbus;\n    (void)irq;\n\n    /* Log that we reached the location immediately after the no-op casts.\n       This helps show the control path that includes the (void) statements. */\n    metal_uio_dev_irq_ack_probe(\"after_noop_casts\", \"metal_uio_dev_irq_ack\",\n                                lbus, ldev, irq, 0, 0u);\n\n    int irq_info = 1;\n    unsigned int val = 0;\n    int ret;\n\n    metal_uio_dev_irq_ack_probe(\"before_read\", \"metal_uio_dev_irq_ack\",\n                                lbus, ldev, irq, 0, 0u);\n\n    ret = read(ldev->fd, (void *)&val, sizeof(val));\n    metal_uio_dev_irq_ack_probe(\"after_read\", \"metal_uio_dev_irq_ack\",\n                                lbus, ldev, irq, ret, val);\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, ret);\n        metal_uio_dev_irq_ack_probe(\"read_failed\", \"metal_uio_dev_irq_ack\",\n                                    lbus, ldev, irq, ret, val);\n        return;\n    }\n    metal_uio_dev_irq_ack_probe(\"before_write\", \"metal_uio_dev_irq_ack\",\n                                lbus, ldev, irq, 0, val);\n\n    ret = write(ldev->fd, &irq_info, sizeof(irq_info));\n    metal_uio_dev_irq_ack_probe(\"after_write\", \"metal_uio_dev_irq_ack\",\n                                lbus, ldev, irq, ret, val);\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, errno);\n        metal_uio_dev_irq_ack_probe(\"write_failed\", \"metal_uio_dev_irq_ack\",\n                                    lbus, ldev, irq, ret, val);\n    }\n}\n"
}