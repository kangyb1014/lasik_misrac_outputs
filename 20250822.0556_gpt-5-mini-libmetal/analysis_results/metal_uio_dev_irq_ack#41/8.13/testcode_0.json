{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe address of irq_info (a non-const local: int irq_info = 1) is passed to write(), which takes a const void *; irq_info is not const although it is only used as read-only here. Per MISRA C 2023 Rule 8.13, the pointed-to object should be const-qualified when possible. Declare irq_info as const (e.g. const int irq_info = 1) to resolve the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_irq_ack code that contains useful probe functions that print useful logs to a file \"/tmp/logs/413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_irq_ack as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_irq_ack:\n```c\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t int irq)\n{\n\t(void)lbus;\n\t(void)irq;\n\tint irq_info = 1;\n\tunsigned int val;\n\tint ret;\n\n\tret = read(ldev->fd, (void *)&val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, ret);\n\t\treturn;\n\t}\n\tret = write(ldev->fd, &irq_info, sizeof(irq_info));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n\t\t\t\t\t\t__func__, ldev->fd, errno);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_irq_ack code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <unistd.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/413.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/413.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void metal_uio_dev_irq_ack(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 int irq)\n{\n    (void)lbus;\n    (void)irq;\n    int irq_info = 1;\n    unsigned int val;\n    int ret;\n\n    /* Entry probe: record input pointers and irq */\n    probe_log(\"%s: entry lbus=%p ldev=%p fd=%d irq=%d\\n\",\n              __func__, (void *)lbus, (void *)ldev,\n              (ldev != NULL) ? ldev->fd : -1, irq);\n\n    probe_log(\"%s: initial irq_info value=%d address=%p\\n\",\n              __func__, irq_info, (void *)&irq_info);\n\n    probe_log(\"%s: about to read from fd=%d (sizeof(val)=%zu)\\n\",\n              __func__, (ldev != NULL) ? ldev->fd : -1, sizeof(val));\n\n    ret = read(ldev->fd, (void *)&val, sizeof(val));\n    probe_log(\"%s: read returned ret=%d errno=%d\\n\", __func__, ret, errno);\n    if (ret < 0) {\n        probe_log(\"%s: read failed fd=%d ret=%d errno=%d\\n\",\n                  __func__, ldev->fd, ret, errno);\n        metal_log(METAL_LOG_ERROR, \"%s, read uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, ret);\n        return;\n    }\n\n    probe_log(\"%s: read succeeded fd=%d val=0x%x (%u)\\n\",\n              __func__, ldev->fd, val, val);\n\n    /* Log that the address of a non-const local is about to be passed to write() */\n    probe_log(\"%s: about to write: passing &irq_info=%p (value=%d) to write(fd=%d, size=%zu)\\n\",\n              __func__, (void *)&irq_info, irq_info, ldev->fd, sizeof(irq_info));\n\n    ret = write(ldev->fd, &irq_info, sizeof(irq_info));\n    probe_log(\"%s: write returned ret=%d errno=%d\\n\", __func__, ret, errno);\n    if (ret < 0) {\n        probe_log(\"%s: write failed fd=%d errno=%d\\n\",\n                  __func__, ldev->fd, errno);\n        metal_log(METAL_LOG_ERROR, \"%s, write uio irq fd %d failed: %d.\\n\",\n                        __func__, ldev->fd, errno);\n    } else {\n        probe_log(\"%s: write succeeded fd=%d bytes_written=%d\\n\",\n                  __func__, ldev->fd, ret);\n    }\n}\n"
}