{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function-pointer typedef uses a non-const data pointer: 'typedef int (*metal_irq_handler)(int irq, void *arg)'. Rule 8.13 recommends that pointer targets be const-qualified when modification is not required. If the IRQ handler does not need to modify the object pointed to by arg, this should be 'const void *arg'. As written, the typedef violates 8.13 unless there is a documented need for the handler to modify *arg (i.e. the non-const qualifier is justified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register:\n```c\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\n/* Original typedef preserved (the reported rule-8.13 concern is about this typedef) */\ntypedef int (*metal_irq_handler)(int irq, void *arg);\n\n/* Minimal forward declarations to allow this test code to compile standalone. */\nstruct metal_irq_controller;\nstruct metal_irq {\n    metal_irq_handler hd;\n    void *arg;\n};\n\nstruct metal_irq_controller {\n    int (*irq_register)(struct metal_irq_controller *cntr, int irq,\n                        metal_irq_handler irq_handler, void *arg);\n    struct metal_irq *irqs;\n    int irq_base;\n};\n\n/* Prototype for external function; implementation is provided elsewhere. */\nstruct metal_irq_controller *metal_irq_get_controller(int irq);\n\n/*\n * metal_irq_register with logging probes that append control-flow and\n * state information to /tmp/logs/173.txt. The original logic is preserved.\n */\nint metal_irq_register(int irq,\n                       metal_irq_handler irq_handler,\n                       void *arg)\n{\n    struct metal_irq_controller *cntr;\n    struct metal_irq *irq_data;\n    FILE *log = fopen(\"/tmp/logs/173.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"ENTER: metal_irq_register(irq=%d, irq_handler=%p, arg=%p)\\n\",\n                irq, (void *)irq_handler, arg);\n    }\n\n    cntr = metal_irq_get_controller(irq);\n    if (log) {\n        fprintf(log, \"metal_irq_get_controller returned %p\\n\", (void *)cntr);\n    }\n\n    if (cntr == NULL) {\n        if (log) {\n            fprintf(log, \"EXIT: controller == NULL -> return %d\\n\", -EINVAL);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (cntr->irq_register != NULL) {\n        int ret;\n        if (log) {\n            fprintf(log, \"controller provides irq_register=%p -> delegating\\n\",\n                    (void *)cntr->irq_register);\n            fflush(log);\n        }\n\n        /* preserve original behavior: delegate to controller's irq_register */\n        ret = cntr->irq_register(cntr, irq, irq_handler, arg);\n\n        if (log) {\n            fprintf(log, \"controller irq_register returned %d\\n\", ret);\n            fprintf(log, \"EXIT: delegating path -> return %d\\n\", ret);\n            fclose(log);\n        }\n        return ret;\n    }\n\n    if (cntr->irqs == NULL) {\n        if (log) {\n            fprintf(log, \"controller->irqs == NULL -> return %d\\n\", -EINVAL);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* compute index and get irq_data; log related state */\n    {\n        int index = irq - cntr->irq_base;\n        irq_data = &cntr->irqs[index];\n        if (log) {\n            fprintf(log, \"Computed index = %d (irq=%d, irq_base=%d)\\n\",\n                    index, irq, cntr->irq_base);\n            fprintf(log, \"irq_data = %p, irq_data->hd (before) = %p, irq_data->arg (before) = %p\\n\",\n                    (void *)irq_data, (void *)irq_data->hd, irq_data->arg);\n        }\n    }\n\n    irq_data->hd = irq_handler;\n    irq_data->arg = arg;\n\n    if (log) {\n        fprintf(log, \"Assigned irq_data->hd = %p, irq_data->arg = %p\\n\",\n                (void *)irq_handler, arg);\n        fprintf(log, \"EXIT: success -> return 0\\n\");\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}