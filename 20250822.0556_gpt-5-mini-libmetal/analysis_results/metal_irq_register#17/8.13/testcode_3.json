{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'arg' is declared as void * and is assigned to irq_data->arg without const qualification. If irq_data->arg is (or should be) a non-modifiable argument, the pointer types lack const qualification. This violates MISRA C 2023 Rule 8.13 because the pointer(s) should be declared to point to const-qualified types whenever possible. Example concrete violation scenario: both 'void *arg' and 'irq_data->arg' are of type void * (non-const); they should be 'const void *' to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_register:\n```c\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/173.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_irq_register(int irq,\n               metal_irq_handler irq_handler,\n               void *arg)\n{\n    struct metal_irq_controller *cntr;\n    struct metal_irq *irq_data;\n\n    probe_log(\"metal_irq_register entry: irq=%d, irq_handler=%s, arg=%p\",\n              irq,\n              (irq_handler != NULL) ? \"non-NULL\" : \"NULL\",\n              arg);\n\n    cntr = metal_irq_get_controller(irq);\n    if (cntr == NULL) {\n        probe_log(\"no controller found for irq=%d; returning -EINVAL\", irq);\n        return -EINVAL;\n    }\n    probe_log(\"controller found: cntr=%p, irq_base=%d\", (void *)cntr, cntr->irq_base);\n\n    if (cntr->irq_register != NULL) {\n        probe_log(\"controller provides custom irq_register; calling it with irq=%d, arg=%p\",\n                  irq, arg);\n        int ret = cntr->irq_register(cntr, irq, irq_handler, arg);\n        probe_log(\"custom irq_register returned %d\", ret);\n        return ret;\n    }\n    if (cntr->irqs == NULL) {\n        probe_log(\"controller irqs array is NULL; returning -EINVAL\");\n        return -EINVAL;\n    }\n    irq_data = &cntr->irqs[irq - cntr->irq_base];\n    probe_log(\"irq_data located at %p for irq=%d index=%d\",\n              (void *)irq_data, irq, irq - cntr->irq_base);\n\n    irq_data->hd = irq_handler;\n    probe_log(\"assigned irq_data->hd = %s\", (irq_handler != NULL) ? \"non-NULL\" : \"NULL\");\n\n    /* Probe the assignment that relates to the reported MISRA 8.13 issue */\n    irq_data->arg = arg;\n    probe_log(\"assigned irq_data->arg = %p (arg pointer assigned to irq_data->arg)\", arg);\n\n    probe_log(\"metal_irq_register exit: success\");\n    return 0;\n}\n"
}