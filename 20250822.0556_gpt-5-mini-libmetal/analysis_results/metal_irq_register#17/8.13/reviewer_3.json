{
  "user_message": "An agent A claimed that the following metal_irq_register code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_irq_register.\n```c\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'arg' is declared as void * and is assigned to irq_data->arg without const qualification. If irq_data->arg is (or should be) a non-modifiable argument, the pointer types lack const qualification. This violates MISRA C 2023 Rule 8.13 because the pointer(s) should be declared to point to const-qualified types whenever possible. Example concrete violation scenario: both 'void *arg' and 'irq_data->arg' are of type void * (non-const); they should be 'const void *' to comply.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nmetal_irq_register entry: irq=6, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076400 for irq=6 index=6\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=7, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076410 for irq=7 index=7\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076400 for irq=6 index=6\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076400 for irq=6 index=6\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076400 for irq=6 index=6\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=7, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x7f6014051cc0, irq_base=0\nirq_data located at 0x7f6014076410 for irq=7 index=7\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bc0 for irq=6 index=6\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=7, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bd0 for irq=7 index=7\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bc0 for irq=6 index=6\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=non-NULL, arg=0x1\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bc0 for irq=6 index=6\nassigned irq_data->hd = non-NULL\nassigned irq_data->arg = 0x1 (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=6, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bc0 for irq=6 index=6\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\nmetal_irq_register entry: irq=7, irq_handler=NULL, arg=(nil)\ncontroller found: cntr=0x561f9a3c14e0, irq_base=0\nirq_data located at 0x561f9a3e9bd0 for irq=7 index=7\nassigned irq_data->hd = NULL\nassigned irq_data->arg = (nil) (arg pointer assigned to irq_data->arg)\nmetal_irq_register exit: success\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_irq_register:\ntypedef int (*metal_irq_handler) (int irq, void *arg)\n...\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 R8.13 encourages use of const for pointer targets when it is possible to do so without breaking intended behavior. In this code the parameter arg is a void * and is stored into irq_data->arg and ultimately passed to the interrupt handler type metal_irq_handler, which is declared as typedef int (*metal_irq_handler)(int irq, void *arg). Because the handler API expects a non-const void * (i.e. the pointed-to object is considered potentially modifiable by the handler), changing arg / irq_data->arg to point to a const-qualified type would be incompatible with the handler type (or require casts). Therefore the pointer cannot be made const \u201cwhenever possible\u201d in this context without wider API changes. The current code performs a plain void * assignment (no qualifier mismatch) and so does not violate R8.13 as presented. If the intent were that handlers must not modify the argument, the correct fix would be to change the handler typedef and all call sites to use const void *, but that is an API change, not a local MISRA violation in this function."
}