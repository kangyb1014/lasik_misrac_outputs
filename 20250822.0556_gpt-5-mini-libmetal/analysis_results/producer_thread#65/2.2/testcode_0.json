{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)arg;' in producer_thread is an evaluated expression used only to suppress an unused-parameter warning. It has no side effects (arg is a plain void * parameter) and removing it would not change program behaviour, so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. (If 'arg' were declared volatile, the read could have side effects, but in the provided code it is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified producer_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/652.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of producer_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of producer_thread:\n```c\nstatic void *producer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (counter == COUNTER_MAX)\n\t\tmetal_condition_wait(&nfull_condv, &lock);\n\tcounter++;\n\tmetal_condition_signal(&nempty_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified producer_thread code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a small log entry to /tmp/logs/652.txt. */\nstatic void log_probe(const char *msg, void *arg)\n{\n    FILE *f = fopen(\"/tmp/logs/652.txt\", \"a\");\n    if (f != NULL) {\n        /* Print message and the raw pointer value to help demonstrate\n         * that 'arg' is a plain void * with no side effects when read.\n         */\n        fprintf(f, \"%s; arg=%p\\n\", msg, arg);\n        fclose(f);\n    }\n}\n\nstatic void *producer_thread(void *arg)\n{\n\t/* Original suppression of unused-parameter warning retained. */\n\t(void)arg;\n\t/* Log that the (void)arg; statement is present and that we entered. */\n\tlog_probe(\"producer_thread: entry (void)arg evaluated)\", arg);\n\n\tlog_probe(\"producer_thread: attempting to acquire lock\", arg);\n\tmetal_mutex_acquire(&lock);\n\tlog_probe(\"producer_thread: lock acquired\", arg);\n\n\twhile (counter == COUNTER_MAX) {\n\t\tlog_probe(\"producer_thread: counter == COUNTER_MAX, waiting on nfull_condv\", arg);\n\t\tmetal_condition_wait(&nfull_condv, &lock);\n\t\tlog_probe(\"producer_thread: awakened from nfull_condv wait\", arg);\n\t}\n\n\tcounter++;\n\tlog_probe(\"producer_thread: counter incremented\", arg);\n\n\tmetal_condition_signal(&nempty_condv);\n\tlog_probe(\"producer_thread: nempty_condv signaled\", arg);\n\n\tmetal_mutex_release(&lock);\n\tlog_probe(\"producer_thread: lock released\", arg);\n\n\treturn NULL;\n}\n"
}