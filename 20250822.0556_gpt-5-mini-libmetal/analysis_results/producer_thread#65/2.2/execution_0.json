{
  "result": "success",
  "message": "producer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: entry (void)arg evaluated); arg=(nil)\nproducer_thread: counter incremented; arg=(nil)\nproducer_thread: attempting to acquire lock; arg=(nil)\nproducer_thread: nempty_condv signaled; arg=(nil)\nproducer_thread: lock released; arg=(nil)\nproducer_thread: lock acquired; arg=(nil)\nproducer_thread: counter incremented; "
}