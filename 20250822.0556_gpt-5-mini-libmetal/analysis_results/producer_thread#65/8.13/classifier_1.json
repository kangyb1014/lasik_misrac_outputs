{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of producer_thread:\n```c\nstatic void *producer_thread(void *arg)\n{\n\t(void)arg;\n\tmetal_mutex_acquire(&lock);\n\twhile (counter == COUNTER_MAX)\n\t\tmetal_condition_wait(&nfull_condv, &lock);\n\tcounter++;\n\tmetal_condition_signal(&nempty_condv);\n\tmetal_mutex_release(&lock);\n\n\treturn NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void)arg;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 in this code the cast \u201c(void)arg;\u201d merely suppresses an unused-parameter warning. The parameter has the signature required by typical thread APIs (void *(*)(void *)), so it cannot be made const; therefore Rule 8.13 is not violated here. (A true violation would be an internal function not constrained by an external API that takes a pointer it does not modify but is declared without const, e.g. static void f(void *p) { (void)p; } should be static void f(const void *p) { (void)p; }.)"
}