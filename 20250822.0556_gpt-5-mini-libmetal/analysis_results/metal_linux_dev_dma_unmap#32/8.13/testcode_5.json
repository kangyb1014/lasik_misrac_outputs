{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member pointers ldrv, sdev and override are stored as non-const pointer types although they appear to be used as read-only references (e.g. ldev->ldrv is only dereferenced to call driver callbacks such as dev_dma_unmap and points into the linux_bus->drivers array). These members could and should be declared to point to const-qualified types (const struct linux_driver *ldrv, const struct sysfs_device *sdev, const struct sysfs_attribute *override) so that the intent of non-modification is enforced.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_unmap:\n```c\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t      struct metal_device *device,\n\t\t\t\t      uint32_t dir,\n\t\t\t\t      struct metal_sg *sg,\n\t\t\t\t      int nents)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n\t\t\t\t       nents);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper that appends logs describing control flow and key state\n * to /tmp/logs/323.txt. The helper tries to ensure the directory exists\n * but otherwise preserves program behavior (it does not alter the main\n * logic of metal_linux_dev_dma_unmap).\n */\nstatic void metal_log_dev_dma_unmap_probe(const char *event,\n                                          struct linux_bus *lbus,\n                                          struct linux_device *ldev,\n                                          int has_dev_dma_unmap,\n                                          uint32_t dir,\n                                          struct metal_sg *sg,\n                                          int nents)\n{\n    /* Try to ensure the directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Log pointer values and simple state information. Avoid converting\n     * function pointers to data pointers; instead log presence (non-NULL)\n     * of the callback to demonstrate read-only usage intent.\n     */\n    fprintf(f, \"%s: lbus=%p ldev=%p ldev->ldrv=%p dev_dma_unmap_present=%d dir=%u sg=%p nents=%d\\n\",\n            event,\n            (void *)lbus,\n            (void *)ldev,\n            (void *)(ldev ? (void *)ldev->ldrv : NULL),\n            has_dev_dma_unmap,\n            (unsigned)dir,\n            (void *)sg,\n            nents);\n\n    fclose(f);\n}\n\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n                                      struct metal_device *device,\n                                      uint32_t dir,\n                                      struct metal_sg *sg,\n                                      int nents)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Probe: entry with current pointers/state */\n    metal_log_dev_dma_unmap_probe(\"enter\", lbus, ldev, 0, dir, sg, nents);\n\n    /* Determine whether the dev_dma_unmap callback is present (non-NULL).\n     * This only observes the presence and does not change behavior.\n     */\n    int has_dev_dma_unmap = 0;\n    if (ldev && ldev->ldrv && ldev->ldrv->dev_dma_unmap)\n        has_dev_dma_unmap = 1;\n\n    metal_log_dev_dma_unmap_probe(\"before_call\", lbus, ldev, has_dev_dma_unmap, dir, sg, nents);\n\n    /* Preserve original behavior: call the driver callback as before. */\n    ldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg, nents);\n\n    metal_log_dev_dma_unmap_probe(\"after_call\", lbus, ldev, has_dev_dma_unmap, dir, sg, nents);\n}\n"
}