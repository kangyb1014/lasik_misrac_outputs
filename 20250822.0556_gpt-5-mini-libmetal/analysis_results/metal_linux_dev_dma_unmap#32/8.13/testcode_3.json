{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe helper function to_linux_bus takes a non-const pointer (struct metal_bus *bus) and returns a non-const struct linux_bus *. The function body only computes the container pointer and does not modify the object pointed to by bus, so the input pointer could be const-qualified (and the returned pointer could be a pointer-to-const). Therefore the pointer types are not as const-qualified as possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_unmap:\n```c\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t      struct metal_device *device,\n\t\t\t\t      uint32_t dir,\n\t\t\t\t      struct metal_sg *sg,\n\t\t\t\t      int nents)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n\t\t\t\t       nents);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append logs to /tmp/logs/323.txt to capture control flow and state. */\nstatic void __attribute__((unused)) probe_metal_linux_dev_dma_unmap(const struct metal_bus *bus,\n                                                                    const struct metal_device *device,\n                                                                    uint32_t dir,\n                                                                    const struct metal_sg *sg,\n                                                                    int nents,\n                                                                    const struct linux_device *ldev,\n                                                                    const struct linux_bus *lbus,\n                                                                    const char *phase)\n{\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_linux_dev_dma_unmap] phase=%s\\n\", phase);\n    fprintf(f, \"  bus=%p device=%p dir=%u sg=%p nents=%d\\n\",\n            (void *)bus, (void *)device, dir, (void *)sg, nents);\n    fprintf(f, \"  ldev=%p lbus=%p\\n\", (void *)ldev, (void *)lbus);\n\n    if (ldev) {\n        /* ldrv may be an opaque pointer type; only log presence to avoid unsafe casts */\n        fprintf(f, \"  ldev->ldrv=%p\\n\", (void *)ldev->ldrv);\n        if (ldev->ldrv) {\n            /* Log whether the function pointer is present */\n            fprintf(f, \"  ldev->ldrv->dev_dma_unmap is %s\\n\",\n                    ldev->ldrv->dev_dma_unmap ? \"present\" : \"NULL\");\n        }\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n                                      struct metal_device *device,\n                                      uint32_t dir,\n                                      struct metal_sg *sg,\n                                      int nents)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Log entry state before calling the driver's unmap function */\n    probe_metal_linux_dev_dma_unmap(bus, device, dir, sg, nents, ldev, lbus, \"before_call\");\n\n    /* Preserve original logic */\n    ldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg, nents);\n\n    /* Log exit state after the call to capture control flow and any state changes */\n    probe_metal_linux_dev_dma_unmap(bus, device, dir, sg, nents, ldev, lbus, \"after_call\");\n}\n"
}