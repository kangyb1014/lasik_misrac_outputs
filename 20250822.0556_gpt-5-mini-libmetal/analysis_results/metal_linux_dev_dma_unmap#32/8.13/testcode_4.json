{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function pointer dev_dma_map declares an input scatter-gather parameter as 'struct metal_sg *sg_in'. Because the parameter name indicates input-only, it should be declared as 'const struct metal_sg *sg_in' (and similarly other pointers that are not modified by the callee, e.g. sdrv or dev_dma_unmap's sg if unmodified). Leaving sg_in non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_unmap:\n```c\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n\t\t\t\t      struct metal_device *device,\n\t\t\t\t      uint32_t dir,\n\t\t\t\t      struct metal_sg *sg,\n\t\t\t\t      int nents)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\tldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n\t\t\t\t       nents);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void metal_linux_dev_dma_unmap(struct metal_bus *bus,\n                      struct metal_device *device,\n                      uint32_t dir,\n                      struct metal_sg *sg,\n                      int nents)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Probe: log entry state and control flow to /tmp/logs/323.txt */\n    {\n        FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n        if (f != NULL) {\n            /* Log pointers and integer parameters. Avoid dereferencing sg. */\n            fprintf(f, \"ENTRY: metal_linux_dev_dma_unmap\\n\");\n            fprintf(f, \"  bus=%p, device=%p, ldev=%p, lbus=%p\\n\",\n                    (void *)bus, (void *)device, (void *)ldev, (void *)lbus);\n            fprintf(f, \"  dir=%u, sg=%p, nents=%d\\n\",\n                    (unsigned)dir, (void *)sg, nents);\n            if (ldev != NULL) {\n                /* log driver pointer if available */\n                fprintf(f, \"  ldev->ldrv=%p\\n\", (void *)ldev->ldrv);\n            }\n            fprintf(f, \"  action: calling ldev->ldrv->dev_dma_unmap\\n\");\n            fclose(f);\n        }\n    }\n\n    /* Preserve original behavior */\n    ldev->ldrv->dev_dma_unmap(lbus, ldev, dir, sg,\n                   nents);\n\n    /* Probe: log return from call */\n    {\n        FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"EXIT: metal_linux_dev_dma_unmap completed for device=%p\\n\",\n                    (void *)device);\n            fclose(f);\n        }\n    }\n}\n"
}