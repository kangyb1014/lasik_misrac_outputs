{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer dev->bus->ops.dev_dma_unmap is (or can be) set to point to metal_dma_unmap, the call dev->bus->ops.dev_dma_unmap(...) is an indirect call back to the same function. That produces an indirect self-call (metal_dma_unmap -> dev->bus->ops.dev_dma_unmap -> metal_dma_unmap) and thus violates MISRA C 2023 Rule 17.2 (risk of unbounded recursion/stack overflow).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_dma_unmap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/16.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_dma_unmap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_dma_unmap:\n```c\nvoid metal_dma_unmap(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg,\n\t\t  int nents)\n{\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/*If it is device write or r/w, apply memory r/w fence */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\n\tif (!dev || !dev->bus->ops.dev_dma_unmap || !sg)\n\t\treturn;\n\tdev->bus->ops.dev_dma_unmap(dev->bus,\n\t\t\tdev, dir, sg, nents);\n}\n```\n</target_code>\nPlease provide the modified metal_dma_unmap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probes and logging to help reproduce an indirect self-call scenario.\n * Logs appended to /tmp/logs/16.txt. The original logic of metal_dma_unmap\n * is preserved.\n */\n\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void probe_log_entry(const char *stage,\n                            struct metal_device *dev,\n                            uint32_t dir,\n                            struct metal_sg *sg,\n                            int nents,\n                            void *fp_addr,\n                            int depth)\n{\n    FILE *f = NULL;\n    time_t t = time(NULL);\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/16.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[%ld] %s: depth=%d, stage=%s\\n\", (long)t, __FUNCTION__, depth, stage);\n    fprintf(f, \"    dev=%p, dev->bus=%p, sg=%p, nents=%d, dir=%u\\n\",\n            (void *)dev,\n            dev ? (void *)dev->bus : (void *)0,\n            (void *)sg,\n            nents, (unsigned)dir);\n    fprintf(f, \"    ops.dev_dma_unmap (addr) = %p, caller metal_dma_unmap (addr) = %p\\n\",\n            fp_addr, (void *)metal_dma_unmap);\n\n    /* Attempt to detect if the function pointer equals this function. */\n    if (fp_addr == (void *)metal_dma_unmap) {\n        fprintf(f, \"    NOTE: dev->bus->ops.dev_dma_unmap points to metal_dma_unmap --> potential indirect self-call (recursing).\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nvoid metal_dma_unmap(struct metal_device *dev,\n          uint32_t dir,\n          struct metal_sg *sg,\n          int nents)\n{\n    /* memory barrier */\n    if (dir == METAL_DMA_DEV_R)\n        /* If it is device read, apply memory write fence. */\n        atomic_thread_fence(memory_order_release);\n    else\n        /*If it is device write or r/w, apply memory r/w fence */\n        atomic_thread_fence(memory_order_acq_rel);\n\n    /* Quick log: entering and parameters */\n    {\n        /* Track recursive depth to help observe unbounded recursion. */\n        static int recursion_depth = 0;\n        void *fp_addr = NULL;\n\n        /* If dev or bus may be NULL, log that fact safely. */\n        if (dev && dev->bus && dev->bus->ops.dev_dma_unmap)\n            fp_addr = (void *)dev->bus->ops.dev_dma_unmap;\n\n        recursion_depth++;\n        probe_log_entry(\"entry-before-checks\", dev, dir, sg, nents, fp_addr, recursion_depth);\n\n        /* Original null checks unchanged */\n        if (!dev || !dev->bus->ops.dev_dma_unmap || !sg) {\n            probe_log_entry(\"early-return\", dev, dir, sg, nents, fp_addr, recursion_depth);\n            recursion_depth--;\n            return;\n        }\n\n        /* Log right before invoking the function pointer. */\n        probe_log_entry(\"before-indirect-call\", dev, dir, sg, nents, fp_addr, recursion_depth);\n\n        /* Call through function pointer as in original code. This may be an indirect\n         * call back to metal_dma_unmap in the violation scenario. We intentionally\n         * preserve this behavior to reproduce and capture evidence. */\n        dev->bus->ops.dev_dma_unmap(dev->bus,\n                                    dev, dir, sg, nents);\n\n        /* After return from the indirect call. If the call was indirect self-call,\n         * this point may never be reached (stack overflow/abort). */\n        probe_log_entry(\"after-indirect-call\", dev, dir, sg, nents, fp_addr, recursion_depth);\n\n        recursion_depth--;\n    }\n}\n"
}