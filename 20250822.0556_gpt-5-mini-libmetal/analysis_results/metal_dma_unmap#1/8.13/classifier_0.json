{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_dma_unmap:\n```c\nvoid metal_dma_unmap(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg,\n\t\t  int nents)\n{\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/*If it is device write or r/w, apply memory r/w fence */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\n\tif (!dev || !dev->bus->ops.dev_dma_unmap || !sg)\n\t\treturn;\n\tdev->bus->ops.dev_dma_unmap(dev->bus,\n\t\t\tdev, dir, sg, nents);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndev->bus->ops.dev_dma_unmap(dev->bus,\n\t\t\t\tdev, dir, sg, nents);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The call site alone does not show a violation \u2014 the rule applies to declarations (the function-pointer type and the callee) not to the call. A violation would exist if dev->bus->ops.dev_dma_unmap is declared to take non-const pointers (for example: void (*dev_dma_unmap)(struct metal_bus *bus, struct metal_device *dev, uint32_t dir, struct metal_sg *sg, int nents)) but the implementation does not modify the pointed-to objects. In that case the parameters (e.g. struct metal_sg *sg, struct metal_device *dev, struct metal_bus *bus) should be const-qualified and the current declaration would violate MISRA C 2023 Rule 8.13."
}