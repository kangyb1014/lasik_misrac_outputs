{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-statement violates MISRA C 2023 Rule 14.2. The init clause (i = 0, result = 0) initializes both the loop counter (i) and another object (result). Per the rule the first clause must be empty or an expression that sets/defines the loop counter; it must not initialize other objects. In addition, the loop condition uses result (!result && i < METAL_MAX_DEVICE_REGIONS) while result is assigned to inside the loop body (result = ...), which is not permitted by the well-formedness requirements for the condition. Therefore the for loop is not well-formed and the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/424.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\t/* Open a log file for probes. Use append so multiple runs accumulate evidence. */\n\tFILE *logf = fopen(\"/tmp/logs/424.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTRY: metal_uio_dev_open lbus=%s ldev=%s ldev_ptr=%p\\n\",\n\t\t\tlbus ? lbus->bus_name : \"(null)\",\n\t\t\tldev ? ldev->dev_name : \"(null)\",\n\t\t\t(void *)ldev);\n\t\tfflush(logf);\n\t}\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: sysfs device %s:%s not found\\n\",\n\t\t\t\tlbus->bus_name, ldev->dev_name);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: metal_uio_dev_bind failed result=%d\\n\", result);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path)) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: snprintf path overflow (%d >= %zu)\\n\",\n\t\t\t\tresult, sizeof(path));\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EOVERFLOW;\n\t}\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: failed to scan class path %s\\n\", path);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path)) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"EARLY RETURN: snprintf cls_path overflow (%d >= %zu)\\n\",\n\t\t\t\t\tresult, sizeof(ldev->cls_path));\n\t\t\t\tfflush(logf);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path)) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"EARLY RETURN: snprintf dev_path overflow (%d >= %zu)\\n\",\n\t\t\t\t\tresult, sizeof(ldev->dev_path));\n\t\t\t\tfflush(logf);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: invalid device class path %s\\n\", ldev->cls_path);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: failed to open file %s, timeout.\\n\", ldev->dev_path);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EARLY RETURN: metal_open failed for %s result=%d\\n\",\n\t\t\t\tldev->dev_path, result);\n\t\t\tfflush(logf);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\t/* Log state right before entering the for loop. Note: we must keep the\n\t * original for-loop header intact to preserve the reported violation\n\t * scenario. */\n\tif (logf) {\n\t\tfprintf(logf, \"ABOUT TO ENTER FOR: ldev_fd=%d initial_num_regions=%d\\n\",\n\t\t\tldev->fd, ldev->device.num_regions);\n\t\tfflush(logf);\n\t}\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\t/* Probe at loop entry for each iteration to capture control flow and\n\t\t * state relevant to the MISRA 14.2 violation (multiple objects\n\t\t * initialized in init clause and condition uses an object modified in\n\t\t * the loop body). */\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"FOR ITER START: i=%d result=%d num_regions=%d phys=%p offset=%lu size=%lu\\n\",\n\t\t\t\ti, result, ldev->device.num_regions, (void *)phys, offset, size);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\t/* Preserve original behaviour: only call each helper if result == 0. */\n\t\tif (!result) {\n\t\t\tint tmp = metal_uio_read_map_attr(ldev, i, \"offset\", &offset);\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"CALL: metal_uio_read_map_attr(offset) i=%d returned=%d offset=%lu\\n\",\n\t\t\t\t\ti, tmp, offset);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tresult = tmp;\n\t\t} else if (logf) {\n\t\t\tfprintf(logf, \"SKIP: metal_uio_read_map_attr(offset) because result=%d\\n\", result);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (!result) {\n\t\t\tint tmp = metal_uio_read_map_attr(ldev, i, \"addr\", phys);\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"CALL: metal_uio_read_map_attr(addr) i=%d returned=%d phys=%p *phys=%lu\\n\",\n\t\t\t\t\ti, tmp, (void *)phys, (unsigned long)*phys);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tresult = tmp;\n\t\t} else if (logf) {\n\t\t\tfprintf(logf, \"SKIP: metal_uio_read_map_attr(addr) because result=%d\\n\", result);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (!result) {\n\t\t\tint tmp = metal_uio_read_map_attr(ldev, i, \"size\", &size);\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"CALL: metal_uio_read_map_attr(size) i=%d returned=%d size=%lu\\n\",\n\t\t\t\t\ti, tmp, size);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tresult = tmp;\n\t\t} else if (logf) {\n\t\t\tfprintf(logf, \"SKIP: metal_uio_read_map_attr(size) because result=%d\\n\", result);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (!result) {\n\t\t\tint tmp = metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt);\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"CALL: metal_map i=%d returned=%d virt=%p size=%lu\\n\",\n\t\t\t\t\ti, tmp, virt, size);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t\tresult = tmp;\n\t\t} else if (logf) {\n\t\t\tfprintf(logf, \"SKIP: metal_map because result=%d\\n\", result);\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"REGION ADDED: new_num_regions=%d phys=%p size=%lu virt=%p\\n\",\n\t\t\t\t\tldev->device.num_regions, (void *)phys, size, virt);\n\t\t\t\tfflush(logf);\n\t\t\t}\n\t\t} else if (logf) {\n\t\t\tfprintf(logf, \"MAP FAILED: i=%d result=%d - stop adding regions\\n\", i, result);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"FOR DONE: final i=%d result=%d num_regions=%d\\n\",\n\t\t\ti, result, ldev->device.num_regions);\n\t\tfflush(logf);\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT: metal_uio_dev_open returning 0 final_num_regions=%d fd=%d\\n\",\n\t\t\tldev->device.num_regions, ldev->fd);\n\t\tfflush(logf);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}