{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses 'result' both in the second clause and modifies it in the loop body. The second clause is '!result && i < METAL_MAX_DEVICE_REGIONS' which uses the object 'result' that is subsequently modified inside the loop (assignments like 'result = (result ? result : metal_uio_read_map_attr(...))'). Clause 2 of MISRA C 2023 Rule 14.2 forbids using objects in the loop condition that are modified in the loop body unless they are a single identifier loop control flag of Boolean type; here 'result' is an int, not a single Boolean identifier in the condition, so the for loop is not well-formed under Rule 14.2. Additionally, the first clause initializes a non-loop variable ('result = 0') alongside the loop counter ('i = 0'), which is also contrary to the intent of the first-clause restriction.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/424.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static void probe_log_msg(const char *msg, const char *a, const char *b)\n{\n    FILE *f = fopen(\"/tmp/logs/424.txt\", \"a\");\n    if (f) {\n        if (a && b)\n            fprintf(f, \"%s %s %s\\n\", msg, a, b);\n        else if (a)\n            fprintf(f, \"%s %s\\n\", msg, a);\n        else\n            fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_state(const char *tag, int i, int result, unsigned long phys_val,\n                            unsigned long offset, unsigned long size, void *virt, int num_regions)\n{\n    FILE *f = fopen(\"/tmp/logs/424.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: i=%d result=%d num_regions=%d phys_val=%lu offset=%lu size=%lu virt=%p\\n\",\n                tag, i, result, num_regions, phys_val, offset, size, virt);\n        fclose(f);\n    }\n}\n\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n    char *instance, path[SYSFS_PATH_MAX];\n    struct linux_driver *ldrv = ldev->ldrv;\n    unsigned long *phys, offset = 0, size = 0;\n    struct metal_io_region *io;\n    struct dlist *dlist;\n    int result, i;\n    void *virt;\n    int irq_info;\n\n\n    ldev->fd = -1;\n    ldev->device.irq_info = (void *)-1;\n\n    /* Log entry and device identifiers */\n    probe_log_msg(\"ENTER metal_uio_dev_open\", lbus ? lbus->bus_name : NULL,\n                  ldev ? ldev->dev_name : NULL);\n\n    ldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n    if (!ldev->sdev) {\n        metal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n                  lbus->bus_name, ldev->dev_name);\n        probe_log_msg(\"EXIT metal_uio_dev_open - sdev not found\", lbus->bus_name, ldev->dev_name);\n        return -ENODEV;\n    }\n    metal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n              lbus->bus_name, ldev->dev_name);\n\n    result = metal_uio_dev_bind(ldev, ldrv);\n    if (result) {\n        probe_log_state(\"EXIT metal_uio_dev_open - bind failed\", 0, result, 0UL, 0UL, 0UL, NULL, ldev->device.num_regions);\n        return result;\n    }\n\n    result = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n    if (result >= (int)sizeof(path))\n        return -EOVERFLOW;\n    dlist = sysfs_open_directory_list(path);\n    if (!dlist) {\n        metal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n                  path);\n        probe_log_msg(\"EXIT metal_uio_dev_open - open directory list failed\", path, NULL);\n        return -errno;\n    }\n\n    dlist_for_each_data(dlist, instance, char) {\n        result = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n                          \"%s/%s\", path, instance);\n        if (result >= (int)sizeof(ldev->cls_path))\n            return -EOVERFLOW;\n        result = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n                          \"/dev/%s\", instance);\n        if (result >= (int)sizeof(ldev->dev_path))\n            return -EOVERFLOW;\n        break;\n    }\n    sysfs_close_list(dlist);\n\n    if (sysfs_path_is_dir(ldev->cls_path) != 0) {\n        metal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n                  ldev->cls_path);\n        probe_log_msg(\"EXIT metal_uio_dev_open - invalid class path\", ldev->cls_path, NULL);\n        return -ENODEV;\n    }\n\n    i = 0;\n    do {\n        if (!access(ldev->dev_path, F_OK))\n            break;\n        usleep(10);\n        i++;\n    } while (i < 1000);\n    if (i >= 1000) {\n        metal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n                  ldev->dev_path);\n        probe_log_msg(\"EXIT metal_uio_dev_open - device open timeout\", ldev->dev_path, NULL);\n        return -ENODEV;\n    }\n    result = metal_open(ldev->dev_path, 0);\n    if (result < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n                  ldev->dev_path, strerror(-result));\n        probe_log_state(\"EXIT metal_uio_dev_open - metal_open failed\", 0, result, 0UL, 0UL, 0UL, NULL, ldev->device.num_regions);\n        return result;\n    }\n    ldev->fd = result;\n\n    metal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n              lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n    /* Log state before entering the for loop - captures the initial use of 'result' */\n    probe_log_state(\"BEFORE_FOR\", 0, /* i will be set in for */ 0, 0UL, 0UL, 0UL, NULL, ldev->device.num_regions);\n\n    for (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n        int prev_result;\n\n        phys = &ldev->region_phys[ldev->device.num_regions];\n        /* Log at loop start with pointer to phys and current counters */\n        probe_log_state(\"LOOP_START\", i, result, (unsigned long)phys, offset, size, virt, ldev->device.num_regions);\n\n        prev_result = result;\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n        probe_log_state(\"AFTER_read_map_attr_offset\", i, result, (unsigned long)phys, offset, size, virt, ldev->device.num_regions);\n\n        prev_result = result;\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n        /* phys now points to the address value if successful */\n        probe_log_state(\"AFTER_read_map_attr_addr\", i, result, phys ? *phys : 0UL, offset, size, virt, ldev->device.num_regions);\n\n        prev_result = result;\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"size\", &size));\n        probe_log_state(\"AFTER_read_map_attr_size\", i, result, phys ? *phys : 0UL, offset, size, virt, ldev->device.num_regions);\n\n        prev_result = result;\n        result = (result ? result :\n                 metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n        probe_log_state(\"AFTER_metal_map\", i, result, phys ? *phys : 0UL, offset, size, virt, ldev->device.num_regions);\n\n        if (!result) {\n            io = &ldev->device.regions[ldev->device.num_regions];\n            metal_io_init(io, virt, phys, size, -1, 0, NULL);\n            ldev->device.num_regions++;\n            probe_log_state(\"REGION_ADDED\", i, result, phys ? *phys : 0UL, offset, size, virt, ldev->device.num_regions);\n        }\n    }\n\n    probe_log_state(\"AFTER_FOR\", i, result, 0UL, offset, size, virt, ldev->device.num_regions);\n\n    irq_info = 1;\n    if (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n        metal_log(METAL_LOG_INFO,\n                  \"%s: No IRQ for device %s.\\n\",\n                  __func__, ldev->dev_name);\n        ldev->device.irq_num =  0;\n        ldev->device.irq_info = (void *)-1;\n    } else {\n        ldev->device.irq_num =  1;\n        ldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n        metal_linux_irq_register_dev(&ldev->device, ldev->fd);\n    }\n\n    probe_log_state(\"EXIT metal_uio_dev_open - success\", i, 0, 0UL, offset, size, virt, ldev->device.num_regions);\n    return 0;\n}\n"
}