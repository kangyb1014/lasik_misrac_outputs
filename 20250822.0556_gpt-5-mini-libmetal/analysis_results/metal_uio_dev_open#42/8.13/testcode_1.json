{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'instance' is declared as 'char *instance' but is only used as a read\u2011only C string (passed to snprintf and obtained from the sysfs dlist iterator). Therefore it should be declared 'const char *instance' to indicate it points to non\u2011modifiable data. The 'path' identifier is an array, not a pointer, so Rule 8.13 does not apply to it. (If the dlist_for_each_data macro/API requires a non\u2011const type, the macro/API should be updated so callers can use a 'const char *'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static void probe_log_msg(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void probe_log_instance(const char *label, char *inst)\n{\n    FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: instance_ptr=%p\\n\", label, (void *)inst);\n    if (inst)\n        fprintf(f, \"%s: instance_str='%s'\\n\", label, inst);\n    else\n        fprintf(f, \"%s: instance_str=(null)\\n\", label);\n    fclose(f);\n}\n\nstatic void probe_log_snprintf(const char *label, const char *target, size_t target_size, int res)\n{\n    FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: target_buf=%p, buf_size=%zu, snprintf_result=%d, target='%s'\\n\",\n        label, (void *)target, target_size, res, target ? target : \"(null)\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n    char *instance, path[SYSFS_PATH_MAX];\n    struct linux_driver *ldrv = ldev->ldrv;\n    unsigned long *phys, offset = 0, size = 0;\n    struct metal_io_region *io;\n    struct dlist *dlist;\n    int result, i;\n    void *virt;\n    int irq_info;\n\n\n    ldev->fd = -1;\n    ldev->device.irq_info = (void *)-1;\n\n    ldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n    if (!ldev->sdev) {\n        metal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n                  lbus->bus_name, ldev->dev_name);\n        probe_log_msg(\"sysfs_open_device: failed\");\n        return -ENODEV;\n    }\n    metal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n              lbus->bus_name, ldev->dev_name);\n    probe_log_msg(\"sysfs_open_device: success\");\n\n    result = metal_uio_dev_bind(ldev, ldrv);\n    if (result)\n        return result;\n\n    result = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n    if (result >= (int)sizeof(path))\n        return -EOVERFLOW;\n    dlist = sysfs_open_directory_list(path);\n    if (!dlist) {\n        metal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n                  path);\n        probe_log_msg(\"sysfs_open_directory_list: failed\");\n        return -errno;\n    }\n    probe_log_msg(\"sysfs_open_directory_list: success\");\n    probe_log_snprintf(\"constructed_path\", path, sizeof(path), result);\n\n    dlist_for_each_data(dlist, instance, char) {\n        /* Probe: record the instance pointer and string content we get from the dlist iterator */\n        probe_log_instance(\"dlist_entry_before_snprintf\", instance);\n\n        result = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n                  \"%s/%s\", path, instance);\n        if (result >= (int)sizeof(ldev->cls_path))\n            return -EOVERFLOW;\n        probe_log_snprintf(\"after_snprintf_cls_path\", ldev->cls_path, sizeof(ldev->cls_path), result);\n\n        result = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n                  \"/dev/%s\", instance);\n        if (result >= (int)sizeof(ldev->dev_path))\n            return -EOVERFLOW;\n        probe_log_snprintf(\"after_snprintf_dev_path\", ldev->dev_path, sizeof(ldev->dev_path), result);\n\n        /* Probe: confirm instance is not modified by caller code here */\n        probe_log_instance(\"dlist_entry_after_snprintf\", instance);\n\n        break;\n    }\n    sysfs_close_list(dlist);\n    probe_log_msg(\"dlist closed\");\n\n    probe_log_snprintf(\"cls_path_check\", ldev->cls_path, sizeof(ldev->cls_path), 0);\n    if (sysfs_path_is_dir(ldev->cls_path) != 0) {\n        metal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n                  ldev->cls_path);\n        probe_log_msg(\"sysfs_path_is_dir: invalid\");\n        return -ENODEV;\n    }\n    probe_log_msg(\"sysfs_path_is_dir: ok\");\n\n    i = 0;\n    do {\n        if (!access(ldev->dev_path, F_OK))\n            break;\n        usleep(10);\n        i++;\n    } while (i < 1000);\n    probe_log_msg(\"device file availability loop finished\");\n    if (i >= 1000) {\n        metal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n                  ldev->dev_path);\n        probe_log_msg(\"device file timeout\");\n        return -ENODEV;\n    }\n    result = metal_open(ldev->dev_path, 0);\n    if (result < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n                  ldev->dev_path, strerror(-result));\n        probe_log_msg(\"metal_open: failed\");\n        return result;\n    }\n    ldev->fd = result;\n    probe_log_msg(\"metal_open: success\");\n\n    metal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n              lbus->bus_name, ldev->dev_name, ldev->dev_path);\n    probe_log_snprintf(\"final_dev_path\", ldev->dev_path, sizeof(ldev->dev_path), 0);\n\n    for (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n        phys = &ldev->region_phys[ldev->device.num_regions];\n        result = (result ? result :\n             metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n        result = (result ? result :\n             metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n        result = (result ? result :\n             metal_uio_read_map_attr(ldev, i, \"size\", &size));\n        result = (result ? result :\n             metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n        if (!result) {\n            io = &ldev->device.regions[ldev->device.num_regions];\n            metal_io_init(io, virt, phys, size, -1, 0, NULL);\n            ldev->device.num_regions++;\n        }\n        /* Probe: log mapping state for each region */\n        if (result)\n            probe_log_msg(\"region mapping: failed for one region\");\n        else\n            probe_log_msg(\"region mapping: success for one region\");\n    }\n\n    irq_info = 1;\n    if (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n        metal_log(METAL_LOG_INFO,\n              \"%s: No IRQ for device %s.\\n\",\n              __func__, ldev->dev_name);\n        ldev->device.irq_num =  0;\n        ldev->device.irq_info = (void *)-1;\n        probe_log_msg(\"IRQ: none\");\n    } else {\n        ldev->device.irq_num =  1;\n        ldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n        metal_linux_irq_register_dev(&ldev->device, ldev->fd);\n        probe_log_msg(\"IRQ: registered\");\n    }\n\n    probe_log_msg(\"metal_uio_dev_open: exit success\");\n    return 0;\n}\n"
}