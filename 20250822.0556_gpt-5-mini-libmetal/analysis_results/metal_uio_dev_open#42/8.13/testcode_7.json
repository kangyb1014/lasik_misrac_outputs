{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable ldrv is declared as 'struct linux_driver *ldrv' and passed to metal_uio_dev_bind(ldev, ldrv). If metal_uio_dev_bind only reads from the driver (does not modify it), then the pointer should be const\u2011qualified (const struct linux_driver *). In that case the code violates MISRA C 2023 Rule 8.13 because it fails to use a const\u2011qualified pointer where possible. To fix: declare 'const struct linux_driver *ldrv = ldev->ldrv;' and change metal_uio_dev_bind to accept a 'const struct linux_driver *' parameter. If, however, metal_uio_dev_bind legitimately modifies the driver object, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\t/* Logging/probing variables */\n\tFILE *logf = NULL;\n\tunsigned long ldrv_chk_before = 0u;\n\tunsigned long ldrv_chk_after = 0u;\n\tsize_t ldrv_chk_n = 0u;\n\tsize_t ldrv_sz = 0u;\n\tsize_t ldrv_idx = 0u;\n\n\t/* Open probe log file (append) to record control flow and state. */\n\tlogf = fopen(\"/tmp/logs/423.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: %s: lbus=%p ldev=%p ldev->dev_name=%s ldev->ldrv=%p\\n\",\n\t\t\t__func__, (void *)lbus, (void *)ldev,\n\t\t\t(ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\", (void *)ldrv);\n\t\tfflush(logf);\n\t}\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: %s: device %s:%s not found\\n\",\n\t\t\t\t__func__, (lbus ? lbus->bus_name : \"(null)\"),\n\t\t\t\t(ldev ? ldev->dev_name : \"(null)\"));\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\t/* Compute a small checksum of the first bytes of the driver structure (if available)\n\t * to detect whether metal_uio_dev_bind modifies the driver object. This provides\n\t * evidence for whether the pointer could be const-qualified. Do not dereference if NULL.\n\t */\n\tif (ldrv && logf) {\n\t\t/* Limit to at most 64 bytes to avoid large reads; use sizeof to be accurate if available. */\n\t\tldrv_sz = sizeof(*ldrv);\n\t\tldrv_chk_n = (ldrv_sz < 64u) ? ldrv_sz : 64u;\n\t\tfor (ldrv_idx = 0u; ldrv_idx < ldrv_chk_n; ++ldrv_idx) {\n\t\t\tldrv_chk_before += ((unsigned char *)ldrv)[ldrv_idx];\n\t\t}\n\t\tfprintf(logf, \"BEFORE_BIND: ldrv=%p size=%zu chk_n=%zu checksum=%lu\\n\",\n\t\t\t(void *)ldrv, (size_t)ldrv_sz, (size_t)ldrv_chk_n, ldrv_chk_before);\n\t\tfflush(logf);\n\t} else if (logf) {\n\t\tfprintf(logf, \"BEFORE_BIND: ldrv=%p (null or no chk)\\n\", (void *)ldrv);\n\t\tfflush(logf);\n\t}\n\n\t/* Call original binding code; preserve semantics exactly. */\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\n\t/* Log result of bind and detect any modifications to the driver object memory. */\n\tif (logf) {\n\t\tfprintf(logf, \"BIND_RETURN: result=%d\\n\", result);\n\t\tfflush(logf);\n\t}\n\n\tif (ldrv && logf) {\n\t\tldrv_chk_after = 0u;\n\t\tfor (ldrv_idx = 0u; ldrv_idx < ldrv_chk_n; ++ldrv_idx) {\n\t\t\tldrv_chk_after += ((unsigned char *)ldrv)[ldrv_idx];\n\t\t}\n\t\tfprintf(logf, \"AFTER_BIND: ldrv=%p checksum=%lu (before=%lu)\\n\",\n\t\t\t(void *)ldrv, ldrv_chk_after, ldrv_chk_before);\n\t\tif (ldrv_chk_after != ldrv_chk_before) {\n\t\t\tfprintf(logf, \"DETECTED_CHANGE: driver memory changed in first %zu bytes\\n\", ldrv_chk_n);\n\t\t} else {\n\t\t\tfprintf(logf, \"NO_CHANGE: driver memory unchanged in first %zu bytes\\n\", ldrv_chk_n);\n\t\t}\n\t\tfflush(logf);\n\t}\n\n\t/* Preserve original behavior: if bind failed, return the result. */\n\tif (result) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: %s: bind failed result=%d\\n\", __func__, result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path)) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: %s: snprintf overflow building uio path\\n\", __func__);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EOVERFLOW;\n\t}\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ERROR: %s: failed to scan class path %s\\n\", __func__, path);\n\t\t\tfclose(logf);\n\t\t}\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path)) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"EXIT: %s: snprintf overflow for cls_path\\n\", __func__);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path)) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"EXIT: %s: snprintf overflow for dev_path\\n\", __func__);\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: %s: invalid device class path %s\\n\", __func__, ldev->cls_path);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: %s: timeout waiting for dev_path %s\\n\", __func__, ldev->dev_path);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"EXIT: %s: metal_open failed for %s result=%d\\n\", __func__, ldev->dev_path, result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT: %s: success ldev=%p ldrv=%p ldev->fd=%d\\n\",\n\t\t\t__func__, (void *)ldev, (void *)ldrv, ldev->fd);\n\t\tfclose(logf);\n\t}\n\n\treturn 0;\n}\n"
}