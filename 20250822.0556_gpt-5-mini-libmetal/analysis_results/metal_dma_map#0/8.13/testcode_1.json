{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member is declared as a plain void *: \"void *irq_info;\". If irq_info is intended to reference immutable data (e.g. an IRQ identifier stored in static memory, a string literal, or any object that the device code should not modify), then it should be declared as \"const void *irq_info;\". As written, the non-const pointer allows modifying the pointee (or assigning const objects with qualifier loss), which violates MISRA C 2023 Rule 8.13. Example violating usage: device->irq_info = \"IRQ0\"; // discards const qualifier of string literal. Recommended fix: change declaration to \"const void *irq_info;\" unless the pointed-to object must be mutable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_dma_map:\n```c\nint metal_dma_map(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg_in,\n\t\t  int nents_in,\n\t\t  struct metal_sg *sg_out)\n{\n\tint nents_out;\n\n\tif (!dev || !sg_in || !sg_out)\n\t\treturn -EINVAL;\n\tif (!dev->bus->ops.dev_dma_map)\n\t\treturn -ENODEV;\n\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/* If it is device write or r/w, apply memory r/w fence. */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\tnents_out = dev->bus->ops.dev_dma_map(dev->bus,\n\t\t\tdev, dir, sg_in, nents_in, sg_out);\n\treturn nents_out;\n}\n```\n</target_code>\nPlease provide the modified metal_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helpers. These do not change the logic of metal_dma_map.\n * Logs are appended to /tmp/logs/3.txt so other agents can inspect control flow\n * and state without modifying program behavior. */\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n    /* timestamp */\n    time_t t = time(((time_t *)0));\n    if (t != (time_t)-1)\n        fprintf(f, \"[%ld] \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declarations of structures used by the original function. The real\n * definitions are expected to be available at link/compile time in the\n * surrounding codebase. */\nstruct metal_bus_ops;\nstruct metal_bus;\nstruct metal_device {\n    struct metal_bus *bus;\n    /* other members... */\n    void *irq_info; /* present in target codebase; we log its value only */\n};\nstruct metal_sg { /* opaque for logging; do not access members */ };\n\n/* We keep this signature exactly as in the original file. */\nint metal_dma_map(struct metal_device *dev,\n          uint32_t dir,\n          struct metal_sg *sg_in,\n          int nents_in,\n          struct metal_sg *sg_out)\n{\n    int nents_out;\n\n    /* Log entry and parameters */\n    log_append(\"metal_dma_map ENTER: dev=%p, dir=%u, sg_in=%p, nents_in=%d, sg_out=%p\",\n               (const void *)dev, (unsigned)dir, (const void *)sg_in, nents_in, (const void *)sg_out);\n\n    if (!dev || !sg_in || !sg_out) {\n        log_append(\"metal_dma_map INVALID_PARAMS: dev=%p, sg_in=%p, sg_out=%p -> return -EINVAL\",\n                   (const void *)dev, (const void *)sg_in, (const void *)sg_out);\n        return -EINVAL;\n    }\n\n    /* Log device internals that are safe to read (addresses only). Avoid\n     * dereferencing or modifying pointees. */\n    {\n        const void *bus_ptr = (const void *)dev->bus;\n        const void *ops_ptr = (const void *)(dev->bus ? dev->bus->ops : NULL);\n        const void *map_fn = NULL;\n        if (dev->bus && dev->bus->ops) {\n            /* take address only; do not call or dereference */\n            map_fn = (const void *)dev->bus->ops->dev_dma_map;\n        }\n        log_append(\"device state: dev=%p, dev->bus=%p, dev->bus->ops=%p, dev->bus->ops.dev_dma_map=%p\",\n                   (const void *)dev, bus_ptr, ops_ptr, map_fn);\n        log_append(\"device irq_info pointer: %p (content not dereferenced)\", (const void *)dev->irq_info);\n    }\n\n    if (!dev->bus->ops.dev_dma_map) {\n        log_append(\"metal_dma_map NO_DMA_MAP_FN: dev->bus->ops.dev_dma_map is NULL -> return -ENODEV\");\n        return -ENODEV;\n    }\n\n    /* memory barrier */\n    if (dir == METAL_DMA_DEV_R) {\n        /* If it is device read, apply memory write fence. */\n        atomic_thread_fence(memory_order_release);\n        log_append(\"metal_dma_map MEM_FENCE: memory_order_release applied (device read)\");\n    } else {\n        /* If it is device write or r/w, apply memory r/w fence. */\n        atomic_thread_fence(memory_order_acq_rel);\n        log_append(\"metal_dma_map MEM_FENCE: memory_order_acq_rel applied (device write/rw)\");\n    }\n\n    log_append(\"metal_dma_map CALL: calling dev->bus->ops.dev_dma_map(dev->bus, dev, dir, sg_in, nents_in, sg_out)\");\n    nents_out = dev->bus->ops.dev_dma_map(dev->bus,\n            dev, dir, sg_in, nents_in, sg_out);\n    log_append(\"metal_dma_map RETURNED: nents_out=%d\", nents_out);\n    return nents_out;\n}\n"
}