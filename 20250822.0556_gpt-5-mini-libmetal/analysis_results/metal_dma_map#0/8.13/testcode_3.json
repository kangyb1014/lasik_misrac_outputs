{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe sg_in parameter is only used as input (not modified) in metal_dma_map but is declared and passed as a non-const pointer. According to Rule 8.13 sg_in should be declared as const struct metal_sg *sg_in (and the dev_dma_map callback should accept a const-qualified pointer) so that pointers that need not be modified point to const-qualified types. The current call passes a non-const sg_in to dev->bus->ops.dev_dma_map, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_dma_map:\n```c\nint metal_dma_map(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg_in,\n\t\t  int nents_in,\n\t\t  struct metal_sg *sg_out)\n{\n\tint nents_out;\n\n\tif (!dev || !sg_in || !sg_out)\n\t\treturn -EINVAL;\n\tif (!dev->bus->ops.dev_dma_map)\n\t\treturn -ENODEV;\n\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/* If it is device write or r/w, apply memory r/w fence. */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\tnents_out = dev->bus->ops.dev_dma_map(dev->bus,\n\t\t\tdev, dir, sg_in, nents_in, sg_out);\n\treturn nents_out;\n}\n```\n</target_code>\nPlease provide the modified metal_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <errno.h>\n#include <stdatomic.h>\n\nstatic void write_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_dma_map(struct metal_device *dev,\n          uint32_t dir,\n          struct metal_sg *sg_in,\n          int nents_in,\n          struct metal_sg *sg_out)\n{\n    int nents_out;\n\n    write_log(\"ENTER metal_dma_map: dev=%p dir=%u sg_in=%p nents_in=%d sg_out=%p\",\n              (void *)dev, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n\n    if (!dev || !sg_in || !sg_out) {\n        write_log(\"NULL parameter detected: dev=%p sg_in=%p sg_out=%p -> return -EINVAL\",\n                  (void *)dev, (void *)sg_in, (void *)sg_out);\n        return -EINVAL;\n    }\n\n    /* Log bus pointer without dereferencing to avoid changing control flow */\n    write_log(\"dev->bus pointer: %p\", (void *)dev->bus);\n\n    if (!dev->bus->ops.dev_dma_map) {\n        /* The original logic checks dev->bus->ops.dev_dma_map directly; preserve that behavior. */\n        write_log(\"dev_dma_map callback missing: dev=%p bus=%p ops=%p -> return -ENODEV\",\n                  (void *)dev, (void *)dev->bus, (void *)dev->bus->ops);\n        return -ENODEV;\n    }\n\n    write_log(\"dev_dma_map callback present: callback=%p ops=%p\",\n              (void *)dev->bus->ops.dev_dma_map, (void *)dev->bus->ops);\n\n    /* memory barrier */\n    if (dir == METAL_DMA_DEV_R) {\n        /* If it is device read, apply memory write fence. */\n        write_log(\"Applying memory_order_release fence (device read)\");\n        atomic_thread_fence(memory_order_release);\n    } else {\n        /* If it is device write or r/w, apply memory r/w fence. */\n        write_log(\"Applying memory_order_acq_rel fence (device write or r/w)\");\n        atomic_thread_fence(memory_order_acq_rel);\n    }\n\n    write_log(\"Calling dev->bus->ops.dev_dma_map: bus=%p dev=%p dir=%u sg_in=%p nents_in=%d sg_out=%p\",\n              (void *)dev->bus, (void *)dev, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n\n    nents_out = dev->bus->ops.dev_dma_map(dev->bus,\n            dev, dir, sg_in, nents_in, sg_out);\n\n    write_log(\"dev_dma_map returned: nents_out=%d\", nents_out);\n    write_log(\"EXIT metal_dma_map: dev=%p\", (void *)dev);\n\n    return nents_out;\n}\n"
}