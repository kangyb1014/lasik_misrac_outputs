{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter dev is declared as struct metal_device *dev but within metal_dma_map it is only read (checked for NULL and fields accessed) and not modified. According to Rule 8.13 the pointer should be to a const-qualified type when possible (e.g. const struct metal_device *dev). This is a violation unless dev must be passed to dev->bus->ops.dev_dma_map which requires a non-const pointer; if that callee does not modify the device, the parameter here should still be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_dma_map:\n```c\nint metal_dma_map(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg_in,\n\t\t  int nents_in,\n\t\t  struct metal_sg *sg_out)\n{\n\tint nents_out;\n\n\tif (!dev || !sg_in || !sg_out)\n\t\treturn -EINVAL;\n\tif (!dev->bus->ops.dev_dma_map)\n\t\treturn -ENODEV;\n\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/* If it is device write or r/w, apply memory r/w fence. */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\tnents_out = dev->bus->ops.dev_dma_map(dev->bus,\n\t\t\tdev, dir, sg_in, nents_in, sg_out);\n\treturn nents_out;\n}\n```\n</target_code>\nPlease provide the modified metal_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <errno.h>\n#include <time.h>\n#include <stdatomic.h>\n\n/* Probe/log helper that appends messages to /tmp/logs/3.txt. */\nstatic void metal_log_append(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s\\n\", (long)t, msg);\n    fclose(f);\n}\n\nint metal_dma_map(struct metal_device *dev,\n          uint32_t dir,\n          struct metal_sg *sg_in,\n          int nents_in,\n          struct metal_sg *sg_out)\n{\n    int nents_out;\n\n    /* Log entry with basic pointers and parameters */\n    {\n        char buf[512];\n        snprintf(buf, sizeof(buf),\n             \"enter: dev=%p, dir=%u, sg_in=%p, nents_in=%d, sg_out=%p\",\n             (void *)dev, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n        metal_log_append(buf);\n    }\n\n    if (!dev || !sg_in || !sg_out) {\n        /* Log which parameter was NULL to aid reproduction */\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"early return -EINVAL: dev=%p, sg_in=%p, sg_out=%p\",\n             (void *)dev, (void *)sg_in, (void *)sg_out);\n        metal_log_append(buf);\n        return -EINVAL;\n    }\n\n    /* Log bus and ops pointers safely (do not change control flow) */\n    {\n        char buf[512];\n        void *bus_ptr = (void *)dev->bus;\n        void *ops_ptr = NULL;\n        void *dev_dma_map_ptr = NULL;\n\n        if (dev->bus) {\n            /* ops is a struct of function pointers in original code; take address of ops for logging */\n            ops_ptr = (void *)&dev->bus->ops;\n            /* If dev_dma_map is present, try to capture its pointer value for logging */\n            /* Cast through uintptr_t to avoid direct function pointer to void* cast on some platforms */\n            if (dev->bus->ops.dev_dma_map) {\n                dev_dma_map_ptr = (void *)(uintptr_t)dev->bus->ops.dev_dma_map;\n            }\n        }\n        snprintf(buf, sizeof(buf), \"dev->bus=%p, dev->bus->ops=%p, dev->bus->ops.dev_dma_map=%p\",\n             bus_ptr, ops_ptr, dev_dma_map_ptr);\n        metal_log_append(buf);\n    }\n\n    if (!dev->bus->ops.dev_dma_map) {\n        metal_log_append(\"early return -ENODEV: dev->bus->ops.dev_dma_map is NULL\");\n        return -ENODEV;\n    }\n\n    /* memory barrier */\n    if (dir == METAL_DMA_DEV_R) {\n        /* If it is device read, apply memory write fence. */\n        metal_log_append(\"applying memory_order_release fence (device read)\");\n        atomic_thread_fence(memory_order_release);\n    } else {\n        /* If it is device write or r/w, apply memory r/w fence. */\n        metal_log_append(\"applying memory_order_acq_rel fence (device write or r/w)\");\n        atomic_thread_fence(memory_order_acq_rel);\n    }\n\n    /* Log parameters immediately before calling the bus op */\n    {\n        char buf[512];\n        snprintf(buf, sizeof(buf),\n             \"calling dev_dma_map: bus=%p, dev=%p, dir=%u, sg_in=%p, nents_in=%d, sg_out=%p\",\n             (void *)dev->bus, (void *)dev, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n        metal_log_append(buf);\n    }\n\n    nents_out = dev->bus->ops.dev_dma_map(dev->bus,\n            dev, dir, sg_in, nents_in, sg_out);\n\n    /* Log return/result from bus op */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"dev_dma_map returned: nents_out=%d\", nents_out);\n        metal_log_append(buf);\n    }\n\n    return nents_out;\n}\n"
}