{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field is declared as a non-const pointer: 'struct metal_io_region *io;'. If the io pointer is intended only to reference a device/region descriptor (i.e. it is not modified via the scatter\u2011gather entry), it should be declared 'const struct metal_io_region *io;'. In the shown code, sg entries (and sg_in passed into metal_dma_map) are used as inputs only and are not modified, so leaving io non-const permits unintended modification and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_dma_map:\n```c\nint metal_dma_map(struct metal_device *dev,\n\t\t  uint32_t dir,\n\t\t  struct metal_sg *sg_in,\n\t\t  int nents_in,\n\t\t  struct metal_sg *sg_out)\n{\n\tint nents_out;\n\n\tif (!dev || !sg_in || !sg_out)\n\t\treturn -EINVAL;\n\tif (!dev->bus->ops.dev_dma_map)\n\t\treturn -ENODEV;\n\n\t/* memory barrier */\n\tif (dir == METAL_DMA_DEV_R)\n\t\t/* If it is device read, apply memory write fence. */\n\t\tatomic_thread_fence(memory_order_release);\n\telse\n\t\t/* If it is device write or r/w, apply memory r/w fence. */\n\t\tatomic_thread_fence(memory_order_acq_rel);\n\tnents_out = dev->bus->ops.dev_dma_map(dev->bus,\n\t\t\tdev, dir, sg_in, nents_in, sg_out);\n\treturn nents_out;\n}\n```\n</target_code>\nPlease provide the modified metal_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Probe helpers: write lightweight logs describing control flow and\n * state of scatter/gather entries to /tmp/logs/3.txt. These helpers\n * avoid changing the logic of metal_dma_map and only append diagnostic\n * information so other agents can reproduce evidence of unexpected\n * modification of sg entries (for example the 'io' pointer).\n */\nstatic void probe_log_sg_io(const char *label, struct metal_sg *sg, int nents)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"%s: sg=%p nents=%d\\n\", label, (void *)sg, nents);\n    for (int i = 0; i < nents; ++i) {\n        /* Only log the 'io' pointer to focus on the reported violation.\n         * Accessing other fields here risks mismatches with the project's\n         * metal_sg definition; keep the probe minimal and targeted.\n         */\n        void *io_ptr = NULL;\n        /* Guarded access in case the struct does not contain io or the\n         * memory is otherwise invalid; we rely on the project providing\n         * a compatible definition of struct metal_sg that includes 'io'.\n         */\n        io_ptr = (void *)sg[i].io;\n        fprintf(f, \"  sg[%d]: io=%p\\n\", i, io_ptr);\n    }\n    fclose(f);\n}\n\nstatic void probe_log_entry(const char *stage, struct metal_device *dev,\n                            uint32_t dir, struct metal_sg *sg_in,\n                            int nents_in, struct metal_sg *sg_out)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"== metal_dma_map %s ==\\n\", stage);\n    fprintf(f, \"  dev=%p dir=0x%08x sg_in=%p nents_in=%d sg_out=%p\\n\",\n            (void *)dev, (unsigned)dir, (void *)sg_in, nents_in,\n            (void *)sg_out);\n    if (dev) {\n        /* Safely probe presence of bus/ops/dev_dma_map without forcing\n         * dereference of potentially NULL members.\n         */\n        if (dev->bus) {\n            if (dev->bus->ops) {\n                fprintf(f, \"  dev->bus->ops.dev_dma_map=%p\\n\",\n                        (void *)dev->bus->ops.dev_dma_map);\n            } else {\n                fprintf(f, \"  dev->bus->ops=NULL\\n\");\n            }\n        } else {\n            fprintf(f, \"  dev->bus=NULL\\n\");\n        }\n    }\n\n    fclose(f);\n}\n\nint metal_dma_map(struct metal_device *dev,\n          uint32_t dir,\n          struct metal_sg *sg_in,\n          int nents_in,\n          struct metal_sg *sg_out)\n{\n    int nents_out;\n\n    if (!dev || !sg_in || !sg_out)\n        return -EINVAL;\n\n    /* Log entry state before performing the device/bus check. */\n    probe_log_entry(\"entry\", dev, dir, sg_in, nents_in, sg_out);\n\n    /* Log sg_in 'io' pointers before calling through to the bus operation. */\n    probe_log_sg_io(\"before_map sg_in\", sg_in, nents_in);\n\n    if (!dev->bus->ops.dev_dma_map)\n        return -ENODEV;\n\n    /* memory barrier */\n    if (dir == METAL_DMA_DEV_R)\n        /* If it is device read, apply memory write fence. */\n        atomic_thread_fence(memory_order_release);\n    else\n        /* If it is device write or r/w, apply memory r/w fence. */\n        atomic_thread_fence(memory_order_acq_rel);\n\n    nents_out = dev->bus->ops.dev_dma_map(dev->bus,\n            dev, dir, sg_in, nents_in, sg_out);\n\n    /* Log sg_in and sg_out state after the bus operation so callers can\n     * compare pre/post values and detect unintended modifications, e.g.\n     * changes to sg_in[i].io which should be const-qualified.\n     */\n    probe_log_sg_io(\"after_map sg_in\", sg_in, nents_in);\n    if (nents_out > 0 && sg_out)\n        probe_log_sg_io(\"after_map sg_out\", sg_out, nents_out);\n\n    /* Also log exit metadata. */\n    probe_log_entry(\"exit\", dev, dir, sg_in, nents_in, sg_out);\n\n    return nents_out;\n}\n"
}