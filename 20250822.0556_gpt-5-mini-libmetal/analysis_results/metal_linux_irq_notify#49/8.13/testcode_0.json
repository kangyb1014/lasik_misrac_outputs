{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes &val where val is declared as a non-const uint64_t, so the pointer expression has type uint64_t * (a pointer to a non-const object). MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; here val is never modified after initialization and could be declared const. This is a violation. Fix: declare val as const uint64_t val = 1; so &val is a pointer-to-const and matches the intent of the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_notify code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_notify as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_notify code.\n",
  "test_code": "static void metal_irq_probe_before(uint64_t val)\n{\n    /* Probe: record that val is non-const and its address is passed to write */\n    FILE *fp = fopen(\"/tmp/logs/493.txt\", \"a\");\n    if (fp) {\n        /* cast address to void* for %p */\n        fprintf(fp, \"metal_linux_irq_notify: enter\\n\");\n        fprintf(fp, \"  val (non-const) = %llu\\n\", (unsigned long long)val);\n        fprintf(fp, \"  &val = %p\\n\", (void *)&val);\n        fprintf(fp, \"  sizeof(val) = %zu\\n\", sizeof(val));\n        fclose(fp);\n    }\n}\n\nstatic void metal_irq_probe_after(int ret)\n{\n    FILE *fp = fopen(\"/tmp/logs/493.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"metal_linux_irq_notify: exit\\n\");\n        fprintf(fp, \"  write returned = %d\\n\", ret);\n        fclose(fp);\n    }\n}\n\nstatic int metal_linux_irq_notify(void)\n{\n    uint64_t val = 1;\n    int ret;\n\n    /* Log state before the system call to capture the violation scenario: */\n    metal_irq_probe_before(val);\n\n    ret = write(irq_notify_fd, &val, sizeof(val));\n\n    /* Log result so callers/reproducers can see the control flow and state */\n    metal_irq_probe_after(ret);\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n    }\n    return ret;\n}"
}