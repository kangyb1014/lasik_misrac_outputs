{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'val' is declared as uint64_t (non-const) and its address (&val) is passed to write(), which takes a const void * and does not modify the object. Since 'val' is not modified after initialization, it could be declared const uint64_t. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so 'val' should be const to avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_notify code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_notify as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_notify code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <unistd.h>\n\nstatic int metal_linux_irq_notify(void)\n{\n    uint64_t val = 1;\n    int ret;\n\n    /* Probe: log entry, initial state and address of 'val' to help reproduce the scenario. */\n    {\n        FILE *log = fopen(\"/tmp/logs/493.txt\", \"a\");\n        if (log != NULL) {\n            fprintf(log, \"metal_linux_irq_notify: enter\\n\");\n            fprintf(log, \"  val (before write) = %"
}