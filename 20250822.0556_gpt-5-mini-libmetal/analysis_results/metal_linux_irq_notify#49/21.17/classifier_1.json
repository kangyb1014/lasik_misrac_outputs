{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_notify:\n```c\nstatic int metal_linux_irq_notify(void)\n{\n\tuint64_t val = 1;\n\tint ret;\n\n\tret = write(irq_notify_fd, &val, sizeof(val));\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s failed\\n\", __func__);\n\t}\n\treturn ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_linux_irq_notify:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n...\nstatic int irq_notify_fd\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_fmt(fmt)\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No evidence in the fragment that any <string.h> function is used; calling metal_fmt(fmt) by itself does not violate MISRA C 2023 Rule 21.17. A violation would only occur if metal_fmt expands to use string-handling functions that can write/read beyond buffer bounds. Example violating scenario: if metal_fmt is implemented as something like\n#define metal_fmt(f) ({ static char buf[16]; strcpy(buf, f); buf; })\nthen strcpy could overflow buf when fmt is longer than 15 characters, thus violating Rule 21.17."
}