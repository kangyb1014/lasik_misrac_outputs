{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of version:\n```c\nstatic int version(void)\n{\n\tchar ver_def[16], ver_dyn[16];\n\n\tsnprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n\t\t METAL_VER_MAJOR,\n\t\t METAL_VER_MINOR,\n\t\t METAL_VER_PATCH);\n\n\tsnprintf(ver_dyn, sizeof(ver_dyn), \"%d.%d.%d\",\n\t\t metal_ver_major(), metal_ver_minor(), metal_ver_patch());\n\n\treturn (strcmp(ver_def, METAL_VER) +\n\t\tstrcmp(ver_dyn, metal_ver()));\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn (strcmp(ver_def, METAL_VER) +\n\t\tstrcmp(ver_dyn, metal_ver()));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment as written: strcmp() takes const char * parameters, ver_def and ver_dyn are automatic char arrays (written earlier by snprintf) and are valid to pass as read-only arguments. A violation would occur if metal_ver() were declared to return a non-const pointer (char *) or if METAL_VER were a non-const char * when it could be const; in that case the pointer-return or pointer object should be const-qualified (e.g. const char *) to satisfy Rule 8.13."
}