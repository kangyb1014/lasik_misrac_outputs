{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of version:\n```c\nstatic int version(void)\n{\n\tchar ver_def[16], ver_dyn[16];\n\n\tsnprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n\t\t METAL_VER_MAJOR,\n\t\t METAL_VER_MINOR,\n\t\t METAL_VER_PATCH);\n\n\tsnprintf(ver_dyn, sizeof(ver_dyn), \"%d.%d.%d\",\n\t\t metal_ver_major(), metal_ver_minor(), metal_ver_patch());\n\n\treturn (strcmp(ver_def, METAL_VER) +\n\t\tstrcmp(ver_dyn, metal_ver()));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function version:\n#define METAL_VER \"1.8.0\"\n...\n#define METAL_VER_MAJOR 1\n...\n#define METAL_VER_MINOR 8\n...\n#define METAL_VER_PATCH 0\n...\nint metal_ver_major(void)\n{\n\treturn METAL_VER_MAJOR;\n}\n...\nint metal_ver_minor(void)\n{\n\treturn METAL_VER_MINOR;\n}\n...\nint metal_ver_patch(void)\n{\n\treturn METAL_VER_PATCH;\n}\n...\nconst char *metal_ver(void)\n{\n\treturn METAL_VER;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsnprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n\t METAL_VER_MAJOR,\n\t METAL_VER_MINOR,\n\t METAL_VER_PATCH);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment as written does not violate MISRA C 2023 Rule 21.17. snprintf is not a <string.h> function and, with size > 0, it guarantees NUL-termination (it will truncate but not write past ver_def[16]). A concrete violation scenario would be if the code used a <string.h> function or an unsafe formatter instead \u2014 for example replacing snprintf with strcpy(ver_def, METAL_VER) or with sprintf(ver_def, \"%d.%d.%d\", very_large_ints) where the resulting string is longer than 15 characters; then strcmp(ver_def, METAL_VER) could read past the end of ver_def and violate Rule 21.17."
}