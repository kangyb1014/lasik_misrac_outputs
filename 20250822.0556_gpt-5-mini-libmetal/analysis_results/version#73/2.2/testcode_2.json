{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(ver_def, METAL_VER) is redundant when METAL_VER is the compile-time string formed from the same METAL_VER_MAJOR/METAL_VER_MINOR/METAL_VER_PATCH macros used to build ver_def. In that case strcmp(ver_def, METAL_VER) will always return 0, so executing it (and adding its result) has no effect on program behaviour \u2014 removing that call would not change the returned value. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified version code that contains useful probe functions that print useful logs to a file \"/tmp/logs/732.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of version as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of version:\n```c\nstatic int version(void)\n{\n\tchar ver_def[16], ver_dyn[16];\n\n\tsnprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n\t\t METAL_VER_MAJOR,\n\t\t METAL_VER_MINOR,\n\t\t METAL_VER_PATCH);\n\n\tsnprintf(ver_dyn, sizeof(ver_dyn), \"%d.%d.%d\",\n\t\t metal_ver_major(), metal_ver_minor(), metal_ver_patch());\n\n\treturn (strcmp(ver_def, METAL_VER) +\n\t\tstrcmp(ver_dyn, metal_ver()));\n}\n```\n</target_code>\nPlease provide the modified version code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Forward declarations for external functions that are used to build\n   the dynamic version string. These are not defined here. */\nextern int metal_ver_major(void);\nextern int metal_ver_minor(void);\nextern int metal_ver_patch(void);\nextern const char *metal_ver(void);\n\n/* Probe logger: append useful state and control-flow information to\n   /tmp/logs/732.txt so other agents can reproduce and observe the\n   behavior that leads to the reported violation scenario. */\nstatic void log_version_probe(const char *ver_def, const char *compile_ver,\n                              int cmp_def_compile,\n                              const char *ver_dyn, const char *dyn_ver,\n                              int cmp_dyn_runtime)\n{\n    FILE *f;\n\n    /* Best-effort: ensure directory exists; ignore errors if it does not. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/732.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    (void)fprintf(f, \"timestamp=%ld\\n\", (long)time(NULL));\n    (void)fprintf(f, \"ver_def=\\\"%s\\\"\\n\", ver_def);\n    (void)fprintf(f, \"METAL_VER=\\\"%s\\\"\\n\", compile_ver);\n    (void)fprintf(f, \"strcmp(ver_def, METAL_VER)=%d\\n\", cmp_def_compile);\n\n    (void)fprintf(f, \"ver_dyn=\\\"%s\\\"\\n\", ver_dyn);\n    (void)fprintf(f, \"metal_ver()=\\\"%s\\\"\\n\", dyn_ver);\n    (void)fprintf(f, \"strcmp(ver_dyn, metal_ver())=%d\\n\", cmp_dyn_runtime);\n\n    (void)fprintf(f, \"sum_return=%d\\n\", (cmp_def_compile + cmp_dyn_runtime));\n    (void)fprintf(f, \"---\\n\");\n\n    (void)fclose(f);\n}\n\nstatic int version(void)\n{\n    char ver_def[16], ver_dyn[16];\n\n    /* Build the compile-time-derived version string (as done originally). */\n    (void)snprintf(ver_def, sizeof(ver_def), \"%d.%d.%d\",\n                   METAL_VER_MAJOR,\n                   METAL_VER_MINOR,\n                   METAL_VER_PATCH);\n\n    /* Build the runtime-derived version string (as done originally). */\n    (void)snprintf(ver_dyn, sizeof(ver_dyn), \"%d.%d.%d\",\n                   metal_ver_major(), metal_ver_minor(), metal_ver_patch());\n\n    /* Preserve original logic: compute the two strcmp results and return\n       their sum. Insert logging to capture state and control flow for\n       analysis of the (potentially redundant) comparison against\n       METAL_VER. */\n    int cmp_def_compile = strcmp(ver_def, METAL_VER);\n    int cmp_dyn_runtime = strcmp(ver_dyn, metal_ver());\n\n    /* Log the values and comparison results to a file for external\n       inspection. This does not change program behavior other than the\n       side-effect of logging. */\n    log_version_probe(ver_def, METAL_VER, cmp_def_compile,\n                      ver_dyn, metal_ver(), cmp_dyn_runtime);\n\n    return (cmp_def_compile + cmp_dyn_runtime);\n}\n"
}