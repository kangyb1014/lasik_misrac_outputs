{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_finish_threads:\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter 'tids' is declared as void * but the function only reads the pointed data (casts to pthread_t * and calls pthread_join). According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type whenever possible. The correct declaration would be e.g. void metal_finish_threads(int threads, const pthread_t *tids) or void metal_finish_threads(int threads, const void *tids), and the local pointer should be declared as const pthread_t *tid_p = (const pthread_t *)tids. The current signature therefore violates the rule."
}