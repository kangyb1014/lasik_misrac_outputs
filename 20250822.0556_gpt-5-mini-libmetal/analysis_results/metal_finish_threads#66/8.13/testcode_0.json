{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'tids' is declared as void * but the function only reads the pointed data (casts to pthread_t * and calls pthread_join). According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type whenever possible. The correct declaration would be e.g. void metal_finish_threads(int threads, const pthread_t *tids) or void metal_finish_threads(int threads, const void *tids), and the local pointer should be declared as const pthread_t *tid_p = (const pthread_t *)tids. The current signature therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_finish_threads code that contains useful probe functions that print useful logs to a file \"/tmp/logs/663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_finish_threads as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_finish_threads:\n```c\nvoid metal_finish_threads(int threads, void *tids)\n{\n\tint i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn;\n\t}\n\n\tfor (i = 0; i < threads; i++)\n\t\t(void)pthread_join(tid_p[i], NULL);\n}\n```\n</target_code>\nPlease provide the modified metal_finish_threads code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Preserve external logging symbol declarations so this unit compiles\n   in environments where they are provided elsewhere. */\nextern void metal_log(int level, const char *fmt, ...);\nextern const int METAL_LOG_ERROR;\n\n/* Helper: append formatted log messages to /tmp/logs/663.txt */\nstatic void metal_finish_threads_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/663.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid metal_finish_threads(int threads, void *tids)\n{\n    int i;\n    pthread_t *tid_p = (pthread_t *)tids;\n\n    /* Log entry and parameters */\n    metal_finish_threads_probe(\"ENTER metal_finish_threads: threads=%d, tids=%p\", threads, tids);\n\n    if (!tids) {\n        metal_finish_threads_probe(\"ERROR: tids is NULL\");\n        /* Preserve original behavior: call metal_log as before */\n        metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        return;\n    }\n\n    /* Log some information about the pthread_t array object (size and raw contents)\n       without assuming pthread_t is an integer type. */\n    {\n        size_t elem_size = sizeof(pthread_t);\n        metal_finish_threads_probe(\"INFO: pthread_t size=%zu\", elem_size);\n        for (i = 0; i < threads; i++) {\n            /* Dump raw bytes of tid_p[i] to the log for evidence */\n            unsigned char buf[64]; /* reasonably large buffer */\n            size_t to_copy = elem_size <= sizeof(buf) ? elem_size : sizeof(buf);\n            memcpy(buf, &tid_p[i], to_copy);\n\n            /* Build hex string */\n            char hex[3 * sizeof(buf) + 1];\n            char *hp = hex;\n            for (size_t b = 0; b < to_copy; ++b) {\n                int n = snprintf(hp, 4, \"%02x\", (unsigned)buf[b]);\n                if (n <= 0) break;\n                hp += n;\n            }\n            *hp = '\\0';\n\n            metal_finish_threads_probe(\"INFO: tid[%d] raw_bytes=%s\", i, hex);\n\n            /* Call pthread_join and log the return code. Preserve original join semantics. */\n            int rc = pthread_join(tid_p[i], NULL);\n            if (rc != 0) {\n                metal_finish_threads_probe(\"WARN: pthread_join(%d) returned %d\", i, rc);\n            } else {\n                metal_finish_threads_probe(\"INFO: pthread_join(%d) succeeded\", i);\n            }\n        }\n    }\n\n    /* Function end */\n    metal_finish_threads_probe(\"EXIT metal_finish_threads\");\n}\n"
}