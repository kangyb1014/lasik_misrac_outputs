{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement's third clause modifies dest and ptr in addition to len: \"dest += sizeof(int), ptr += sizeof(int), len -= sizeof(int)\". MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter (and there shall be only one loop counter). Updating pointer objects in the iteration-expression means there is more than one loop control object and the third clause is not restricted to only the loop counter \u2014 this violates clauses 3 and 4 of Rule 14.2. (The first clause is empty and the second clause uses only the loop counter len, which would be acceptable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/104.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void metal_io_block_read_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/104.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    metal_io_block_read_logf(\"ENTER: io=%lu offset=%lu dst=%lu len=%d\",\n        (unsigned long)(uintptr_t)io, (unsigned long)offset,\n        (unsigned long)(uintptr_t)dst, len);\n\n    metal_io_block_read_logf(\"ptr after virt() = %lu\", (unsigned long)(uintptr_t)ptr);\n\n    if (!ptr) {\n        metal_io_block_read_logf(\"ptr is NULL -> return -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        metal_io_block_read_logf(\"adjust len: offset+len (%lu) > io->size (%lu). old len=%d\",\n            (unsigned long)(offset + (unsigned long)len), (unsigned long)io->size, len);\n        len = io->size - offset;\n        metal_io_block_read_logf(\"new len=%d\", len);\n    }\n    retlen = len;\n    metal_io_block_read_logf(\"retlen set to %d\", retlen);\n    if (io->ops.block_read) {\n        metal_io_block_read_logf(\"use io->ops.block_read()\\n\");\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        metal_io_block_read_logf(\"block_read returned %d\", retlen);\n    } else {\n        metal_io_block_read_logf(\"fallback copy path (direct memory copy)\");\n        atomic_thread_fence(memory_order_seq_cst);\n        metal_io_block_read_logf(\"after atomic_thread_fence\");\n\n        while ( len && (\n            ((uintptr_t)dest % sizeof(int)) ||\n            ((uintptr_t)ptr % sizeof(int)))) {\n\n            metal_io_block_read_logf(\"while-iter BEFORE: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n\n            *(unsigned char *)dest = *(const unsigned char *)ptr;\n            dest++;\n            ptr++;\n            len--;\n\n            metal_io_block_read_logf(\"while-iter AFTER: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n        }\n\n        metal_io_block_read_logf(\"entering 32-bit-aligned-for-loop: dest=%lu ptr=%lu len=%d\",\n            (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int)) {\n            /* log state before and after the 32-bit copy to capture the violation evidence */\n            metal_io_block_read_logf(\"for-iter BEFORE: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n\n            *(unsigned int *)dest = *(const unsigned int *)ptr;\n\n            metal_io_block_read_logf(\"for-iter AFTER: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n        }\n\n        metal_io_block_read_logf(\"entering tail-byte-loop: dest=%lu ptr=%lu len=%d\",\n            (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n\n        for (; len != 0; dest++, ptr++, len--) {\n            metal_io_block_read_logf(\"tail-iter BEFORE: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n\n            *(unsigned char *)dest = *(const unsigned char *)ptr;\n\n            metal_io_block_read_logf(\"tail-iter AFTER: dest=%lu ptr=%lu len=%d\",\n                (unsigned long)(uintptr_t)dest, (unsigned long)(uintptr_t)ptr, len);\n        }\n    }\n\n    metal_io_block_read_logf(\"EXIT: retlen=%d\", retlen);\n    return retlen;\n}\n"
}