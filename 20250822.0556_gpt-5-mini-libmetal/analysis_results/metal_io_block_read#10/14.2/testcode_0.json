{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for-loop third clause modifies objects other than the single loop counter. The loop header is for (; len != 0; dest++, ptr++, len--). While the second clause (len != 0) uses only the loop counter, the third clause increments dest and ptr in addition to decrementing len. Rule 14.2 requires the third clause to modify only the loop counter (and not other objects modified in the loop). Therefore this for statement is not well-formed under MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/104.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdatomic.h>\n#include <errno.h>\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    /* Open log file for appending probe information. */\n    FILE *logf = fopen(\"/tmp/logs/104.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"metal_io_block_read ENTRY: io=%p offset=%lu dst=%p len=%d\\n\",\n                (void *)io, offset, dst, len);\n    }\n\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    if (logf) {\n        fprintf(logf, \"after metal_io_virt: ptr=%p dest=%p\\n\", (void *)ptr, (void *)dest);\n    }\n\n    if (!ptr) {\n        if (logf) {\n            fprintf(logf, \"ptr is NULL -> returning -ERANGE\\n\");\n            fclose(logf);\n        }\n        return -ERANGE;\n    }\n\n    if ((offset + len) > io->size) {\n        if (logf) {\n            fprintf(logf, \"adjusting len: original len=%d, io->size=%lu, offset=%lu\\n\",\n                    len, io->size, offset);\n        }\n        len = io->size - offset;\n    }\n\n    retlen = len;\n    if (logf) {\n        fprintf(logf, \"retlen set to %d\\n\", retlen);\n    }\n\n    if (io->ops.block_read) {\n        if (logf) {\n            fprintf(logf, \"using io->ops.block_read op, calling provider implementation\\n\");\n            /* close log before calling out to external ops to avoid holding FILE across call */\n            fclose(logf);\n            logf = NULL;\n        }\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n    } else {\n        if (logf) {\n            fprintf(logf, \"falling back to inline copy loops\\n\");\n        }\n        atomic_thread_fence(memory_order_seq_cst);\n\n        while ( len && (((uintptr_t)dest % sizeof(int)) || ((uintptr_t)ptr % sizeof(int)))) {\n            if (logf) {\n                fprintf(logf, \"byte-align loop: len=%d dest=%p ptr=%p\\n\", len, (void *)dest, (void *)ptr);\n            }\n            *(unsigned char *)dest = *(const unsigned char *)ptr;\n            dest++;\n            ptr++;\n            len--;\n        }\n\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int)) {\n            if (logf) {\n                fprintf(logf, \"word copy loop: len=%d dest=%p ptr=%p\\n\", len, (void *)dest, (void *)ptr);\n            }\n            *(unsigned int *)dest = *(const unsigned int *)ptr;\n        }\n\n        if (logf) {\n            fprintf(logf, \"entering final byte-copy loop: len=%d dest=%p ptr=%p\\n\",\n                    len, (void *)dest, (void *)ptr);\n        }\n\n        /* Probe the final loop (the subject of the MISRA Rule 14.2 report).\n           Log iteration, len, and pointer values for evidence, but preserve\n           original semantics of the loop. */\n        int __iter_probe = 0;\n        for (; len != 0; dest++, ptr++, len--) {\n            if (logf) {\n                fprintf(logf, \"final loop iter=%d len=%d dest=%p ptr=%p\\n\",\n                        __iter_probe++, len, (void *)dest, (void *)ptr);\n            }\n            *(unsigned char *)dest = *(const unsigned char *)ptr;\n        }\n\n        if (logf) {\n            fprintf(logf, \"exited copy loops: final len=%d retlen=%d\\n\", len, retlen);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n\n    return retlen;\n}\n"
}