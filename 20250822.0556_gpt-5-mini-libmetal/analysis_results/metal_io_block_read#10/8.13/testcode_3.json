{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop advances and reads via 'ptr', which is declared as 'unsigned char *ptr' but is only used for reading (e.g. it's cast to 'const unsigned int *' in the assignment). According to MISRA C 2023 R8.13, 'ptr' should point to a const-qualified type whenever possible (e.g. 'const unsigned char *ptr' or 'const void *ptr'). Keeping it non-const violates the rule; the code should be changed so the pointer to the source data is const-qualified and the explicit casts to const become unnecessary.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Helper: append a log line to /tmp/logs/103.txt. Keep this small to avoid\n   changing program behavior except for side-effect of logging. */\nstatic void metal_io_log(const char *tag,\n                         struct metal_io_region *io,\n                         unsigned long offset,\n                         void *ptr,\n                         void *dst,\n                         unsigned char *dest,\n                         int len,\n                         int retlen)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n    /* Print basic state: tag, io pointer, offset, original dst, current ptr/dest, len, retlen */\n    fprintf(f, \"%s: io=%p offset=%lu dst=%p ptr=%p dest=%p len=%d retlen=%d\\n\",\n            tag, (void *)io, offset, dst, ptr, (void *)dest, len, retlen);\n    fclose(f);\n}\n\n/* Detailed per-iteration logging for byte and word copies. Keep separate to\n   avoid clutter in the main flow. */\nstatic void metal_io_log_iter(const char *tag, void *ptr, void *dest, unsigned long offset, int remaining)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"%s: src=%p dst=%p offset=%lu remaining=%d\\n\", tag, ptr, dest, offset, remaining);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    /* Intentionally keep ptr non-const to reproduce/report the original\n       scenario where a pointer is non-const despite only being used for\n       reading. Logging will prove the pointer is only read from. */\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    metal_io_log(\"entry\", io, offset, ptr, dst, dest, len, -1);\n\n    if (!ptr) {\n        metal_io_log(\"null_ptr\", io, offset, ptr, dst, dest, len, -ERANGE);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    metal_io_log(\"after_bounds\", io, offset, ptr, dst, dest, len, retlen);\n\n    if (io->ops.block_read) {\n        metal_io_log(\"use_block_read_enter\", io, offset, ptr, dst, dest, len, retlen);\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        metal_io_log(\"use_block_read_exit\", io, offset, ptr, dst, dest, len, retlen);\n    } else {\n        atomic_thread_fence(memory_order_seq_cst);\n        metal_io_log(\"direct_copy_enter\", io, offset, ptr, dst, dest, len, retlen);\n\n        /* first: align to sizeof(int) by copying bytes */\n        while ( len && (\n            ((uintptr_t)dest % sizeof(int)) ||\n            ((uintptr_t)ptr % sizeof(int)))) {\n            /* Log each byte copy to demonstrate reads via 'ptr' */\n            metal_io_log_iter(\"byte_copy_before\", ptr, dest, offset, len);\n            unsigned char tmp = *(const unsigned char *)ptr;\n            *(unsigned char *)dest = tmp;\n            metal_io_log_iter(\"byte_copy_after\", ptr, dest, offset, len);\n            dest++;\n            ptr++;\n            len--;\n            offset++;\n        }\n\n        /* copy words of sizeof(int) */\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int), offset += sizeof(int)) {\n            metal_io_log_iter(\"word_copy_before\", ptr, dest, offset, len);\n            unsigned int tmp = *(const unsigned int *)ptr;\n            *(unsigned int *)dest = tmp;\n            metal_io_log_iter(\"word_copy_after\", ptr, dest, offset, len);\n        }\n\n        /* tail bytes */\n        for (; len != 0; dest++, ptr++, len--, offset++) {\n            metal_io_log_iter(\"tail_byte_before\", ptr, dest, offset, len);\n            unsigned char tmp = *(const unsigned char *)ptr;\n            *(unsigned char *)dest = tmp;\n            metal_io_log_iter(\"tail_byte_after\", ptr, dest, offset, len);\n        }\n        metal_io_log(\"direct_copy_exit\", io, offset, ptr, dst, dest, len, retlen);\n    }\n    return retlen;\n}\n"
}