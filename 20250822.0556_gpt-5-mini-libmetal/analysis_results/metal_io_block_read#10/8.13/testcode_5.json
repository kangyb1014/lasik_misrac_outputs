{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'ptr' is used only for reading from the IO region (all dereferences are read operations cast to const unsigned char/unsigned int), yet it is declared as 'unsigned char *ptr' (non-const). According to MISRA C 2023 Rule 8.13 it should be declared as 'const unsigned char *ptr' to reflect read-only usage. This mismatch constitutes a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Probe/log helper: append logs about control flow and state to /tmp/logs/103.txt */\nstatic void metal_io_log_probe(const char *msg, struct metal_io_region *io,\n                               unsigned long offset, void *dst,\n                               unsigned char *ptr, int len, int retlen)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[metal_io_block_read] %s\\n\", msg);\n    fprintf(f, \"  io=%p, offset=%lu, dst=%p, ptr=%p, len=%d, retlen=%d\\n\",\n            (void *)io, offset, dst, (void *)ptr, len, retlen);\n    if (io) {\n        /* io->size may not be safe in some contexts if io is malformed, but\n           in normal execution this helps reproduce the scenario */\n        fprintf(f, \"  io->size=%lu\\n\", (unsigned long)io->size);\n        /* Indicate whether a block_read operation pointer is present */\n        fprintf(f, \"  io->ops.block_read=%p\\n\", (void *)io->ops.block_read);\n    }\n    fclose(f);\n}\n\n/* Log a single byte or word operation for detailed trace */\nstatic void metal_io_log_op(const char *op_desc, void *dst, void *src_addr, unsigned long value, int size)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"  %s: dst=%p, src=%p, size=%d, value=0x%lx\\n\",\n            op_desc, dst, src_addr, size, value);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    /* Log entry state */\n    metal_io_log_probe(\"entry\", io, offset, dst, ptr, len, -1);\n\n    if (!ptr) {\n        /* Log the early return due to null pointer */\n        metal_io_log_probe(\"ptr is NULL, returning -ERANGE\", io, offset, dst, ptr, len, -ERANGE);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    if (io->ops.block_read) {\n        metal_io_log_probe(\"using io->ops.block_read\", io, offset, dst, ptr, len, retlen);\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        /* Log result from the block_read callback */\n        metal_io_log_probe(\"returned from io->ops.block_read\", io, offset, dst, ptr, len, retlen);\n    } else {\n        metal_io_log_probe(\"fallback path: CPU copy\", io, offset, dst, ptr, len, retlen);\n        atomic_thread_fence(memory_order_seq_cst);\n        while ( len && (\n            ((uintptr_t)dest % sizeof(int)) ||\n            ((uintptr_t)ptr % sizeof(int)))) {\n            /* Log the byte-level unaligned copy about to happen */\n            unsigned char v = *(const unsigned char *)ptr;\n            metal_io_log_op(\"byte-copy (unaligned)\", dest, ptr, (unsigned long)v, 1);\n\n            *(unsigned char *)dest = v;\n            dest++;\n            ptr++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int)) {\n            unsigned int v = *(const unsigned int *)ptr;\n            metal_io_log_op(\"word-copy (aligned)\", dest, ptr, (unsigned long)v, (int)sizeof(unsigned int));\n\n            *(unsigned int *)dest = v;\n        }\n        for (; len != 0; dest++, ptr++, len--) {\n            unsigned char v = *(const unsigned char *)ptr;\n            metal_io_log_op(\"byte-copy (tail)\", dest, ptr, (unsigned long)v, 1);\n\n            *(unsigned char *)dest = v;\n        }\n    }\n    /* Log final return value */\n    metal_io_log_probe(\"returning\", io, offset, dst, ptr, len, retlen);\n    return retlen;\n}\n"
}