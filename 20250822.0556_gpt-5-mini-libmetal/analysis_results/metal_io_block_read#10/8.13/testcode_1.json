{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_io_block_read, the source pointer is declared as 'unsigned char *ptr' but is only used for reading. The code repeatedly dereferences it via a cast to 'const unsigned char *' (e.g. '*(const unsigned char *)ptr'). Per MISRA C 2023 Rule 8.13, the pointer should be declared to point to a const-qualified type when possible (i.e. 'const unsigned char *ptr'), rather than kept non-const and cast to const at each read.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <errno.h>\n\n/* Probe logger: append-only to /tmp/logs/103.txt. Keeps original logic untouched. */\nstatic void metal_io_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    metal_io_probe_log(\"enter: io=%p offset=%lu dst=%p len=%d\", (void *)io, offset, dst, len);\n    metal_io_probe_log(\"ptr (from metal_io_virt) = %p\", (void *)ptr);\n\n    if (!ptr) {\n        metal_io_probe_log(\"ptr is NULL -> returning -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        metal_io_probe_log(\"requested offset+len (%lu) > io->size (%lu), adjusting len from %d to %lu\",\n            offset + (unsigned long)len, (unsigned long)io->size, len, (unsigned long)(io->size - offset));\n        len = io->size - offset;\n    }\n    retlen = len;\n    metal_io_probe_log(\"after adjust: len=%d retlen=%d io->size=%lu\", len, retlen, (unsigned long)io->size);\n\n    if (io->ops.block_read) {\n        metal_io_probe_log(\"branch: using io->ops.block_read callback\");\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        metal_io_probe_log(\"callback returned retlen=%d\", retlen);\n    } else {\n        metal_io_probe_log(\"branch: performing direct memory copy (no block_read)\");\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Probe alignment and initial conditions */\n        uintptr_t dest_align = (uintptr_t)dest % sizeof(int);\n        uintptr_t ptr_align = (uintptr_t)ptr % sizeof(int);\n        metal_io_probe_log(\"initial align: dest_addr=%p dest_align=%"
}