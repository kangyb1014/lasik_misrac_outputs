{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable ptr is declared as unsigned char * but is only used for reading (the code casts to const unsigned char/unsigned int when dereferencing). The fragment ((uintptr_t)ptr % sizeof(int)) uses the pointer value without modifying the pointee, so ptr could and should be declared as const unsigned char *; leaving it as non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdatomic.h>\n#include <errno.h>\n\nstatic void write_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n\n    write_log(\"ENTER: metal_io_block_read io=%p offset=%lu dst=%p len=%d\\n\",\n              (void *)io, offset, dst, len);\n    write_log(\"virt ptr=%p dest=%p io->size=%lu\\n\", (void *)ptr,\n              (void *)dest, (unsigned long)io->size);\n\n    if (!ptr) {\n        write_log(\"NULL ptr -> returning -ERANGE\\n\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        write_log(\"Requested range (offset+len)=%lu > io->size=%lu, adjusting len\\n\",\n                  (unsigned long)(offset + len), (unsigned long)io->size);\n        len = io->size - offset;\n    }\n    write_log(\"After adjust len=%d\\n\", len);\n\n    retlen = len;\n    if (io->ops.block_read) {\n        write_log(\"Using ops.block_read callback: io=%p offset=%lu dst=%p len=%d\\n\",\n                  (void *)&io->ops, offset, dst, len);\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        write_log(\"block_read returned retlen=%d\\n\", retlen);\n    } else {\n        write_log(\"Fallback path: direct memory copy (no block_read)\\n\");\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Alignment-bytes loop */\n        int iter = 0;\n        while (len && (((uintptr_t)dest % sizeof(int)) ||\n               ((uintptr_t)ptr % sizeof(int)))) {\n            unsigned char val = *(const unsigned char *)ptr;\n            write_log(\"byte-copy iter=%d src=%p dst=%p val=0x%02x rem_dest=%lu rem_ptr=%lu len=%d\\n\",\n                      iter, (void *)ptr, (void *)dest, (unsigned int)val,\n                      (unsigned long)((uintptr_t)dest % sizeof(int)),\n                      (unsigned long)((uintptr_t)ptr % sizeof(int)), len);\n            *(unsigned char *)dest = val;\n            dest++;\n            ptr++;\n            len--;\n            iter++;\n        }\n\n        /* Word-sized copies */\n        iter = 0;\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int)) {\n            unsigned int val = *(const unsigned int *)ptr;\n            write_log(\"word-copy iter=%d src=%p dst=%p val=0x%08x bytes=%zu len=%d\\n\",\n                      iter, (void *)ptr, (void *)dest, (unsigned int)val,\n                      sizeof(int), len);\n            *(unsigned int *)dest = val;\n            iter++;\n        }\n\n        /* Tail bytes */\n        iter = 0;\n        for (; len != 0; dest++, ptr++, len--) {\n            unsigned char val = *(const unsigned char *)ptr;\n            write_log(\"tail-byte iter=%d src=%p dst=%p val=0x%02x len=%d\\n\",\n                      iter, (void *)ptr, (void *)dest, (unsigned int)val, len);\n            *(unsigned char *)dest = val;\n            iter++;\n        }\n    }\n    write_log(\"EXIT: metal_io_block_read retlen=%d\\n\", retlen);\n    return retlen;\n}\n"
}