{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf io->ops.block_read refers (directly or indirectly) to metal_io_block_read, the indirect call retlen = (*io->ops.block_read)(...) will invoke metal_io_block_read again, causing indirect recursion and thus violating MISRA C 2023 Rule 17.2. (Note: the call passes an extra memory_order_seq_cst argument compared with metal_io_block_read's prototype, so assigning that pointer without an incompatible cast would be unlikely; however the fragment as written allows an indirect self-call if the function pointer is set to this function or to a function that calls it.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <stdatomic.h>\n\n/*\n * Probe logger: append human-readable trace messages to /tmp/logs/106.txt\n * Keeps the original logic of metal_io_block_read intact while emitting\n * entry/exit and branch information that helps detect indirect recursion.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (!f)\n        return;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS) || defined(__STDC_LIB_EXT1__)\n    (void)localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp)\n            tm_buf = *tmp;\n        else\n            tm_buf.tm_year = 0;\n    }\n#endif\n    char timestr[64];\n    (void)snprintf(timestr, sizeof(timestr), \"%04d-%02d-%02d %02d:%02d:%02d\",\n                   tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n                   tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n    fprintf(f, \"%s: \", timestr);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\n/* Reentrancy counter to detect nested entries of this function. */\nstatic atomic_int metal_io_block_read_reentrance_cnt = ATOMIC_VAR_INIT(0);\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen = 0;\n\n    /* Increment and record depth as early as possible */\n    int depth = atomic_fetch_add(&metal_io_block_read_reentrance_cnt, 1) + 1;\n    probe_log(\"ENTER metal_io_block_read depth=%d io=%p offset=%lu dst=%p len=%d ops_block_read_present=%s\",\n              depth, (void *)io, offset, dst, len,\n              (io && io->ops.block_read) ? \"yes\" : \"no\");\n\n    if (!ptr) {\n        retlen = -ERANGE;\n        probe_log(\"NULL virt pointer: returning %d depth=%d\", retlen, depth);\n        atomic_fetch_sub(&metal_io_block_read_reentrance_cnt, 1);\n        return retlen;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    if (io->ops.block_read) {\n        probe_log(\"About to call io->ops.block_read depth=%d len=%d\", depth, len);\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        probe_log(\"Returned from io->ops.block_read retlen=%d depth=%d\", retlen, depth);\n    } else {\n        probe_log(\"Using inline copy path depth=%d len=%d\", depth, len);\n        atomic_thread_fence(memory_order_seq_cst);\n        while ( len && (\n            ((uintptr_t)dest % sizeof(int)) ||\n            ((uintptr_t)ptr % sizeof(int)))) {\n            *(unsigned char *)dest =\n                *(const unsigned char *)ptr;\n            dest++;\n            ptr++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)dest = *(const unsigned int *)ptr;\n        for (; len != 0; dest++, ptr++, len--)\n            *(unsigned char *)dest =\n                *(const unsigned char *)ptr;\n    }\n\n    probe_log(\"EXIT metal_io_block_read retlen=%d depth=%d\", retlen, depth);\n    atomic_fetch_sub(&metal_io_block_read_reentrance_cnt, 1);\n    return retlen;\n}\n"
}