{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'len' (an int parameter) is modified by the assignment len = io->size - offset when (offset + len) > io->size. This alters a function parameter inside the function body and therefore violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <errno.h>\n\nstatic void probe_log(const char *evt, struct metal_io_region *io,\n                      unsigned long offset, int len,\n                      const unsigned char *ptr, const void *dst, int retlen)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log key state: event, offset, io->size, len, pointer addresses and retlen */\n    fprintf(f, \"[%s] offset=%lu io_size=%lu len=%d ptr=%p dst=%p retlen=%d\\n\",\n            evt, offset, (unsigned long)io->size, len, (void *)ptr, dst, retlen);\n    fclose(f);\n}\n\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n           void *restrict dst, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    unsigned char *dest = dst;\n    int retlen;\n    int orig_len = len;\n\n    /* Entry probe: record initial parameters and computed virtual pointer */\n    probe_log(\"entry\", io, offset, orig_len, ptr, dst, -1);\n\n    if (!ptr) {\n        probe_log(\"null_ptr\", io, offset, orig_len, ptr, dst, -1);\n        return -ERANGE;\n    }\n\n    /* If adjustment will occur, log before and after the modification of the parameter */\n    if ((offset + len) > io->size) {\n        probe_log(\"adjust_before\", io, offset, len, ptr, dst, -1);\n        len = io->size - offset;\n        probe_log(\"adjust_after\", io, offset, len, ptr, dst, -1);\n    }\n\n    retlen = len;\n    probe_log(\"after_adjust_retlen_set\", io, offset, len, ptr, dst, retlen);\n\n    if (io->ops.block_read) {\n        probe_log(\"block_read_call_before\", io, offset, len, ptr, dst, retlen);\n        retlen = (*io->ops.block_read)(\n            io, offset, dst, memory_order_seq_cst, len);\n        probe_log(\"block_read_call_after\", io, offset, len, ptr, dst, retlen);\n    } else {\n        probe_log(\"manual_copy_start\", io, offset, len, ptr, dst, retlen);\n        atomic_thread_fence(memory_order_seq_cst);\n        while ( len && (\n            ((uintptr_t)dest % sizeof(int)) ||\n            ((uintptr_t)ptr % sizeof(int)))) {\n            *(unsigned char *)dest =\n                *(const unsigned char *)ptr;\n            dest++;\n            ptr++;\n            len--;\n        }\n        for (; len >= (int)sizeof(int); dest += sizeof(int),\n                    ptr += sizeof(int),\n                    len -= sizeof(int))\n            *(unsigned int *)dest = *(const unsigned int *)ptr;\n        for (; len != 0; dest++, ptr++, len--)\n            *(unsigned char *)dest =\n                *(const unsigned char *)ptr;\n        probe_log(\"manual_copy_end\", io, offset, len, ptr, dst, retlen);\n    }\n\n    probe_log(\"return\", io, offset, len, ptr, dst, retlen);\n    return retlen;\n}\n"
}