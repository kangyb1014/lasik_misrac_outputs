{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop decrements the parameter 'len' (len--), modifying a function parameter. Although 'dest' and 'ptr' are local copies and their modification is permitted, changing the parameter 'len' violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_read:\n```c\nint metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_read) {\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t} else {\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\tfor (; len != 0; dest++, ptr++, len--)\n\t\t\t*(unsigned char *)dest =\n\t\t\t\t*(const unsigned char *)ptr;\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_read code.\n",
  "test_code": "int metal_io_block_read(struct metal_io_region *io, unsigned long offset,\n\t       void *restrict dst, int len)\n{\n\t/* Probe log file to capture control flow and state for analysis */\n\tFILE *log = fopen(\"/tmp/logs/107.txt\", \"a\");\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tunsigned char *dest = dst;\n\tint retlen;\n\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_io_block_read: io=%p offset=%lu dst=%p initial_len=%d\\n\",\n\t\t\t(void *)io, offset, dst, len);\n\t}\n\n\tif (!ptr) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"PTR NULL -> return -ERANGE\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -ERANGE;\n\t}\n\n\tif ((offset + len) > io->size) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"Bounds check: offset+len (%lu) > io->size (%lu); old_len=%d\\n\",\n\t\t\t\t(unsigned long)(offset + (unsigned long)len), (unsigned long)io->size, len);\n\t\t}\n\t\tlen = io->size - offset;\n\t\tif (log) {\n\t\t\tfprintf(log, \"len adjusted to %d\\n\", len);\n\t\t}\n\t}\n\tretlen = len;\n\tif (log) {\n\t\tfprintf(log, \"retlen set to %d\\n\", retlen);\n\t}\n\n\tif (io->ops.block_read) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"Delegating to io->ops.block_read (len=%d)\\n\", len);\n\t\t}\n\t\tretlen = (*io->ops.block_read)(\n\t\t\tio, offset, dst, memory_order_seq_cst, len);\n\t\tif (log) {\n\t\t\tfprintf(log, \"io->ops.block_read returned %d\\n\", retlen);\n\t\t}\n\t} else {\n\t\tif (log) {\n\t\t\tfprintf(log, \"Using fallback copy loops: ptr=%p dest=%p len=%d\\n\",\n\t\t\t\t(void *)ptr, (void *)dest, len);\n\t\t}\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t\twhile ( len && (\n\t\t\t((uintptr_t)dest % sizeof(int)) ||\n\t\t\t((uintptr_t)ptr % sizeof(int)))) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"byte-alignment-loop BEFORE: len=%d dest=%p ptr=%p\\n\",\n\t\t\t\t\tlen, (void *)dest, (void *)ptr);\n\t\t\t}\n\t\t\t*(unsigned char *)dest = *(const unsigned char *)ptr;\n\t\t\tdest++;\n\t\t\tptr++;\n\t\t\tlen--;\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"byte-alignment-loop AFTER: len=%d dest=%p ptr=%p\\n\",\n\t\t\t\t\tlen, (void *)dest, (void *)ptr);\n\t\t\t}\n\t\t}\n\t\tfor (; len >= (int)sizeof(int); dest += sizeof(int),\n\t\t\t\t\tptr += sizeof(int),\n\t\t\t\t\tlen -= sizeof(int)) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"word-copy-loop: len=%d dest=%p ptr=%p\\n\",\n\t\t\t\t\tlen, (void *)dest, (void *)ptr);\n\t\t\t}\n\t\t\t*(unsigned int *)dest = *(const unsigned int *)ptr;\n\t\t}\n\t\tfor (; len != 0; dest++, ptr++, len--) {\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"tail-byte-loop BEFORE: len=%d dest=%p ptr=%p\\n\",\n\t\t\t\t\tlen, (void *)dest, (void *)ptr);\n\t\t\t}\n\t\t\t*(unsigned char *)dest = *(const unsigned char *)ptr;\n\t\t\tif (log) {\n\t\t\t\t/* len will be decremented by the for-loop control expression */\n\t\t\t\tfprintf(log, \"tail-byte-loop AFTER (expect next_len=%d): dest=%p ptr=%p\\n\",\n\t\t\t\t\tlen - 1, (void *)dest, (void *)ptr);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"EXIT metal_io_block_read: retlen=%d\\n\", retlen);\n\t\tfclose(log);\n\t}\n\treturn retlen;\n}\n"
}