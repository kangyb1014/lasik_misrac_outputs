{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_linux_dev_open, ldev is allocated unconditionally before entering the for_each_linux_driver loop (ldev = malloc(...); if (!ldev) return -ENOMEM;). Nothing in the shown code sets ldev to NULL before the inner fragment, so inside the loop the condition if (!ldev) and its consequent malloc (and the subsequent if (!ldev) return -ENOMEM;) will never lead to allocation or return. Removing those two checks and the allocation would not change program behaviour. Therefore those operations are dead code and violate MISRA C 2023 Rule 2.2. (This conclusion assumes driver callbacks do not deliberately reset ldev to NULL; given the provided code, the checks are redundant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_map:\n```c\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t       nents_in, sg_out);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logger: append informative logs to /tmp/logs/312.txt. */\nstatic void metal_log_probe(const char *stage,\n                            struct metal_bus *bus,\n                            struct metal_device *device,\n                            struct linux_bus *lbus,\n                            struct linux_device *ldev,\n                            uint32_t dir,\n                            int nents_in,\n                            struct metal_sg *sg_in,\n                            struct metal_sg *sg_out,\n                            void *dev_dma_map_ptr,\n                            int rv_valid,\n                            int rv)\n{\n    FILE *f = fopen(\"/tmp/logs/312.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* Timestamp-ish marker may be helpful; use pointer to FILE for uniqueness */\n    fprintf(f, \"--- metal_linux_dev_dma_map %s ---\\n\", stage ? stage : \"?\");\n    fprintf(f, \"bus=%p device=%p lbus=%p ldev=%p\\n\", (void *)bus, (void *)device, (void *)lbus, (void *)ldev);\n    fprintf(f, \"dir=%u nents_in=%d sg_in=%p sg_out=%p\\n\", (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n\n    /* Print driver pointer and function pointer address (if accessible without deref error).\n       We avoid dereferencing ldev if it's NULL; this mirrors the information the caller will use\n       to invoke the driver routine but does not alter control flow. */\n    if (ldev)\n    {\n        /* ldev->ldrv may be NULL; print pointer value. Accessing ldev->ldrv is equivalent\n           to what the original code will do when it calls the function pointer. */\n        fprintf(f, \"ldev->ldrv=%p\\n\", (void *)ldev->ldrv);\n        if (ldev->ldrv)\n            fprintf(f, \"ldev->ldrv->dev_dma_map=%p\\n\", dev_dma_map_ptr);\n        else\n            fprintf(f, \"ldev->ldrv is NULL\\n\");\n    }\n    else\n    {\n        fprintf(f, \"ldev is NULL\\n\");\n    }\n\n    if (rv_valid)\n        fprintf(f, \"return_value=%d\\n\", rv);\n\n    fprintf(f, \"--- end %s ---\\n\", stage ? stage : \"?\");\n    fclose(f);\n}\n\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n                     struct metal_device *device,\n                     uint32_t dir,\n                     struct metal_sg *sg_in,\n                     int nents_in,\n                     struct metal_sg *sg_out)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Log entry state. We attempt to obtain the pointer to the function to be invoked\n       for later logging. We do not change the original control flow or the eventual\n       invocation of the driver's function pointer. */\n    void *fn_ptr = NULL;\n    if (ldev && ldev->ldrv)\n        fn_ptr = (void *)ldev->ldrv->dev_dma_map;\n\n    metal_log_probe(\"entry\", bus, device, lbus, ldev, dir, nents_in, sg_in, sg_out, fn_ptr, 0, 0);\n\n    /* Preserve original behavior: call driver's dev_dma_map and return its result. */\n    int rv = ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in, nents_in, sg_out);\n\n    /* Log exit including returned value. */\n    metal_log_probe(\"exit\", bus, device, lbus, ldev, dir, nents_in, sg_in, sg_out, fn_ptr, 1, rv);\n\n    return rv;\n}\n"
}