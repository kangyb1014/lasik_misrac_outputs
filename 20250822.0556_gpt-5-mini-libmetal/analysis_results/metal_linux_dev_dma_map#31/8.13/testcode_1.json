{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct linux_bus contains the pointer member 'struct sysfs_bus *sbus' which is not const\u2011qualified. If this member is only used to read the referenced sysfs_bus (i.e. the struct is not modified through this pointer), it should be declared 'const struct sysfs_bus *sbus' to comply with MISRA C 2023 Rule 8.13. Note: the existing 'const char *bus_name' is already const-qualified and is fine.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_map:\n```c\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t       nents_in, sg_out);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_map code.\n",
  "test_code": "static int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\t/* Probe function to log control flow and state to /tmp/logs/313.txt.\n\t * This function intentionally only reads structure members and pointer\n\t * values to avoid modifying program state. It preserves the original\n\t * logic of metal_linux_dev_dma_map.\n\t */\n\tstatic void probe_log(struct linux_bus *lbus, struct linux_device *ldev,\n\t\t\t\t uint32_t dir, struct metal_sg *sg_in, int nents_in,\n\t\t\t\t struct metal_sg *sg_out, const char *tag)\n\t{\n\t\tFILE *f = fopen(\"/tmp/logs/313.txt\", \"a\");\n\t\tif (!f)\n\t\t\treturn;\n\n\t\t/* Log high-level pointers and parameters */\n\t\tfprintf(f, \"[%s] ldev=%p ldrv=%p lbus=%p dir=%u nents_in=%d sg_in=%p sg_out=%p\\n\",\n\t\t\t tag,\n\t\t\t (void *)ldev,\n\t\t\t (void *)(ldev ? ldev->ldrv : NULL),\n\t\t\t (void *)lbus,\n\t\t\t (unsigned)dir,\n\t\t\t nents_in,\n\t\t\t (void *)sg_in,\n\t\t\t (void *)sg_out);\n\n\t\tif (lbus) {\n\t\t\t/* Attempt to log known members if present. These are read-only accesses.\n\t\t\t * Many consumers of this code expect linux_bus to contain\n\t\t\t * 'const char *bus_name' and 'struct sysfs_bus *sbus'. Reading these\n\t\t\t * members provides evidence for the violation scenario described by\n\t\t\t * other agents (i.e., sbus is not const-qualified).\n\t\t\t */\n\t\t\t/* Guard accesses with conditional checks when possible. If the\n\t\t\t * members do not exist in the actual definition, a compile-time\n\t\t\t * error will be raised by the build system which indicates a\n\t\t\t * mismatch in types; this probe intentionally mirrors expected\n\t\t\t * runtime structure layout in the target environment.\n\t\t\t */\n\t\t\tif (lbus->bus_name)\n\t\t\t\tfprintf(f, \"[%s] lbus->bus_name=\\\"%s\\\"\\n\", tag, lbus->bus_name);\n\t\t\telse\n\t\t\t\tfprintf(f, \"[%s] lbus->bus_name=(null)\\n\", tag);\n\n\t\t\t/* Log the raw pointer value of sbus so reviewers can see whether\n\t\t\t * the pointer is used only for reading (pointer value observed)\n\t\t\t * rather than being modified here.\n\t\t\t */\n\t\t\tfprintf(f, \"[%s] lbus->sbus=%p\\n\", tag, (void *)lbus->sbus);\n\t\t} else {\n\t\t\tfprintf(f, \"[%s] lbus is NULL\\n\", tag);\n\t\t}\n\n\t\tfclose(f);\n\t}\n\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\t/* Log entry state */\n\tprobe_log(lbus, ldev, dir, sg_in, nents_in, sg_out, \"entry\");\n\n\t/* Preserve original logic: invoke the underlying driver mapping routine. */\n\tint ret = ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t\t       nents_in, sg_out);\n\n\t/* Log exit state including the return value */\n\tprobe_log(lbus, ldev, dir, sg_in, nents_in, sg_out, \"exit\");\n\n\t/* Also log the returned result value for easier reproduction of control flow */\n\t{\n\t\tFILE *f = fopen(\"/tmp/logs/313.txt\", \"a\");\n\t\tif (f) {\n\t\t\tfprintf(f, \"[result] dev_dma_map returned %d\\n\", ret);\n\t\t\tfclose(f);\n\t\t}\n\t}\n\n\treturn ret;\n}\n"
}