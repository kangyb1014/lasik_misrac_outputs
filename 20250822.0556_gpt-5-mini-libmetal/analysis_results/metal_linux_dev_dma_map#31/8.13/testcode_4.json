{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer parameter 'struct metal_sg *sg_in' that is used only as input (not modified) and is passed through to the driver callback. According to MISRA C 2023 Rule 8.13 this should be declared as a pointer to a const-qualified type (const struct metal_sg *sg_in). (Note: sg_out is an output buffer and must remain non-const; bus/device could also be const if the helper conversion functions were adjusted, but the immediate clear violation is the non-const sg_in.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_map:\n```c\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t       nents_in, sg_out);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers: write logs to /tmp/logs/313.txt */\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors other than critical ones. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/313.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0) {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timestr);\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\n/* Modified function with probes. The original logic is preserved. */\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n                     struct metal_device *device,\n                     uint32_t dir,\n                     struct metal_sg *sg_in,\n                     int nents_in,\n                     struct metal_sg *sg_out)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n\n    /* Capture state before calling the driver callback. */\n    log_append(\"ENTER metal_linux_dev_dma_map: bus=%p, device=%p, to_linux_bus=%p, to_linux_device=%p, dir=0x%08x, sg_in=%p, nents_in=%d, sg_out=%p\",\n               (void *)bus, (void *)device, (void *)lbus, (void *)ldev, (unsigned)dir,\n               (void *)sg_in, nents_in, (void *)sg_out);\n\n    /* Log more details if available without dereferencing unknown structures. */\n    if (ldev == NULL) {\n        log_append(\"NOTE: ldev is NULL\");\n    } else {\n        void *ldrv_ptr = (void *)ldev->ldrv;\n        log_append(\"ldev=%p, ldrv=%p\", (void *)ldev, ldrv_ptr);\n    }\n    if (lbus == NULL) {\n        log_append(\"NOTE: lbus is NULL\");\n    } else {\n        log_append(\"lbus=%p\", (void *)lbus);\n    }\n\n    /* Call the original driver mapping function and preserve behavior. */\n    int ret = ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n                                      nents_in, sg_out);\n\n    /* Capture state after the driver callback to show the control flow and the result. */\n    log_append(\"EXIT metal_linux_dev_dma_map: return=%d, bus=%p, device=%p, sg_in=%p, sg_out=%p, nents_in=%d\",\n               ret, (void *)bus, (void *)device, (void *)sg_in, (void *)sg_out, nents_in);\n\n    return ret;\n}\n"
}