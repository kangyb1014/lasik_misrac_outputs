{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct metal_device contains pointer members that are not const-qualified where they appear to be immutable. In particular, 'struct metal_bus *bus' should be 'const struct metal_bus *bus' if the device only refers to its bus and does not modify it. Likewise, the generic 'void *irq_info' could be 'const void *irq_info' if the IRQ information is read-only. ('name' is already const-qualified.) If these pointers are only used for reading, the lack of const qualification violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_dma_map:\n```c\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tstruct linux_device *ldev = to_linux_device(device);\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\n\treturn ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in,\n\t\t\t\t       nents_in, sg_out);\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic int metal_linux_dev_dma_map(struct metal_bus *bus,\n                     struct metal_device *device,\n                     uint32_t dir,\n                     struct metal_sg *sg_in,\n                     int nents_in,\n                     struct metal_sg *sg_out)\n{\n    struct linux_device *ldev = to_linux_device(device);\n    struct linux_bus *lbus = to_linux_bus(bus);\n    int ret;\n    FILE *logf = fopen(\"/tmp/logs/313.txt\", \"a\");\n\n    if (logf != NULL) {\n        /* Log the entry and key pointers/state to help reproduce the scenario */\n        (void)fprintf(logf, \"metal_linux_dev_dma_map ENTRY: bus=%p device=%p dir=%u nents_in=%d sg_in=%p sg_out=%p\\n\",\n                      (void *)bus, (void *)device, (unsigned)dir, nents_in,\n                      (void *)sg_in, (void *)sg_out);\n        (void)fprintf(logf, \"  to_linux_device -> ldev=%p\\n\", (void *)ldev);\n        (void)fprintf(logf, \"  to_linux_bus    -> lbus=%p\\n\", (void *)lbus);\n\n        /* Log driver structure pointer if available (matches original dereference usage) */\n        if (ldev != (struct linux_device *)0) {\n            (void)fprintf(logf, \"  ldev->ldrv=%p\\n\", (void *)ldev->ldrv);\n        } else {\n            (void)fprintf(logf, \"  ldev is NULL\\n\");\n        }\n\n        (void)fclose(logf);\n    }\n\n    /* Preserve original logic: forward the call and capture return value for logging */\n    ret = ldev->ldrv->dev_dma_map(lbus, ldev, dir, sg_in, nents_in, sg_out);\n\n    logf = fopen(\"/tmp/logs/313.txt\", \"a\");\n    if (logf != NULL) {\n        (void)fprintf(logf, \"metal_linux_dev_dma_map EXIT: result=%d\\n\", ret);\n        (void)fclose(logf);\n    }\n\n    return ret;\n}\n"
}