{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the global field _metal.tmp_path is declared as a non-const pointer (e.g. char *tmp_path), then assigning tmp_path (type const char *) to it discards the const qualifier. That assignment removes const-protection on data that should be read-only (environment string or literal), which violates MISRA C 2023 Rule 8.13. (If _metal.tmp_path is instead declared as const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/93.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_init:\n```c\nint metal_init(const struct metal_init_params *params)\n{\n\tint error = 0;\n\n\tif (_metal.common.ref_count++ != 0)\n\t\treturn 0;\n\n\tmemset(&_metal, 0, sizeof(_metal));\n\n\t_metal.common.log_handler   = params->log_handler;\n\t_metal.common.log_level     = params->log_level;\n\n\tmetal_list_init(&_metal.common.bus_list);\n\tmetal_list_init(&_metal.common.generic_shmem_list);\n\tmetal_list_init(&_metal.common.generic_device_list);\n\n\terror = metal_sys_init(params);\n\tif (error)\n\t\treturn error;\n\n\t++_metal.common.ref_count;\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_init code.\n",
  "test_code": "int metal_init(const struct metal_init_params *params)\n{\n    int error = 0;\n    FILE *log_fp = fopen(\"/tmp/logs/93.txt\", \"a\");\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"metal_init: entered with params=%p\\n\", (const void *)params);\n    }\n\n    /* Capture ref_count state before the original postfix increment check */\n    if (log_fp)\n    {\n        fprintf(log_fp, \"_metal.common.ref_count before check: %u\\n\",\n                (unsigned int)_metal.common.ref_count);\n    }\n\n    /* Preserve original logic exactly */\n    if (_metal.common.ref_count++ != 0)\n    {\n        if (log_fp)\n        {\n            fprintf(log_fp, \"metal_init: early return because ref_count was non-zero.\"\n                    \" ref_count after postfix increment: %u\\n\",\n                    (unsigned int)_metal.common.ref_count);\n            fflush(log_fp);\n            fclose(log_fp);\n        }\n        return 0;\n    }\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"metal_init: continued after initial increment.\"\n                \" ref_count now: %u\\n\",\n                (unsigned int)_metal.common.ref_count);\n    }\n\n    /* Probe state of _metal.tmp_path (relevant to Rule 8.13 scenario) before it's cleared */\n    if (log_fp)\n    {\n        const char *tmp_before = _metal.tmp_path;\n        fprintf(log_fp, \"_metal.tmp_path before memset: %p\\n\", (const void *)tmp_before);\n        if (tmp_before != NULL)\n        {\n            /* Print the pointed string content if available; do not modify it */\n            fprintf(log_fp, \"_metal.tmp_path content before memset: \\\"%s\\\"\\n\", tmp_before);\n        }\n    }\n\n    /* Original logic: clear the global state */\n    memset(&_metal, 0, sizeof(_metal));\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"after memset: _metal.common.ref_count=%u, _metal.tmp_path=%p\\n\",\n                (unsigned int)_metal.common.ref_count,\n                (const void *)_metal.tmp_path);\n    }\n\n    /* Preserve assignments from params */\n    _metal.common.log_handler   = params->log_handler;\n    _metal.common.log_level     = params->log_level;\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"params->log_handler=%p, params->log_level=%d\\n\",\n                (const void *)params->log_handler, params->log_level);\n    }\n\n    /* Preserve original initializations */\n    metal_list_init(&_metal.common.bus_list);\n    metal_list_init(&_metal.common.generic_shmem_list);\n    metal_list_init(&_metal.common.generic_device_list);\n\n    error = metal_sys_init(params);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"metal_sys_init returned %d\\n\", error);\n    }\n\n    if (error)\n    {\n        if (log_fp)\n        {\n            fflush(log_fp);\n            fclose(log_fp);\n        }\n        return error;\n    }\n\n    /* Probe _metal.tmp_path after system init: this can capture an assignment of a\n       const char * into a non-const char * field (the violation scenario). */\n    if (log_fp)\n    {\n        const char *tmp_after = _metal.tmp_path;\n        fprintf(log_fp, \"_metal.tmp_path after metal_sys_init: %p\\n\", (const void *)tmp_after);\n        if (tmp_after != NULL)\n        {\n            fprintf(log_fp, \"_metal.tmp_path content after metal_sys_init: \\\"%s\\\"\\n\", tmp_after);\n        }\n    }\n\n    /* Final reference increment as in original code */\n    ++_metal.common.ref_count;\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"metal_init: final ref_count=%u\\n\",\n                (unsigned int)_metal.common.ref_count);\n        fflush(log_fp);\n        fclose(log_fp);\n    }\n\n    return error;\n}\n"
}