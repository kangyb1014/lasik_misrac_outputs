{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'ldrv' is declared as 'struct linux_driver *ldrv' but is only used to read driver data and to call its function pointers (not to modify the driver object). Therefore it could and should be declared as 'const struct linux_driver *ldrv'. As written, the non-const pointer allows accidental modification of the driver object through 'ldrv' (for example ldrv->dev_open = NULL), which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "static int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\tFILE *f = NULL;\n\n\t/* Open log file for append; best-effort logging if available. */\n\tf = fopen(\"/tmp/logs/333.txt\", \"a\");\n\tif (f) {\n\t\tfprintf(f, \"metal_linux_dev_open ENTER: bus=%p dev_name=%s\\n\", (void *)bus, dev_name ? dev_name : \"(null)\");\n\t}\n\n\tldev = malloc(sizeof(*ldev));\n\tif (f) {\n\t\tfprintf(f, \"allocated ldev initial=%p\\n\", (void *)ldev);\n\t}\n\tif (!ldev) {\n\t\tif (f) fclose(f);\n\t\treturn -ENOMEM;\n\t}\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\t\t/* Probe: log driver pointer and its relevant function pointers. */\n\t\tif (f) {\n\t\t\tfprintf(f, \"iterating driver: ldrv=%p\\n\", (void *)ldrv);\n\t\t\tfprintf(f, \"  ldrv->sdrv=%p ldrv->dev_open=%p ldrv->dev_close=%p\\n\",\n\t\t\t\t(void *)ldrv->sdrv, (void *)ldrv->dev_open, (void *)ldrv->dev_close);\n\t\t}\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open) {\n\t\t\tif (f) fprintf(f, \"  skipping driver: no sdrv or dev_open\\n\");\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev) {\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\t\tif (f) fprintf(f, \"allocated ldev (second chance)=%p\\n\", (void *)ldev);\n\t\t}\n\t\tif (!ldev) {\n\t\t\tif (f) fclose(f);\n\t\t\treturn -ENOMEM;\n\t\t}\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\tif (f) {\n\t\t\tfprintf(f, \"  prepared ldev=%p linked to ldrv=%p name=%s\\n\",\n\t\t\t\t(void *)ldev, (void *)ldrv, ldev->dev_name);\n\t\t}\n\n\t\t/* Try and open the device. */\n\t\tif (f) fprintf(f, \"  calling dev_open: ldrv->dev_open(%p, %p)\\n\", (void *)lbus, (void *)ldev);\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (f) fprintf(f, \"  dev_open returned %d\\n\", error);\n\t\tif (error) {\n\t\t\tif (f) fprintf(f, \"  dev_open failed - calling dev_close and continuing\\n\");\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tif (f) {\n\t\t\tfprintf(f, \"  device opened successfully: device=%p name=%s\\n\", (void *)*device, (*device)->name);\n\t\t}\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\tif (f) fclose(f);\n\t\treturn 0;\n\t}\n\n\tif (ldev) {\n\t\tif (f) fprintf(f, \"no matching driver found, freeing ldev=%p\\n\", (void *)ldev);\n\t\tfree(ldev);\n\t}\n\n\tif (f) {\n\t\tfprintf(f, \"metal_linux_dev_open EXIT: no device found, returning -ENODEV\\n\");\n\t\tfclose(f);\n\t}\n\n\treturn -ENODEV;\n}\n"
}