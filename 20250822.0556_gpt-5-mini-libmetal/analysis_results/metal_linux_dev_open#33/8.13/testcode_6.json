{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'struct linux_driver *ldrv;' is only used for read-only access (checking ldrv->sdrv, calling ldrv->dev_open/dev_close) and thus could be declared as 'const struct linux_driver *ldrv;'. As written it is not const-qualified, so it does not follow MISRA C 2023 Rule 8.13. (Note: making ldrv const would also require ldev->ldrv to be const to avoid qualifier mismatch.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "static int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n\n    /* Log entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER metal_linux_dev_open: bus=%p dev_name=%s device_out=%p\\n\",\n                    (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n            fclose(log);\n        }\n    }\n\n    ldev = malloc(sizeof(*ldev));\n    if (!ldev) {\n        FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"malloc initial ldev FAILED\\n\");\n            fclose(log);\n        }\n        return -ENOMEM;\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"malloc initial ldev OK: ldev=%p\\n\", (void *)ldev);\n            fclose(log);\n        }\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n\n        /* Probe: entering iteration with current driver pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"ITER driver: ldrv=%p sdrv=%p dev_open=%p dev_close=%p\\n\",\n                        (void *)ldrv,\n                        (void *)(ldrv ? ldrv->sdrv : NULL),\n                        (void *)(ldrv ? ldrv->dev_open : NULL),\n                        (void *)(ldrv ? ldrv->dev_close : NULL));\n                fclose(log);\n            }\n        }\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open)\n            continue;\n\n        /* Allocate a linux device if we haven't already. */\n        if (!ldev)\n            ldev = malloc(sizeof(*ldev));\n        if (!ldev) {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"malloc inside loop FAILED\\n\");\n                fclose(log);\n            }\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        memset(ldev, 0, sizeof(*ldev));\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n        ldev->fd = -1;\n        ldev->ldrv = ldrv;\n        ldev->device.bus = bus;\n\n        /* Log prepared ldev state before calling driver open */\n        {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"prepared ldev=%p name=%s fd=%d ldrv=%p\\n\",\n                        (void *)ldev,\n                        ldev->dev_name[0] ? ldev->dev_name : \"(empty)\",\n                        ldev->fd,\n                        (void *)ldev->ldrv);\n                fclose(log);\n            }\n        }\n\n        /* Try and open the device. */\n        {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"calling dev_open on ldrv=%p\\n\", (void *)ldrv);\n                fclose(log);\n            }\n        }\n\n        error = ldrv->dev_open(lbus, ldev);\n\n        /* Log result of dev_open */\n        {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"dev_open returned %d for ldrv=%p ldev=%p\\n\", error, (void *)ldrv, (void *)ldev);\n                fclose(log);\n            }\n        }\n\n        if (error) {\n            /* Log and call dev_close as in original code */\n            {\n                FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"dev_open failed, calling dev_close for ldrv=%p\\n\", (void *)ldrv);\n                    fclose(log);\n                }\n            }\n\n            ldrv->dev_close(lbus, ldev);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"dev_close returned for ldrv=%p\\n\", (void *)ldrv);\n                    fclose(log);\n                }\n            }\n\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n\n        /* Log success and return */\n        {\n            FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"device opened successfully: device=%p name=%s ldrv=%p\\n\",\n                        (void *)(*device), (*device)->name ? (*device)->name : \"(null)\", (void *)ldev->ldrv);\n                fclose(log);\n            }\n        }\n\n        return 0;\n    }\n\n    if (ldev) {\n        FILE *log = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"no driver matched, freeing ldev=%p and returning -ENODEV\\n\", (void *)ldev);\n            fclose(log);\n        }\n        free(ldev);\n    }\n\n    return -ENODEV;\n}\n"
}