{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop variable/pointer ldrv is declared as a non-const pointer (struct linux_driver *ldrv) but is only used for read-only access (calling dev_open/dev_close and reading driver metadata). Likewise ldev->ldrv is a non-const pointer field that simply stores the driver pointer. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Here ldrv (and the ldev->ldrv field) could and should be declared as const struct linux_driver * (and struct linux_device::ldrv changed to const struct linux_driver *) to reflect that the driver objects are not modified through these pointers. Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "static int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\tFILE *logf = fopen(\"/tmp/logs/333.txt\", \"a\");\n\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER metal_linux_dev_open: bus=%p dev_name=%s device=%p\\n\",\n\t\t\t(void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\t}\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"malloc for ldev failed -> returning -ENOMEM\\n\");\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENOMEM;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"allocated initial ldev=%p\\n\", (void *)ldev);\n\t}\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\tif (logf) {\n\t\t\t/* Log driver pointer and key fields to capture read-only usage */\n\t\t\tfprintf(logf, \"loop: ldrv=%p sdrv=%p dev_open=%p dev_close=%p\\n\",\n\t\t\t\t(void *)ldrv,\n\t\t\t\t(void *)(ldrv ? ldrv->sdrv : NULL),\n\t\t\t\t(void *)(ldrv ? (void *)ldrv->dev_open : NULL),\n\t\t\t\t(void *)(ldrv ? (void *)ldrv->dev_close : NULL));\n\t\t}\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"viable driver found: ldrv=%p\\n\", (void *)ldrv);\n\t\t}\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"malloc for ldev (in-loop) failed -> returning -ENOMEM\\n\");\n\t\t\t\tfclose(logf);\n\t\t\t}\n\t\t\treturn -ENOMEM;\n\t\t}\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"using ldev=%p for driver %p\\n\", (void *)ldev, (void *)ldrv);\n\t\t}\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"ldev reset: dev_name=%s fd=%d ldrv=%p bus=%p\\n\",\n\t\t\t\tldev->dev_name, ldev->fd, (void *)ldev->ldrv, (void *)ldev->device.bus);\n\t\t}\n\n\t\t/* Try and open the device. */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"calling dev_open for ldrv=%p, ldev=%p\\n\", (void *)ldrv, (void *)ldev);\n\t\t}\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"dev_open returned %d for ldrv=%p ldev=%p\\n\",\n\t\t\t\terror, (void *)ldrv, (void *)ldev);\n\t\t}\n\t\tif (error) {\n\t\t\tif (logf) {\n\t\t\t\tfprintf(logf, \"dev_open failed, calling dev_close for ldrv=%p ldev=%p\\n\",\n\t\t\t\t\t(void *)ldrv, (void *)ldev);\n\t\t\t}\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"device opened successfully: device=%p name=%s ldev=%p ldrv=%p\\n\",\n\t\t\t\t(void *)(*device), (*device)->name, (void *)ldev, (void *)ldrv);\n\t\t}\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\tif (logf) fclose(logf);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\tif (logf) {\n\t\tfprintf(logf, \"no driver accepted device %s -> returning -ENODEV\\n\",\n\t\t\tdev_name ? dev_name : \"(null)\");\n\t\tfclose(logf);\n\t}\n\n\treturn -ENODEV;\n}\n"
}