{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code stores a pointer to a driver from the bus into the device's ldrv member, but the device's ldrv member is declared as a non-const pointer (struct linux_driver *ldrv). The driver object is only inspected/called (fields and function pointers are read) and not modified via this pointer, so the pointer should be to a const-qualified type (const struct linux_driver *) under MISRA C 2023 Rule 8.13. Thus the assignment ldev->ldrv = ldrv violates Rule 8.13. (If, elsewhere in the code, the driver object is actually modified via ldev->ldrv, then making it const would be incorrect; otherwise change the member and loop variable to const struct linux_driver *.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "static int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n    FILE *f = NULL;\n\n    /* Log function entry and input state */\n    f = fopen(\"/tmp/logs/333.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"enter metal_linux_dev_open: bus=%p dev_name=%s device=%p\\n\",\n                (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n        fclose(f);\n    }\n\n    ldev = malloc(sizeof(*ldev));\n    if (!ldev) {\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"malloc failed for ldev\\n\");\n            fclose(f);\n        }\n        return -ENOMEM;\n    }\n\n    f = fopen(\"/tmp/logs/333.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"allocated initial ldev=%p\\n\", (void *)ldev);\n        fclose(f);\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n\n        /* Log current driver pointer and some fields we will inspect */\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"iter driver: ldrv=%p sdrv=%p dev_open=%p dev_close=%p\\n\",\n                    (void *)ldrv,\n                    (void *)(ldrv ? ldrv->sdrv : NULL),\n                    (void *)(ldrv ? ldrv->dev_open : NULL),\n                    (void *)(ldrv ? ldrv->dev_close : NULL));\n            fclose(f);\n        }\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open) {\n            f = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"skipping driver %p: sdrv=%p dev_open=%p\\n\",\n                        (void *)ldrv, (void *)ldrv->sdrv, (void *)ldrv->dev_open);\n                fclose(f);\n            }\n            continue;\n        }\n\n        /* Allocate a linux device if we haven't already. */\n        if (!ldev)\n            ldev = malloc(sizeof(*ldev));\n        if (!ldev) {\n            f = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"malloc failed for ldev in loop\\n\");\n                fclose(f);\n            }\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        memset(ldev, 0, sizeof(*ldev));\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n        ldev->fd = -1;\n\n        /* Log state just before assigning the driver pointer */\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"before assign: ldev=%p dev_name=%s ldrv=%p\\n\",\n                    (void *)ldev, ldev->dev_name, (void *)ldrv);\n            fprintf(f, \"driver fields: sdrv=%p dev_open=%p dev_close=%p\\n\",\n                    (void *)ldrv->sdrv, (void *)ldrv->dev_open, (void *)ldrv->dev_close);\n            fclose(f);\n        }\n\n        ldev->ldrv = ldrv;\n\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"assigned ldev->ldrv = %p (driver not modified here)\\n\", (void *)ldrv);\n            fclose(f);\n        }\n\n        ldev->device.bus = bus;\n\n        /* Try and open the device. */\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"calling dev_open: ldrv=%p dev_open=%p ldev=%p\\n\",\n                    (void *)ldrv, (void *)ldrv->dev_open, (void *)ldev);\n            fclose(f);\n        }\n\n        error = ldrv->dev_open(lbus, ldev);\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"dev_open returned %d for ldrv=%p ldev=%p\\n\", error, (void *)ldrv, (void *)ldev);\n            fclose(f);\n        }\n        if (error) {\n            f = fopen(\"/tmp/logs/333.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"dev_open failed, calling dev_close for ldrv=%p ldev=%p\\n\",\n                        (void *)ldrv, (void *)ldev);\n                fclose(f);\n            }\n            ldrv->dev_close(lbus, ldev);\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"device opened successfully: device=%p name=%s bus=%p\\n\",\n                    (void *)(*device), (*device)->name, (void *)bus);\n            fclose(f);\n        }\n\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n        return 0;\n    }\n\n    if (ldev) {\n        f = fopen(\"/tmp/logs/333.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"no driver found, freeing ldev=%p and returning -ENODEV\\n\", (void *)ldev);\n            fclose(f);\n        }\n        free(ldev);\n    }\n\n    return -ENODEV;\n}"
}