{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'ldev' is allocated immediately before the for_each_linux_driver loop (ldev = malloc(...)); if that allocation fails the function returns. There is no assignment or free setting ldev to NULL inside the loop, so the test inside the loop 'if (!ldev) ldev = malloc(sizeof(*ldev));' will always evaluate false. Consequently the inner allocation and the subsequent 'if (!ldev) return -ENOMEM;' are unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/331.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Simple probe logger that appends control-flow/state info into /tmp/logs/331.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/331.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n\n    log_probe(\"ENTER: metal_linux_dev_open(bus=%p, dev_name=%s, device=%p) lbus=%p\",\n              (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device, (void *)lbus);\n\n    ldev = malloc(sizeof(*ldev));\n    log_probe(\"AFTER initial malloc: ldev=%p (requested_size=%zu)\", (void *)ldev, sizeof(*ldev));\n    if (!ldev) {\n        log_probe(\"ERROR: initial malloc failed, returning -ENOMEM\");\n        return -ENOMEM;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n        log_probe(\"LOOP: entered for_each_linux_driver with ldrv=%p\", (void *)ldrv);\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open) {\n            log_probe(\"SKIP: driver %p not viable (sdrv=%p, dev_open=%p)\",\n                      (void *)ldrv, (void *)ldrv->sdrv, (void *)ldrv->dev_open);\n            continue;\n        }\n        log_probe(\"VIABLE: driver %p seems viable (sdrv=%p, dev_open=%p)\",\n                  (void *)ldrv, (void *)ldrv->sdrv, (void *)ldrv->dev_open);\n\n        /* Allocate a linux device if we haven't already. */\n        log_probe(\"CHECK: before inner allocation check, ldev=%p\", (void *)ldev);\n        if (!ldev)\n            ldev = malloc(sizeof(*ldev));\n        log_probe(\"AFTER inner malloc attempt: ldev=%p\", (void *)ldev);\n        if (!ldev) {\n            log_probe(\"ERROR: inner malloc failed, returning -ENOMEM (this path is expected to be unreachable if initial malloc succeeded)\");\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        log_probe(\"RESET: memset ldev=%p size=%zu\", (void *)ldev, sizeof(*ldev));\n        memset(ldev, 0, sizeof(*ldev));\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n        ldev->fd = -1;\n        ldev->ldrv = ldrv;\n        ldev->device.bus = bus;\n\n        /* Try and open the device. */\n        log_probe(\"CALL: calling ldrv->dev_open=%p for ldev=%p (dev_name=%s)\",\n                  (void *)ldrv->dev_open, (void *)ldev, dev_name ? dev_name : \"(null)\");\n        error = ldrv->dev_open(lbus, ldev);\n        log_probe(\"RETURN: ldrv->dev_open returned %d for ldrv=%p, ldev=%p\", error, (void *)ldrv, (void *)ldev);\n        if (error) {\n            log_probe(\"CLEANUP: calling ldrv->dev_close=%p for ldev=%p after error=%d\", (void *)ldrv->dev_close, (void *)ldev, error);\n            ldrv->dev_close(lbus, ldev);\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        log_probe(\"SUCCESS: device opened, ldev=%p, device=%p, device->name=%s\", (void *)ldev, (void *)(*device), (*device)->name ? (*device)->name : \"(null)\");\n\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n        return 0;\n    }\n\n    if (ldev) {\n        log_probe(\"FINAL: no driver matched, freeing ldev=%p\", (void *)ldev);\n        free(ldev);\n    } else {\n        log_probe(\"FINAL: no ldev to free (ldev is NULL)\");\n    }\n\n    log_probe(\"EXIT: no device found, returning -ENODEV\");\n    return -ENODEV;\n}\n"
}