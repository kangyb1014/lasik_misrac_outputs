{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1) can read up to sizeof(ldev->dev_name)-1 bytes from the source pointer dev_name. If dev_name does not point to a null-terminated string (or points into a smaller object than sizeof(ldev->dev_name)-1), strncpy may read past the bounds of the object referenced by dev_name, causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "static void metal_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/339.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n\n    metal_log_probe(\"ENTER: metal_linux_dev_open bus=%p dev_name=%p device_out=%p\",\n                    (void *)bus, (const void *)dev_name, (void *)device);\n\n    ldev = malloc(sizeof(*ldev));\n    metal_log_probe(\"ALLOC: malloc(sizeof(*ldev)) -> %p\", (void *)ldev);\n    if (!ldev) {\n        metal_log_probe(\"ERROR: malloc failed returning -ENOMEM\");\n        return -ENOMEM;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n\n        metal_log_probe(\"ITER: ldrv=%p sdrv=%p dev_open=%p\", (void *)ldrv,\n                        (void *)(ldrv ? ldrv->sdrv : NULL),\n                        (void *)(ldrv ? ldrv->dev_open : NULL));\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open) {\n            metal_log_probe(\"SKIP: driver not viable (sdrv=%p dev_open=%p)\",\n                            (void *)ldrv->sdrv, (void *)ldrv->dev_open);\n            continue;\n        }\n\n        /* Allocate a linux device if we haven't already. */\n        if (!ldev)\n            ldev = malloc(sizeof(*ldev));\n        metal_log_probe(\"ALLOC CHECK: ldev=%p after possible malloc\", (void *)ldev);\n        if (!ldev) {\n            metal_log_probe(\"ERROR: malloc failed returning -ENOMEM (second alloc)\");\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        metal_log_probe(\"MEMSET: zeroing ldev=%p size=%zu\", (void *)ldev, sizeof(*ldev));\n        memset(ldev, 0, sizeof(*ldev));\n\n        /* Log metadata about the strncpy operation that may read from dev_name. */\n        metal_log_probe(\"STRNCPY-PREP: ldev=%p dev_name_ptr=%p dest_len=%zu copy_len=%zu\",\n                        (void *)ldev,\n                        (const void *)dev_name,\n                        (size_t)sizeof(ldev->dev_name),\n                        (size_t)(sizeof(ldev->dev_name) - 1));\n\n        /* Perform the copy exactly as original code. */\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\n        /* After strncpy ldev->dev_name is safe to read because we zeroed ldev above. */\n        metal_log_probe(\"STRNCPY-DONE: ldev->dev_name=\");\n        /* print the destination buffer content (safe because of prior memset zeroing)\n         * print it in a way that keeps logs readable. */\n        metal_log_probe(\"DEST-CONTENT: '%s'\", ldev->dev_name);\n\n        ldev->fd = -1;\n        ldev->ldrv = ldrv;\n        ldev->device.bus = bus;\n\n        metal_log_probe(\"CALL: driver dev_open ldrv=%p ldev=%p\", (void *)ldrv, (void *)ldev);\n        /* Try and open the device. */\n        error = ldrv->dev_open(lbus, ldev);\n        metal_log_probe(\"CALL-RET: dev_open returned %d for ldrv=%p ldev=%p\", error, (void *)ldrv, (void *)ldev);\n        if (error) {\n            metal_log_probe(\"CLEANUP: calling dev_close for ldrv=%p ldev=%p\", (void *)ldrv, (void *)ldev);\n            ldrv->dev_close(lbus, ldev);\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        metal_log_probe(\"SUCCESS: device opened device=%p name_ptr=%p\", (void *)*device, (void *)ldev->dev_name);\n\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n        return 0;\n    }\n\n    if (ldev) {\n        metal_log_probe(\"FREE: freeing ldev=%p (no driver found)\", (void *)ldev);\n        free(ldev);\n    }\n\n    metal_log_probe(\"EXIT: returning -ENODEV\");\n    return -ENODEV;\n}\n"
}