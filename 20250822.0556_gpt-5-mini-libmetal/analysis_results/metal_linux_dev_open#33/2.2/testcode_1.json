{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial allocation ldev = malloc(sizeof(*ldev)); occurs before the for_each_linux_driver loop and the function returns immediately if that malloc fails. There is no code in the loop that sets ldev to NULL or frees it before the conditional, and the only free(ldev) is after the loop. Therefore, when the loop is entered ldev is always non-NULL, so the branch\n    if (!ldev) ldev = malloc(sizeof(*ldev));\ncan never be executed. That allocation (and its enclosing test) is dead code \u2014 removing it would not change the program behaviour. (Only if an external function called inside the loop actually freed or nulled ldev could that change, but no such freeing is present in the provided code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/332.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n\n/*\n * Lightweight logging helper that appends messages to /tmp/logs/332.txt.\n * This is non-intrusive and does not change program behaviour.\n */\nstatic void log_msg(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/332.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n\n    log_msg(\"ENTER: %s: bus=%p dev_name=%s device_out=%p\", __func__, (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\n    ldev = malloc(sizeof(*ldev));\n    log_msg(\"after initial malloc: ldev=%p (requested=%zu)\", (void *)ldev, sizeof(*ldev));\n    if (!ldev) {\n        log_msg(\"initial malloc failed: returning -ENOMEM\");\n        return -ENOMEM;\n    }\n\n    log_msg(\"entering for_each_linux_driver loop: lbus=%p\", (void *)lbus);\n    for_each_linux_driver(lbus, ldrv) {\n\n        log_msg(\"loop iteration: ldrv=%p\", (void *)ldrv);\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open) {\n            log_msg(\"  skipping driver %p: sdrv=%p dev_open=%p\", (void *)ldrv, (void *)ldrv->sdrv, (void *)ldrv->dev_open);\n            continue;\n        }\n\n        /* Allocate a linux device if we haven't already. */\n        log_msg(\"  before inner allocation check: ldev=%p\", (void *)ldev);\n        if (!ldev) {\n            log_msg(\"  inner: ldev is NULL, attempting malloc\");\n            ldev = malloc(sizeof(*ldev));\n            log_msg(\"  inner malloc result: ldev=%p (requested=%zu)\", (void *)ldev, sizeof(*ldev));\n        } else {\n            log_msg(\"  inner allocation skipped because ldev already non-NULL: %p\", (void *)ldev);\n        }\n        if (!ldev) {\n            log_msg(\"  malloc failed inside loop: returning -ENOMEM\");\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        memset(ldev, 0, sizeof(*ldev));\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n        ldev->fd = -1;\n        ldev->ldrv = ldrv;\n        ldev->device.bus = bus;\n\n        log_msg(\"  prepared ldev=%p: dev_name=%s fd=%d ldrv=%p\", (void *)ldev, ldev->dev_name, ldev->fd, (void *)ldev->ldrv);\n\n        /* Try and open the device. */\n        log_msg(\"  calling dev_open for driver=%p ldev=%p\", (void *)ldrv, (void *)ldev);\n        error = ldrv->dev_open(lbus, ldev);\n        log_msg(\"  dev_open returned %d for driver=%p\", error, (void *)ldrv);\n        if (error) {\n            log_msg(\"  dev_open failed, calling dev_close for driver=%p ldev=%p\", (void *)ldrv, (void *)ldev);\n            ldrv->dev_close(lbus, ldev);\n            log_msg(\"  dev_close returned for driver=%p\", (void *)ldrv);\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        log_msg(\"  success: device=%p name=%s, adding to bus devices\", (void *)(*device), (*device)->name ? (*device)->name : \"(null)\");\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n        log_msg(\"EXIT: returning 0 (device opened): ldev=%p device=%p\", (void *)ldev, (void *)(*device));\n        return 0;\n    }\n\n    if (ldev) {\n        log_msg(\"no driver succeeded: freeing ldev=%p and returning -ENODEV\", (void *)ldev);\n        free(ldev);\n    } else {\n        log_msg(\"no driver succeeded: ldev already NULL, returning -ENODEV\");\n    }\n\n    return -ENODEV;\n}\n"
}