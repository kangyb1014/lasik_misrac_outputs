{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_linux_dev_open, ldev is allocated and checked for NULL before entering the for_each_linux_driver loop (ldev = malloc(...); if (!ldev) return -ENOMEM;). Therefore the later fragment inside the loop 'if (!ldev) return -ENOMEM;' is always false (the controlling expression is invariant) and there is no applicable exception (not an infinite loop or the permitted do-while case). This is an invariant controlling expression and thus violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_dev_open:\n```c\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n\t\t\t\tconst char *dev_name,\n\t\t\t\tstruct metal_device **device)\n{\n\tstruct linux_bus *lbus = to_linux_bus(bus);\n\tstruct linux_device *ldev = NULL;\n\tstruct linux_driver *ldrv;\n\tint error;\n\n\tldev = malloc(sizeof(*ldev));\n\tif (!ldev)\n\t\treturn -ENOMEM;\n\n\tfor_each_linux_driver(lbus, ldrv) {\n\n\t\t/* Check if we have a viable driver. */\n\t\tif (!ldrv->sdrv || !ldrv->dev_open)\n\t\t\tcontinue;\n\n\t\t/* Allocate a linux device if we haven't already. */\n\t\tif (!ldev)\n\t\t\tldev = malloc(sizeof(*ldev));\n\t\tif (!ldev)\n\t\t\treturn -ENOMEM;\n\n\t\t/* Reset device data. */\n\t\tmemset(ldev, 0, sizeof(*ldev));\n\t\tstrncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n\t\tldev->fd = -1;\n\t\tldev->ldrv = ldrv;\n\t\tldev->device.bus = bus;\n\n\t\t/* Try and open the device. */\n\t\terror = ldrv->dev_open(lbus, ldev);\n\t\tif (error) {\n\t\t\tldrv->dev_close(lbus, ldev);\n\t\t\tcontinue;\n\t\t}\n\n\t\t*device = &ldev->device;\n\t\t(*device)->name = ldev->dev_name;\n\n\t\tmetal_list_add_tail(&bus->devices, &(*device)->node);\n\t\treturn 0;\n\t}\n\n\tif (ldev)\n\t\tfree(ldev);\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n/* Simple probe logger that appends to /tmp/logs/335.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/335.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_linux_dev_open(struct metal_bus *bus,\n                const char *dev_name,\n                struct metal_device **device)\n{\n    struct linux_bus *lbus = to_linux_bus(bus);\n    struct linux_device *ldev = NULL;\n    struct linux_driver *ldrv;\n    int error;\n\n    probe_log(\"metal_linux_dev_open: entry bus=%p dev_name=%s device_ptr=%p\\n\",\n              (void *)bus, dev_name ? dev_name : \"(null)\", (void *)device);\n\n    ldev = malloc(sizeof(*ldev));\n    probe_log(\"after initial malloc: ldev=%p\\n\", (void *)ldev);\n    if (!ldev) {\n        probe_log(\"initial malloc failed: returning -ENOMEM\\n\");\n        return -ENOMEM;\n    }\n\n    for_each_linux_driver(lbus, ldrv) {\n\n        probe_log(\"loop iter: ldrv=%p ldev=%p\\n\", (void *)ldrv, (void *)ldev);\n\n        /* Check if we have a viable driver. */\n        if (!ldrv->sdrv || !ldrv->dev_open) {\n            if (!ldrv->sdrv)\n                probe_log(\"skipping driver %p: sdrv is NULL\\n\", (void *)ldrv);\n            if (!ldrv->dev_open)\n                probe_log(\"skipping driver %p: dev_open is NULL\\n\", (void *)ldrv);\n            continue;\n        }\n\n        /* Allocate a linux device if we haven't already. */\n        probe_log(\"before inside-loop allocate check: ldev=%p\\n\", (void *)ldev);\n        if (!ldev)\n            ldev = malloc(sizeof(*ldev));\n        probe_log(\"after inside-loop allocate attempt: ldev=%p\\n\", (void *)ldev);\n        if (!ldev) {\n            probe_log(\"inside-loop malloc failed: returning -ENOMEM\\n\");\n            return -ENOMEM;\n        }\n\n        /* Reset device data. */\n        memset(ldev, 0, sizeof(*ldev));\n        strncpy(ldev->dev_name, dev_name, sizeof(ldev->dev_name) - 1);\n        ldev->fd = -1;\n        ldev->ldrv = ldrv;\n        ldev->device.bus = bus;\n\n        probe_log(\"attempting dev_open for driver %p with ldev=%p\\n\", (void *)ldrv, (void *)ldev);\n\n        /* Try and open the device. */\n        error = ldrv->dev_open(lbus, ldev);\n        probe_log(\"dev_open returned %d for driver %p\\n\", error, (void *)ldrv);\n        if (error) {\n            ldrv->dev_close(lbus, ldev);\n            probe_log(\"dev_open failed, driver %p closed and continuing\\n\", (void *)ldrv);\n            continue;\n        }\n\n        *device = &ldev->device;\n        (*device)->name = ldev->dev_name;\n\n        metal_list_add_tail(&bus->devices, &(*device)->node);\n        probe_log(\"device opened successfully: device=%p name=%s, returning 0\\n\",\n                  (void *)*device, (*device)->name ? (*device)->name : \"(null)\");\n        return 0;\n    }\n\n    if (ldev) {\n        probe_log(\"no driver succeeded, freeing ldev=%p and returning -ENODEV\\n\", (void *)ldev);\n        free(ldev);\n    } else {\n        probe_log(\"no driver succeeded, ldev is NULL, returning -ENODEV\\n\");\n    }\n\n    return -ENODEV;\n}\n"
}