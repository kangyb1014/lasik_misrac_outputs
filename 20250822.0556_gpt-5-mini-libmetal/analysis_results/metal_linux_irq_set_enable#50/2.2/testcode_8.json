{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(pfds, 0, MAX_IRQS * sizeof(struct pollfd)); is redundant (dead). Only the first j entries of pfds are initialized and used (pfds[0] and the entries populated in the bitmap loop) and poll() is called with count j. Zeroing the entire MAX_IRQS buffer on each loop iteration does not affect behavior and can be removed without changing program semantics.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/502.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_set_enable:\n```c\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n\t\t\t\t       int irq, unsigned int state)\n{\n\tint offset, ret;\n\n\tif (irq < irq_cntr->irq_base ||\n\t    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n\t\t\t  __func__, irq);\n\t\treturn;\n\t}\n\toffset = irq - linux_irq_cntr.irq_base;\n\tmetal_mutex_acquire(&irq_lock);\n\tif (state == METAL_IRQ_ENABLE)\n\t\tmetal_bitmap_set_bit(irqs_enabled, offset);\n\telse\n\t\tmetal_bitmap_clear_bit(irqs_enabled, offset);\n\tmetal_mutex_release(&irq_lock);\n\t/* Notify IRQ thread that IRQ state has changed */\n\tret = metal_linux_irq_notify();\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to notify set %d enable\\n\",\n\t\t\t  __func__, irq);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_set_enable code.\n",
  "test_code": "static void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n                                       int irq, unsigned int state)\n{\n    int offset, ret;\n    FILE *logf = NULL;\n\n    /* Open log file for appending; best-effort only, do not change behavior if it fails */\n    logf = fopen(\"/tmp/logs/502.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTRY %s: irq=%d, irq_base=%d, irq_num=%d, state=%u\\n\",\n                __func__, irq,\n                (irq_cntr ? irq_cntr->irq_base : -1),\n                (irq_cntr ? irq_cntr->irq_num : -1), state);\n    }\n\n    if (irq < irq_cntr->irq_base ||\n        irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n        metal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n                  __func__, irq);\n        if (logf) {\n            fprintf(logf, \"%s: invalid irq %d (ignored)\\n\", __func__, irq);\n            fclose(logf);\n        }\n        return;\n    }\n\n    offset = irq - linux_irq_cntr.irq_base;\n    if (logf) {\n        fprintf(logf, \"%s: computed offset=%d\\n\", __func__, offset);\n    }\n\n    metal_mutex_acquire(&irq_lock);\n    if (logf) {\n        fprintf(logf, \"%s: acquired irq_lock\\n\", __func__);\n    }\n\n    if (state == METAL_IRQ_ENABLE) {\n        if (logf) {\n            fprintf(logf, \"%s: enabling irq offset=%d\\n\", __func__, offset);\n        }\n        metal_bitmap_set_bit(irqs_enabled, offset);\n    } else {\n        if (logf) {\n            fprintf(logf, \"%s: disabling irq offset=%d\\n\", __func__, offset);\n        }\n        metal_bitmap_clear_bit(irqs_enabled, offset);\n    }\n\n    if (logf) {\n        fprintf(logf, \"%s: releasing irq_lock\\n\", __func__);\n    }\n    metal_mutex_release(&irq_lock);\n\n    /* Notify IRQ thread that IRQ state has changed */\n    ret = metal_linux_irq_notify();\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to notify set %d enable\\n\",\n                  __func__, irq);\n    }\n\n    if (logf) {\n        fprintf(logf, \"%s: metal_linux_irq_notify() returned %d\\n\",\n                __func__, ret);\n        fprintf(logf, \"EXIT %s: irq=%d, offset=%d, state=%u\\n\",\n                __func__, irq, offset, state);\n        fclose(logf);\n    }\n}\n"
}