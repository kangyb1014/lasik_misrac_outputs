{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses compiler-specific extensions: it employs the GCC/Clang statement-expression extension '({ ... })' and the GNU preprocessor extension '##__VA_ARGS__' (comma swallowing). Both are documented compiler extensions and therefore violate MISRA C 2023 Rule 1.2. Replace with a standard construct (e.g. an inline function or a do { ... } while (0) macro and a conforming variadic macro form) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/500.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_set_enable:\n```c\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n\t\t\t\t       int irq, unsigned int state)\n{\n\tint offset, ret;\n\n\tif (irq < irq_cntr->irq_base ||\n\t    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n\t\t\t  __func__, irq);\n\t\treturn;\n\t}\n\toffset = irq - linux_irq_cntr.irq_base;\n\tmetal_mutex_acquire(&irq_lock);\n\tif (state == METAL_IRQ_ENABLE)\n\t\tmetal_bitmap_set_bit(irqs_enabled, offset);\n\telse\n\t\tmetal_bitmap_clear_bit(irqs_enabled, offset);\n\tmetal_mutex_release(&irq_lock);\n\t/* Notify IRQ thread that IRQ state has changed */\n\tret = metal_linux_irq_notify();\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to notify set %d enable\\n\",\n\t\t\t  __func__, irq);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/500.txt */\nstatic void probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/500.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n                                       int irq, unsigned int state)\n{\n    int offset, ret;\n\n    probe_write(\"enter: %s irq=%d state=%u irq_base=%d irq_num=%d\",\n                __func__, irq, state,\n                irq_cntr ? irq_cntr->irq_base : -1,\n                irq_cntr ? irq_cntr->irq_num : -1);\n\n    if (irq < irq_cntr->irq_base ||\n        irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n        probe_write(\"invalid irq: %d not in [%d, %d)\",\n                    irq, irq_cntr->irq_base,\n                    irq_cntr->irq_base + irq_cntr->irq_num);\n        metal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n                  __func__, irq);\n        probe_write(\"exit (invalid)\");\n        return;\n    }\n\n    offset = irq - linux_irq_cntr.irq_base;\n    probe_write(\"computed offset=%d (irq=%d linux_irq_cntr.irq_base=%d)\",\n                offset, irq, linux_irq_cntr.irq_base);\n\n    probe_write(\"acquiring irq_lock\");\n    metal_mutex_acquire(&irq_lock);\n    probe_write(\"irq_lock acquired\");\n\n    if (state == METAL_IRQ_ENABLE) {\n        probe_write(\"enabling irq offset=%d\", offset);\n        metal_bitmap_set_bit(irqs_enabled, offset);\n    } else {\n        probe_write(\"disabling irq offset=%d\", offset);\n        metal_bitmap_clear_bit(irqs_enabled, offset);\n    }\n\n    probe_write(\"releasing irq_lock\");\n    metal_mutex_release(&irq_lock);\n\n    /* Notify IRQ thread that IRQ state has changed */\n    probe_write(\"notify about state change (irq=%d)\", irq);\n    ret = metal_linux_irq_notify();\n    probe_write(\"metal_linux_irq_notify returned %d\", ret);\n\n    if (ret < 0) {\n        probe_write(\"notify failed for irq=%d ret=%d\", irq, ret);\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to notify set %d enable\\n\",\n                  __func__, irq);\n    }\n\n    probe_write(\"exit\");\n}\n"
}