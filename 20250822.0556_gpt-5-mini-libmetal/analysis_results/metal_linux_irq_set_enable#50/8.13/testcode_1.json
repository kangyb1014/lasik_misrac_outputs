{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct metal_irq_controller *irq_cntr' is only read (irq_cntr->irq_base, irq_cntr->irq_num) and never modified, so it could be declared 'const struct metal_irq_controller *irq_cntr'. Therefore the pointer is not const-qualified when it could be, violating MISRA C 2023 Rule 8.13. (Note: if the function must match an existing non-const callback type, that would be a documented justification for deviating from the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_set_enable:\n```c\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n\t\t\t\t       int irq, unsigned int state)\n{\n\tint offset, ret;\n\n\tif (irq < irq_cntr->irq_base ||\n\t    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n\t\t\t  __func__, irq);\n\t\treturn;\n\t}\n\toffset = irq - linux_irq_cntr.irq_base;\n\tmetal_mutex_acquire(&irq_lock);\n\tif (state == METAL_IRQ_ENABLE)\n\t\tmetal_bitmap_set_bit(irqs_enabled, offset);\n\telse\n\t\tmetal_bitmap_clear_bit(irqs_enabled, offset);\n\tmetal_mutex_release(&irq_lock);\n\t/* Notify IRQ thread that IRQ state has changed */\n\tret = metal_linux_irq_notify();\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to notify set %d enable\\n\",\n\t\t\t  __func__, irq);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_set_enable code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append logs to /tmp/logs/503.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    /* Ensure directory exists; ignore error if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (f == NULL) {\n        /* If opening the file fails, there's not much we can do without\n         * changing program behavior; avoid aborting. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\n/* Original function with inserted probes. */\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n                                       int irq, unsigned int state)\n{\n    int offset, ret;\n\n    /* Log entry and parameter/state info. Do not modify any parameter. */\n    probe_log(\"ENTER: %s - irq_cntr=%p irq_base=%d irq_num=%d irq=%d state=%u\\n\",\n              __func__, (void *)irq_cntr,\n              (irq_cntr != NULL) ? irq_cntr->irq_base : -1,\n              (irq_cntr != NULL) ? irq_cntr->irq_num : -1,\n              irq, state);\n\n    if (irq < irq_cntr->irq_base ||\n        irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n        metal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n                  __func__, irq);\n        probe_log(\"PATH: %s - invalid irq %d (base=%d num=%d) -> RETURN\\n\",\n                  __func__, irq, irq_cntr->irq_base, irq_cntr->irq_num);\n        return;\n    }\n\n    offset = irq - linux_irq_cntr.irq_base;\n    probe_log(\"PATH: %s - computed offset=%d (irq=%d linux_base=%d)\\n\",\n              __func__, offset, irq, linux_irq_cntr.irq_base);\n\n    metal_mutex_acquire(&irq_lock);\n    probe_log(\"PATH: %s - acquired irq_lock\\n\", __func__);\n\n    if (state == METAL_IRQ_ENABLE) {\n        metal_bitmap_set_bit(irqs_enabled, offset);\n        probe_log(\"ACTION: %s - METAL_IRQ_ENABLE -> set bit at offset %d\\n\",\n                  __func__, offset);\n    } else {\n        metal_bitmap_clear_bit(irqs_enabled, offset);\n        probe_log(\"ACTION: %s - CLEAR -> clear bit at offset %d\\n\",\n                  __func__, offset);\n    }\n\n    metal_mutex_release(&irq_lock);\n    probe_log(\"PATH: %s - released irq_lock\\n\", __func__);\n\n    /* Notify IRQ thread that IRQ state has changed */\n    ret = metal_linux_irq_notify();\n    probe_log(\"CALL: %s - metal_linux_irq_notify returned %d\\n\",\n              __func__, ret);\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to notify set %d enable\\n\",\n                  __func__, irq);\n        probe_log(\"ERROR: %s - notify failed for irq %d ret=%d\\n\",\n                  __func__, irq, ret);\n    }\n\n    probe_log(\"EXIT: %s\\n\", __func__);\n}\n"
}