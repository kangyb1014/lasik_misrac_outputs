{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'struct metal_irq *irqs' is an ordinary pointer to IRQ descriptor data. In typical use (see METAL_IRQ_CONTROLLER_DECLARE(linux_irq_cntr, ..., irqs)) this member points to a fixed array of IRQ descriptors that the controller only reads. If the controller never modifies the pointed-to descriptors, the pointer should be to a const-qualified type (const struct metal_irq *irqs). As declared it permits modification of the pointed-to objects and therefore violates MISRA C 2023 Rule 8.13. (Similarly, 'void *arg' should be 'const void *arg' if the controller only reads it.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_irq_set_enable code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_irq_set_enable as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_irq_set_enable:\n```c\nstatic void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n\t\t\t\t       int irq, unsigned int state)\n{\n\tint offset, ret;\n\n\tif (irq < irq_cntr->irq_base ||\n\t    irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n\t\t\t  __func__, irq);\n\t\treturn;\n\t}\n\toffset = irq - linux_irq_cntr.irq_base;\n\tmetal_mutex_acquire(&irq_lock);\n\tif (state == METAL_IRQ_ENABLE)\n\t\tmetal_bitmap_set_bit(irqs_enabled, offset);\n\telse\n\t\tmetal_bitmap_clear_bit(irqs_enabled, offset);\n\tmetal_mutex_release(&irq_lock);\n\t/* Notify IRQ thread that IRQ state has changed */\n\tret = metal_linux_irq_notify();\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR,\n\t\t\t  \"%s: failed to notify set %d enable\\n\",\n\t\t\t  __func__, irq);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_linux_irq_set_enable code.\n",
  "test_code": "static void metal_linux_irq_set_enable(struct metal_irq_controller *irq_cntr,\n                                       int irq, unsigned int state)\n{\n    int offset, ret;\n    FILE *logf;\n\n    /* Probe: log function entry and key parameters */\n    logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER %s: irq=%d, state=%u, irq_cntr=%p, irq_base=%d, irq_num=%d, irqs=%p\\n\",\n                __func__, irq, state, (void *)irq_cntr,\n                irq_cntr ? irq_cntr->irq_base : -1,\n                irq_cntr ? irq_cntr->irq_num : -1,\n                (void *)(irq_cntr ? irq_cntr->irqs : (struct metal_irq *)0));\n        fclose(logf);\n    }\n\n    if (irq < irq_cntr->irq_base ||\n        irq >= irq_cntr->irq_base + irq_cntr->irq_num) {\n        metal_log(METAL_LOG_ERROR, \"%s: invalid irq %d\\n\",\n                  __func__, irq);\n        /* Probe: log invalid irq path */\n        logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"%s: invalid irq %d (valid range %d..%d)\\n\",\n                    __func__, irq, irq_cntr->irq_base,\n                    irq_cntr->irq_base + irq_cntr->irq_num - 1);\n            fclose(logf);\n        }\n        return;\n    }\n\n    offset = irq - linux_irq_cntr.irq_base;\n\n    /* Probe: record computed offset before taking lock */\n    logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"%s: computed offset=%d (irq=%d, linux_irq_base=%d)\\n\",\n                __func__, offset, irq, linux_irq_cntr.irq_base);\n        fclose(logf);\n    }\n\n    metal_mutex_acquire(&irq_lock);\n\n    /* Probe: note that the lock was acquired */\n    logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"%s: acquired irq_lock\\n\", __func__);\n        fclose(logf);\n    }\n\n    if (state == METAL_IRQ_ENABLE) {\n        metal_bitmap_set_bit(irqs_enabled, offset);\n        /* Probe: log enable action */\n        logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"%s: enabling irq %d (offset %d)\\n\",\n                    __func__, irq, offset);\n            fclose(logf);\n        }\n    } else {\n        metal_bitmap_clear_bit(irqs_enabled, offset);\n        /* Probe: log disable action */\n        logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"%s: disabling irq %d (offset %d)\\n\",\n                    __func__, irq, offset);\n            fclose(logf);\n        }\n    }\n\n    metal_mutex_release(&irq_lock);\n\n    /* Probe: note that the lock was released */\n    logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"%s: released irq_lock\\n\", __func__);\n        fclose(logf);\n    }\n\n    /* Notify IRQ thread that IRQ state has changed */\n    ret = metal_linux_irq_notify();\n\n    /* Probe: log notify result and final state */\n    logf = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (logf) {\n        if (ret < 0) {\n            fprintf(logf, \"%s: notify failed for irq %d, ret=%d\\n\",\n                    __func__, irq, ret);\n        } else {\n            fprintf(logf, \"%s: notify succeeded for irq %d, ret=%d\\n\",\n                    __func__, irq, ret);\n        }\n        fclose(logf);\n    }\n\n    if (ret < 0) {\n        metal_log(METAL_LOG_ERROR,\n                  \"%s: failed to notify set %d enable\\n\",\n                  __func__, irq);\n    }\n}\n"
}