{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set:\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\n\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The preceding bounds check returns for out\u2011of\u2011range irq values, so for any call that reaches the fragment irq is in [cntr->irq_base, cntr->irq_base+cntr->irq_num-1]; after irq -= cntr->irq_base the index is within [0, cntr->irq_num-1] and atomic_store is reachable. No unreachable code path is present in the shown fragment."
}