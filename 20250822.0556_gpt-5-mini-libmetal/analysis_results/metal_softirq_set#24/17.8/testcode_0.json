{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'irq' (an int) is modified inside the function with the statement 'irq -= cntr->irq_base;'. This directly changes the function parameter, violating MISRA C 2023 Rule 17.8. (Fix: use a local variable, e.g. 'int idx = irq - cntr->irq_base;').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/247.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function: append control-flow and state information to /tmp/logs/247.txt */\nstatic void metal_softirq_log(const char *stage, int irq, const struct metal_irq_controller *cntr)\n{\n    FILE *f = fopen(\"/tmp/logs/247.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Log stage, irq, controller pointer and controller fields if available. */\n    fprintf(f, \"%s: irq=%d, cntr=%p\", stage, irq, (void *)cntr);\n    if (cntr != NULL) {\n        fprintf(f, \", cntr->irq_base=%d, cntr->irq_num=%d\", cntr->irq_base, cntr->irq_num);\n    }\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nvoid metal_softirq_set(int irq)\n{\n    struct metal_irq_controller *cntr;\n\n    cntr = &metal_softirq_cntr;\n\n    /* Log entry with initial parameter value and controller state. */\n    metal_softirq_log(\"enter\", irq, cntr);\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        /* Log out-of-range and return without changing behavior. */\n        metal_softirq_log(\"out_of_range\", irq, cntr);\n        return;\n    }\n\n    /* Log just before the parameter is adjusted (this demonstrates the violation). */\n    metal_softirq_log(\"before_adjust\", irq, cntr);\n\n    /* Original behavior: parameter 'irq' is modified here. */\n    irq -= cntr->irq_base;\n\n    /* Log after modification so callers/analysts can see the parameter was changed. */\n    metal_softirq_log(\"after_adjust\", irq, cntr);\n\n    atomic_store(&metal_softirq_pending[irq], 1);\n\n    /* Final log after storing the pending state. */\n    metal_softirq_log(\"after_atomic_store\", irq, cntr);\n}\n"
}