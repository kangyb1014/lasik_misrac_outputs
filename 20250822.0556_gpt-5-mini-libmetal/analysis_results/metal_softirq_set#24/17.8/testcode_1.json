{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value of the function parameter 'irq' is modified in-place by the statement 'irq -= cntr->irq_base;'. This directly violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified). Use a local variable (e.g. 'int idx = irq - cntr->irq_base;') instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/247.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdatomic.h>\n\n/* Minimal definitions to make this translation unit self-contained for testing.\n   These mirror the likely structures used by the original code. */\nstruct metal_irq_controller {\n    int irq_base;\n    int irq_num;\n};\n\n/* Global controller and pending array used by metal_softirq_set. */\nstruct metal_irq_controller metal_softirq_cntr = {0, 256};\nstatic atomic_int metal_softirq_pending[256] = { 0 };\n\n/* Simple probe logger that appends human-readable records to /tmp/logs/247.txt. */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/247.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Original function with added probes to capture the control flow and state\n * that demonstrate the parameter modification scenario described in the\n * violation report. The original logic is preserved (including the in-place\n * modification of the parameter 'irq').\n */\nvoid metal_softirq_set(int irq)\n{\n    struct metal_irq_controller *cntr;\n\n    cntr = &metal_softirq_cntr;\n\n    log_probe(\"enter: irq=%d, cntr->irq_base=%d, cntr->irq_num=%d\",\n              irq, cntr->irq_base, cntr->irq_num);\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        log_probe(\"out_of_range: irq=%d (base=%d, num=%d)\",\n                  irq, cntr->irq_base, cntr->irq_num);\n        return;\n    }\n\n    log_probe(\"before_modify_irq: irq=%d, irq_base=%d\", irq, cntr->irq_base);\n\n    /* This in-place modification of the function parameter 'irq' is the\n       behavior that was reported as a MISRA Rule 17.8 violation. We keep it\n       here to produce evidence in the log. */\n    irq -= cntr->irq_base;\n\n    log_probe(\"after_modify_irq: irq_index=%d\", irq);\n\n    atomic_store(&metal_softirq_pending[irq], 1);\n\n    log_probe(\"atomic_store_done: index=%d, value=1\", irq);\n}\n"
}