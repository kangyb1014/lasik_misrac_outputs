{
  "user_message": "An agent A claimed that the following metal_softirq_set code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_softirq_set.\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIn metal_softirq_set the local pointer is declared as 'struct metal_irq_controller *cntr' and assigned with 'cntr = &metal_softirq_cntr;'. The function only reads fields from the controller (irq_base, irq_num) and does not modify the controller via cntr, so the pointer could and should be declared as 'const struct metal_irq_controller *cntr'. Using a non-const pointer when the pointee is not modified violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_set:\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\n\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In metal_softirq_set the local pointer cntr is only used to read fields (irq_base and irq_num) and the function does not modify the pointee via cntr. MISRA C 2023 Rule 8.13 states a pointer should point to a const-qualified type whenever possible. Changing the declaration to 'const struct metal_irq_controller *cntr' is allowed (you may take the address of a non-const object into a pointer-to-const) and would satisfy the rule. Note: Rule 8.13 is advisory (\u2018should\u2019), but the code as written does not conform to that guideline."
}