{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_softirq_set the local pointer is declared as 'struct metal_irq_controller *cntr' and assigned with 'cntr = &metal_softirq_cntr;'. The function only reads fields from the controller (irq_base, irq_num) and does not modify the controller via cntr, so the pointer could and should be declared as 'const struct metal_irq_controller *cntr'. Using a non-const pointer when the pointee is not modified violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/243.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_set:\n```c\nvoid metal_softirq_set(int irq)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = &metal_softirq_cntr;\n\n\tif (irq < cntr->irq_base ||\n\t    irq >= (cntr->irq_base + cntr->irq_num)) {\n\t\treturn;\n\t}\n\n\tirq -= cntr->irq_base;\n\tatomic_store(&metal_softirq_pending[irq], 1);\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_set code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger: write state info to /tmp/logs/243.txt */\nstatic void metal_softirq_log(const char *stage,\n                              int irq_val,\n                              const struct metal_irq_controller *cntr,\n                              int idx)\n{\n    FILE *f = fopen(\"/tmp/logs/243.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* cntr may be NULL in some contexts; guard just in case */\n    if (cntr != NULL) {\n        fprintf(f, \"[metal_softirq_set] %s: irq_in=%d, cntr=%p, irq_base=%d, irq_num=%d, idx=%d\\n\",\n                stage, irq_val, (void *)cntr, cntr->irq_base, cntr->irq_num, idx);\n    } else {\n        fprintf(f, \"[metal_softirq_set] %s: irq_in=%d, cntr=NULL, idx=%d\\n\",\n                stage, irq_val, idx);\n    }\n\n    fclose(f);\n}\n\nvoid metal_softirq_set(int irq)\n{\n    struct metal_irq_controller *cntr;\n\n    cntr = &metal_softirq_cntr;\n\n    /* Log entry state */\n    metal_softirq_log(\"entry\", irq, cntr, -1);\n\n    if (irq < cntr->irq_base ||\n        irq >= (cntr->irq_base + cntr->irq_num)) {\n        /* Log the out-of-range decision and return */\n        metal_softirq_log(\"out_of_range\", irq, cntr, -1);\n        return;\n    }\n\n    irq -= cntr->irq_base;\n\n    /* Log before performing the atomic store */\n    metal_softirq_log(\"before_store\", irq + cntr->irq_base, cntr, irq);\n\n    atomic_store(&metal_softirq_pending[irq], 1);\n\n    /* Log after the store for completeness */\n    metal_softirq_log(\"after_store\", irq + cntr->irq_base, cntr, irq);\n}\n"
}