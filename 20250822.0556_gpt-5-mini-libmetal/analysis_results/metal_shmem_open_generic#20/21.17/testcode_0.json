{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf either shmem->name or the name parameter is not guaranteed to be a null-terminated string (for example, if shmem->name was filled into a fixed-size buffer without ensuring a terminating '\\0'\u2014e.g. via memcpy or strncpy without explicit termination\u2014or the caller passes a non-terminated buffer), the call to strcmp(shmem->name, name) can read past the end of the underlying object(s) and thus access out-of-bounds memory.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/209.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/209.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[metal_shmem_open_generic] \");\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                 struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    probe_log(\"enter: name=%p size=%zu result=%p\", (const void *)name, size, (void *)result);\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        /* Log pointers to help reproduce non-terminated string scenarios. */\n        probe_log(\"iter: shmem=%p shmem->name=%p\", (void *)shmem, (void *)shmem->name);\n\n        probe_log(\"about to strcmp(shmem->name, name)\");\n        /* Keep original logic: strcmp may read bytes until '\\0'. We log the call and its result. */\n        int cmp = strcmp(shmem->name, name);\n        probe_log(\"strcmp returned: %d\", cmp);\n\n        if (cmp != 0) {\n            probe_log(\"strcmp != 0, continue\");\n            continue;\n        }\n\n        /* If the names match, check size as before. Log sizes/state. */\n        size_t region_sz = metal_io_region_size(&shmem->io);\n        probe_log(\"name matched: shmem=%p region_size=%zu requested_size=%zu\", (void *)shmem, region_sz, size);\n\n        if (size <= region_sz) {\n            *result = &shmem->io;\n            probe_log(\"success: returning io region %p\", (void *)&shmem->io);\n            return 0;\n        }\n\n        probe_log(\"size too small: requested %zu > region %zu\", size, region_sz);\n    }\n\n    probe_log(\"no matching shared memory found, returning -ENOENT\");\n    return -ENOENT;\n}\n"
}