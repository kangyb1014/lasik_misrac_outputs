{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "shmem = metal_container_of(node, struct metal_generic_shmem, node);",
    "metal_list_for_each(&_metal.common.generic_shmem_list, node) {"
  ],
  "explanation": "All other code constructs in this fragment are standard ISO C and do not by themselves indicate use of compiler language extensions: the function signature, local variable declarations (struct pointers), strcmp call, comparison and assignment operations, call to metal_io_region_size(&shmem->io), use of size_t, and the return -ENOENT are ordinary C. There are no direct tokens or constructs that are known compiler extensions (no __attribute__, __asm__, typeof, statement-expression syntax ({ ... }), nested functions, builtin-specific intrinsics, or other vendor-specific keywords) visible in this snippet. The two reported items are macro invocations whose definitions are not present here; such macros (container_of/list iteration helpers) are commonly implemented using compiler extensions (e.g. typeof or statement expressions) in some codebases, so they should be investigated. All remaining lines do not require investigation for language-extension usage based on the provided code."
}