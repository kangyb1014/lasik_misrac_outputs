{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator is declared as a non-const pointer: 'struct metal_list *node;'. In metal_shmem_open_generic the list is only traversed/read (used by metal_list_for_each and metal_container_of) and not modified, so the pointer could be 'const struct metal_list *node' (and shmem could be a pointer to a const container). Therefore the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stddef.h>\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    /* Initial entry log */\n    {\n        FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"metal_shmem_open_generic called: name=\\\"%s\\\", size=%zu, result=%p\\n\",\n                    name ? name : \"(null)\", size, (void *)result);\n            fclose(f);\n        }\n    }\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        /* Obtain the shmem container for this node */\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        /* Capture io size once to avoid repeated calls while logging */\n        size_t io_sz = metal_io_region_size(&shmem->io);\n\n        /* Log iteration state */\n        {\n            FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"iter: node=%p, shmem=%p, shmem->name=\\\"%s\\\", io_size=%zu\\n\",\n                        (void *)node, (void *)shmem,\n                        (shmem->name) ? shmem->name : \"(null)\", io_sz);\n                fclose(f);\n            }\n        }\n\n        /* Compare names and log the comparison result */\n        {\n            int cmp = strcmp(shmem->name, name);\n            FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"strcmp(shmem->name, name) -> %d\\n\", cmp);\n                fclose(f);\n            }\n            if (cmp != 0)\n                continue;\n        }\n\n        /* Size check and possible match - log decision */\n        if (size <= io_sz) {\n            *result = &shmem->io;\n\n            FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"match found: name=\\\"%s\\\", requested_size=%zu, io_size=%zu, result=%p\\n\",\n                        shmem->name ? shmem->name : \"(null)\", size, io_sz, (void *)*result);\n                fclose(f);\n            }\n\n            return 0;\n        } else {\n            FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"name matched but size too small: requested=%zu, available=%zu\\n\", size, io_sz);\n                fclose(f);\n            }\n        }\n    }\n\n    /* No matching shmem found */\n    {\n        FILE *f = fopen(\"/tmp/logs/203.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"no matching shmem found for name=\\\"%s\\\", returning -ENOENT\\n\",\n                    name ? name : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    return -ENOENT;\n}\n"
}