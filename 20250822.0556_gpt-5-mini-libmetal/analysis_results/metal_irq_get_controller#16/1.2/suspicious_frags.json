{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_irq_get_controller:\n```c\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_irq_get_controller:\n#define metal_container_of(ptr, structure, member) (void*)((uintptr_t)(ptr)-metal_offset_of(structure,member))\n...\n#define metal_list_for_each(list, node) for((node)=(list)->next;(node)!=(list);(node)=(node)->next)\n...\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n...\nstatic METAL_DECLARE_LIST(irq_cntrs)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the function and the provided related macros/types. No explicit compiler language extensions are present in the shown code fragments. Specifically:\n\n- metal_container_of is defined as (void*)((uintptr_t)(ptr)-metal_offset_of(...)); casting through uintptr_t and subtracting an offset are standard C (C99) techniques; the code in the snippet does not use GCC/Clang extensions such as typeof, statement expressions, nested functions, label-as-values, or asm.\n\n- metal_list_for_each is a plain macro that expands to a for loop; this is standard C macro usage and not an extension.\n\n- The struct definitions and pointer casts in the function are standard C constructs.\n\n- METAL_DECLARE_LIST(irq_cntrs) is not expanded in the provided text; the mere invocation does not indicate use of a compiler extension. Without the macro definition, there is no evidence in the supplied code that it uses an extension.\n\nBecause none of the provided fragments show tokens or idioms that are documented compiler extensions (for example __attribute__, __extension__, __builtin_*, typeof, ({ ... }), asm, nested functions, or other vendor-specific constructs), there are no suspicious code fragments to report. If you can provide the definitions/expansions of metal_offset_of and METAL_DECLARE_LIST, I can re-check those for possible compiler extensions."
}