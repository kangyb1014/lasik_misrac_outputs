{
  "user_message": "An agent A claimed that the following metal_irq_get_controller code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of metal_irq_get_controller.\n```c\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe iterator 'node' is only used for read-only traversal of the list (assigned from (list)->next, compared, and advanced by reading node->next) but is declared as a mutable pointer: \"struct metal_list *node;\". According to MISRA C 2023 R8.13 it should be const-qualified when possible (e.g. \"const struct metal_list *node;\"). Therefore the rule is violated. Note: to preserve full const-correctness you may also need to adapt uses of metal_container_of/casts so constness is not inadvertently discarded when obtaining the containing metal_irq_controller.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter metal_irq_get_controller: irq=6\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=7\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=7 >= irq_base=0 -> 1\ncompare: irq=7 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=6\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=6\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=6\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=7\nloop: node=0x7fc258704ca0 cntr=0x7fc258704c80 irq_base=0 irq_end=1023\ncompare: irq=7 >= irq_base=0 -> 1\ncompare: irq=7 < irq_end=1023 -> 1\nmatch found, returning cntr=0x7fc258704c80\nenter metal_irq_get_controller: irq=6\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\nenter metal_irq_get_controller: irq=7\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=7 >= irq_base=0 -> 1\ncompare: irq=7 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\nenter metal_irq_get_controller: irq=6\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\nenter metal_irq_get_controller: irq=6\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\nenter metal_irq_get_controller: irq=6\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=6 >= irq_base=0 -> 1\ncompare: irq=6 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\nenter metal_irq_get_controller: irq=7\nloop: node=0x56076fe944c0 cntr=0x56076fe944a0 irq_base=0 irq_end=1023\ncompare: irq=7 >= irq_base=0 -> 1\ncompare: irq=7 < irq_end=1023 -> 1\nmatch found, returning cntr=0x56076fe944a0\n\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_irq_get_controller:\nstruct metal_irq_controller {\n\tint irq_base; /**< Start of IRQ number of the range managed by\n\t\t \t* the IRQ controller\n\t\t \t*/\n\tint irq_num; /**< Number of IRQs managed by the IRQ controller */\n\tvoid *arg; /**< Argument to pass to interrupt controller function */\n\tmetal_irq_set_enable irq_set_enable; /**< function to set IRQ enable */\n\tmetal_cntr_irq_register irq_register; /**< function to register IRQ\n\t\t\t\t\t\t* handler\n\t\t\t\t\t\t*/\n\tstruct metal_list node; /**< list node */\n\tstruct metal_irq *irqs; /**< Array of IRQs managed by the controller */\n}\n...\nstruct metal_list {\n\tstruct metal_list *next, *prev;\n}\n...\nstatic METAL_DECLARE_LIST(irq_cntrs)\n...\n#define metal_list_for_each(list, node) for((node)=(list)->next;(node)!=(list);(node)=(node)->next)\n...\n#define metal_container_of(ptr, structure, member) (void*)((uintptr_t)(ptr)-metal_offset_of(structure,member))\n...\nstatic void _metal_irq_set_enable(int irq, unsigned int state)\n{\n\tstruct metal_irq_controller *cntr;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn;\n\t}\n\tcntr->irq_set_enable(cntr, irq, state);\n}\n...\nint metal_irq_register(int irq,\n\t\t       metal_irq_handler irq_handler,\n\t\t       void *arg)\n{\n\tstruct metal_irq_controller *cntr;\n\tstruct metal_irq *irq_data;\n\n\tcntr = metal_irq_get_controller(irq);\n\tif (cntr == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tif (cntr->irq_register != NULL) {\n\t\treturn cntr->irq_register(cntr, irq, irq_handler, arg);\n\t}\n\tif (cntr->irqs == NULL) {\n\t\treturn -EINVAL;\n\t}\n\tirq_data = &cntr->irqs[irq - cntr->irq_base];\n\tirq_data->hd = irq_handler;\n\tirq_data->arg = arg;\n\treturn 0;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In metal_irq_get_controller the local iterator node is only used to read the list (assigned from list->next, compared and advanced) and never used to modify the list contents, so it can and should be declared as a pointer to a const-qualified type (e.g. const struct metal_list *node) to satisfy MISRA C:2023 R8.13. Note that simply changing node to const in this function may require corresponding const-correct changes elsewhere: the metal_container_of usage currently yields a non-const struct metal_irq_controller * (discarding any const on the member pointer), and the list macro/other call sites may need to be adapted or a const-aware container_of provided to preserve constness and avoid introducing other rule violations when fixing R8.13."
}