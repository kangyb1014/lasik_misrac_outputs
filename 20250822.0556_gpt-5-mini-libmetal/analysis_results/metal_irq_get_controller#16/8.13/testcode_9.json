{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator 'node' is only used for read-only traversal of the list (assigned from (list)->next, compared, and advanced by reading node->next) but is declared as a mutable pointer: \"struct metal_list *node;\". According to MISRA C 2023 R8.13 it should be const-qualified when possible (e.g. \"const struct metal_list *node;\"). Therefore the rule is violated. Note: to preserve full const-correctness you may also need to adapt uses of metal_container_of/casts so constness is not inadvertently discarded when obtaining the containing metal_irq_controller.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_irq_get_controller code that contains useful probe functions that print useful logs to a file \"/tmp/logs/163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_irq_get_controller as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_irq_get_controller:\n```c\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t\t\t  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tif (irq >= irq_base && irq < irq_end) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\treturn NULL;\n}\n```\n</target_code>\nPlease provide the modified metal_irq_get_controller code.\n",
  "test_code": "#include <stdio.h>\n\nstatic struct metal_irq_controller *metal_irq_get_controller(int irq)\n{\n\tstruct metal_list *node;\n\tstruct metal_irq_controller *cntr;\n\n\t/* Log entry into function */\n\tFILE *log = fopen(\"/tmp/logs/163.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"enter metal_irq_get_controller: irq=%d\\n\", irq);\n\t\tfclose(log);\n\t}\n\n\tmetal_list_for_each(&irq_cntrs, node) {\n\t\tint irq_base, irq_end;\n\t\tint match;\n\n\t\tcntr = (struct metal_irq_controller *)\n\t\t       metal_container_of(node, struct metal_irq_controller,\n\t\t\t                  node);\n\t\tirq_base = cntr->irq_base;\n\t\tirq_end = irq_base + cntr->irq_num;\n\t\tmatch = (irq >= irq_base && irq < irq_end);\n\n\t\t/* Log loop state and comparison results */\n\t\tlog = fopen(\"/tmp/logs/163.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"loop: node=%p cntr=%p irq_base=%d irq_end=%d\\n\",\n\t\t\t\t\t(void *)node, (void *)cntr, irq_base, irq_end);\n\t\t\tfprintf(log, \"compare: irq=%d >= irq_base=%d -> %d\\n\",\n\t\t\t\tirq, irq_base, (irq >= irq_base) ? 1 : 0);\n\t\t\tfprintf(log, \"compare: irq=%d < irq_end=%d -> %d\\n\",\n\t\t\t\tirq, irq_end, (irq < irq_end) ? 1 : 0);\n\t\t\tif (match) {\n\t\t\t\tfprintf(log, \"match found, returning cntr=%p\\n\", (void *)cntr);\n\t\t\t}\n\t\t\tfclose(log);\n\t\t}\n\n\t\tif (match) {\n\t\t\treturn cntr;\n\t\t}\n\t}\n\n\t/* No controller found, log and return NULL */\n\tlog = fopen(\"/tmp/logs/163.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"no controller found for irq=%d, returning NULL\\n\", irq);\n\t\tfclose(log);\n\t}\n\treturn NULL;\n}\n"
}