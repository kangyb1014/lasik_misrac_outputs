{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_shmem_register_generic:\n#define metal_assert(cond) metal_sys_assert(cond)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_assert(shmem->name && strlen(shmem->name) != 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assertion call alone is not statically unreachable: metal_assert(cond) expands to metal_sys_assert(cond), which (under normal assert semantics) only aborts when cond is false, so the code following the call can be reached when cond is true. However a violation can occur if metal_sys_assert is implemented or annotated as a non\u2011returning routine or if the macro expands to an unconditional non\u2011returning abort. Example violating scenario: metal_sys_assert is defined as a function marked with the noreturn attribute or the macro expands unconditionally to an abort/infinite loop (e.g. #define metal_sys_assert(cond) do { (void)(cond); abort(); } while(0)), which makes the subsequent code unreachable. In that case Rule 2.1 would be violated."
}