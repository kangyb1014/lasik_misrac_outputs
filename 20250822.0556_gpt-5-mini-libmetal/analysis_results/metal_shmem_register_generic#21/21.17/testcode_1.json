{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe expression ensures shmem->name is non-NULL (left operand of && is evaluated first) but does not guarantee the pointed-to object is NUL-terminated within its allocated bounds. If shmem->name points to a buffer that lacks a terminating '\\0' (e.g. populated from raw/truncated data or an object without a guaranteed terminator), strlen(shmem->name) may read past the object\u2019s bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_register_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_register_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_register_generic code.\n",
  "test_code": "int metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n    /* Probe logging to capture control path and state for Rule 21.17 investigation. */\n    {\n        FILE *fp = fopen(\"/tmp/logs/219.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"metal_shmem_register_generic: entry\\n\");\n            fprintf(fp, \"  shmem ptr = %p\\n\", (void *)shmem);\n            if (shmem) {\n                fprintf(fp, \"  shmem->name ptr = %p\\n\", (void *)shmem->name);\n                /* Do NOT dereference shmem->name or call strlen() here to avoid\n                 * introducing additional out-of-bounds accesses. The original\n                 * code performs the strlen() inside the assert below; we log\n                 * that this evaluation is about to happen so reproducer agents\n                 * can correlate logs with any observed UB/crash. */\n                fprintf(fp, \"  about to evaluate: shmem->name && strlen(shmem->name) != 0\\n\");\n            } else {\n                fprintf(fp, \"  shmem is NULL\\n\");\n            }\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    /* Make sure that we can be found. */\n    metal_assert(shmem->name && strlen(shmem->name) != 0);\n\n    /* Log that the first assertion passed (execution reached here). */\n    {\n        FILE *fp = fopen(\"/tmp/logs/219.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"metal_shmem_register_generic: name non-NULL and non-empty (assert passed)\\n\");\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    /* Statically registered shmem regions cannot have a destructor. */\n    metal_assert(!shmem->io.ops.close);\n\n    /* Log before adding to list. */\n    {\n        FILE *fp = fopen(\"/tmp/logs/219.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"metal_shmem_register_generic: adding to generic_shmem_list, node=%p\\n\", (void *)&shmem->node);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    metal_list_add_tail(&_metal.common.generic_shmem_list,\n                &shmem->node);\n\n    /* Final log and return. */\n    {\n        FILE *fp = fopen(\"/tmp/logs/219.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"metal_shmem_register_generic: exit returning 0\\n\");\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n    return 0;\n}\n"
}