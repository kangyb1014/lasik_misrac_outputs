{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(shmem->name) can read past the bounds of the object pointed to by shmem->name if that character buffer is not guaranteed to be NUL-terminated. For example, if name points to a 4-byte buffer filled with {'a','b','c','d'} (no '\\0'), or if name points to the middle of a non-terminated region, strlen will scan beyond the allocated object and cause an out-of-bounds access. (Note: the short-circuit in shmem->name && ... prevents a NULL dereference, but it does not ensure a terminating NUL within the object.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_register_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_register_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_register_generic code.\n",
  "test_code": "int metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n    FILE *log = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER metal_shmem_register_generic: shmem=%p\\n\", (void *)shmem);\n        if (shmem) {\n            fprintf(log, \"shmem->name=%p\\n\", (void *)shmem->name);\n        } else {\n            fprintf(log, \"shmem is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Safely check for NULL before calling strlen (preserve original short-circuiting).\n     * Note: calling strlen on a non NUL-terminated buffer is the original issue being\n     * investigated; we keep the same behavior but log the observations so other agents\n     * can reproduce evidence. */\n    size_t name_len = 0;\n    if (shmem && shmem->name) {\n        name_len = strlen(shmem->name);\n        if (log) {\n            fprintf(log, \"strlen(shmem->name)=%zu\\n\", name_len);\n            fflush(log);\n        }\n    } else if (log) {\n        fprintf(log, \"shmem->name is NULL (will fail assert)\\n\");\n        fflush(log);\n    }\n\n    /* Make sure that we can be found. */\n    metal_assert(shmem->name && name_len != 0);\n\n    if (log) {\n        fprintf(log, \"passed name assert\\n\");\n        fflush(log);\n    }\n\n    /* Statically registered shmem regions cannot have a destructor. */\n    if (log) {\n        fprintf(log, \"shmem->io.ops.close is %s\\n\",\n                shmem && shmem->io.ops.close ? \"present\" : \"NULL\");\n        fflush(log);\n    }\n    metal_assert(!shmem->io.ops.close);\n\n    if (log) {\n        fprintf(log, \"passed close assert, adding to list: node=%p\\n\", (void *)&shmem->node);\n        fclose(log);\n    }\n\n    metal_list_add_tail(&_metal.common.generic_shmem_list,\n                        &shmem->node);\n    return 0;\n}"
}