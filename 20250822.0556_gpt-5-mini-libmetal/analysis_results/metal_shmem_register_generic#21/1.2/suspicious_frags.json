{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_shmem_register_generic:\n#define metal_assert(cond) metal_sys_assert(cond)\n...\nstruct metal_generic_shmem {\n\tconst char\t\t*name;\n\tstruct metal_io_region\tio;\n\tstruct metal_list\tnode;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are used in the provided code. The fragments were checked for common vendor/compiler extensions (and none were found):\n\n- metal_assert(shmem->name && strlen(shmem->name) != 0);\n  - This is a macro invocation and a normal function call to strlen; nothing in this snippet shows use of compiler-specific extensions (e.g. __builtin_*, __attribute__, __asm__, typeof, statement-expressions ({ ... }), nested functions, or other documented extensions). The actual macro implementation (metal_sys_assert) is not shown; if that implementation uses compiler extensions it should be reviewed, but the call site here is standard C.\n\n- metal_assert(!shmem->io.ops.close);\n  - As above, this is a macro and a normal boolean expression. No compiler extensions are visible.\n\n- metal_list_add_tail(&_metal.common.generic_shmem_list,\n                      &shmem->node);\n  - Taking the address of a structure member (_metal.common.generic_shmem_list) and passing pointers is standard C. The multi-line formatting is just a macro call across lines; no extension is present in the call syntax.\n\n- struct metal_generic_shmem { const char *name; struct metal_io_region io; struct metal_list node; }\n  - The structure definition uses ordinary C constructs. (Note: the trailing semicolon may be missing in the provided excerpt; that is a syntactic issue in the excerpt, not evidence of a compiler extension.)\n\nIf you want a deeper check for Rule 1.2 compliance, provide the definitions/implementations of the macros and any referenced headers (metal_sys_assert, metal_list_add_tail, _metal object, or any compiler-specific header). Those implementations could contain explicit compiler extensions and would need to be inspected. Based on only the provided code, no language extensions are used."
}