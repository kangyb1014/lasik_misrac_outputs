{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct ({ ... }) and the GNU token-pasting comma-swallowing form '##__VA_ARGS__' in the macro definition. Both are documented compiler extensions (the ({ ... }) statement-expression and the '##__VA_ARGS__' comma swallowing are GCC extensions), so this violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_softirq_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/220.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_softirq_allocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_softirq_allocate:\n```c\nint metal_softirq_allocate(int num)\n{\n\tint irq_base;\n\n\tif ((metal_softirq_avail + num) >= metal_softirq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"No more available soft irqs\\n\");\n\t\treturn -EINVAL;\n\t}\n\tirq_base = metal_softirq_avail;\n\tirq_base += metal_softirq_cntr.irq_base;\n\tmetal_softirq_avail += num;\n\treturn irq_base;\n}\n```\n</target_code>\nPlease provide the modified metal_softirq_allocate code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nint metal_softirq_allocate(int num)\n{\n\tint irq_base;\n\t/* Ensure log directory exists; ignore errors if it already exists */\n\t(void)mkdir(\"/tmp/logs\", 0777);\n\tFILE *log = fopen(\"/tmp/logs/220.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"ENTER metal_softirq_allocate: num=%d, metal_softirq_avail=%d, metal_softirq_num=%d\\n\",\n\t\t\t   num, metal_softirq_avail, metal_softirq_num);\n\t\tfflush(log);\n\t}\n\n\tif ((metal_softirq_avail + num) >= metal_softirq_num) {\n\t\t/* preserve original behavior */\n\t\tmetal_log(METAL_LOG_ERROR, \"No more available soft irqs\\n\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"FAIL: insufficient slots: requested=%d, avail=%d, limit=%d\\n\",\n\t\t\t\t   num, metal_softirq_avail, metal_softirq_num);\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\tirq_base = metal_softirq_avail;\n\tif (log) {\n\t\tfprintf(log, \"ALLOC_STEP: initial irq_base=%d (metal_softirq_avail)\\n\", irq_base);\n\t\tfflush(log);\n\t}\n\n\tirq_base += metal_softirq_cntr.irq_base;\n\tif (log) {\n\t\tfprintf(log, \"ALLOC_STEP: added metal_softirq_cntr.irq_base=%d -> irq_base=%d\\n\",\n\t\t\t   metal_softirq_cntr.irq_base, irq_base);\n\t\tfflush(log);\n\t}\n\n\tmetal_softirq_avail += num;\n\tif (log) {\n\t\tfprintf(log, \"EXIT metal_softirq_allocate: allocated=%d, new_metal_softirq_avail=%d, returning=%d\\n\",\n\t\t\t   num, metal_softirq_avail, irq_base);\n\t\tfclose(log);\n\t}\n\n\treturn irq_base;\n}\n"
}