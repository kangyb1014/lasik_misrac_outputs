{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_allocate:\n```c\nint metal_softirq_allocate(int num)\n{\n\tint irq_base;\n\n\tif ((metal_softirq_avail + num) >= metal_softirq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"No more available soft irqs\\n\");\n\t\treturn -EINVAL;\n\t}\n\tirq_base = metal_softirq_avail;\n\tirq_base += metal_softirq_cntr.irq_base;\n\tmetal_softirq_avail += num;\n\treturn irq_base;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_allocate:\nstatic int metal_softirq_avail\n...\n\n...\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\t    METAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\t    NULL,\n\t\t\t\t    metal_softirq_set_enable, NULL,\n\t\t\t\t    metal_softirqs)\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic METAL_IRQ_CONTROLLER_DECLARE(metal_softirq_cntr,\n\t\t\t\tMETAL_IRQ_ANY, METAL_SOFTIRQ_NUM,\n\t\t\t\tNULL,\n\t\t\t\tmetal_softirq_set_enable, NULL,\n\t\t\t\tmetal_softirqs)\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation found in the fragment itself. The line only uses the storage-class specifier 'static' and invokes the macro METAL_IRQ_CONTROLLER_DECLARE with arguments; there are no explicit compiler-extension tokens (e.g. __attribute__, __asm__, ({...}), typeof) visible here. Rule 1.2 is not violated based on this fragment alone. Note: if the definition/expansion of METAL_IRQ_CONTROLLER_DECLARE uses compiler-specific extensions (for example __attribute__((section(...))), GCC statement-expressions ({ ... }), or other documented compiler extensions), then that expansion would violate Rule 1.2\u2014inspect the macro definition to be certain."
}