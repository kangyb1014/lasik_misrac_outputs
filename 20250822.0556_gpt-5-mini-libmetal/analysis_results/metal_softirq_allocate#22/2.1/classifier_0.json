{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_softirq_allocate:\n```c\nint metal_softirq_allocate(int num)\n{\n\tint irq_base;\n\n\tif ((metal_softirq_avail + num) >= metal_softirq_num) {\n\t\tmetal_log(METAL_LOG_ERROR, \"No more available soft irqs\\n\");\n\t\treturn -EINVAL;\n\t}\n\tirq_base = metal_softirq_avail;\n\tirq_base += metal_softirq_cntr.irq_base;\n\tmetal_softirq_avail += num;\n\treturn irq_base;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_softirq_allocate:\nstatic int metal_softirq_avail\n...\n\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nirq_base = metal_softirq_avail;\n\tirq_base += metal_softirq_cntr.irq_base;\n\tmetal_softirq_avail += num;\n\treturn irq_base;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment is executed when the preceding if condition is false (i.e. when (metal_softirq_avail + num) < metal_softirq_num), so the assignments and return are reachable. (Note: beware of potential signed-integer overflow in the condition which is UB, but that would not itself create unreachable code.)"
}