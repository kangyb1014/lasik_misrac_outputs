{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_get_timestamp:\n```c\nunsigned long long metal_get_timestamp(void)\n{\n\tunsigned long long t = 0;\n\tstruct timespec tp;\n\tint r;\n\n\tr = clock_gettime(CLOCK_MONOTONIC, &tp);\n\tif (r == -1) {\n\t\tmetal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n\t\treturn t;\n\t}\n\tt = tp.tv_sec * (NS_PER_S);\n\tt += tp.tv_nsec;\n\n\treturn t;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_get_timestamp:\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmetal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "When clock_gettime fails, metal_get_timestamp calls the metal_log macro which, if _metal.common.log_handler is non-NULL, invokes that handler. If the installed log_handler implementation calls metal_get_timestamp (for example, to include a timestamp in log messages), the call chain becomes: metal_get_timestamp -> metal_log -> _metal.common.log_handler -> metal_get_timestamp, forming indirect recursion and violating Rule 17.2."
}