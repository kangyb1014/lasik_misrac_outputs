{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen clock_gettime fails, metal_get_timestamp calls the metal_log macro which, if _metal.common.log_handler is non-NULL, invokes that handler. If the installed log_handler implementation calls metal_get_timestamp (for example, to include a timestamp in log messages), the call chain becomes: metal_get_timestamp -> metal_log -> _metal.common.log_handler -> metal_get_timestamp, forming indirect recursion and violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_get_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/556.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_get_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_get_timestamp:\n```c\nunsigned long long metal_get_timestamp(void)\n{\n\tunsigned long long t = 0;\n\tstruct timespec tp;\n\tint r;\n\n\tr = clock_gettime(CLOCK_MONOTONIC, &tp);\n\tif (r == -1) {\n\t\tmetal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n\t\treturn t;\n\t}\n\tt = tp.tv_sec * (NS_PER_S);\n\tt += tp.tv_nsec;\n\n\treturn t;\n}\n```\n</target_code>\nPlease provide the modified metal_get_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/556.txt.\n   These helpers avoid calling metal_log to prevent triggering the\n   suspected recursion; they use low-level file operations instead. */\nstatic void probe_write(const char *msg)\n{\n    int fd = open(\"/tmp/logs/556.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0) {\n        size_t len = strlen(msg);\n        /* write may write fewer bytes; ignore errors for probe logging */\n        (void)write(fd, msg, len);\n        (void)close(fd);\n    }\n}\n\nstatic void probe_log_state(const char *stage, unsigned long long t, int r, int reentrancy)\n{\n    char buf[512];\n    int pid = (int)getpid();\n    int err = errno; /* snapshot errno */\n    int n = snprintf(buf, sizeof(buf),\n                     \"pid=%d stage=%s reentrancy=%d t=%llu r=%d errno=%d\\n\",\n                     pid, stage, reentrancy, t, r, err);\n    if (n > 0) {\n        /* ensure NUL termination in case of truncation */\n        buf[sizeof(buf) - 1] = '\\0';\n        probe_write(buf);\n    }\n}\n\n/* Preserve original logic; add probes only. */\nunsigned long long metal_get_timestamp(void)\n{\n    unsigned long long t = 0;\n    struct timespec tp;\n    int r;\n    static int probe_reentrancy = 0;\n\n    /* mark entry and log state */\n    probe_reentrancy++;\n    probe_log_state(\"enter\", t, 0, probe_reentrancy);\n\n    r = clock_gettime(CLOCK_MONOTONIC, &tp);\n    if (r == -1) {\n        /* Log the failure and state before invoking metal_log (so logs\n           will show the call chain and potential re-entrancy if a\n           log handler calls back into this function). */\n        probe_log_state(\"clock_gettime_failed_before_metal_log\", t, r, probe_reentrancy);\n\n        /* Original behavior: call metal_log and return t (0). */\n        metal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n\n        /* Log after metal_log call to capture control flow (if metal_log\n           invoked a handler that re-entered this function, additional\n           \"enter\"/\"exit\" lines will appear in the log). */\n        probe_log_state(\"after_metal_log_on_failure\", t, r, probe_reentrancy);\n\n        probe_reentrancy--;\n        probe_log_state(\"exit_on_failure\", t, r, probe_reentrancy);\n        return t;\n    }\n    t = tp.tv_sec * (NS_PER_S);\n    t += tp.tv_nsec;\n\n    probe_log_state(\"success_before_return\", t, r, probe_reentrancy);\n    probe_reentrancy--;\n    probe_log_state(\"exit_success\", t, r, probe_reentrancy);\n\n    return t;\n}\n"
}