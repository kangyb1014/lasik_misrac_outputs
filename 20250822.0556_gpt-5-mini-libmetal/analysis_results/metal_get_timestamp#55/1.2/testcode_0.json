{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses GCC/Clang language extensions: the statement-expression construct ({ ... }) and the GCC-style token pasting to omit the comma (##__VA_ARGS__). Both are documented compiler extensions (GCC/Clang) and are not standard C, so Rule 1.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_get_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/550.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_get_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_get_timestamp:\n```c\nunsigned long long metal_get_timestamp(void)\n{\n\tunsigned long long t = 0;\n\tstruct timespec tp;\n\tint r;\n\n\tr = clock_gettime(CLOCK_MONOTONIC, &tp);\n\tif (r == -1) {\n\t\tmetal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n\t\treturn t;\n\t}\n\tt = tp.tv_sec * (NS_PER_S);\n\tt += tp.tv_nsec;\n\n\treturn t;\n}\n```\n</target_code>\nPlease provide the modified metal_get_timestamp code.\n",
  "test_code": "#include <time.h>\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Forward declaration for external logging used by original code. */\nextern void metal_log(int level, const char *fmt, ...);\n\n/* Probe helper: append control-flow and state information to /tmp/logs/550.txt.\n   Keeps original logic unchanged; does not define macros or main. */\nstatic void probe_log(const char *stage, int r, const struct timespec *tp, unsigned long long t)\n{\n    int saved_errno = errno;\n    const char *dir = \"/tmp/logs\";\n    const char *path = \"/tmp/logs/550.txt\";\n\n    /* Ensure the directory exists; ignore errors if it already exists or cannot be created. */\n    (void)mkdir(dir, 0755);\n\n    FILE *f = fopen(path, \"a\");\n    if (f != NULL) {\n        time_t now = time(NULL);\n        fprintf(f, \"[%ld] stage=%s r=%d errno=%d (%s)\\n\",\n                (long)now,\n                (stage != NULL) ? stage : \"(null)\",\n                r,\n                saved_errno,\n                (saved_errno != 0) ? strerror(saved_errno) : \"no error\");\n\n        if (tp != NULL) {\n            fprintf(f, \"  tp.tv_sec=%ld tp.tv_nsec=%ld\\n\",\n                    (long)tp->tv_sec,\n                    (long)tp->tv_nsec);\n        }\n\n        fprintf(f, \"  computed_t=%llu\\n\", (unsigned long long)t);\n        fflush(f);\n        (void)fclose(f);\n    }\n\n    /* Restore errno to avoid changing caller state. */\n    errno = saved_errno;\n}\n\nunsigned long long metal_get_timestamp(void)\n{\n    unsigned long long t = 0;\n    struct timespec tp;\n    int r;\n\n    /* Probe: entry */\n    probe_log(\"enter\", 0, NULL, 0);\n\n    r = clock_gettime(CLOCK_MONOTONIC, &tp);\n\n    /* Probe: after clock_gettime call; record return code and timespec buffer. */\n    probe_log(\"after_clock_gettime\", r, &tp, 0);\n\n    if (r == -1) {\n        /* Probe: error path */\n        probe_log(\"clock_gettime_failed\", r, &tp, 0);\n\n        metal_log(METAL_LOG_ERROR, \"clock_gettime failed!\\n\");\n        return t;\n    }\n\n    t = tp.tv_sec * (NS_PER_S);\n    t += tp.tv_nsec;\n\n    /* Probe: before returning computed timestamp */\n    probe_log(\"before_return\", r, &tp, t);\n\n    return t;\n}\n"
}