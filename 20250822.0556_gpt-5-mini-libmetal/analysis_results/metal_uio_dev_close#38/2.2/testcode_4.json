{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)lbus;' is an expression statement that has no side-effects; removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/382.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_close:\n```c\nstatic void metal_uio_dev_close(struct linux_bus *lbus,\n\t\t\t\tstruct linux_device *ldev)\n{\n\t(void)lbus;\n\tunsigned int i;\n\n\tfor (i = 0; i < ldev->device.num_regions; i++) {\n\t\tmetal_unmap(ldev->device.regions[i].virt,\n\t\t\t    ldev->device.regions[i].size);\n\t}\n\tif (ldev->override) {\n\t\tsysfs_write_attribute(ldev->override, \"\", 1);\n\t\tldev->override = NULL;\n\t}\n\tif (ldev->sdev) {\n\t\tsysfs_close_device(ldev->sdev);\n\t\tldev->sdev = NULL;\n\t}\n\tif (ldev->fd >= 0) {\n\t\tclose(ldev->fd);\n\t}\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_close code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n\nstatic void metal_uio_dev_close(struct linux_bus *lbus,\n\t\t\t\tstruct linux_device *ldev)\n{\n\t/* Preserve original explicit cast-to-void for lbus (keeps original structure).\n\t   The cast is the expression identified as dead code by the analyzer; we\n\t   leave it in place but also emit logs so the presence and effect (or lack\n\t   thereof) of that statement can be observed at runtime. */\n\t(void)lbus;\n\n\tFILE *log = fopen(\"/tmp/logs/382.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_uio_dev_close: entry lbus=%p ldev=%p\\n\", (void *)lbus, (void *)ldev);\n\t\tif (ldev) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: num_regions=%u override=%p sdev=%p fd=%d\\n\",\n\t\t\t\t(unsigned)ldev->device.num_regions, (void *)ldev->override, (void *)ldev->sdev, (int)ldev->fd);\n\t\t} else {\n\t\t\tfprintf(log, \"metal_uio_dev_close: ldev is NULL\\n\");\n\t\t}\n\t\tfflush(log);\n\t}\n\n\tunsigned int i;\n\n\tfor (i = 0; i < ldev->device.num_regions; i++) {\n\t\tif (log) {\n\t\t\t/* Print region information to help reproduce control flow */\n\t\t\tfprintf(log, \"metal_uio_dev_close: unmapping region %u virt=%p size=%lu\\n\",\n\t\t\t\ti, ldev->device.regions[i].virt,\n\t\t\t\t(unsigned long)ldev->device.regions[i].size);\n\t\t\tfflush(log);\n\t\t}\n\n\t\tmetal_unmap(ldev->device.regions[i].virt,\n\t\t\t    ldev->device.regions[i].size);\n\t}\n\tif (ldev->override) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: writing empty to override %p\\n\", (void *)ldev->override);\n\t\t\tfflush(log);\n\t\t}\n\t\tsysfs_write_attribute(ldev->override, \"\", 1);\n\t\tldev->override = NULL;\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: override cleared\\n\");\n\t\t\tfflush(log);\n\t\t}\n\t}\n\tif (ldev->sdev) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: closing sdev %p\\n\", (void *)ldev->sdev);\n\t\t\tfflush(log);\n\t\t}\n\t\tsysfs_close_device(ldev->sdev);\n\t\tldev->sdev = NULL;\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: sdev cleared\\n\");\n\t\t\tfflush(log);\n\t\t}\n\t}\n\tif (ldev->fd >= 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: closing fd %d\\n\", ldev->fd);\n\t\t\tfflush(log);\n\t\t}\n\t\tclose(ldev->fd);\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_uio_dev_close: fd closed\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t} else {\n\t\tif (log) {\n\t\t\tfclose(log);\n\t\t}\n\t}\n}\n"
}