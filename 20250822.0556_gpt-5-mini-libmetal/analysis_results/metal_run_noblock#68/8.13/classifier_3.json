{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_run_noblock:\ntypedef void *(*metal_thread_t)(void *)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The pointers in the prototype are intentionally non-const: 'tids' and 'threads_out' are output buffers written by this function (pthread_create stores thread IDs into the pthread_t array and *threads_out is assigned), so they must not be const. 'arg' cannot be made const because the thread function type metal_thread_t is defined as void *(*)(void *), so it expects a void * parameter; making arg 'const void *' would be incompatible without changing metal_thread_t. Thus there is no place where a pointer can be const-qualified \u201cwhenever possible\u201d here, so Rule 8.13 is not violated."
}