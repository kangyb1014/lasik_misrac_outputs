{
  "user_message": "An agent A claimed that the following metal_run_noblock code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of metal_run_noblock.\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro uses compiler extensions: the statement-expression construct '({ ... })' is a GCC/Clang extension, and the use of '##__VA_ARGS__' for comma elision is a GNU extension. Both are non\u2011standard language extensions (documented by those compilers), so Rule 1.2 is violated.\n</scenario>\n\n<execution_log>\nThe agent A also provided the following output log:\nenter metal_run_noblock: threads=10, child_is_null=0, arg=0x7fffa22a285c, tids=0x7fffa22a27a0, threads_out=0x7fffa22a2810\ncreating thread index=0\npthread_create returned rc=0, error_stored=0\ncreating thread index=1\npthread_create returned rc=0, error_stored=0\ncreating thread index=2\npthread_create returned rc=0, error_stored=0\ncreating thread index=3\npthread_create returned rc=0, error_stored=0\ncreating thread index=4\npthread_create returned rc=0, error_stored=0\ncreating thread index=5\npthread_create returned rc=0, error_stored=0\ncreating thread index=6\npthread_create returned rc=0, error_stored=0\ncreating thread index=7\npthread_create returned rc=0, error_stored=0\ncreating thread index=8\npthread_create returned rc=0, error_stored=0\ncreating thread index=9\npthread_create returned rc=0, error_stored=0\nexit metal_run_noblock: threads_created=10, return_error=0\nenter metal_run_noblock: threads=10, child_is_null=0, arg=0x7fffa22a286c, tids=0x7fffa22a27b0, threads_out=0x7fffa22a2820\ncreating thread index=0\npthread_create returned rc=0, error_stored=0\ncreating thread index=1\npthread_create returned rc=0, error_stored=0\ncreating thread index=2\npthread_create returned rc=0, error_stored=0\ncreating thread index=3\npthread_create returned rc=0, error_stored=0\ncreating thread index=4\npthread_create returned rc=0, error_stored=0\ncreating thread index=5\npthread_create returned rc=0, error_stored=0\ncreating thread index=6\npthread_create returned rc=0, error_stored=0\ncreating thread index=7\npthread_create returned rc=0, error_stored=0\ncreating thread index=8\npthread_create returned rc=0, error_stored=0\ncreating thread index=9\npthread_create returned rc=0, error_stored=0\nexit metal_run_noblock: threads_created=10, return_error=0\nenter metal_run_noblock: threads=10, child_is_null=0, arg=0x5594f8307198, tids=0x7fffa22a27b0, threads_out=0x7fffa22a2820\ncreating thread index=0\npthread_create returned rc=0, error_stored=0\ncreating thread index=1\npthread_create returned rc=0, error_stored=0\ncreating thread index=2\npthread_create returned rc=0, error_stored=0\ncreating thread index=3\npthread_create returned rc=0, error_stored=0\ncreating thread index=4\npthread_create returned rc=0, error_stored=0\ncreating thread index=5\npthread_create returned rc=0, error_stored=0\ncreating thread index=6\npthread_create returned rc=0, error_stored=0\ncreating thread index=7\npthread_create returned rc=0, error_stored=0\ncreating thread index=8\npthread_create returned rc=0, error_stored=0\ncreating thread index=9\npthread_create returned rc=0, error_stored=0\nexit metal_run_noblock: threads_created=10, return_error=0\nenter metal_run_noblock: threads=10, child_is_null=0, arg=(nil), tids=0x7fffa22a2820, threads_out=0x7fffa22a2818\ncreating thread index=0\npthread_create returned rc=0, error_stored=0\ncreating thread index=1\npthread_create returned rc=0, error_stored=0\ncreating thread index=2\npthread_create returned rc=0, error_stored=0\ncreating thread index=3\npthread_create returned rc=0, error_stored=0\ncreating thread index=4\npthread_create returned rc=0, error_stored=0\ncreating thread index=5\npthread_create returned rc=0, error_stored=0\ncreating thread index=6\npthread_create returned rc=0, error_stored=0\ncreating thread index=7\npthread_create returned rc=0, error_stored=0\ncreating thread index=8\npthread_create returned rc=0, error_stored=0\ncreating thread index=9\npthread_create returned rc=0, error_stored=0\nexit metal_run_noblock: threads_created=10, return_error=0\nenter metal_run_noblock: threads=10, child_is_null=0, arg=(nil), tids=0x7fffa22a2760, threads_out=0x7fffa22a27d0\ncreating thread index=0\npthread_create returned rc=0, error_stored=0\ncreating thread index=1\npthread_create returned rc=0, error_stored=0\ncreating thread index=2\npthread_create returned rc=0, error_stored=0\ncreating thread index=3\npthread_create returned rc=0, error_stored=0\ncreating thread index=4\npthread_create returned rc=0, error_stored=0\ncreating thread index=5\npthread_create returned rc=0, error_stored=0\ncreating thread index=6\npthread_create returned rc=0, error_stored=0\ncreating thread index=7\np\n</execution_log>\n<additional code>Here are the definitions of symbols that are close to the target function metal_run_noblock:\ntypedef void *(*metal_thread_t)(void *)\n...\n#define metal_log(level, fmt, __VA_ARGS__) ({if(_metal.common.log_handler&&level<=_metal.common.log_level)_metal.common.log_handler(level,metal_fmt(fmt),##__VA_ARGS__);\\\n})\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The reported violation is correct. The function metal_run_noblock itself contains no GCC extensions, but the additional macro definition for metal_log uses two non\u2011standard constructs: the statement\u2011expression ({ ... }) (a GNU extension supported by GCC/Clang) and the GNU comma\u2011elision form '##__VA_ARGS__'. Both are documented compiler extensions and therefore contravene MISRA C 2023 Rule 1.2 (language extensions should not be used). The violation stems from the macro definition shown, not the body of metal_run_noblock."
}