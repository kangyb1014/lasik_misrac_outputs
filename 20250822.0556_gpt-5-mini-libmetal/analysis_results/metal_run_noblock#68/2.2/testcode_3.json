{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to metal_run_noblock writes the number of created threads into the caller variable ts_created via the threads_out parameter, but in this caller (condition) ts_created is never read/used afterwards (metal_finish_threads is always called with THREADS, not ts_created). The write performed by metal_run_noblock (*threads_out = i) is therefore a dead store in this call path \u2014 an executed operation whose removal would not affect program behaviour \u2014 which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run_noblock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/682.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_run_noblock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_run_noblock:\n```c\nint metal_run_noblock(int threads, metal_thread_t child,\n\t\t     void *arg, void *tids, int *threads_out)\n{\n\tint error, i;\n\tpthread_t *tid_p = (pthread_t *)tids;\n\n\tif (!tids) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n\t\treturn -EINVAL;\n\t}\n\n\terror = 0;\n\tfor (i = 0; i < threads; i++) {\n\t\terror = -pthread_create(&tid_p[i], NULL, child, arg);\n\t\tif (error) {\n\t\t\tmetal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n\t\t\t\t  strerror(error));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*threads_out = i;\n\treturn error;\n}\n```\n</target_code>\nPlease provide the modified metal_run_noblock code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include <errno.h>\n#include <pthread.h>\n\nint metal_run_noblock(int threads, metal_thread_t child,\n                     void *arg, void *tids, int *threads_out)\n{\n    int error, i;\n    pthread_t *tid_p = (pthread_t *)tids;\n    FILE *log = NULL;\n\n    /* Try to open probe log. If it fails, fall back to existing logging. */\n    log = fopen(\"/tmp/logs/682.txt\", \"a\");\n    if (log) {\n        time_t now = time(NULL);\n        fprintf(log, \"[metal_run_noblock] start: time=%ld, threads=%d, tids=%p, threads_out=%p\\n\",\n                (long)now, threads, (void *)tids, (void *)threads_out);\n        fflush(log);\n    }\n\n    if (!tids) {\n        if (log) {\n            fprintf(log, \"[metal_run_noblock] invalid argument: tids is NULL -> returning -EINVAL\\n\");\n            fclose(log);\n            log = NULL;\n        } else {\n            /* preserve original logging behavior */\n            metal_log(METAL_LOG_ERROR, \"invalid argument, tids is NULL.\\n\");\n        }\n        return -EINVAL;\n    }\n\n    error = 0;\n    for (i = 0; i < threads; i++) {\n        if (log) {\n            fprintf(log, \"[metal_run_noblock] creating thread index=%d at tid_p[%d]=%p\\n\",\n                    i, i, (void *)&tid_p[i]);\n            fflush(log);\n        }\n\n        error = -pthread_create(&tid_p[i], NULL, child, arg);\n\n        if (log) {\n            /* Log the raw return value from pthread_create (negated as in original code) */\n            fprintf(log, \"[metal_run_noblock] pthread_create returned (negated)=%d for index=%d\\n\",\n                    error, i);\n            fflush(log);\n        }\n\n        if (error) {\n            /* preserve original error logging */\n            metal_log(METAL_LOG_ERROR, \"failed to create thread - %s\\n\",\n                      strerror(error));\n\n            if (log) {\n                fprintf(log, \"[metal_run_noblock] thread creation failed at index=%d, error=%d, strerror=%s\\n\",\n                        i, error, strerror(error));\n                fflush(log);\n                fclose(log);\n                log = NULL;\n            }\n            break;\n        }\n    }\n\n    /* RECORD the number of created threads and state for post-run inspection. */\n    *threads_out = i;\n    if (log) {\n        fprintf(log, \"[metal_run_noblock] assigned *threads_out = %d (address=%p)\\n\",\n                i, (void *)threads_out);\n        fprintf(log, \"[metal_run_noblock] final return error=%d\\n\", error);\n        fflush(log);\n        fclose(log);\n        log = NULL;\n    }\n\n    return error;\n}\n"
}