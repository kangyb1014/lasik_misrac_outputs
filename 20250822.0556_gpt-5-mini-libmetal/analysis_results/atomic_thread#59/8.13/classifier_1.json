{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of atomic_thread:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function atomic_thread:\nstatic const int atomic_test_count = 1000\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\natomic_int *c = arg;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: c is used with atomic_fetch_add to modify the pointed-to atomic_int, so the pointer must not be const-qualified. Rule 8.13 requires const qualification only when the pointed-to object is not modified; if the function did not modify *c, it should be declared as const atomic_int *c = arg."
}