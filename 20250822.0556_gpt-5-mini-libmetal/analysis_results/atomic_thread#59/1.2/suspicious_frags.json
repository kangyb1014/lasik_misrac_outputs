{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of atomic_thread:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function atomic_thread:\nstatic const int atomic_test_count = 1000\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. Reasons:\n\n- atomic_int and atomic_fetch_add are part of the C11 standard atomic types and operations (stdatomic.h); they are not compiler-specific language extensions when compiled with a C11-compliant compiler.\n- The function signature static void *atomic_thread(void *arg) and the return of NULL are standard C and match the common POSIX thread entry-point prototype; these are not language extensions.\n- Assigning a void * to an object pointer type (atomic_int *c = arg;) is permitted in standard C (unlike C++), so this is not a compiler extension.\n- There are no occurrences of known compiler-specific constructs such as __attribute__, __extension__, typeof, asm, __builtin_... , __int128, or other vendor intrinsics/macros in the code.\n\nIf the build environment does not support C11 atomics and provides atomic_int/atomic_fetch_add as a nonstandard compiler/library extension, that would be outside the source text and should be documented by the compiler/library. Based on the source shown, however, there is no explicit use of documented compiler language extensions to report."
}