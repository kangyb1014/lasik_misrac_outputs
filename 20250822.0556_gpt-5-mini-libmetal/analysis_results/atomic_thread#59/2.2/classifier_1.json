{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of atomic_thread:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function atomic_thread:\nstatic const int atomic_test_count = 1000\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void *atomic_thread(void *arg)\n{\n\tatomic_int *c = arg;\n\tint i;\n\n\tfor (i = 0; i < atomic_test_count; i++)\n\t\tatomic_fetch_add(c, 1);\n\n\treturn NULL;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The function performs observable side-effects by repeatedly calling atomic_fetch_add(c, 1) (incrementing the atomic object). Removing those calls would change program behaviour, so the code is not 'dead'. If the static function were never called anywhere it would be unreachable (note 2 of the rule) rather than dead code. Only a hypothetical violation would occur if the loop and atomic_fetch_add had no observable effect (e.g. all calls compiled to no-ops), in which case their removal would not affect behaviour \u2014 but given the shown code this is not the case."
}