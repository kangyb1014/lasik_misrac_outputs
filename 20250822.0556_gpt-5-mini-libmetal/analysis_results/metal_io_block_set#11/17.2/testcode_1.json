{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call through the function pointer io->ops.block_set can cause indirect recursion if that pointer is (directly or indirectly) set to metal_io_block_set. For example, if somewhere ops.block_set = metal_io_block_set (or ops.block_set -> wrapper -> metal_io_block_set), then executing (*io->ops.block_set)(...) inside metal_io_block_set will re-enter metal_io_block_set and violate MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/116.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Probe helper: append a single line of diagnostic info to /tmp/logs/116.txt. */\nstatic void probe_log(const char *stage, struct metal_io_region *io,\n                      unsigned long offset, unsigned char value, int len,\n                      void *block_set_ptr, void *ptr, void *stack_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/116.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log: stage, io, io->ops, block_set ptr, this function address, offset, value, len, io->size, ptr, stack marker */\n    fprintf(f, \"%s: io=%p ops=%p block_set=%p this_fn=%p offset=%lu value=%u len=%d io->size=%zu ptr=%p stack=%p\\n\",\n            stage,\n            (void *)io,\n            (void *)(io ? io->ops : NULL),\n            block_set_ptr,\n            (void *)metal_io_block_set,\n            offset,\n            (unsigned int)value,\n            len,\n            (size_t)(io ? io->size : 0),\n            ptr,\n            stack_addr);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    /* Local stack marker for logging stack address to help detect re-entry frames. */\n    void *stack_marker = (void *)&offset;\n\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log entry with initial state. */\n    probe_log(\"ENTER\", io, offset, value, len, (void *)(io && io->ops ? io->ops->block_set : NULL), (void *)ptr, stack_marker);\n\n    if (!ptr) {\n        probe_log(\"NULL_PTR_RETURN\", io, offset, value, len, (void *)(io && io->ops ? io->ops->block_set : NULL), NULL, stack_marker);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n    if (io->ops.block_set) {\n        /* Log before indirect call: include address of the function pointer and whether it equals this function. */\n        probe_log(\"BEFORE_CALL\", io, offset, value, len, (void *)io->ops.block_set, (void *)ptr, stack_marker);\n\n        /* Preserve original behavior: call through the ops pointer. */\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n\n        /* Log after the call returns. */\n        probe_log(\"AFTER_CALL\", io, offset, value, len, (void *)io->ops.block_set, (void *)ptr, stack_marker);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Log completion of local fill path. */\n        probe_log(\"LOCAL_FILL_DONE\", io, offset, value, retlen, NULL, (void *)ptr, stack_marker);\n    }\n    probe_log(\"RETURN\", io, offset, value, retlen, (void *)(io && io->ops ? io->ops->block_set : NULL), (void *)ptr, stack_marker);\n    return retlen;\n}\n"
}