{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf io->ops.block_read is set to point to metal_io_block_read (or to a function chain that eventually calls metal_io_block_read), then metal_io_block_read will call io->ops.block_read which will call metal_io_block_read again \u2014 an indirect recursive call violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/116.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n\n/* Probe function: append a single line of diagnostic information to the log file. */\nstatic void metal_io_probe_log(const struct metal_io_region *io,\n                               const char *stage,\n                               unsigned long offset,\n                               unsigned char value,\n                               int len,\n                               void *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/116.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* io or its fields might be NULL in some call sites; guard accesses. */\n    void *block_set = NULL;\n    void *block_read = NULL;\n    unsigned long size = 0UL;\n\n    if (io) {\n        /* Access ops fields only for logging (do not call them). */n\n        block_set = (void *)io->ops.block_set;\n        block_read = (void *)io->ops.block_read;\n        size = (unsigned long)io->size;\n    }\n\n    fprintf(f,\n            \"metal_io_block_set %s: io=%p, ops.block_set=%p, ops.block_read=%p, offset=%lu, value=0x%02x, len=%d, ptr=%p, io->size=%lu\\n\",\n            stage, (void *)io, block_set, block_read, offset, (unsigned int)value, len, ptr, size);\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log entry and initial state */\n    metal_io_probe_log(io, \"entry\", offset, value, len, (void *)ptr);\n\n    if (!ptr) {\n        metal_io_probe_log(io, \"null_ptr_return\", offset, value, len, (void *)ptr);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n\n    metal_io_probe_log(io, \"after_range_adjust\", offset, value, len, (void *)ptr);\n\n    if (io->ops.block_set) {\n        /* Log before calling the ops implementation */\n        metal_io_probe_log(io, \"before_block_set_call\", offset, value, len, (void *)ptr);\n\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n\n        /* Log after the call so callers can determine control-return path */\n        metal_io_probe_log(io, \"after_block_set_call\", offset, value, len, (void *)ptr);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* Log the replicated word value to be used for bulk writes */\n        metal_io_probe_log(io, \"computed_cint\", offset, value, len, (void *)(uintptr_t)cint);\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        /* Log after running the byte-based alignment loop */\n        metal_io_probe_log(io, \"after_alignment_loop\", offset, value, len, (void *)ptr);\n\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n\n        /* Log after word writes */\n        metal_io_probe_log(io, \"after_word_writes\", offset, value, len, (void *)ptr);\n\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n\n        /* Log after final byte writes, before fence */\n        metal_io_probe_log(io, \"after_final_bytes\", offset, value, len, (void *)ptr);\n\n        atomic_thread_fence(memory_order_seq_cst);\n\n        /* Log after memory fence */\n        metal_io_probe_log(io, \"after_fence\", offset, value, len, (void *)ptr);\n    }\n    /* Log function exit and returned length */\n    metal_io_probe_log(io, \"exit\", offset, value, retlen, (void *)ptr);\n    return retlen;\n}\n"
}