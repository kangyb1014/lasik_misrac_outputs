{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls a function pointer io->ops.block_write. If that pointer is (accidentally or by design) set to the same wrapper function (e.g. metal_io_block_write), the call becomes an indirect recursive call (function calls itself via the function pointer), which violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/116.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Probe helper: append a log entry describing current state to /tmp/logs/116.txt */\nstatic void metal_io_log_state(const char *phase,\n                               struct metal_io_region *io,\n                               unsigned long offset,\n                               unsigned char value,\n                               int len,\n                               int retlen,\n                               void *ptr,\n                               void *op_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/116.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[metal_io_block_set] phase=%s\\n\", phase);\n    fprintf(f, \"  io=%p, ops.block_set=%p, this_fn=%p\\n\",\n            (void *)io, op_ptr, (void *)metal_io_block_set);\n    fprintf(f, \"  offset=%lu, value=0x%02x, len=%d, retlen=%d\\n\",\n            offset, (unsigned)value, len, retlen);\n    fprintf(f, \"  io->size=%lu\\n\", io ? (unsigned long)io->size : 0UL);\n    fprintf(f, \"  ptr=%p\\n\", ptr);\n    if (ptr)\n        fprintf(f, \"  ptr_addr_mod_size_t=%"
}