{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for-loop uses and modifies two objects (ptr and len). The second clause uses ptr ((uintptr_t)ptr % sizeof(int)) even though ptr is modified in the loop (in the third clause and effectively in the loop body), and the third clause (ptr++, len--) modifies both ptr and len. MISRA C 2023 Rule 14.2 requires only one loop counter, the second clause must not use objects that are modified in the loop body, and the third clause may only modify the loop counter. Therefore this loop is not well-formed under Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Probe logging helpers. These are designed to preserve program logic\n   and only observe state. They append logs to /tmp/logs/114.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"ENTER metal_io_block_set: io=%p offset=%lu value=%u len=%d\",\n              (void *)io, offset, (unsigned int)value, len);\n\n    if (!ptr) {\n        probe_log(\"NULL ptr returned from metal_io_virt -> returning -ERANGE\");\n        return -ERANGE;\n    }\n\n    probe_log(\"ptr=%#lx (as uintptr_t) initial len=%d io->size=%lu\",\n              (unsigned long)(uintptr_t)ptr, len, (unsigned long)io->size);\n\n    if ((offset + len) > io->size) {\n        probe_log(\"offset+len (%lu) > io->size (%lu): adjusting len from %d to %ld\",\n                  (unsigned long)(offset + (unsigned long)len), (unsigned long)io->size,\n                  len, (long)(io->size - offset));\n        len = io->size - offset;\n    }\n    retlen = len;\n\n    if (io->ops.block_set) {\n        probe_log(\"Using io->ops.block_set branch: calling block_set(io=%p, offset=%lu, value=%u, len=%d)\",\n                  (void *)io, offset, (unsigned int)value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n        probe_log(\"Returned from io->ops.block_set\");\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"Filling cint from byte value: start cint=%u\", cint);\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        probe_log(\"Completed cint fill: cint=%u sizeof(int)=%zu\", cint, sizeof(int));\n\n        /* First loop: align ptr to sizeof(int) boundary by writing bytes */\n        probe_log(\"Entering first byte-wise loop: ptr=%#lx len=%d condition=((uintptr_t)ptr %% sizeof(int))=%lu\",\n                  (unsigned long)(uintptr_t)ptr, len,\n                  (unsigned long)((uintptr_t)ptr % sizeof(int)));\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            probe_log(\"first-loop iteration: addr=%#lx len(before)=%d condition=%lu\",\n                      (unsigned long)(uintptr_t)ptr, len,\n                      (unsigned long)((uintptr_t)ptr % sizeof(int)));\n            *(unsigned char *)ptr = (unsigned char) value;\n            probe_log(\"first-loop wrote byte at %#lx new len=%d\",\n                      (unsigned long)(uintptr_t)ptr, len - 1);\n        }\n        probe_log(\"Exited first byte-wise loop: ptr=%#lx len=%d\",\n                  (unsigned long)(uintptr_t)ptr, len);\n\n        /* Second loop: write words */\n        probe_log(\"Entering word-wise loop: ptr=%#lx len=%d while len >= sizeof(int) (%zu)\",\n                  (unsigned long)(uintptr_t)ptr, len, sizeof(int));\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int)) {\n            probe_log(\"word-loop iteration: addr=%#lx len(before)=%d cint=%u\",\n                      (unsigned long)(uintptr_t)ptr, len, cint);\n            *(unsigned int *)ptr = cint;\n            probe_log(\"word-loop wrote word at %#lx new len=%d\",\n                      (unsigned long)(uintptr_t)ptr, len - (int)sizeof(int));\n        }\n        probe_log(\"Exited word-wise loop: ptr=%#lx len=%d\",\n                  (unsigned long)(uintptr_t)ptr, len);\n\n        /* Third loop: remaining bytes */\n        probe_log(\"Entering trailing byte-wise loop: ptr=%#lx len=%d\",\n                  (unsigned long)(uintptr_t)ptr, len);\n        for (; len != 0; ptr++, len--) {\n            probe_log(\"tail-loop iteration: addr=%#lx len(before)=%d\",\n                      (unsigned long)(uintptr_t)ptr, len);\n            *(unsigned char *)ptr = (unsigned char) value;\n            probe_log(\"tail-loop wrote byte at %#lx new len=%d\",\n                      (unsigned long)(uintptr_t)ptr, len - 1);\n        }\n        probe_log(\"Exited trailing byte-wise loop: ptr=%#lx len=%d\",\n                  (unsigned long)(uintptr_t)ptr, len);\n\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"atomic_thread_fence(memory_order_seq_cst) executed\");\n    }\n\n    probe_log(\"EXIT metal_io_block_set returning retlen=%d\", retlen);\n    return retlen;\n}\n"
}