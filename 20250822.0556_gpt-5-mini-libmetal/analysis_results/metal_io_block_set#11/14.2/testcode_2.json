{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-statement's third clause performs two modifications: 'ptr += sizeof(int)' and 'len -= sizeof(int)'. MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter (and there shall be only one loop counter). Here the loop condition uses 'len' as the loop counter, but the increment clause also modifies 'ptr' (a second object). This violates the requirement that the third clause modify only the loop counter and that there be only one loop counter in the for loop.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stdatomic.h>\n#include <errno.h>\n\nstatic void probe_log(const char *stage, unsigned char *ptr, int len,\n                      unsigned long offset, unsigned char value,\n                      unsigned int cint, unsigned int i)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: ptr=%p len=%d offset=%lu value=0x%02x cint=0x%x i=%u\\n\",\n                stage, (void *)ptr, len, offset, (unsigned int)value, cint, i);\n        fclose(f);\n    }\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"ENTRY\", ptr, len, offset, value, 0u, 0u);\n\n    if (!ptr) {\n        probe_log(\"NULL_PTR_RETURN\", ptr, len, offset, value, 0u, 0u);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n\n    probe_log(\"AFTER_BOUNDS_ADJUST\", ptr, len, offset, value, 0u, 0u);\n\n    if (io->ops.block_set) {\n        probe_log(\"CALL_OPS_BLOCK_SET\", ptr, len, offset, value, 0u, 0u);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"BEFORE_CINT_BUILD\", ptr, len, offset, value, cint, 0u);\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        probe_log(\"AFTER_CINT_BUILD\", ptr, len, offset, value, cint, i);\n\n        probe_log(\"BEFORE_ALIGN_CHARS_LOOP\", ptr, len, offset, value, cint, i);\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            probe_log(\"ALIGN_CHAR_WRITE\", ptr, len, offset, value, cint, i);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        probe_log(\"AFTER_ALIGN_CHARS_LOOP\", ptr, len, offset, value, cint, i);\n\n        probe_log(\"BEFORE_WORD_LOOP\", ptr, len, offset, value, cint, i);\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int)) {\n            /* log each iteration to capture ptr and len changes (evidence of modification of two objects in the third clause) */\n            probe_log(\"WORD_WRITE_ITER\", ptr, len, offset, value, cint, i);\n            *(unsigned int *)ptr = cint;\n        }\n        probe_log(\"AFTER_WORD_LOOP\", ptr, len, offset, value, cint, i);\n\n        probe_log(\"BEFORE_TAIL_CHARS_LOOP\", ptr, len, offset, value, cint, i);\n        for (; len != 0; ptr++, len--) {\n            probe_log(\"TAIL_CHAR_WRITE\", ptr, len, offset, value, cint, i);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        probe_log(\"AFTER_TAIL_CHARS_LOOP\", ptr, len, offset, value, cint, i);\n\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"AFTER_FENCE\", ptr, len, offset, value, cint, i);\n    }\n    probe_log(\"EXIT\", ptr, len, offset, value, 0u, 0u);\n    return retlen;\n}\n"
}