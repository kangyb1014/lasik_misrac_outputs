{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initializer 'int retlen = len;' is redundant: retlen is overwritten by 'retlen = len;' before any use (and if the function returns early due to ptr == NULL the initial assignment has no observable effect). Removing the initial assignment does not change program behaviour, so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/112.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdatomic.h>\n#include <limits.h>\n#include <errno.h>\n\n/* Probe helper: append control/state information to /tmp/logs/112.txt */\nstatic void metal_io_block_set_log(const char *tag, struct metal_io_region *io,\n                                   unsigned char *ptr, unsigned long offset,\n                                   int len, int retlen)\n{\n    FILE *f = fopen(\"/tmp/logs/112.txt\", \"a\");\n    if (!f)\n        return;\n    /* Log basic state: tag, io pointer, ptr, offset, len, retlen */\n    fprintf(f, \"%s: io=%p ptr=%p offset=%lu len=%d retlen=%d\\n\",\n            tag, (void *)io, (void *)ptr, offset, len, retlen);\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log immediately after obtaining ptr and initializing retlen */\n    metal_io_block_set_log(\"after_init\", io, ptr, offset, len, retlen);\n\n    if (!ptr) {\n        /* Log the early-return scenario where ptr is NULL */\n        metal_io_block_set_log(\"ptr_null_return\", io, ptr, offset, len, retlen);\n        return -ERANGE;\n    }\n\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n\n    /* Log after clamping len against io->size */\n    metal_io_block_set_log(\"after_clamp\", io, ptr, offset, len, retlen);\n\n    /* Overwrite retlen here (the reported redundant initializer is the\n       initial assignment above). Log before and after to provide evidence. */\n    metal_io_block_set_log(\"before_retlen_overwrite\", io, ptr, offset, len, retlen);\n    retlen = len;\n    metal_io_block_set_log(\"after_retlen_overwrite\", io, ptr, offset, len, retlen);\n\n    if (io->ops.block_set) {\n        /* Log the control path where ops.block_set is used */\n        metal_io_block_set_log(\"using_ops_block_set\", io, ptr, offset, len, retlen);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* Log entering the fallback memory write path */\n        metal_io_block_set_log(\"using_fallback_memset\", io, ptr, offset, len, retlen);\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n\n    /* Final log before returning showing the returned length */\n    metal_io_block_set_log(\"returning\", io, ptr, offset, len, retlen);\n    return retlen;\n}\n"
}