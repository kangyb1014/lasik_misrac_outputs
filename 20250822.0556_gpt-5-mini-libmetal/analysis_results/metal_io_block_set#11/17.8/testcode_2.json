{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'len' is reassigned in the fragment: if ((offset + len) > io->size) len = io->size - offset; \u2014 this directly modifies the parameter 'len', which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified). A compliant alternative is to copy 'len' to a local variable (e.g., int adj_len = len) and modify that local instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/117.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/117.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"enter: io=%p offset=%lu value=%u len=%d\", (void *)io, offset, (unsigned int)value, len);\n\n    if (!ptr) {\n        probe_log(\"metal_io_virt returned NULL for io=%p offset=%lu -> returning -ERANGE\", (void *)io, offset);\n        return -ERANGE;\n    }\n\n    /* safe to inspect io->size now because ptr is non-NULL (io expected valid) */\n    probe_log(\"after virt: ptr=%p io=%p io->size=%lu\", (void *)ptr, (void *)io, (unsigned long)io->size);\n\n    if ((offset + len) > io->size) {\n        probe_log(\"bounds check: (offset + len) > io->size -> %lu + %d > %lu; modifying len to io->size - offset\",\n                  offset, len, (unsigned long)io->size);\n        len = io->size - offset;\n    } else {\n        probe_log(\"bounds check: ok -> %lu + %d <= %lu\", offset, len, (unsigned long)io->size);\n    }\n\n    retlen = len;\n    probe_log(\"retlen set to %d\", retlen);\n\n    if (io->ops.block_set) {\n        probe_log(\"calling io->ops.block_set with io=%p offset=%lu value=%u len=%d\",\n                  (void *)io, offset, (unsigned int)value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n        probe_log(\"returned from io->ops.block_set for io=%p offset=%lu len=%d\",\n                  (void *)io, offset, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* compute counts for logging without mutating ptr/len */\n        {\n            uintptr_t paddr = (uintptr_t)ptr;\n            int probe_len = len;\n            int head = 0;\n            while (probe_len && (paddr % sizeof(int))) {\n                head++;\n                paddr++;\n                probe_len--;\n            }\n            int words = 0;\n            if (probe_len > 0)\n                words = probe_len / (int)sizeof(int);\n            int tail = probe_len > 0 ? (probe_len % (int)sizeof(int)) : 0;\n\n            probe_log(\"fallback path: value=%u cint=0x%08x original_len=%d head=%d words=%d tail=%d ptr=%p\",\n                      (unsigned int)value, cint, len, head, words, tail, (void *)ptr);\n        }\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        atomic_thread_fence(memory_order_seq_cst);\n\n        probe_log(\"fallback path completed; final ptr=%p remaining_len=%d (should be 0)\", (void *)ptr, len);\n    }\n\n    probe_log(\"exit: retlen=%d\", retlen);\n    return retlen;\n}\n"
}