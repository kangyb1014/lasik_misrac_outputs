{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses 'len--' (and also earlier assignments to 'len'), which modifies the function parameter 'len'. Rule 17.8 prohibits modifying function parameters; therefore this code fragment violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/117.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <limits.h>\n#include <stdatomic.h>\n#include <errno.h>\n\n/* Probe logging helper: append logs to /tmp/logs/117.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/117.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"enter metal_io_block_set: io=%p offset=%lu value=%u len=%d\\n\",\n              (void *)io, offset, (unsigned) value, len);\n    probe_log(\"virt ptr=%p io->size=%lu (if io is NULL this may crash later)\\n\",\n              (void *)ptr, (unsigned long)(io ? io->size : 0UL));\n\n    if (!ptr) {\n        probe_log(\"ptr is NULL -> returning -ERANGE\\n\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        probe_log(\"offset + len (%lu + %d = %lu) > io->size (%lu) -> adjust len\\n\",\n                  offset, len, (unsigned long)(offset + (unsigned long)len), (unsigned long)io->size);\n        len = io->size - offset;\n        probe_log(\"len adjusted to %d\\n\", len);\n    }\n    retlen = len;\n    probe_log(\"retlen set to %d\\n\", retlen);\n    if (io->ops.block_set) {\n        probe_log(\"using ops.block_set -> calling block_set(io=%p, offset=%lu, value=%u, memory_order_seq_cst, len=%d)\\n\",\n                  (void *)io, offset, (unsigned) value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n        probe_log(\"returned from ops.block_set\\n\");\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"manual fill path: starting cint build with value=%u\\n\", (unsigned) value);\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n        probe_log(\"cint constructed=0x%08x sizeof(int)=%zu\\n\", cint, sizeof(int));\n\n        /* prefix bytes until ptr is aligned to sizeof(int) */\n        probe_log(\"entering prefix byte loop: initial len=%d ptr=%p\\n\", len, (void *)ptr);\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            probe_log(\"prefix iter: len(before)=%d ptr=%p -> writing byte\\n\", len, (void *)ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n            probe_log(\"prefix iter: len(after)=%d ptr(after)=%p\\n\", len - 1, (void *)(ptr + 1));\n        }\n\n        probe_log(\"entering word loop: len=%d ptr=%p sizeof(int)=%zu\\n\", len, (void *)ptr, sizeof(int));\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int)) {\n            probe_log(\"word iter: len(before)=%d ptr=%p -> writing word cint=0x%08x\\n\",\n                      len, (void *)ptr, cint);\n            *(unsigned int *)ptr = cint;\n            probe_log(\"word iter: len(after)=%d ptr(after)=%p\\n\", len - (int)sizeof(int), (void *)(ptr + sizeof(int)));\n        }\n\n        probe_log(\"entering tail byte loop: len=%d ptr=%p\\n\", len, (void *)ptr);\n        for (; len != 0; ptr++, len--) {\n            probe_log(\"tail iter: len(before)=%d ptr=%p -> writing byte\\n\", len, (void *)ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n            probe_log(\"tail iter: len(after)=%d ptr(after)=%p\\n\", len - 1, (void *)(ptr + 1));\n        }\n        probe_log(\"before atomic_thread_fence\\n\");\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"after atomic_thread_fence\\n\");\n    }\n    probe_log(\"exit metal_io_block_set returning retlen=%d\\n\", retlen);\n    return retlen;\n}\n"
}