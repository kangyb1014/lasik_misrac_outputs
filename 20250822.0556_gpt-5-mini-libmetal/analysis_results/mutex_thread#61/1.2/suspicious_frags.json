{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of mutex_thread:\n```c\nstatic void *mutex_thread(void *arg)\n{\n\tmetal_mutex_t *l = arg;\n\tint i;\n\n\tfor (i = 0; i < mutex_test_count; i++) {\n\t\tmetal_mutex_acquire(l);\n\t\tusleep(1);\n\t\tmetal_mutex_release(l);\n\t}\n\n\treturn NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function mutex_thread:\ntypedef struct {\n\tatomic_int v;\n} metal_mutex_t\n...\nstatic const int mutex_test_count = 1000\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language/compiler extensions are present in the provided function body. Specifically:\n- There are no compiler-specific keywords or constructs such as __attribute__, __asm, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, or other known vendor extensions.\n- The implicit conversion from void * (arg) to metal_mutex_t * is standard C (no extension).\n- The use of atomic_int is a C11 standard type (not a compiler language extension) and appears in the additional definitions rather than as a compiler-specific construct; if a particular toolchain lacked C11 support that would be a configuration concern, not an explicit language-extension use in the source.\n- usleep() is a POSIX library call (a platform/library extension), not a compiler language extension covered by MISRA C Rule 1.2; per your instruction only compiler language extensions should be reported.\nAccordingly, there are no code fragments in the given function that match the requirement to report explicit compiler language extensions."
}