{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/167.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nJudge whether the above OS_BSP_ConsoleOutput_Impl code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The function 'write' is called with 'Str' and 'DataLen', but if 'Str' does not point to a buffer of at least 'DataLen' bytes, it can cause access beyond the buffer bounds, violating MISRA C 2023 Rule 21.17.",
  "test_code": "void OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen) {\n    // Probe function to log control path and state\n    FILE *logFile = fopen(\"/tmp/logs/167.txt\", \"a+\");\n    if (logFile != NULL) {\n        fprintf(logFile, \"Entering OS_BSP_ConsoleOutput_Impl with Str=%p and DataLen=%zu\\n\", (void*)Str, DataLen);\n        if (Str == NULL) {\n            fprintf(logFile, \"Warning: Str is NULL.\\n\");\n            fclose(logFile);\n            return;\n        }\n        if (DataLen == 0) {\n            fprintf(logFile, \"DataLen is zero.\\n\");\n        }\n        size_t remaining = DataLen;\n        const char *currentStr = Str;\n        while (remaining > 0) {\n            fprintf(logFile, \"Loop: currentStr=%p, remaining=%zu\\n\", (void*)currentStr, remaining);\n            ssize_t Written = write(STDOUT_FILENO, currentStr, remaining);\n            if (Written <= 0) {\n                fprintf(logFile, \"Write failed or zero bytes written.\\n\");\n                break;\n            }\n            currentStr += Written;\n            remaining -= Written;\n        }\n        fclose(logFile);\n    }\n}"
}