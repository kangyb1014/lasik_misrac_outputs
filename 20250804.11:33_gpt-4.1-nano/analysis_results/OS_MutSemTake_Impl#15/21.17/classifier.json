{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_MutSemTake_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/127.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemTake_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake_Impl:\n```c\nint32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** Lock the mutex\n    */\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemTake_Impl:\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n</additional code>\nJudge whether the above OS_MutSemTake_Impl code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses pthread_mutex_lock on the mutex pointer stored within the impl structure. If the mutex object referenced by '&(impl->id)' is not properly initialized or the lock is already corrupted or invalid, this could potentially lead to access beyond the bounds of the object the pointer references, violating MISRA C 2023 Rule 21.17.",
  "test_code": "int32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int status;\n    OS_impl_mutex_internal_record_t *impl;\n    FILE *log_file = fopen(\"/tmp/logs/127.txt\", \"w\");\n    if (log_file == NULL) return OS_SEM_FAILURE;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n    if (impl == NULL)\n    {\n        fprintf(log_file, \"[Error] impl is NULL at line %d\\n\", __LINE__);\n        fclose(log_file);\n        return OS_SEM_FAILURE;\n    }\n\n    fprintf(log_file, \"Attempting to lock mutex at address: %p\\n\", (void *)&(impl->id));\n\n    // Lock the mutex\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        fprintf(log_file, \"Mutex lock failed with status: %d\\n\", status);\n        fclose(log_file);\n        return OS_SEM_FAILURE;\n    }\n\n    fprintf(log_file, \"Mutex locked successfully.\\n\");\n    fclose(log_file);\n    return OS_SUCCESS;\n}"
}