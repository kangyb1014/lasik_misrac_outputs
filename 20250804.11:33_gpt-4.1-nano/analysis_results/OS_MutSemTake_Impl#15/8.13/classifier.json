{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_MutSemTake_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/123.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemTake_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake_Impl:\n```c\nint32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** Lock the mutex\n    */\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemTake_Impl:\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nJudge whether the above OS_MutSemTake_Impl code violates the rule 8.13 or not.",
  "is_rule_violated": false,
  "scenario": "The function OS_MutSemTake_Impl takes a pointer to a constant OS_object_token_t, which means it should not modify the object pointed to by token. Inside the function, the token is used only to retrieve a mutex object and is not modified, so there is no violation of the rule that a pointer to a const-qualified type should not be used to modify the object. Since the function does not attempt to modify the token object itself, the rule is not violated.",
  "test_code": ""
}