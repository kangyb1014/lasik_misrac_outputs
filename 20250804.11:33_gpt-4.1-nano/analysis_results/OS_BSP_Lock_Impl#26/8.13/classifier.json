{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/211.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_Lock_Impl:\nOS_BSP_GenericLinuxGlobalData_t OS_BSP_GenericLinuxGlobal\n</additional code>\nJudge whether the above OS_BSP_Lock_Impl code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The function 'OS_BSP_Lock_Impl' uses 'pthread_mutex_lock' on the address of 'OS_BSP_GenericLinuxGlobal.AccessMutex', which is assumed to be a non-const mutex, thus the pointer is not const-qualified.",
  "test_code": "void OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        FILE *file = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (file != NULL) {\n            fprintf(file, \"pthread_mutex_lock: %s\\n\", strerror(status));\n            fclose(file);\n        }\n    }\n    else\n    {\n        FILE *file = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (file != NULL) {\n            fprintf(file, \"Mutex locked and cancellation disabled. AccessCancelState: %p\\n\", (void*) &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fclose(file);\n        }\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}"
}