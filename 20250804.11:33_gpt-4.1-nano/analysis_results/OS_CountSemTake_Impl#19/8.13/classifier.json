{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_CountSemTake_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/155.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CountSemTake_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake_Impl:\n```c\nint32 OS_CountSemTake_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_wait(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemTake_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\nJudge whether the above OS_CountSemTake_Impl code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The pointer 'impl' points to a non-const type but is obtained from the object table which could potentially be used by a function that modifies the object it points to.",
  "test_code": "#include <stdio.h>\n#include <semaphore.h>\n\ntypedef int32_t OS_object_token_t;\ntypedef struct {\n    sem_t id;\n} OS_impl_countsem_internal_record_t;\n\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n\n// Dummy implementation for OS_ObjectIndexFromToken\nint OS_ObjectIndexFromToken(const OS_object_token_t *tok) { return 0; }\n\n// Mock table\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[1];\n\nint OS_CountSemTake_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_wait(&impl->id) < 0)\n    {\n        FILE *log_file = fopen(\"/tmp/logs/155.txt\", \"a\");\n        if (log_file) {\n            fprintf(log_file, \"Control Path: Attempting sem_wait on impl->id\\n\");\n            fprintf(log_file, \"State: Waiting on semaphore\\n\");\n            fclose(log_file);\n        }\n        return OS_SEM_FAILURE;\n    }\n\n    FILE *log_file = fopen(\"/tmp/logs/155.txt\", \"a\");\n    if (log_file) {\n        fprintf(log_file, \"Control Path: sem_wait succeeded on impl->id\\n\");\n        fprintf(log_file, \"State: Semaphore acquired\\n\");\n        fclose(log_file);\n    }\n    return OS_SUCCESS;\n}\n"
}