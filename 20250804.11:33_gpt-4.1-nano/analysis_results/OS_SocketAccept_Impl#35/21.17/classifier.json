{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/287.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nJudge whether the above OS_SocketAccept_Impl code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses the accept() function with a pointer to Addr->AddrData and the address length addrlen. If accept() writes more data than Addr->AddrData can hold, it may result in a pointer bounds violation, especially if Addr->ActualLength is larger than the allocated size of Addr->AddrData.",
  "test_code": "// Log function to output logs to /tmp/logs/287.txt\n#include <stdio.h>\n#include <string.h>\n\n// Adding probe functions for logging\nstatic void log_message(const char *message) {\n    FILE *file = fopen(\"/tmp/logs/287.txt\", \"a\");\n    if (file != NULL) {\n        fprintf(file, \"%s\\n\", message);\n        fclose(file);\n    }\n}\n\n// Modified OS_SocketAccept_Impl with logging\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32 return_code;\n    uint32 operation;\n    socklen_t addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    log_message(\"Entered OS_SocketAccept_Impl\");\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        log_message(\"OS_SelectSingle_Impl called with selectable\");\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        log_message(\"sock_impl not selectable, skipping select\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n            log_message(\"Operation not readable, timeout\") ;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            log_message(\"Before accept: addrlen shows \");\n            // Log the value of addrlen\n            {\n                char buffer[50];\n                snprintf(buffer, sizeof(buffer), \"addrlen = %u\", addrlen);\n                log_message(buffer);\n            }\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n                log_message(\"accept() returned negative, error\") ;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n                log_message(\"accept() succeeded, new addrlen: \");\n                char buffer[50];\n                snprintf(buffer, sizeof(buffer), \"%u\", addrlen);\n                log_message(buffer);\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}