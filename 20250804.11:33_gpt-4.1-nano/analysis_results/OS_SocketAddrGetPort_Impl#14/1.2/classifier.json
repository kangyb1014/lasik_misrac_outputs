{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/112.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_SocketAddrGetPort_Impl code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses the preprocessor directive '#ifdef OS_NETWORK_SUPPORTS_IPV6', which is a language extension for conditional compilation, making the code dependent on compiler-specific extension features.",
  "test_code": "#include <stdio.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <unistd.h>\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    // Log control path\n    FILE *log_file = fopen(\"/tmp/logs/112.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"Entered OS_SocketAddrGetPort_Impl, sa_family: %d\\n\", Accessor->sa.sa_family);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            if (log_file)\n                fprintf(log_file, \"AF_INET case, port: %u\\n\", ntohs(sa_port));\n            break;\n        // The following section is excluded because it uses a language extension.\n        /*\n        #ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            if (log_file)\n                fprintf(log_file, \"AF_INET6 case, port: %u\\n\", ntohs(sa_port));\n            break;\n        #endif\n        */\n        default:\n            if (log_file)\n                fprintf(log_file, \"Default case, returning error\\n\");\n            if (log_file)\n                fclose(log_file);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    *PortNum = ntohs(sa_port);\n    if (log_file)\n        fclose(log_file);\n    return OS_SUCCESS;\n}\n"
}