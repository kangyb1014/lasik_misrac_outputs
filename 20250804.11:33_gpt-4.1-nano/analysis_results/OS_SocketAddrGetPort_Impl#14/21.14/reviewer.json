{
  "user_message": "An agent A claimed that the following OS_SocketAddrGetPort_Impl code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketAddrGetPort_Impl.\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_SocketAddrGetPort_Impl uses memcmp to compare the sa_family field of the socket address, which can be a null-terminated string in some contexts, or is potentially being compared using memcmp, violating MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int OS_ERR;\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    size_t family_offset = offsetof(OS_SockAddr_t, AddrData);\n    const OS_SockAddr_Accessor_t *Accessor = (const OS_SockAddr_Accessor_t *)Addr->AddrData;\n    \n    unsigned short expected_family = 0;\n    size_t family_offset_in_access = offsetof(OS_SockAddr_Accessor_t, sa.sa_family);\n    // Log the control path\n    FILE *logfile = fopen(\"/tmp/logs/118.txt\", \"a\");\n    if (logfile != NULL) {\n        fprintf(logfile, \"Entered OS_SocketAddrGetPort_Impl with addr at %p\\n\", (void*)Addr);\n        fprintf(logfile, \"Accessor sa_family: %u\\n\", Accessor->sa.sa_family);\n        fclose(logfile);\n    }\n    \n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            *PortNum = ntohs(Accessor->sa_in.sin_port);\n            break;\n        case AF_INET6:\n            *PortNum = ntohs(Accessor->sa_in6.sin6_port);\n            break;\n        default:\n            return OS_ERR_BAD_ADDRESS;\n    }\n    return OS_SUCCESS;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The given code uses direct access to the sa_family field of the socket address structure, which is a scalar value, not a null-terminated string. The MISRA C 2023 Rule 21.14 states that memcmp shall not be used to compare null-terminated strings. In the scenario, the agent suggests that memcmp was used to compare sa_family, implying a misuse of memcmp for string comparison. However, in the code provided, there is no use of memcmp at all, nor any comparison of null-terminated strings. The code simply compares the sa_family field directly using a switch statement, which is correct and compliant. Therefore, the scenario described by the agent is incorrect, and the claim that the code violates Rule 21.14 is unfounded."
}