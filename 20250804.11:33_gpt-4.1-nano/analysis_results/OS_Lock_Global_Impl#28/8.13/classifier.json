{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_Lock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/227.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_Lock_Global_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_Lock_Global_Impl:\n```c\nvoid OS_Lock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        ret = pthread_mutex_lock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_lock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Lock_Global_Impl:\nOS_impl_objtype_lock_t *const OS_impl_objtype_lock_table[OS_OBJECT_TYPE_USER] = {\n    [OS_OBJECT_TYPE_UNDEFINED]   = NULL,\n    [OS_OBJECT_TYPE_OS_TASK]     = &OS_global_task_table_lock,\n    [OS_OBJECT_TYPE_OS_QUEUE]    = &OS_queue_table_lock,\n    [OS_OBJECT_TYPE_OS_COUNTSEM] = &OS_count_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_BINSEM]   = &OS_bin_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_MUTEX]    = &OS_mutex_table_lock,\n    [OS_OBJECT_TYPE_OS_STREAM]   = &OS_stream_table_lock,\n    [OS_OBJECT_TYPE_OS_DIR]      = &OS_dir_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMEBASE] = &OS_timebase_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMECB]   = &OS_timecb_table_lock,\n    [OS_OBJECT_TYPE_OS_MODULE]   = &OS_module_table_lock,\n    [OS_OBJECT_TYPE_OS_FILESYS]  = &OS_filesys_table_lock,\n    [OS_OBJECT_TYPE_OS_CONSOLE]  = &OS_console_lock,\n    [OS_OBJECT_TYPE_OS_CONDVAR]  = &OS_condvar_lock,\n}\n...\ntypedef struct\n{\n    pthread_mutex_t mutex;\n    pthread_cond_t  cond;\n} OS_impl_objtype_lock_t\n</additional code>\nJudge whether the above OS_Lock_Global_Impl code violates the rule 8.13 or not.",
  "is_rule_violated": false,
  "scenario": "Pointer 'impl' points to a non-const object, and the function modifies the object pointed to, which is appropriate in this context. As the pointer is used to lock a mutex, which involves modification of the lock object, this does not violate MISRA Rule 8.13.",
  "test_code": ""
}