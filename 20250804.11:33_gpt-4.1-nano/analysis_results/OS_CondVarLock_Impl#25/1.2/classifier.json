{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_CondVarLock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/200.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarLock_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock_Impl:\n```c\nint32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_CondVarLock_Impl code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses the 'pthread_mutex_lock' function which is a POSIX thread library call, typically considered a language extension in MISRA C, as it is not part of the standard C language.",
  "test_code": "int32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    FILE *log_file = fopen(\"/tmp/logs/200.txt\", \"a\");\n    if (log_file == NULL) {\n        return OS_ERROR;\n    }\n\n    fprintf(log_file, \"Enter OS_CondVarLock_Impl, token: %p\\n\", (void*)token);\n\n    int status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    fprintf(log_file, \"Locking mutex: %p\\n\", (void*)&impl->mut);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        fprintf(log_file, \"mutex_lock failed with status: %d\\n\", status);\n        fclose(log_file);\n        return OS_ERROR;\n    }\n\n    fprintf(log_file, \"Mutex locked successfully.\\n\");\n    fclose(log_file);\n\n    return OS_SUCCESS;\n}"
}