{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/258.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ConsoleWrite:\nvoid OS_ObjectIdTransactionFinish(OS_object_token_t *token, const osal_id_t *final_id)\n{\n    OS_common_record_t *record;\n\n    if (token->lock_mode == OS_LOCK_MODE_NONE)\n    {\n        /* nothing to do */\n        return;\n    }\n\n    record = OS_ObjectIdGlobalFromToken(token);\n\n    /* re-acquire global table lock to adjust refcount */\n    if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE || token->lock_mode == OS_LOCK_MODE_REFCOUNT)\n    {\n        OS_Lock_Global(token);\n    }\n\n    if (record->refcount > 0)\n    {\n        --record->refcount;\n    }\n\n    /*\n     * at this point the global mutex is always held, either\n     * from re-acquiring it above or it is still held from\n     * the original lock when using OS_LOCK_MODE_GLOBAL.\n     *\n     * If an ID update was pending (i.e. for a create/delete op)\n     * then do the ID update now while holding the mutex.\n     */\n    if (final_id != NULL)\n    {\n        record->active_id = *final_id;\n    }\n    else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n    {\n        /*\n         * If the lock type was EXCLUSIVE, it means that the ID in the record\n         * was reset to OS_OBJECT_ID_RESERVED.  This must restore the original\n         * object ID from the token.\n         */\n        record->active_id = token->obj_id;\n    }\n\n    /* always unlock (this also covers OS_LOCK_MODE_GLOBAL case) */\n    OS_Unlock_Global(token);\n\n    /*\n     * Setting to \"NONE\" indicates that this token has been\n     * released, and should not be released again.\n     */\n    token->lock_mode = OS_LOCK_MODE_NONE;\n}\n</additional code>\nJudge whether the above OS_ConsoleWrite code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The function OS_ConsoleWrite contains branches where, if certain conditions are met (e.g., return_code != OS_SUCCESS), the function exits early without performing any further actions, and these branches are reachable, thus potentially leading to dead code if the code after the branches is never executed under any circumstances.",
  "test_code": "void Log_ConsoleWrite_Violation(const char *path) {\n    FILE *log_file = fopen(path, \"a+\");\n    if (log_file == NULL) return;\n    fprintf(log_file, \"Start of dead code detection\\n\");\n}\n\n/*\n * Original OS_ConsoleWrite function preserved, with added logging upon early exit.\n */\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32 return_code;\n    OS_object_token_t token;\n    OS_console_internal_record_t *console;\n    size_t PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        Log_ConsoleWrite_Violation(\"/tmp/logs/258.txt\");\n        return return_code; // Early exit, potential dead code if no further code can be reached\n    }\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n    PendingWritePos = console->WritePos;\n\n    if (console->device_name[0] != 0)\n    {\n        return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_ObjectIdRelease(&token);\n            Log_ConsoleWrite_Violation(\"/tmp/logs/258.txt\");\n            return return_code; // Early exit\n        }\n    }\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_ObjectIdRelease(&token);\n            Log_ConsoleWrite_Violation(\"/tmp/logs/258.txt\");\n            return return_code; // Early exit\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console->WritePos = PendingWritePos;\n    }\n    else\n    {\n        ++console->OverflowEvents;\n    }\n\n    if (console->IsAsync)\n    {\n        OS_ConsoleWakeup_Impl(&token);\n    }\n    else\n    {\n        OS_ConsoleOutput_Impl(&token);\n    }\n\n    OS_ObjectIdRelease(&token);\n\n    return return_code;\n}\n"
}