{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/216.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nJudge whether the above OS_BSP_Unlock_Impl code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code does not directly show the use of any language extension beyond standard C; however, it utilizes POSIX-specific functions (pthread_mutex_unlock, pthread_setcancelstate) which are considered system-specific extensions, not part of the standard C library, and are often implemented as compiler or platform extensions.",
  "test_code": "void OS_BSP_Unlock_Impl(void)\n{\n    FILE *log_file = fopen(\"/tmp/logs/216.txt\", \"w\");\n    if (log_file == NULL) return;\n\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    fprintf(log_file, \"Attempting to unlock mutex.\\n\");\n    if (status < 0)\n    {\n        fprintf(log_file, \"pthread_mutex_unlock failed: %s\\n\", strerror(status));\n    }\n    else\n    {\n        fprintf(log_file, \"Mutex unlocked successfully. Restoring cancel state.\\n\");\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n    fclose(log_file);\n}"
}