{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/264.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nJudge whether the above OS_FileSys_FindVirtMountPoint code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses a compiler-specific extension 'OS_OBJECT_TABLE_GET', which may be a language extension depending on the compiler documentation.",
  "test_code": "#include <stdio.h>\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    // Log start of function\n    FILE *log = fopen(\"/tmp/logs/264.txt\", \"a\");\n    if (log == NULL) return false;\n    fprintf(log, \"Entering OS_FileSys_FindVirtMountPoint with ref=%p, token=%p\\n\", ref, token);\n\n    OS_filesys_internal_record_t *filesys;\n    const char *target = (const char *)ref;\n    size_t mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n    fprintf(log, \"Retrieved filesys: %p\\n\", filesys);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        fprintf(log, \"The mounted virtual flag is not set.\\n\");\n        fclose(log);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n    fprintf(log, \"virtual_mountpt length: %zu\\n\", mplen);\n\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        fprintf(log, \"virtual_mountpt mismatch or empty.\\n\");\n        fclose(log);\n        return false;\n    }\n\n    fprintf(log, \"Comparing target[%zu] and mplen characters: '%c' and '%c'\\n\",\n            mplen, target[mplen], (target[mplen] ? '\\0' : '0'));\n    fclose(log);\n    return (target[mplen] == '/' || target[mplen] == 0);\n}"
}