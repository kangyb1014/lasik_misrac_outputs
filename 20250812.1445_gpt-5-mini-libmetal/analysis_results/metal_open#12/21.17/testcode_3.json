{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) can read out-of-bounds if either pointer is invalid or the strings are not NUL-terminated. For example, if ldev->sdev is NULL or ldev->sdev->driver_name is NULL (or points to a non\u2013NUL-terminated buffer), strcmp will dereference/read past the object bounds and invoke undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\n/*\n * Probe helpers: write control-flow and state information to /tmp/logs/103.txt\n * These helpers intentionally avoid changing the behavior of metal_open.\n */\nstatic void probe_log(const char *label, const char *path, int shm, int fd, int errcode)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[%s] label=%s, path=%p, shm=%d, fd=%d, errno=%d\\n\",\n            __func__, label, (void *)path, shm, fd, errcode);\n\n    if (!path) {\n        fprintf(f, \"[%s] path is NULL\\n\", __func__);\n    } else {\n        /*\n         * Log a bounded prefix of the path to avoid attempting to read an\n         * arbitrarily long region. Use strnlen to avoid walking beyond the\n         * specified limit. This mirrors the original use of strlen in the\n         * function while limiting the amount logged.\n         */\n        size_t max_log = 256;\n        size_t len = strnlen(path, max_log);\n        fprintf(f, \"[%s] path_len_strnlen=%zu\\n\", __func__, len);\n\n        /* Write a safe prefix of the path (may not be NUL-terminated in source). */\n        fprintf(f, \"[%s] path_prefix=\\\"\", __func__);\n        fwrite(path, 1, (len > 64) ? 64 : len, f);\n        if (len > 64)\n            fprintf(f, \"...\");\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    /* Probe: log entry state before any operations */\n    probe_log(\"entry\", path, shm, -1, 0);\n\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Preserve original logic: check for NULL or empty path. */\n    if (!path || !strlen(path)) {\n        /* Log the reason for early return */\n        probe_log(\"early_return_empty_or_null\", path, shm, -1, EINVAL);\n        return -EINVAL;\n    }\n\n    /* Perform the open operation exactly as in the original implementation. */\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    /* Capture errno immediately, before any further calls. */\n    int saved_errno = errno;\n\n    /* Probe: log result of the open attempt */\n    probe_log(\"after_open\", path, shm, fd, saved_errno);\n\n    return fd < 0 ? -saved_errno : fd;\n}\n"
}