{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(shmem->name, name) occurs with no validation that 'name' is non-NULL and that both operands are valid, null-terminated strings. If the caller passes name == NULL (or a non-terminated buffer) or if shmem->name is not properly NUL-terminated, strcmp will read past the bounds of the referenced object(s), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\n/* Probe logger: append control-flow/state information to /tmp/logs/103.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Log entry and raw pointer state */\n    probe_log(\"metal_open entry: path=%p, shm=%d\\n\", (void *)path, shm);\n\n    /* Preserve original semantics: check for NULL first, then for empty string. */\n    if (!path) {\n        probe_log(\"metal_open: rejecting request - path is NULL\\n\");\n        return -EINVAL;\n    }\n\n    /* Calling strlen only when path != NULL (same as original short-circuit logic).\n       This will also reveal if the caller passed a non-terminated buffer (may read until NUL).\n       We log the length observed and the printable path for diagnosis. */\n    size_t len = strlen(path);\n    probe_log(\"metal_open: path pointer=%p, strlen(path)=%zu\\n\", (void *)path, len);\n\n    if (!len) {\n        probe_log(\"metal_open: rejecting request - empty path string (path=%p)\\n\", (void *)path);\n        return -EINVAL;\n    }\n\n    /* Log the actual path string (safe because we just measured its length and found a NUL terminator). */\n    probe_log(\"metal_open: calling %s with path='%s'\\n\", shm ? \"shm_open\" : \"open\", path);\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    probe_log(\"metal_open: %s returned fd=%d, errno=%d\\n\", shm ? \"shm_open/open(shm)\" : \"open\", fd, errno);\n\n    int ret = fd < 0 ? -errno : fd;\n    probe_log(\"metal_open: returning %d\\n\", ret);\n\n    return ret;\n}\n"
}