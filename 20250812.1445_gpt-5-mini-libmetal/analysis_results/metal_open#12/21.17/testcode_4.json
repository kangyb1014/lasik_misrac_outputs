{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(ldrv->drv_name) can read beyond the bounds of the object if ldrv->drv_name is NULL or is a non\u2011NUL\u2011terminated char buffer (for example a fixed\u2011size array filled without a terminating '\\0'). In that case strlen will scan past the object boundary, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <unistd.h>\n#include <sys/types.h>\n\n/* Helper: append a message to the log file. Attempts to create the directory if needed. */\nstatic void log_msg(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) {\n        /* Try to create the directory then retry once. Ignore errors. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/103.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\n/* Helper: formatted log (keeps things simple to avoid extra dependencies). */\nstatic void log_fmt(const char *prefix, const char *s, long val)\n{\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) {\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/103.txt\", \"a\");\n        if (!f) return;\n    }\n    if (s)\n        fprintf(f, \"%s: %s = %ld\\n\", prefix, s, val);\n    else\n        fprintf(f, \"%s: %ld\\n\", prefix, val);\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Log entry with pointer value and shm flag */\n    {\n        char buf[256];\n        /* Record that the function was called and the pointer value. */\n        snprintf(buf, sizeof(buf), \"metal_open called: path=%p, shm=%d\", (void *)path, shm);\n        log_msg(buf);\n    }\n\n    /* Preserve original logic: check for NULL and empty string.\n       We log before calling strlen so the pointer value is recorded even if strlen\n       causes an out-of-bounds read (the scenario we want to capture). */\n    if (!path) {\n        log_msg(\"metal_open: path is NULL -> returning -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Call strlen as in original code (this may trigger the violation if 'path' is\n       not NUL-terminated). Log the result when possible. */\n    {\n        size_t len;\n        /* Log that we are about to call strlen */\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"metal_open: about to call strlen(path=%p)\", (void *)path);\n            log_msg(buf);\n        }\n\n        len = strlen(path);\n\n        /* Log the returned length from strlen. If strlen read out-of-bounds,\n           this line may never be reached; the pre-call log will serve as evidence. */\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"metal_open: strlen(path=%p) returned %zu\", (void *)path, len);\n            log_msg(buf);\n        }\n\n        if (len == 0) {\n            log_msg(\"metal_open: path is empty (strlen == 0) -> returning -EINVAL\");\n            return -EINVAL;\n        }\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (fd < 0) {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"metal_open: open/shm_open failed, errno=%d -> returning -errno\", errno);\n        log_msg(buf);\n        return -errno;\n    }\n\n    /* Log successful open */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"metal_open: opened fd=%d for path=%p\", fd, (void *)path);\n        log_msg(buf);\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}