{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct metal_device declares name as a non-const pointer (e.g. char *name), this use is a violation: device->name is only read (checked for NULL and passed to strlen), so it should be declared const char *name. Passing a mutable char * to functions taking const char * is allowed, but the member itself should be const-qualified whenever possible per MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    size_t name_len = 0u;\n\n    /* Log entry and raw state */\n    probe_log(\"ENTER: metal_register_generic_device: device=%p, name_ptr=%p, num_regions=%u\",\n              (void *)device,\n              (void *)(device ? device->name : NULL),\n              (unsigned)(device ? device->num_regions : 0u));\n\n    /* Safely compute name length only when pointer is non-NULL to mirror original logic */\n    if (device && device->name) {\n        name_len = strlen(device->name);\n    }\n\n    if (!device->name || !name_len ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Log specific rejection reason(s) to reproduce violation scenario evidence */\n        probe_log(\"REJECT: device=%p, name_ptr=%p, name_len=%zu, num_regions=%u, max=%u\",\n                  (void *)device,\n                  (void *)device->name,\n                  name_len,\n                  (unsigned)device->num_regions,\n                  (unsigned)METAL_MAX_DEVICE_REGIONS);\n        return -EINVAL;\n    }\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    probe_log(\"ACCEPT: device=%p, name='%s', name_len=%zu, num_regions=%u\",\n              (void *)device,\n              device->name,\n              name_len,\n              (unsigned)device->num_regions);\n\n    return 0;\n}\n"
}