{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n&metal_generic_bus\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "From the single fragment '&metal_generic_bus' alone we cannot prove a MISRA 8.13 violation. The rule requires pointers to point to const-qualified types whenever possible. This fragment only takes the address of an object; whether it violates the rule depends on the declarations: if 'metal_generic_bus' is a read\u2011only/shared object (never modified) but 'device->bus' is declared as 'struct metal_bus *' (non-const), then assigning '&metal_generic_bus' is a violation \u2014 the pointer should be 'const struct metal_bus *' and 'metal_generic_bus' should be declared const. If, however, the bus object is intended to be mutable or 'device->bus' is used to modify the bus, there is no violation."
}