{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if device->name is declared as a non-const pointer (e.g. 'char *name'). In that case the pointer should be declared 'const char *name' because strlen() does not modify the string and Rule 8.13 requires pointers to point to const-qualified types whenever possible. If device->name is already declared as 'const char *', there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Probe: log entry and device state to /tmp/logs/59.txt */\n    FILE *log = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: entry\\n\");\n        fprintf(log, \"  device ptr: %p\\n\", (void *)device);\n        if (device) {\n            fprintf(log, \"  device->name ptr: %p\\n\", (void *)device->name);\n            if (device->name) {\n                /* Print the string and its length to help reproduce the scenario */\n                fprintf(log, \"  device->name string: \\\"%s\\\"\\n\", device->name);\n                fprintf(log, \"  strlen(device->name) = %zu\\n\", strlen(device->name));\n            } else {\n                fprintf(log, \"  device->name is NULL\\n\");\n            }\n            fprintf(log, \"  device->num_regions = %u\\n\", device->num_regions);\n#ifdef METAL_MAX_DEVICE_REGIONS\n            fprintf(log, \"  METAL_MAX_DEVICE_REGIONS = %d\\n\", METAL_MAX_DEVICE_REGIONS);\n#else\n            fprintf(log, \"  METAL_MAX_DEVICE_REGIONS = (unknown at compile time)\\n\");\n#endif\n        }\n        fclose(log);\n    }\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Probe: log the reason for early return */\n        log = fopen(\"/tmp/logs/59.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"  -> condition for error triggered:\\n\");\n            if (!device->name)\n                fprintf(log, \"     - device->name is NULL\\n\");\n            else if (!strlen(device->name))\n                fprintf(log, \"     - device->name is empty (strlen == 0)\\n\");\n            if (device->num_regions > METAL_MAX_DEVICE_REGIONS)\n                fprintf(log, \"     - device->num_regions (%u) > METAL_MAX_DEVICE_REGIONS\\n\", device->num_regions);\n            fprintf(log, \"  -> returning -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* Probe: log the path where device is accepted */\n    log = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"  -> device passes initial checks; attaching bus and adding to list\\n\");\n        fclose(log);\n    }\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    log = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_register_generic_device: exit (0)\\n\");\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}