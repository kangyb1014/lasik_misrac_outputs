{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment sets a non-const pointer member (device->bus) to refer to a shared/global bus object (&metal_generic_bus). If the device->bus member is declared as a plain pointer (e.g. struct metal_bus *bus) and the bus object is intended to be read-only/shared, then the pointer should be to a const-qualified type (e.g. const struct metal_bus *bus). In that case Rule 8.13 is violated because the pointer is not const-qualified even though it could and should be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append a single log line to /tmp/logs/59.txt. */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Capture entry and basic pointers/state */\n    log_probe(\"ENTER: metal_register_generic_device device=%p\", (void *)device);\n\n    /* Safely obtain name length without changing original control flow */\n    size_t name_len = device->name ? strlen(device->name) : 0;\n    log_probe(\"STATE BEFORE CHECK: device->name=%p, name_len=%zu, device->num_regions=%d\",\n              (void *)device->name, name_len, device->num_regions);\n\n    if (!device->name || !name_len ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Log the reason for early return so callers can reproduce failure conditions */\n        if (!device->name) {\n            log_probe(\"REJECT: device->name is NULL\");\n        } else if (!name_len) {\n            log_probe(\"REJECT: device->name is empty string\");\n        } else {\n            log_probe(\"REJECT: device->num_regions (%d) > METAL_MAX_DEVICE_REGIONS (%d)\",\n                      device->num_regions, METAL_MAX_DEVICE_REGIONS);\n        }\n        return -EINVAL;\n    }\n\n    /* Log the bus pointer before assignment to capture the potential violation scenario. */\n    log_probe(\"ASSIGN: before device->bus=%p, target=&metal_generic_bus=%p\",\n              (void *)device->bus, (void *)&metal_generic_bus);\n\n    device->bus = &metal_generic_bus;\n\n    /* Log after assignment to show that the non-const pointer now points to the shared/global bus */\n    log_probe(\"ASSIGN: after device->bus=%p (assigned &metal_generic_bus=%p)\",\n              (void *)device->bus, (void *)&metal_generic_bus);\n\n    /* Record list addition call and node pointer for traceability */\n    log_probe(\"CALL: metal_list_add_tail list=%p, node=%p\",\n              (void *)&_metal.common.generic_device_list, (void *)&device->node);\n\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                        &device->node);\n\n    log_probe(\"EXIT: metal_register_generic_device returning 0 for device=%p\", (void *)device);\n    return 0;\n}\n"
}