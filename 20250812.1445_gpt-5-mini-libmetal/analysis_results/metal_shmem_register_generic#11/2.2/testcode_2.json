{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(shmem->name) is executed only as part of metal_assert(shmem->name && strlen(shmem->name) != 0). strlen has no side effects and is used solely to evaluate an assertion; removing that evaluation (for example when assertions are disabled) would not change the functional behaviour of the program, only remove a runtime check/measurement. Therefore the executed operation (the strlen call) constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_register_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_register_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_register_generic:\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_register_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function: logs the pointer, string contents (safely) and its length,\n * then returns the length (same semantics as strlen). This keeps the\n * original behavior when called inside the assertion, but also produces a\n * runtime trace that demonstrates whether the strlen-like evaluation\n * actually occurred. */\nstatic size_t probe_strlen_and_log(const char *s)\n{\n    size_t len = 0;\n    if (!s) {\n        FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"probe_strlen_and_log: called with NULL\\n\");\n            fclose(f);\n        }\n        return 0;\n    }\n\n    len = strlen(s);\n\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        /* Limit how much of the string we print to avoid huge logs. */\n        size_t max_print = 256;\n        if (len > max_print) {\n            char buf[257];\n            memcpy(buf, s, max_print);\n            buf[max_print] = '\\0';\n            fprintf(f, \"probe_strlen_and_log: ptr=%p, str_prefix=\\\"%s\\\"..., len=%zu\\n\", (void *)s, buf, len);\n        } else {\n            fprintf(f, \"probe_strlen_and_log: ptr=%p, str=\\\"%s\\\", len=%zu\\n\", (void *)s, s, len);\n        }\n        fclose(f);\n    }\n    return len;\n}\n\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n    /* Log entry and basic pointers so callers can see whether this path is taken. */\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"enter metal_shmem_register_generic: shmem=%p, name_ptr=%p\\n\",\n                (void *)shmem, (void *)(shmem ? shmem->name : NULL));\n        fclose(f);\n    }\n\n    /* Make sure that we can be found. */\n    /* NOTE: keep the original assertion structure; replace direct strlen\n     * with probe_strlen_and_log so we log when the length is evaluated. If\n     * assertions are compiled out, this evaluation (and thus the probe/log)\n     * will not occur \u2014 which is the behavior we want to capture for the\n     * violation scenario. */\n    metal_assert(shmem->name && probe_strlen_and_log(shmem->name) != 0);\n\n    /* Statically registered shmem regions cannot have a destructor. */\n    /* Log the close pointer value before asserting, guarded on shmem. */\n    if (shmem) {\n        FILE *f2 = fopen(\"/tmp/logs/90.txt\", \"a\");\n        if (f2) {\n            /* Accessing shmem->io.ops.close is the same access the original\n             * assertion performs; we only log its pointer value. */\n            void *close_ptr = (void *)shmem->io.ops.close;\n            fprintf(f2, \"io.ops.close pointer=%p\\n\", close_ptr);\n            fclose(f2);\n        }\n    }\n\n    metal_assert(!shmem->io.ops.close);\n\n    metal_list_add_tail(&_metal.common.generic_shmem_list,\n                        &shmem->node);\n\n    FILE *f3 = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (f3) {\n        fprintf(f3, \"metal_shmem_register_generic: added shmem=%p to list, returning 0\\n\", (void *)shmem);\n        fclose(f3);\n    }\n    return 0;\n}\n"
}