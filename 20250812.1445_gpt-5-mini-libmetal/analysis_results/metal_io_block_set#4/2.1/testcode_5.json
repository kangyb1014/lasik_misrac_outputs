{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe loop condition includes ((uintptr_t)ptr % sizeof(int)). If sizeof(int) == 1 (i.e. int is one byte on the target), that subexpression is always 0 so the loop condition becomes (len && 0) which is always false; therefore the loop body can never be executed on that target. This makes the code fragment unreachable in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdatomic.h>\n#include <errno.h>\n#include <limits.h>\n\n/* Probe helper: append diagnostic logs to \"/tmp/logs/33.txt\". */\nstatic void metal_io_block_set_log_probe(const char *tag,\n        struct metal_io_region *io,\n        unsigned long offset,\n        unsigned char value,\n        int len,\n        unsigned char *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/33.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[metal_io_block_set] %s\\n\", tag);\n    fprintf(f, \"  io=%p, offset=%lu, value=%u, len=%d, ptr=%p\\n\",\n            (void *)io, offset, (unsigned int)value, len, (void *)ptr);\n    /* sizeof(int) is compile-time, but print it for clarity */\n    fprintf(f, \"  sizeof(int)=%zu, CHAR_BIT=%d\\n\", sizeof(int), CHAR_BIT);\n    if (ptr)\n    {\n        uintptr_t up = (uintptr_t)ptr;\n        fprintf(f, \"  (uintptr_t)ptr=0x%\" PRIxPTR \"\\n\", up);\n        /* compute modulo of pointer by sizeof(int) to show alignment decision */\n        fprintf(f, \"  (uintptr_t)ptr %% sizeof(int) = %lu\\n\",\n                (unsigned long)(up % (uintptr_t)sizeof(int)));\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log initial entry */\n    metal_io_block_set_log_probe(\"entry\", io, offset, value, len, ptr);\n\n    if (!ptr) {\n        metal_io_block_set_log_probe(\"null_ptr_return\", io, offset, value, len, ptr);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        metal_io_block_set_log_probe(\"trim_before\", io, offset, value, len, ptr);\n        len = io->size - offset;\n        metal_io_block_set_log_probe(\"trim_after\", io, offset, value, len, ptr);\n    }\n    retlen = len;\n    if (io->ops.block_set) {\n        metal_io_block_set_log_probe(\"using_ops_block_set\", io, offset, value, len, ptr);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* Log state before alignment-by-byte loop */\n        metal_io_block_set_log_probe(\"before_align_loop\", io, offset, value, len, ptr);\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            metal_io_block_set_log_probe(\"in_align_loop_iteration\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        metal_io_block_set_log_probe(\"after_align_loop\", io, offset, value, len, ptr);\n\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int)) {\n            metal_io_block_set_log_probe(\"in_word_loop_iteration\", io, offset, value, len, ptr);\n            *(unsigned int *)ptr = cint;\n        }\n\n        metal_io_block_set_log_probe(\"after_word_loop\", io, offset, value, len, ptr);\n\n        for (; len != 0; ptr++, len--) {\n            metal_io_block_set_log_probe(\"in_tail_loop_iteration\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        atomic_thread_fence(memory_order_seq_cst);\n        metal_io_block_set_log_probe(\"exit_non_ops\", io, offset, value, len, ptr);\n    }\n    metal_io_block_set_log_probe(\"return\", io, offset, value, retlen, ptr);\n    return retlen;\n}\n"
}