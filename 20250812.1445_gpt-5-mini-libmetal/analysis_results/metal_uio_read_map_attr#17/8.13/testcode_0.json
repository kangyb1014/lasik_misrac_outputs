{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ldev' is declared as 'struct linux_device *ldev' but is only read (ldev->cls_path) and not modified. According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct linux_device *ldev'. The other pointers are correctly qualified: 'name' is const (input) and 'value' must remain non-const (output).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_read_map_attr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_read_map_attr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_read_map_attr:\n```c\nstatic int metal_uio_read_map_attr(struct linux_device *ldev,\n\t\t\t\t   unsigned int index,\n\t\t\t\t   const char *name,\n\t\t\t\t   unsigned long *value)\n{\n\tconst char *cls = ldev->cls_path;\n\tstruct sysfs_attribute *attr;\n\tchar path[SYSFS_PATH_MAX];\n\tint result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/maps/map%u/%s\", cls, index, name);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tattr = sysfs_open_attribute(path);\n\tif (!attr || sysfs_read_attribute(attr) != 0) {\n\t\tsysfs_close_attribute(attr);\n\t\treturn -errno;\n\t}\n\n\t*value = strtoul(attr->value, NULL, 0);\n\n\tsysfs_close_attribute(attr);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_read_map_attr code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic int metal_uio_read_map_attr(struct linux_device *ldev,\n                   unsigned int index,\n                   const char *name,\n                   unsigned long *value)\n{\n    const char *cls = ldev ? ldev->cls_path : \"(null)\";\n    struct sysfs_attribute *attr;\n    char path[SYSFS_PATH_MAX];\n    int result;\n\n    /* Open log early. We avoid making logging change returned errno for\n     * branches that return -errno by saving errno when needed. */\n    FILE *log = fopen(\"/tmp/logs/139.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER: metal_uio_read_map_attr: ldev=%p cls_path=%s index=%u name=%p\\n\",\n                (void *)ldev, cls, index, (const void *)name);\n        if (name)\n            fprintf(log, \"  name=\" \"%s\" \"\\n\", name);\n        fflush(log);\n    }\n\n    result = snprintf(path, sizeof(path), \"%s/maps/map%u/%s\", cls, index, name);\n    if (log) {\n        fprintf(log, \"  snprintf -> result=%d path=\\\"%s\\\"\\n\", result, path);\n        fflush(log);\n    }\n    if (result >= (int)sizeof(path)) {\n        if (log) {\n            fprintf(log, \"  ERROR: path overflow (result=%d, buf=%zu)\\n\", result, sizeof(path));\n            fclose(log);\n        }\n        return -EOVERFLOW;\n    }\n\n    attr = sysfs_open_attribute(path);\n    if (log) {\n        fprintf(log, \"  sysfs_open_attribute -> attr=%p\\n\", (void *)attr);\n        fflush(log);\n    }\n\n    if (!attr || sysfs_read_attribute(attr) != 0) {\n        /* preserve errno value that describes the sysfs failure */\n        int saved_errno = errno;\n\n        if (log) {\n            fprintf(log, \"  sysfs_read_attribute failed or attr==NULL, errno=%d (%s)\\n\",\n                    saved_errno, saved_errno ? strerror(saved_errno) : \"(no error)\");\n        }\n\n        sysfs_close_attribute(attr);\n\n        if (log) {\n            fprintf(log, \"  returning -errno = -%d\\n\", saved_errno);\n            fclose(log);\n        }\n\n        return -saved_errno;\n    }\n\n    if (log) {\n        fprintf(log, \"  attr->value=\\\"%s\\\"\\n\", attr->value ? attr->value : \"(null)\");\n        fflush(log);\n    }\n\n    *value = strtoul(attr->value, NULL, 0);\n\n    if (log) {\n        fprintf(log, \"  parsed value=%lu stored at %p\\n\", *value, (void *)value);\n    }\n\n    sysfs_close_attribute(attr);\n\n    if (log) {\n        fprintf(log, \"EXIT: metal_uio_read_map_attr -> 0\\n\");\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}