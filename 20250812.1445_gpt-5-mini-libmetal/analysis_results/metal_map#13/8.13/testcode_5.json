{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_virt2phys declares its first parameter as void *addr but never modifies the memory pointed to by addr (it only computes an address/offset and reads via pread). According to MISRA C 2023 Rule 8.13, that pointer should be to a const-qualified type (e.g. const void *addr). The second parameter unsigned long *phys is used as an output and therefore should remain non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/file.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdint.h>\n\n/* Probe helper: append human-readable logs about control flow and state\n   to \"/tmp/logs/107.txt\". Each call logs a stage name and key values.\n   This helper preserves program logic and is safe to call even if the\n   log file cannot be opened. */\nstatic void log_metal_map(const char *stage, int fd, off_t offset,\n                          size_t size, int expand, int flags,\n                          void **result, void *mem, int error,\n                          off_t reqsize, off_t file_size)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"stage=%s fd=%d offset=%lld size=%zu expand=%d flags=0x%x\",\n            stage, fd, (long long)offset, size, expand, flags);\n    if (result != NULL) {\n        fprintf(f, \" result_ptr=%p\", (void *)result);\n    }\n    if (mem != NULL) {\n        fprintf(f, \" mem=%p\", mem);\n    }\n    fprintf(f, \" error=%d\", error);\n    if (reqsize >= 0) {\n        fprintf(f, \" reqsize=%lld\", (long long)reqsize);\n    }\n    if (file_size >= 0) {\n        fprintf(f, \" file_size=%lld\", (long long)file_size);\n    }\n    if (error) {\n        fprintf(f, \" errno=%d strerror=\\\"%s\\\"\", errno, strerror(errno));\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n    off_t reqsize = -1;\n    off_t file_size = -1;\n\n    /* Log entry state */\n    log_metal_map(\"entry_before\", fd, offset, size, expand, flags, result,\n                  NULL, 0, reqsize, file_size);\n\n    flags |= MAP_SHARED;\n\n    /* Log after forcing MAP_SHARED */\n    log_metal_map(\"after_map_shared\", fd, offset, size, expand, flags,\n                  result, NULL, 0, reqsize, file_size);\n\n    if (fd < 0) {\n        /* Log branch taken and values before modification */\n        log_metal_map(\"fd_negative_before_set\", fd, offset, size, expand,\n                      flags, result, NULL, 0, reqsize, file_size);\n\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        /* Log after modification */\n        log_metal_map(\"fd_negative_after_set\", fd, offset, size, expand,\n                      flags, result, NULL, 0, reqsize, file_size);\n    } else if (expand) {\n        reqsize = offset + (off_t)size;\n        struct stat statbuf;\n\n        /* Attempt to lock the file for exclusive access */\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_metal_map(\"after_flock\", fd, offset, size, expand, flags,\n                      result, NULL, error, reqsize, file_size);\n\n        if (!error)\n            error = fstat(fd, &statbuf);\n\n        if (!error) {\n            file_size = statbuf.st_size;\n            log_metal_map(\"after_fstat\", fd, offset, size, expand, flags,\n                          result, NULL, error, reqsize, file_size);\n        }\n\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n\n        if (!error)\n            (void)flock(fd, LOCK_UN);\n\n        /* Log result of potential truncation and unlock */\n        log_metal_map(\"after_expand_ops\", fd, offset, size, expand, flags,\n                      result, NULL, error, reqsize, file_size);\n\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n\n    /* Log result of mmap call */\n    log_metal_map(\"after_mmap\", fd, offset, size, expand, flags, result,\n                  mem, mem == MAP_FAILED ? errno : 0, reqsize, file_size);\n\n    if (mem == MAP_FAILED)\n        return -errno;\n\n    *result = mem;\n\n    /* Log final state with the mapped address written to *result */\n    log_metal_map(\"final\", fd, offset, size, expand, flags, result, mem, 0,\n                  reqsize, file_size);\n\n    return 0;\n}\n"
}