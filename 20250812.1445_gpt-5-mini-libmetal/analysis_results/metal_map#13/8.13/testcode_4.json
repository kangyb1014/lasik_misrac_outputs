{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ps' is not const-qualified even though the function only reads from it (ps->page_size, ps->mmap_flags, ps->page_shift) and does not modify it. It could be declared as 'const struct metal_page_size *ps'. This violates MISRA C 2023 Rule 8.13. Note: Other pointers (e.g. the output 'struct metal_io_region **result') are used for output and need to remain non-const; also making local 'virt' const would be possible logically but is prevented by the non-const prototype of metal_virt2phys.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <unistd.h>\n#include <stddef.h>\n\n/*\n * Probe helper: append a log message to /tmp/logs/107.txt.\n * Keep it minimal to avoid changing control flow or errno.\n */\nstatic void metal_map_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state */\n    {\n        char buf[512];\n        (void)snprintf(buf, sizeof(buf), \"enter: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result_ptr=%p\",\n                       fd, (long long)offset, size, expand, flags, (void *)result);\n        metal_map_log(buf);\n    }\n\n    flags |= MAP_SHARED;\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"after MAP_SHARED: flags=0x%x\", flags);\n        metal_map_log(buf);\n    }\n\n    if (fd < 0) {\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"branch: fd<0 -> fd=%d, flags=0x%x\", fd, flags);\n            metal_map_log(buf);\n        }\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat_buf;\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"branch: expand path -> reqsize=%lld\", (long long)reqsize);\n            metal_map_log(buf);\n        }\n\n        /* preserve errno around logging */\n        int saved_errno = errno;\n        int flock_ret = (flock(fd, LOCK_EX) < 0) ? -errno : 0;\n        error = flock_ret;\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"flock returned %d, error=%d, errno=%d\", flock_ret, error, errno);\n            metal_map_log(buf);\n        }\n        errno = saved_errno;\n\n        if (!error)\n            error = fstat(fd, &stat_buf);\n        if (!error) {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"fstat success: st_size=%lld\", (long long)stat_buf.st_size);\n            metal_map_log(buf);\n        } else {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"fstat failed: error=%d, errno=%d\", error, errno);\n            metal_map_log(buf);\n        }\n\n        if (!error && stat_buf.st_size < reqsize) {\n            int ftr_ret = ftruncate(fd, reqsize);\n            if (ftr_ret < 0)\n                error = -errno;\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"ftruncate attempted reqsize=%lld, return=%d, error=%d, errno=%d\",\n                               (long long)reqsize, ftr_ret, error, errno);\n                metal_map_log(buf);\n            }\n        }\n        if (!error)\n            flock(fd, LOCK_UN);\n        if (error) {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"expand path final error=%d, returning -errno (%d)\", error, -errno);\n            metal_map_log(buf);\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"mmap failed: mem=MAP_FAILED, errno=%d, returning -errno (%d)\", errno, -errno);\n        metal_map_log(buf);\n        return -errno;\n    }\n\n    *result = mem;\n\n    {\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"success: mem=%p, result->%p assigned, returning 0\", mem, (void *)*result);\n        metal_map_log(buf);\n    }\n\n    return 0;\n}\n"
}