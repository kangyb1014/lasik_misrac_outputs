{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' in metal_shmem_try_map is only used for read-only address arithmetic and to call metal_virt2phys(virt + offset, ...). It is never used to modify the memory it points to, so it could be declared as 'const uint8_t *virt' (and metal_virt2phys should accept a 'const void *' parameter). Leaving it as 'uint8_t *virt' when it could be const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <unistd.h>\n#include <stddef.h>\n\n/* Helper probe: append formatted log lines to /tmp/logs/107.txt */\nstatic void metal_map_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Entry probe: log input parameters */\n    metal_map_log(\"metal_map entry: fd=%d, offset=%lld, size=%llu, expand=%d, flags=0x%08x, result_ptr=%p\",\n                  fd, (long long)offset, (unsigned long long)size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"after flags|=MAP_SHARED: flags=0x%08x, prot=0x%08x\", flags, prot);\n\n    if (fd < 0) {\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"fd < 0 branch taken: fd set to -1, flags=0x%08x\", flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat statbuf;\n\n        metal_map_log(\"expand branch: requested size reqsize=%lld\", (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"after flock LOCK_EX: error=%d, errno=%d\", error, errno);\n\n        if (!error)\n            error = fstat(fd, &statbuf);\n        metal_map_log(\"after fstat: error=%d, stat.st_size=%lld\", error, (long long)statbuf.st_size);\n\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after possible ftruncate: error=%d, errno=%d\", error, errno);\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"after flock LOCK_UN (if executed): errno=%d\", errno);\n\n        if (error)\n        {\n            metal_map_log(\"expand branch returning due to error: -errno=%d, errno=%d\", -errno, errno);\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    metal_map_log(\"after mmap: mem=%p, size=%llu, prot=0x%08x, flags=0x%08x, fd=%d, offset=%lld, errno=%d\",\n                  mem, (unsigned long long)size, prot, flags, fd, (long long)offset, errno);\n\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap failed: returning -errno=%d, errno=%d\", -errno, errno);\n        return -errno;\n    }\n\n    *result = mem;\n    metal_map_log(\"mapped successfully: *result=%p, returning 0\", mem);\n    return 0;\n}\n"
}