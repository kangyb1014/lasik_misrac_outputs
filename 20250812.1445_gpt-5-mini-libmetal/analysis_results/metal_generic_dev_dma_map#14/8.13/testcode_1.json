{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct metal_device *device' is not const-qualified even though it is unused and not modified in metal_generic_dev_dma_map (it is cast to void). According to MISRA C 2023 Rule 8.13 it should be declared as 'const struct metal_device *device'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/115.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Minimal type definitions so this unit compiles standalone. */\nstruct metal_bus { int dummy; };\nstruct metal_device { int dummy; };\nstruct metal_sg { void *virt; size_t len; };\n\n/* Provide an integer constant instead of a macro (do not introduce new macros). */\nstatic const uint32_t METAL_DMA_DEV_W = 1u;\n\n/* Stubs for cache operations so the file is linkable/executable. */\nvoid metal_cache_flush(void *addr, size_t len)\n{\n    (void)addr; (void)len;\n    /* stub: no-op */\n}\n\nvoid metal_cache_invalidate(void *addr, size_t len)\n{\n    (void)addr; (void)len;\n    /* stub: no-op */\n}\n\n/* Simple logging helper that appends to /tmp/logs/115.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/115.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                 struct metal_device *device,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i;\n\n    /* Log entry and parameters to reproduce the violation scenario. */\n    probe_log(\"ENTER metal_generic_dev_dma_map: bus=%p, device=%p, dir=%u, sg_in=%p, sg_out=%p, nents_in=%d\",\n              (void *)bus, (void *)device, (unsigned)dir, (void *)sg_in, (void *)sg_out, nents_in);\n\n    /* Original code explicitly indicated bus and device are unused. Keep that behavior. */\n    (void)bus;\n    (void)device;\n\n    /* Record that device was unused (evidence for Rule 8.13 violation). */\n    probe_log(\"NOTE: 'device' parameter is unused in this implementation (cast to void). Pointer value: %p\", (void *)device);\n\n    if (sg_out != sg_in) {\n        probe_log(\"sg_out != sg_in: performing memcpy of %d entries (entry size=%zu)\", nents_in, sizeof(struct metal_sg));\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n        probe_log(\"memcpy completed: sg_out=%p now contains copied descriptors\", (void *)sg_out);\n    } else {\n        probe_log(\"sg_out == sg_in: no memcpy performed\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        void *virt = sg_out[i].virt;\n        size_t len = sg_out[i].len;\n        probe_log(\"loop i=%d: virt=%p, len=%lu, dir=%u\", i, virt, (unsigned long)len, (unsigned)dir);\n        if (dir == METAL_DMA_DEV_W) {\n            probe_log(\"dir == METAL_DMA_DEV_W: calling metal_cache_flush for entry %d\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n            probe_log(\"metal_cache_flush returned for entry %d\", i);\n        }\n        probe_log(\"calling metal_cache_invalidate for entry %d\", i);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n        probe_log(\"metal_cache_invalidate returned for entry %d\", i);\n    }\n\n    probe_log(\"EXIT metal_generic_dev_dma_map: returning %d\", nents_in);\n    return nents_in;\n}\n"
}