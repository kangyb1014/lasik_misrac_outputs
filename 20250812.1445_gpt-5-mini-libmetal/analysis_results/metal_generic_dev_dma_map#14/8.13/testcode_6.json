{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'sg_in' is declared as 'struct metal_sg *sg_in' but is only read (used as the source for memcpy and compared to sg_out) and never modified. Per MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type, e.g. 'const struct metal_sg *sg_in'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/115.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * Probe-enhanced version of metal_generic_dev_dma_map.\n * This preserves the original logic but adds logging to /tmp/logs/115.txt\n * so other agents can reproduce and gather evidence of how sg_in is used.\n *\n * Note: relies on the same external definitions as the original code\n * (struct metal_bus, struct metal_device, struct metal_sg, METAL_DMA_DEV_W,\n *  metal_cache_flush, metal_cache_invalidate).\n */\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\tFILE *logf = fopen(\"/tmp/logs/115.txt\", \"a\");\n\n\t/* Log entry and key parameter values */\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER: metal_generic_dev_dma_map\\n\");\n\t\tfprintf(logf, \"  bus=%p device=%p sg_in=%p sg_out=%p nents_in=%d dir=0x%x\\n\",\n\t\t\t(void *)bus, (void *)device, (void *)sg_in, (void *)sg_out, nents_in, (unsigned)dir);\n\t\tif (sg_in == NULL) fprintf(logf, \"  NOTE: sg_in is NULL\\n\");\n\t\tif (sg_out == NULL) fprintf(logf, \"  NOTE: sg_out is NULL\\n\");\n\t\tif (sg_out != sg_in)\n\t\t\tfprintf(logf, \"  Action: memcpy will be performed from sg_in to sg_out (nents=%d, entry_size=%zu)\\n\",\n\t\t\t\tnents_in, (size_t)sizeof(struct metal_sg));\n\t\telse\n\t\t\tfprintf(logf, \"  Action: sg_out == sg_in, no memcpy will be performed\\n\");\n\t}\n\n\t(void)bus;\n\t(void)device;\n\n\t/* Preserve original behavior: copy descriptors if src and dst differ */\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n\n\t/* Log a small sample of SG entries (if available) to show source vs destination values.\n\t   Only attempt to dereference sg_in/sg_out if pointers are non-NULL. */\n\tif (logf) {\n\t\tint sample = nents_in < 5 ? nents_in : 5;\n\t\tfor (i = 0; i < sample; i++) {\n\t\t\tif (sg_in != NULL) {\n\t\t\t\t/* Log fields commonly present in struct metal_sg (virt and len used below)\n\t\t\t\t   We cast pointers to (void*) for %p. */\n\t\t\t\tfprintf(logf, \"  SAMPLE %d: sg_in[%d].virt=%p sg_in[%d].len=%zu\\n\",\n\t\t\t\t\t i, i, (void *)sg_in[i].virt, i, (size_t)sg_in[i].len);\n\t\t\t} else {\n\t\t\t\tfprintf(logf, \"  SAMPLE %d: sg_in is NULL\\n\", i);\n\t\t\t}\n\t\t\tif (sg_out != NULL) {\n\t\t\t\tfprintf(logf, \"  SAMPLE %d: sg_out[%d].virt=%p sg_out[%d].len=%zu\\n\",\n\t\t\t\t\t i, i, (void *)sg_out[i].virt, i, (size_t)sg_out[i].len);\n\t\t\t} else {\n\t\t\t\tfprintf(logf, \"  SAMPLE %d: sg_out is NULL\\n\", i);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tif (logf)\n\t\t\t\tfprintf(logf, \"  ITER %d: dir==METAL_DMA_DEV_W -> flush sg_out[%d].virt=%p len=%zu\\n\",\n\t\t\t\t\t i, i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t} else {\n\t\t\tif (logf)\n\t\t\t\tfprintf(logf, \"  ITER %d: dir!=METAL_DMA_DEV_W -> no flush for sg_out[%d]\\n\", i, i);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t\tif (logf)\n\t\t\tfprintf(logf, \"  ITER %d: invalidated sg_out[%d].virt=%p len=%zu\\n\",\n\t\t\t\t i, i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT: metal_generic_dev_dma_map returning %d\\n\\n\", nents_in);\n\t\tfclose(logf);\n\t}\n\n\treturn nents_in;\n}\n"
}