{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'bus' is declared as 'struct metal_bus *bus' but is not used or modified in the function (it is simply cast to void). Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (e.g. 'const struct metal_bus *bus'). (The same applies to the 'device' parameter which is also unused and non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/115.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe helper: append logs to /tmp/logs/115.txt about control flow and\n * state that demonstrate the scenario where 'bus' and 'device' are\n * unused (and therefore could be const-qualified per MISRA Rule 8.13).\n *\n * This helper intentionally does not change program logic; it only reads\n * state and writes to a file for evidence gathering.\n */\nstatic void metal_generic_dev_dma_map_probe(const struct metal_bus *bus,\n                                            const struct metal_device *device,\n                                            uint32_t dir,\n                                            struct metal_sg *sg_in,\n                                            int nents_in,\n                                            struct metal_sg *sg_out)\n{\n    FILE *f = fopen(\"/tmp/logs/115.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging is not possible, do nothing so original logic remains unaffected. */\n        return;\n    }\n\n    fprintf(f, \"ENTER metal_generic_dev_dma_map: bus=%p device=%p dir=%u nents_in=%d sg_in=%p sg_out=%p\\n\",\n            (void *)bus, (void *)device, (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n\n    if (sg_in == sg_out) {\n        fprintf(f, \"  sg_out == sg_in (no memcpy will be performed)\\n\");\n    } else {\n        fprintf(f, \"  sg_out != sg_in (memcpy will be performed)\\n\");\n    }\n\n    /* Log the initial sg entries (virt and len) as available. */\n    for (int i = 0; i < nents_in; i++) {\n        /* cast fields for safe printing; sizes/types are not assumed here */\n        fprintf(f, \"  sg[%d]: virt=%p len=%lu\\n\", i,\n                (void *)sg_out[i].virt,\n                (unsigned long)sg_out[i].len);\n    }\n\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n\n    /* Keep original unused casts to preserve original intent; logging will\n     * reference the parameters so these casts are harmless but kept to\n     * minimize changes to the function. */\n    (void)bus;\n    (void)device;\n\n    /* Probe at function entry to capture pointer values and inputs. */\n    metal_generic_dev_dma_map_probe(bus, device, dir, sg_in, nents_in, sg_out);\n\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    /* Log actions taken on each scatter-gather entry for reproducibility. */\n    for (i = 0; i < nents_in; i++) {\n        /* Append per-iteration logs so callers can see which cache operations\n         * were invoked for each entry. */\n        FILE *f = fopen(\"/tmp/logs/115.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"LOOP idx=%d: dir=%u virt=%p len=%lu\\n\",\n                    i, (unsigned)dir, (void *)sg_out[i].virt, (unsigned long)sg_out[i].len);\n            if (dir == METAL_DMA_DEV_W) {\n                fprintf(f, \"  action: metal_cache_flush called for idx=%d\\n\", i);\n            }\n            fprintf(f, \"  action: metal_cache_invalidate called for idx=%d\\n\", i);\n            fclose(f);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    /* Final log indicating exit and return value. */\n    {\n        FILE *f = fopen(\"/tmp/logs/115.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT metal_generic_dev_dma_map: return=%d\\n\", nents_in);\n            fclose(f);\n        }\n    }\n\n    return nents_in;\n}\n"
}