{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct metal_device { int dummy; };\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\nenum { METAL_DMA_DEV_W = 1 };\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    log_append(\"[CACHE] flush addr=%p len=%zu\\n\", addr, len);\n    /* No other action (preserves original behavior in generic implementation). */\n}\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    log_append(\"[CACHE] invalidate addr=%p len=%zu\\n\", addr, len);\n    /* No other action (preserves original behavior in generic implementation). */\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    /* Original cast-to-void statements retained to preserve original\n       code shape; we also log the occurrence to provide evidence that\n       these casts are no-ops. */\n    (void)bus;\n    (void)device;\n\n    log_append(\"ENTER: metal_generic_dev_dma_map\\n\");\n    log_append(\"  bus (raw ptr)       = %p\\n\", (void *)bus);\n    log_append(\"  device (raw ptr)    = %p\\n\", (void *)device);\n    log_append(\"  Note: (void)bus and (void)device executed (no-op)\\n\");\n    log_append(\"  dir                 = %u\\n\", (unsigned)dir);\n    log_append(\"  sg_in               = %p\\n\", (void *)sg_in);\n    log_append(\"  sg_out              = %p\\n\", (void *)sg_out);\n    log_append(\"  nents_in            = %d\\n\", nents_in);\n\n    if (sg_out != sg_in) {\n        log_append(\"  Action: copying sg_in -> sg_out (%d entries)\\n\", nents_in);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n        log_append(\"  memcpy completed\\n\");\n    } else {\n        log_append(\"  Action: sg_out == sg_in; no copy performed\\n\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        log_append(\"  Entry %d: virt=%p len=%zu\\n\", i, sg_out[i].virt, sg_out[i].len);\n        if (dir == METAL_DMA_DEV_W) {\n            log_append(\"    dir == METAL_DMA_DEV_W: calling metal_cache_flush for entry %d\\n\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n            log_append(\"    metal_cache_flush returned for entry %d\\n\", i);\n        } else {\n            log_append(\"    dir != METAL_DMA_DEV_W: skipping flush for entry %d\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n        log_append(\"    metal_cache_invalidate called for entry %d\\n\", i);\n    }\n\n    log_append(\"EXIT: metal_generic_dev_dma_map returning %d\\n\", nents_in);\n\n    return nents_in;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n-- Build type:  \n-- Host:    Linux/x86_64\n-- Target:  Linux/x86_64\n-- Machine: Generic\n-- Vendor: none\n/tmp/tmp6lwa_i9h/src/lib/device.c:127:8: error: redefinition of 'struct metal_device'\n  127 | struct metal_device { int dummy; };\n      |        ^~~~~~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/src/lib/device.c:19:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/device.h:72:8: note: originally defined here\n   72 | struct metal_device {\n      |        ^~~~~~~~~~~~\n/tmp/tmp6lwa_i9h/src/lib/device.c:128:8: error: redefinition of 'struct metal_sg'\n  128 | struct metal_sg {\n      |        ^~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/build/lib/include/metal/device.h:18,\n                 from /tmp/tmp6lwa_i9h/src/lib/device.c:19:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/dma.h:33:8: note: originally defined here\n   33 | struct metal_sg {\n      |        ^~~~~~~~\n/tmp/tmp6lwa_i9h/build/lib/include/metal/dma.h:27:26: error: expected identifier before numeric constant\n   27 | #define METAL_DMA_DEV_W  2 /**< DMA direction, device write */\n      |                          ^\n/tmp/tmp6lwa_i9h/src/lib/device.c:132:8: note: in expansion of macro 'METAL_DMA_DEV_W'\n  132 | enum { METAL_DMA_DEV_W = 1 };\n      |        ^~~~~~~~~~~~~~~\n/tmp/tmp6lwa_i9h/src/lib/device.c:145:13: error: conflicting types for 'metal_cache_flush'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  145 | static void metal_cache_flush(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/src/lib/device.c:26:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/cache.h:33:20: note: previous definition of 'metal_cache_flush' with type 'void(void *, unsigned int)'\n   33 | static inline void metal_cache_flush(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~\n/tmp/tmp6lwa_i9h/src/lib/device.c:150:13: error: conflicting types for 'metal_cache_invalidate'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  150 | static void metal_cache_invalidate(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/src/lib/device.c:26:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/cache.h:46:20: note: previous definition of 'metal_cache_invalidate' with type 'void(void *, unsigned int)'\n   46 | static inline void metal_cache_invalidate(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6lwa_i9h/src/lib/device.c:156:5: error: conflicting types for 'metal_generic_dev_dma_map'; have 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  156 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/src/lib/device.c:19:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/device.h:160:5: note: previous declaration of 'metal_generic_dev_dma_map' with type 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  160 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6lwa_i9h/src/lib/device.c:206:6: error: conflicting types for 'metal_generic_dev_dma_unmap'; have 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  206 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp6lwa_i9h/src/lib/device.c:19:\n/tmp/tmp6lwa_i9h/build/lib/include/metal/device.h:164:6: note: previous declaration of 'metal_generic_dev_dma_unmap' with type 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  164 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [lib/CMakeFiles/metal-shared.dir/build.make:90: lib/CMakeFiles/metal-shared.dir/device.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:291: lib/CMakeFiles/metal-shared.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * This file intentionally avoids redefining types and symbols that are\n * provided by the project's headers (e.g. struct metal_device,\n * struct metal_sg, METAL_DMA_DEV_W, metal_cache_flush, etc.).\n * The implementation below assumes those definitions come from the\n * included project headers when this file is part of the larger build.\n */\n\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\n/*\n * Preserve the original logic of metal_generic_dev_dma_map but do not\n * redefine types or functions that are declared in the project's headers.\n *\n * Signature must match the declaration in the project's headers:\n * int metal_generic_dev_dma_map(struct metal_bus *bus,\n *                               struct metal_device *device,\n *                               uint32_t dir,\n *                               struct metal_sg *sg_in,\n *                               int nents_in,\n *                               struct metal_sg *sg_out)\n */\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                              struct metal_device *device,\n                              uint32_t dir,\n                              struct metal_sg *sg_in,\n                              int nents_in,\n                              struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    log_append(\"ENTER: metal_generic_dev_dma_map\\n\");\n    log_append(\"  bus (raw ptr)       = %p\\n\", (void *)bus);\n    log_append(\"  device (raw ptr)    = %p\\n\", (void *)device);\n    log_append(\"  Note: (void)bus and (void)device executed (no-op)\\n\");\n    log_append(\"  dir                 = %u\\n\", (unsigned)dir);\n    log_append(\"  sg_in               = %p\\n\", (void *)sg_in);\n    log_append(\"  sg_out              = %p\\n\", (void *)sg_out);\n    log_append(\"  nents_in            = %d\\n\", nents_in);\n\n    if (sg_out != sg_in) {\n        log_append(\"  Action: copying sg_in -> sg_out (%d entries)\\n\", nents_in);\n        memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(*sg_in));\n        log_append(\"  memcpy completed\\n\");\n    } else {\n        log_append(\"  Action: sg_out == sg_in; no copy performed\\n\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Print length as size_t for safety; cast from the sg's len type. */\n        log_append(\"  Entry %d: virt=%p len=%zu\\n\", i, sg_out[i].virt,\n                   (size_t)sg_out[i].len);\n\n        /* If the project defines METAL_DMA_DEV_W, use that value. */\n        if (dir == METAL_DMA_DEV_W) {\n            log_append(\"    dir == METAL_DMA_DEV_W: calling metal_cache_flush for entry %d\\n\", i);\n            /* Call the project's metal_cache_flush; cast len to unsigned int to\n             * match the header's typical signature (safe truncation is expected\n             * to be handled by the underlying implementation). */\n            metal_cache_flush(sg_out[i].virt, (unsigned)sg_out[i].len);\n            log_append(\"    metal_cache_flush returned for entry %d\\n\", i);\n        } else {\n            log_append(\"    dir != METAL_DMA_DEV_W: skipping flush for entry %d\\n\", i);\n        }\n\n        /* Invalidate cache for the entry (uses project's metal_cache_invalidate). */\n        metal_cache_invalidate(sg_out[i].virt, (unsigned)sg_out[i].len);\n        log_append(\"    metal_cache_invalidate called for entry %d\\n\", i);\n    }\n\n    log_append(\"EXIT: metal_generic_dev_dma_map returning %d\\n\", nents_in);\n\n    return nents_in;\n}\n",
  "explanation": "Removed local redefinitions of struct metal_device, struct metal_sg, the METAL_DMA_DEV_W enum, and the metal_cache_* functions to avoid conflicts with the project's headers. The file now relies on the project's header declarations for those types and functions. Kept the original metal_generic_dev_dma_map logic, adjusted memcpy size expression, and added casts when printing and when calling cache functions to match typical header signatures. Also added necessary standard headers for compilation."
}