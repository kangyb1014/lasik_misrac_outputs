{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nmetal_bus_find returns a modifiable pointer to an internal bus via the out-parameter 'struct metal_bus **result' even though the function does not modify the bus object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible; here the out-parameter should be 'const struct metal_bus **result' (or the function should return a 'const struct metal_bus *') to avoid exposing a non-const pointer to the caller.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/43.txt */\nstatic void metal_bus_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n    int iter = 0;\n\n    metal_bus_logf(\"metal_bus_find: enter name_ptr=%p name='%s' result_ptr=%p\",\n                   (void *)name, (name != NULL ? name : \"(null)\"), (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        iter++;\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log discovered bus pointer and name pointer (do not dereference name unsafely) */\n        metal_bus_logf(\"iter=%d: bus_ptr=%p bus_name_ptr=%p\",\n                       iter, (void *)bus, (void *)(bus ? bus->name : NULL));\n\n        /* Preserve original logic but capture comparison result for logging */\n        int cmp = strcmp(bus->name, name);\n        metal_bus_logf(\"iter=%d: strcmp(bus->name, name) -> %d\", iter, cmp);\n\n        if (cmp == 0 && result) {\n            metal_bus_logf(\"iter=%d: match and result non-NULL: assigning *result = %p (bus->name='%s')\",\n                           iter, (void *)bus, bus->name);\n            *result = bus;\n            metal_bus_logf(\"metal_bus_find: exit success (return 0)\");\n            return 0;\n        }\n\n        if (cmp == 0 && (result == NULL)) {\n            /* Match but caller did not provide out-parameter; log this scenario */\n            metal_bus_logf(\"iter=%d: match found but result is NULL (no assignment performed)\", iter);\n        }\n    }\n\n    metal_bus_logf(\"metal_bus_find: exit not found (return -ENOENT)\");\n    return -ENOENT;\n}\n"
}