{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'struct metal_list *node' is only used to traverse the list for read-only access (it is not used to modify the list elements). It should be declared as 'const struct metal_list *node' so the pointer points to a const-qualified type. As written, this violates MISRA C 2023 Rule 8.13. (If the iteration macro or container_of requires a non-const pointer, the macro/API should be updated or a documented justification provided.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Helper probe function: append formatted logs to /tmp/logs/43.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (f == NULL) {\n        /* If logging cannot be opened, do not affect program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    /* Log function entry and input state */\n    probe_log(\"metal_bus_find: enter; name=%p\\\"%s\\\" result=%p\", (const void *)name, (name != NULL) ? name : \"(null)\", (const void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log the node and bus addresses and the bus name for each iteration */\n        probe_log(\"iter: node=%p bus=%p bus->name=%p\\\"%s\\\"\", (const void *)node, (const void *)bus,\n                  (const void *)(bus->name), (bus->name != NULL) ? bus->name : \"(null)\");\n\n        if (strcmp(bus->name, name) == 0 && result) {\n            /* Log the match and the assignment about to happen */\n            probe_log(\"match: bus->name=\\\"%s\\\" == name=\\\"%s\\\"; assigning *result=%p\", bus->name, name, (const void *)bus);\n            *result = bus;\n            probe_log(\"metal_bus_find: exit; found, returning 0\");\n            return 0;\n        } else {\n            /* Log non-match information */\n            probe_log(\"no-match: bus->name=\\\"%s\\\" != name=\\\"%s\\\"\", (bus->name != NULL) ? bus->name : \"(null)\", (name != NULL) ? name : \"(null)\");\n        }\n    }\n\n    probe_log(\"metal_bus_find: exit; not found, returning -ENOENT (%d)\", -ENOENT);\n    return -ENOENT;\n}\n"
}