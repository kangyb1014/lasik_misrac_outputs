{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'bus' is declared as 'struct metal_bus *' but in this function it is only used for read-only access (strcmp on bus->name) and not modified. Therefore it could (and should) be declared 'const struct metal_bus *bus' so the pointer points to a const-qualified type. The assignment 'bus = metal_container_of(node, struct metal_bus, node);' yields a non-const pointer when a const-qualified pointer is appropriate, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    probe_log_printf(\"enter: metal_bus_find(name=%s, result=%p)\\n\", (name ? name : \"(null)\"), (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        probe_log_printf(\" iterate: node=%p\\n\", (void *)node);\n        bus = metal_container_of(node, struct metal_bus, node);\n        probe_log_printf(\"  resolved bus=%p, bus->name=%s\\n\", (void *)bus, (bus && bus->name) ? bus->name : \"(null)\");\n\n        /* Capture comparison result for logging but preserve original logic */\n        int cmp = 0;\n        if (bus && bus->name && name) {\n            cmp = strcmp(bus->name, name);\n        } else if (bus && bus->name && (name == NULL)) {\n            /* comparing to NULL yields not equal */\n            cmp = 1;\n        } else if ((bus == NULL) || (bus->name == NULL)) {\n            /* treat missing names as not equal */\n            cmp = 1;\n        }\n\n        probe_log_printf(\"  compare: strcmp(bus->name, name) -> %d\\n\", cmp);\n\n        if (cmp == 0 && result) {\n            *result = bus;\n            probe_log_printf(\"  match: assigned *result=%p, returning 0\\n\", (void *)bus);\n            return 0;\n        }\n    }\n\n    probe_log_printf(\"exit: not found, returning %d\\n\", -ENOENT);\n    return -ENOENT;\n}\n"
}