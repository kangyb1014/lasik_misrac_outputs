{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_bus_find(bus->name, NULL) can never return 0 because metal_bus_find only returns 0 when a match is found AND the 'result' argument is non-NULL (the condition in the loop is strcmp(...) == 0 && result). With result == NULL the function will always fall through and return -ENOENT, so the if (metal_bus_find(...) == 0) branch (and its return -EEXIST) is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logger: append formatted messages to /tmp/logs/41.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists (best-effort). Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/41.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    probe_log(\"enter metal_bus_find: name='%s', result_ptr=%p\", name, (void *)result);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Preserve original logic: compute strcmp result and use it in condition. */\n        int cmp = strcmp(bus->name, name);\n        probe_log(\"iter: bus=%p bus->name='%s' cmp=%d result_ptr=%p\", (void *)bus, bus->name, cmp, (void *)result);\n\n        if (cmp == 0 && result) {\n            *result = bus;\n            probe_log(\"match found: storing *result=%p and returning 0\", (void *)bus);\n            return 0;\n        }\n\n        if (cmp == 0 && !result) {\n            probe_log(\"match found but result is NULL -> cannot store, continuing search\");\n        }\n    }\n\n    probe_log(\"no matching bus found for name='%s' -> returning -ENOENT (%d)\", name, -ENOENT);\n    return -ENOENT;\n}\n"
}