{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(bus->name) only checks that bus and bus->name are non-NULL; it does not guarantee that the character sequence pointed to by bus->name is NUL-terminated within the bounds of the object. If bus->name points to a char buffer that is not NUL-terminated (for example: char name[3] = {'a','b','c'}; bus->name = name;), strlen(bus->name) will read past the object bounds searching for a '\\0', causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Probe helper that appends log lines to /tmp/logs/47.txt. */\nstatic void metal_bus_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    metal_bus_log(\"metal_bus_find() called: name=%p\", (const void *)name);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log iteration and pointer state. Do NOT dereference bus->name here (no %s) to avoid\n           introducing additional out-of-bounds reads. We only log pointer values and control flow. */\n        metal_bus_log(\"iter: node=%p, bus=%p, bus->name=%p\", (void *)node, (void *)bus,\n                      (void *)(bus ? (void *)bus->name : NULL));\n\n        /* Record that we are about to call strcmp. This mirrors the original control flow\n           and will therefore also reproduce the scenario where strcmp reads beyond bounds\n           if bus->name is not NUL-terminated. */\n        metal_bus_log(\"calling strcmp(bus->name, name) with bus->name=%p name=%p\",\n                      (void *)(bus ? (void *)bus->name : NULL), (const void *)name);\n\n        if (strcmp(bus->name, name) == 0 && result) {\n            metal_bus_log(\"match found: bus=%p, bus->name=%p, result ptr=%p\", (void *)bus,\n                          (void *)(bus ? (void *)bus->name : NULL), (void *)result);\n            *result = bus;\n            metal_bus_log(\"returning 0 (found)\");\n            return 0;\n        } else {\n            metal_bus_log(\"no match for this entry\");\n        }\n    }\n\n    metal_bus_log(\"no match found: returning -ENOENT (%d)\", -ENOENT);\n    return -ENOENT;\n}\n"
}