{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(bus_name) and strlen(dev_name) after only checking for non-NULL. If a caller supplies a non-NULL pointer that does not reference a NUL-terminated character array (or whose storage is shorter than the characters before the NUL), strlen may read past the bounds of that object. Example: char buf[3] = {'a','b','c'}; passing buf as bus_name causes strlen(buf) to scan past buf\u2019s bounds until a 0 is found \u2014 violating MISRA C:2023 Rule 21.17. (Note: the short-circuit logic prevents calling strlen on a NULL pointer, but does not prevent out\u2011of\u2011bounds access for non\u2011terminated strings.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\t/* Log entry into the function and the pointers we received. */\n\t{\n\t\tFILE *log = fopen(\"/tmp/logs/47.txt\", \"a\");\n\t\tif (log) {\n\t\t\tfprintf(log, \"metal_bus_find: entry name=%p, result=%p\\n\", (const void *)name, (void *)result);\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t}\n\t}\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\n\t\t/* Log the current bus and the bus->name pointer before calling strcmp. */\n\t\t{\n\t\t\tFILE *log = fopen(\"/tmp/logs/47.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"metal_bus_find: iter bus=%p, bus->name=%p\\n\", (void *)bus, (void *)bus->name);\n\t\t\t\tif (bus->name == NULL) {\n\t\t\t\t\tfprintf(log, \"  bus->name is NULL\\n\");\n\t\t\t\t}\n\t\t\t\tif (name == NULL) {\n\t\t\t\t\tfprintf(log, \"  arg name is NULL\\n\");\n\t\t\t\t}\n\t\t\t\tfprintf(log, \"  about to call strcmp(bus->name, name)\\n\");\n\t\t\t\tfflush(log);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t}\n\n\t\t/* Perform the original comparison (preserve original logic). */\n\t\tint cmp = strcmp(bus->name, name);\n\n\t\t/* Log the result of strcmp. If strcmp causes an out-of-bounds access, the program may crash\n\t\t   before this log is written; the previous logs demonstrate that strcmp was invoked on\n\t\t   non-NULL pointers, which helps reproduce the violation scenario. */\n\t\t{\n\t\t\tFILE *log = fopen(\"/tmp/logs/47.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"metal_bus_find: strcmp returned %d for bus->name=%p and name=%p\\n\",\n\t\t\t\t\tcmp, (void *)bus->name, (const void *)name);\n\t\t\t\tfflush(log);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t}\n\n\t\tif (cmp == 0 && result) {\n\t\t\t/* Log the fact that we are returning a match and storing the pointer. */\n\t\t\tFILE *log = fopen(\"/tmp/logs/47.txt\", \"a\");\n\t\t\tif (log) {\n\t\t\t\tfprintf(log, \"metal_bus_find: match found, storing result=%p (bus=%p)\\n\", (void *)bus, (void *)bus);\n\t\t\t\tfflush(log);\n\t\t\t\tfclose(log);\n\t\t\t}\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n"
}