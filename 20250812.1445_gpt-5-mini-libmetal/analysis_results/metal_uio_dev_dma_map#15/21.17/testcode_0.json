{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs when sg_out does not point to at least nents_in elements (or is NULL). The code only checks pointer inequality (sg_out != sg_in) and then calls memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)); if sg_out refers to a smaller buffer than nents_in elements this will write past the end of sg_out (out-of-bounds access). (Also note: if sg_out partially overlaps sg_in but is not equal, using memcpy is undefined; memmove should be used.),\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/127.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a log line to /tmp/logs/127.txt */\nstatic void metal_uio_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/127.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Entry probe */\n    metal_uio_log_probe(\"%s: entry: ldev=%p, dev_name=%s, sg_in=%p, sg_out=%p, nents_in=%d, sg_size=%zu\",\n                        __func__, (void *)ldev, ldev ? ldev->dev_name : \"(null)\",\n                        (void *)sg_in, (void *)sg_out, nents_in, sizeof(struct metal_sg));\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n        /* Per-entry probe */\n        metal_uio_log_probe(\"%s: checking sg_in[%d]: virt=%p, len=%d, range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                            __func__, i, vaddr_sg_lo, sg_in[i].len,\n                            (uintptr_t)vaddr_sg_lo, (uintptr_t)vaddr_sg_hi);\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n            metal_uio_log_probe(\"%s: comparing to region[%d]: virt=%p, size=%zu, range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                                __func__, j, vaddr_lo, io->size,\n                                (uintptr_t)vaddr_lo, (uintptr_t)vaddr_hi);\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the failure detail before returning */\n            metal_uio_log_probe(\"%s: input address isn't MMIO addr for sg_in[%d]: virt=%p, len=%d. regions=%d\",\n                                __func__, i, vaddr_sg_lo, sg_in[i].len,\n                                (int)ldev->device.num_regions);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n\n    /* Before memcpy probe: capture numeric ranges and possible overlap */\n    if (sg_out != sg_in) {\n        uintptr_t src_start = (uintptr_t)sg_in;\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        uintptr_t src_end = src_start + bytes;\n        uintptr_t dst_start = (uintptr_t)sg_out;\n        uintptr_t dst_end = dst_start + bytes;\n\n        metal_uio_log_probe(\"%s: preparing memcpy: sg_in=%p, sg_out=%p, nents_in=%d, bytes=%zu, src_range=[%\" PRIuPTR \",%\" PRIuPTR \"], dst_range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                            __func__, (void *)sg_in, (void *)sg_out, nents_in, bytes,\n                            src_start, src_end, dst_start, dst_end);\n\n        /* Detect simple overlap (ranges intersect) and log it. Do not change original behavior. */\n        if (!((dst_end <= src_start) || (dst_start >= src_end))) {\n            if (dst_start == src_start) {\n                /* exact same start - effectively equal pointers case handled above, but just log */\n                metal_uio_log_probe(\"%s: destination and source start are equal (dst_start == src_start = %\" PRIuPTR \")\",\n                                    __func__, dst_start);\n            } else {\n                metal_uio_log_probe(\"%s: detected overlapping buffers (undefined for memcpy): src=[%\" PRIuPTR \",%\" PRIuPTR \"], dst=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                                    __func__, src_start, src_end, dst_start, dst_end);\n                metal_uio_log_probe(\"%s: recommendation: use memmove if buffers may overlap.\", __func__);\n            }\n        }\n\n        /* Null-pointer probes */\n        if (sg_out == NULL) {\n            metal_uio_log_probe(\"%s: WARNING: sg_out is NULL. memcpy will likely crash.\", __func__);\n        }\n        if (sg_in == NULL) {\n            metal_uio_log_probe(\"%s: WARNING: sg_in is NULL. memcpy will likely crash.\", __func__);\n        }\n\n        /* Preserve original behavior: perform memcpy as before */\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n        metal_uio_log_probe(\"%s: memcpy completed: copied %zu bytes from %p to %p\",\n                            __func__, bytes, (void *)sg_in, (void *)sg_out);\n    }\n    return nents_in;\n}\n"
}