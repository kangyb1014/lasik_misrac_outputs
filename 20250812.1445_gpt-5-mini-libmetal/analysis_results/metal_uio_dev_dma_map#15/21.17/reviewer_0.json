{
  "user_message": "An agent A claimed that the following metal_uio_dev_dma_map code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_dev_dma_map.\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs when sg_out does not point to at least nents_in elements (or is NULL). The code only checks pointer inequality (sg_out != sg_in) and then calls memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)); if sg_out refers to a smaller buffer than nents_in elements this will write past the end of sg_out (out-of-bounds access). (Also note: if sg_out partially overlaps sg_in but is not equal, using memcpy is undefined; memmove should be used.),\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void metal_uio_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/127.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Entry probe */\n    metal_uio_log_probe(\"%s: entry: ldev=%p, dev_name=%s, sg_in=%p, sg_out=%p, nents_in=%d, sg_size=%zu\",\n                        __func__, (void *)ldev, ldev ? ldev->dev_name : \"(null)\",\n                        (void *)sg_in, (void *)sg_out, nents_in, sizeof(struct metal_sg));\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n        /* Per-entry probe */\n        metal_uio_log_probe(\"%s: checking sg_in[%d]: virt=%p, len=%d, range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                            __func__, i, vaddr_sg_lo, sg_in[i].len,\n                            (uintptr_t)vaddr_sg_lo, (uintptr_t)vaddr_sg_hi);\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n            metal_uio_log_probe(\"%s: comparing to region[%d]: virt=%p, size=%zu, range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                                __func__, j, vaddr_lo, io->size,\n                                (uintptr_t)vaddr_lo, (uintptr_t)vaddr_hi);\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the failure detail before returning */\n            metal_uio_log_probe(\"%s: input address isn't MMIO addr for sg_in[%d]: virt=%p, len=%d. regions=%d\",\n                                __func__, i, vaddr_sg_lo, sg_in[i].len,\n                                (int)ldev->device.num_regions);\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n\n    /* Before memcpy probe: capture numeric ranges and possible overlap */\n    if (sg_out != sg_in) {\n        uintptr_t src_start = (uintptr_t)sg_in;\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        uintptr_t src_end = src_start + bytes;\n        uintptr_t dst_start = (uintptr_t)sg_out;\n        uintptr_t dst_end = dst_start + bytes;\n\n        metal_uio_log_probe(\"%s: preparing memcpy: sg_in=%p, sg_out=%p, nents_in=%d, bytes=%zu, src_range=[%\" PRIuPTR \",%\" PRIuPTR \"], dst_range=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                            __func__, (void *)sg_in, (void *)sg_out, nents_in, bytes,\n                            src_start, src_end, dst_start, dst_end);\n\n        /* Detect simple overlap (ranges intersect) and log it. Do not change original behavior. */\n        if (!((dst_end <= src_start) || (dst_start >= src_end))) {\n            if (dst_start == src_start) {\n                /* exact same start - effectively equal pointers case handled above, but just log */\n                metal_uio_log_probe(\"%s: destination and source start are equal (dst_start == src_start = %\" PRIuPTR \")\",\n                                    __func__, dst_start);\n            } else {\n                metal_uio_log_probe(\"%s: detected overlapping buffers (undefined for memcpy): src=[%\" PRIuPTR \",%\" PRIuPTR \"], dst=[%\" PRIuPTR \",%\" PRIuPTR \"]\",\n                                    __func__, src_start, src_end, dst_start, dst_end);\n                metal_uio_log_probe(\"%s: recommendation: use memmove if buffers may overlap.\", __func__);\n            }\n        }\n\n        /* Null-pointer probes */\n        if (sg_out == NULL) {\n            metal_uio_log_probe(\"%s: WARNING: sg_out is NULL. memcpy will likely crash.\", __func__);\n        }\n        if (sg_in == NULL) {\n            metal_uio_log_probe(\"%s: WARNING: sg_in is NULL. memcpy will likely crash.\", __func__);\n        }\n\n        /* Preserve original behavior: perform memcpy as before */\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n        metal_uio_log_probe(\"%s: memcpy completed: copied %zu bytes from %p to %p\",\n                            __func__, bytes, (void *)sg_in, (void *)sg_out);\n    }\n    return nents_in;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_uio_dev_dma_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The call memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)) is performed without any validation that sg_out (or sg_in) actually refers to at least nents_in elements. If the caller supplies a smaller destination buffer (or NULL), memcpy can write past the end of sg_out (or read past sg_in), which is precisely the kind of out\u2011of\u2011bounds access forbidden by MISRA C 2023 Rule 21.17. Additionally, the code only checks pointer inequality (sg_out != sg_in) and does not handle partial overlap; memcpy has undefined behavior for overlapping source and destination\u2014memmove should be used if overlap is possible. To make this compliant, the function must ensure (by checks or documented and enforced preconditions) that both source and destination buffers are large enough and handle possible overlap (or use memmove), or avoid calling memcpy in unsafe cases."
}