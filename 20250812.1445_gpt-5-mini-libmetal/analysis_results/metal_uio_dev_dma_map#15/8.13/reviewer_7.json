{
  "user_message": "An agent A claimed that the following metal_uio_dev_dma_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_dev_dma_map.\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variables vaddr_sg_lo, vaddr_sg_hi, vaddr_lo and vaddr_hi are declared as non-const void * but are only used for address arithmetic and comparisons (they are not used to modify the pointed-to objects). According to MISRA C 2023 Rule 8.13 these should be const-qualified (e.g. const void *) wherever possible. Thus the current declaration violates Rule 8.13. A suitable fix is to declare them as const void * (and/or make the struct members const if appropriate).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    probe_log(\"ENTER %s: ldev=%p dev_name=%s nents_in=%d dir=%u\", __func__, (void *)ldev,\n              (ldev ? ldev->dev_name : \"(null)\"), nents_in, (unsigned)dir);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        probe_log(\"sg[%d]: virt=%p len=%lu lo=%p hi=%p\",\n                  i, sg_in[i].virt, (unsigned long)sg_in[i].len,\n                  vaddr_sg_lo, vaddr_sg_hi);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            probe_log(\" region[%d]: io=%p virt=%p size=%lu lo=%p hi=%p\",\n                      j, (void *)io, io->virt, (unsigned long)io->size,\n                      vaddr_lo, vaddr_hi);\n\n            probe_log(\" compare: sg_lo>=lo=%d ; sg_hi<=hi=%d\",\n                      (int)(vaddr_sg_lo >= vaddr_lo),\n                      (int)(vaddr_sg_hi <= vaddr_hi));\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                probe_log(\" match: sg[%d] matched region[%d]\", i, j);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            probe_log(\"ERROR: %s,%s: input address isn't MMIO addr: sg[%d] virt=%p len=%lu\",\n                      __func__, (ldev ? ldev->dev_name : \"(null)\"), i,\n                      vaddr_sg_lo, (unsigned long)sg_in[i].len);\n\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in) {\n        probe_log(\"copying sg_out from sg_in: nents=%d size_per=%zu\", nents_in, sizeof(struct metal_sg));\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    } else {\n        probe_log(\"sg_out == sg_in; no copy performed\");\n    }\n\n    probe_log(\"EXIT %s: return=%d\", __func__, nents_in);\n    return nents_in;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_uio_dev_dma_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local variables vaddr_sg_lo, vaddr_sg_hi, vaddr_lo and vaddr_hi are only used for address arithmetic and comparisons (they are assigned from other pointers and compared; they are never used to modify the pointed-to objects). Per MISRA C 2023 Rule 8.13, such pointers should be to const-qualified types where possible. Declaring them as const void * (e.g. const void *vaddr_sg_lo, ... ) would satisfy the rule; assigning a void * source to a const void * target is allowed, so this change is compatible with the current assignments. (If wider API constraints require the struct members themselves to be non-const, changing only these local variables to const is the minimal compliant fix.) The empty test log does not affect the static analysis of the code against Rule 8.13."
}