{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes sg_in as a non-const pointer (struct metal_sg *sg_in), and metal_sg::virt is declared as void *; in the fragment vaddr_sg_lo = sg_in[i].virt the code only reads the address (no modification). Both the local variable vaddr_sg_lo and the sg_in parameter/field could be const-qualified (e.g. declare sg_in as const struct metal_sg * and vaddr_sg_lo as const void * or change metal_sg::virt to const void * where appropriate). Because the pointer is not used to modify the pointee, it should be const-qualified \u2014 this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_dma_map:\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/123.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    /* Log function entry and basic parameters */\n    probe_log(\"%s: entry lbus=%p, ldev=%p, dir=%u, sg_in=%p, nents_in=%d, sg_out=%p\\n\",\n          __func__, (void *)lbus, (unsigned)dir, (void *)sg_in, nents_in, (void *)sg_out);\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        /* Read-only accesses to sg_in[i] \u2014 logging to provide evidence */\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        probe_log(\"%s: iter i=%d, sg_in[%d].virt=%p, len=%lu => range [%p - %p]\\n\",\n              __func__, i, i, vaddr_sg_lo, (unsigned long)sg_in[i].len,\n              vaddr_sg_lo, vaddr_sg_hi);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            probe_log(\"%s:  region check j=%d io=%p region=[%p - %p]\\n\",\n                  __func__, j, (void *)io, vaddr_lo, vaddr_hi);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                probe_log(\"%s:  match found for i=%d in region j=%d\\n\",\n                      __func__, i, j);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            /* Log the failure case with readable pointer values */\n            probe_log(\"%s: input address isn't MMIO addr: sg_in[%d].virt=%p, len=%lu (no region match)\\n\",\n                  __func__, i, vaddr_sg_lo, (unsigned long)sg_in[i].len);\n\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n\n    if (sg_out != sg_in) {\n        probe_log(\"%s: copying %d entries from sg_in=%p to sg_out=%p\\n\",\n              __func__, nents_in, (void *)sg_in, (void *)sg_out);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    } else {\n        probe_log(\"%s: sg_out == sg_in, no copy performed\\n\", __func__);\n    }\n\n    probe_log(\"%s: returning %d\\n\", __func__, nents_in);\n    return nents_in;\n}\n"
}