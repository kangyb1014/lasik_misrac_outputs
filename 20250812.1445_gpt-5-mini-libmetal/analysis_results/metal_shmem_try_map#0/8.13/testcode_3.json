{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function metal_virt2phys is declared as static int metal_virt2phys(void *addr, unsigned long *phys) but it does not modify the memory at 'addr' \u2014 it only uses the address value. The call error = metal_virt2phys(virt + offset, &phys[page]); passes a pointer to the source buffer (virt + offset) that could be const-qualified. Therefore the pointer parameter 'addr' should be const void *addr; leaving it as void * violates Rule 8.13. Note: the second argument (&phys[page]) is an output parameter and must remain non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append logs to /tmp/logs/3.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!fp)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    probe_logf(\"enter metal_shmem_try_map: fd=%d, requested_size=%zu, page_size=%zu, page_shift=%d, mmap_flags=0x%x\",\n               fd, size, ps ? ps->page_size : 0, ps ? ps->page_shift : -1, ps ? ps->mmap_flags : 0);\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    probe_logf(\"aligned size=%zu, pages=%zu\", size, pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        probe_logf(\"metal_map failed: size=%zu, mmap_flags=0x%x, error=%d (%s)\",\n                   size, ps->mmap_flags, error, strerror(-error));\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        return error;\n    }\n\n    probe_logf(\"metal_map succeeded: mem=%\" PRIxPTR \", size=%zu\",\n               (uintptr_t)mem, size);\n\n    error = mlock(mem, size);\n    if (error) {\n        probe_logf(\"mlock failed: errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n    } else {\n        probe_logf(\"mlock succeeded for mem=%\" PRIxPTR \", size=%zu\", (uintptr_t)mem, size);\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        probe_logf(\"malloc phys failed: phys_size=%zu\", phys_size);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    probe_logf(\"allocated phys array: phys=%\" PRIxPTR \", phys_size=%zu\", (uintptr_t)phys, phys_size);\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        probe_logf(\"malloc io failed\");\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    probe_logf(\"allocated io struct: io=%\" PRIxPTR, (uintptr_t)io);\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        probe_logf(\"_metal.pagemap_fd < 0: using offset as pa, phys[0]=0\");\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n        probe_logf(\"metal_io_init called (no pagemap): io=%\" PRIxPTR \", mem=%\" PRIxPTR \", size=%zu, page_shift=%d\",\n                   (uintptr_t)io, (uintptr_t)mem, size, -1);\n    } else {\n        probe_logf(\"_metal.pagemap_fd >= 0: attempting va2pa mapping for %zu pages\", pages);\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            probe_logf(\"page=%zu, offset=%zu, virt_addr=%\" PRIxPTR, page, offset, (uintptr_t)(virt + offset));\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n\n            probe_logf(\"metal_virt2phys returned error=%d for virt=%\" PRIxPTR \", resulting phys[page]=%#llx\",\n                       error, (uintptr_t)(virt + offset), (unsigned long long)phys[page]);\n\n            if (error < 0)\n                phys[page] = METAL_BAD_OFFSET;\n\n            probe_logf(\"after check: page=%zu, phys[page]=%#llx\", page, (unsigned long long)phys[page]);\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n                      &metal_shmem_io_ops);\n        probe_logf(\"metal_io_init called: io=%\" PRIxPTR \", mem=%\" PRIxPTR \", size=%zu, page_shift=%d\",\n                   (uintptr_t)io, (uintptr_t)mem, size, ps->page_shift);\n    }\n    *result = io;\n\n    probe_logf(\"exit metal_shmem_try_map: result io=%\" PRIxPTR, (uintptr_t)*result);\n\n    return 0;\n}\n"
}