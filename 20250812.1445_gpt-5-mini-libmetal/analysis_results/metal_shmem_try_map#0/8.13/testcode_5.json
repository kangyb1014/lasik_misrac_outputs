{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'virt' is declared as a mutable uint8_t * but is only used for address arithmetic and to read (via metal_virt2phys). It could be const-qualified (const uint8_t *virt). Therefore the code does not qualify the pointer as const when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_try_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_try_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_try_map:\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_try_map code.\n",
  "test_code": "static int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n    FILE *logf = NULL;\n\n    /* open log file for probes (best-effort, do not change behavior on failure) */\n    logf = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"metal_shmem_try_map enter: fd=%d size=%zu page_size=%zu\\n\",\n                fd, size, ps->page_size);\n        fflush(logf);\n    }\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        metal_log(METAL_LOG_WARNING,\n              \"failed to mmap shmem %ld,0x%x - %s\\n\",\n              size, ps->mmap_flags, strerror(-error));\n        if (logf) {\n            fprintf(logf, \"metal_map failed: error=%d\\n\", error);\n            fclose(logf);\n        }\n        return error;\n    }\n\n    if (logf) {\n        fprintf(logf, \"metal_map succeeded: mem=%p size=%zu mmap_flags=0x%x\\n\",\n                mem, size, ps->mmap_flags);\n        fflush(logf);\n    }\n\n    error = mlock(mem, size);\n    if (error) {\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n              strerror(errno));\n        if (logf) {\n            fprintf(logf, \"mlock failed: errno=%d (%s)\\n\", errno, strerror(errno));\n            fflush(logf);\n        }\n    } else {\n        if (logf) {\n            fprintf(logf, \"mlock succeeded for mem=%p size=%zu\\n\", mem, size);\n            fflush(logf);\n        }\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        metal_unmap(mem, size);\n        if (logf) {\n            fprintf(logf, \"malloc phys failed for size=%zu\\n\", phys_size);\n            fclose(logf);\n        }\n        return -ENOMEM;\n    }\n\n    if (logf) {\n        fprintf(logf, \"allocated phys array=%p phys_size=%zu pages=%zu\\n\", phys, phys_size, pages);\n        fflush(logf);\n    }\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        free(phys);\n        metal_unmap(mem, size);\n        if (logf) {\n            fprintf(logf, \"malloc io failed\\n\");\n            fclose(logf);\n        }\n        return -ENOMEM;\n    }\n\n    if (logf) {\n        fprintf(logf, \"allocated io=%p\\n\", io);\n        fflush(logf);\n    }\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        metal_log(METAL_LOG_WARNING,\n        \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        if (logf) {\n            fprintf(logf, \"pagemap_fd < 0: using offsets as phys. pagemap_fd=%d\\n\", _metal.pagemap_fd);\n            fflush(logf);\n        }\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        /* Note: 'virt' is declared as a non-const uint8_t * but only used for address\n         * arithmetic and to read via metal_virt2phys. We log its use here to provide\n         * evidence for the violation scenario reported (it could be const-qualified).\n         */\n        if (logf) {\n            fprintf(logf, \"pagemap_fd >= 0: pagemap_fd=%d mem=%p pages=%zu page_shift=%d\\n\",\n                    _metal.pagemap_fd, mem, pages, ps->page_shift);\n            fprintf(logf, \"NOTE: local pointer 'virt' is uint8_t * (mutable) but used only for reads\\n\");\n            fflush(logf);\n        }\n\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            if (logf) {\n                fprintf(logf, \"page=%zu offset=%zu virt=%p virt+offset=%p\\n\",\n                        page, offset, (void *)virt, (void *)(virt + offset));\n                fflush(logf);\n            }\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                if (logf) {\n                    fprintf(logf, \"metal_virt2phys failed for page=%zu addr=%p error=%d -> phys[%zu]=METAL_BAD_OFFSET\\n\",\n                            page, (void *)(virt + offset), error, page);\n                    fflush(logf);\n                }\n            } else {\n                if (logf) {\n                    fprintf(logf, \"metal_virt2phys succeeded for page=%zu addr=%p -> phys[%zu]=%#llx\\n\",\n                            page, (void *)(virt + offset), page, (unsigned long long)phys[page]);\n                    fflush(logf);\n                }\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n            &metal_shmem_io_ops);\n    }\n    *result = io;\n\n    if (logf) {\n        fprintf(logf, \"metal_shmem_try_map exit: result io=%p phys=%p size=%zu\\n\", io, phys, size);\n        fclose(logf);\n    }\n\n    return 0;\n}\n"
}