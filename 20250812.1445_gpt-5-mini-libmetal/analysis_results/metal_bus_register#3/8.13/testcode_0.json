{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression strlen(bus->name) only reads the name string. If struct metal_bus declares 'char *name' (non-const) but the field is never modified, this violates MISRA C 2023 Rule 8.13 because the pointer should be const-qualified (i.e. 'const char *name'). Note: the pointer parameter 'bus' itself cannot be made const in this function because the function initializes and modifies bus->devices/node, but the name member should be declared const if it is only read.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "int metal_bus_register(struct metal_bus *bus)\n{\n    /* Probe log file to capture control flow and state for the violation scenario */\n    FILE *log = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_register called: bus=%p\\n\", (void *)bus);\n        if (bus) {\n            fprintf(log, \"  bus->name pointer=%p\\n\", (void *)bus->name);\n        }\n    }\n\n    /* Preserve original logic: check for NULL/empty name */\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        if (log) {\n            if (!bus) {\n                fprintf(log, \"  early return: bus is NULL\\n\");\n            } else if (!bus->name) {\n                fprintf(log, \"  early return: bus->name is NULL\\n\");\n            } else {\n                fprintf(log, \"  early return: bus->name is empty (strlen == 0)\\n\");\n                /* If name is present but empty, printing content is safe (empty string) */\n                fprintf(log, \"  bus->name content=\\\"%s\\\" strlen=%zu\\n\", bus->name, strlen(bus->name));\n            }\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* At this point bus and bus->name are valid and non-empty */\n    if (log) {\n        fprintf(log, \"  passed null/empty check: bus->name=\\\"%s\\\" strlen=%zu\\n\", bus->name, strlen(bus->name));\n    }\n\n    /* Record result of lookup */\n    int find_res = metal_bus_find(bus->name, NULL);\n    if (log) {\n        fprintf(log, \"  metal_bus_find(\\\"%s\\\") returned %d\\n\", bus->name, find_res);\n    }\n    if (find_res == 0) {\n        if (log) {\n            fprintf(log, \"  early return: bus with name \\\"%s\\\" already exists\\n\", bus->name);\n            fclose(log);\n        }\n        return -EEXIST;\n    }\n\n    /* Continue original registration steps */\n    metal_list_init(&bus->devices);\n    if (log) {\n        fprintf(log, \"  initialized devices list at %p\\n\", (void *)&bus->devices);\n    }\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    if (log) {\n        fprintf(log, \"  added node %p to global bus_list\\n\", (void *)&bus->node);\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    if (log) {\n        fprintf(log, \"  success: registered bus \\\"%s\\\"\\n\", bus->name);\n        fclose(log);\n    }\n    return 0;\n}"
}