{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes bus->name (presumably declared as char *) to metal_log solely for read-only use. If bus->name is declared as a non-const char * while it actually points to data that is not modified, this violates MISRA C 2023 Rule 8.13 \u2014 it should be declared as const char * (and the metal_log prototype should accept const char * for the corresponding parameter).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Minimal type/extern declarations so this file compiles when built\n   together with the rest of the system. These are declarations only\n   and do not change the original logic of metal_bus_register. */\nstruct metal_bus {\n    char *name;\n    void *devices; /* opaque to this test code */\n    void *node;    /* opaque to this test code */\n};\n\nextern int metal_bus_find(const char *name, void *arg);\nextern void metal_list_init(void *list);\nextern void metal_list_add_tail(void *list, void *node);\nextern void metal_log(int level, const char *fmt, ...);\n\n/* Provide a small constant to match the original call site. Using a\n   const/enum value avoids defining a macro. */\nstatic const int METAL_LOG_DEBUG = 0;\n\n/* Minimal declaration for the global used in the original code. */\nextern struct {\n    struct {\n        void *bus_list;\n    } common;\n} _metal;\n\n/* Probe helper: append human-readable control flow and state to the\n   requested file. This captures the pointer values, the string value of\n   bus->name (if present), strlen, and the return value of metal_bus_find\n   when available. Caller provides a \"stage\" int to mark the control path. */\nstatic void probe_log_bus(const struct metal_bus *bus, int stage, int find_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (f == NULL) {\n        return; /* Best-effort logging only; do not change control flow */\n    }\n\n    fprintf(f, \"[metal_bus_register] stage=%d\\n\", stage);\n    fprintf(f, \"  bus pointer = %p\\n\", (const void *)bus);\n    if (bus == NULL) {\n        fprintf(f, \"  bus is NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    fprintf(f, \"  bus->name pointer = %p\\n\", (const void *)bus->name);\n    if (bus->name == NULL) {\n        fprintf(f, \"  bus->name = NULL\\n\");\n    } else {\n        /* Print the string but guard in case it's not NUL-terminated.\n           This mirrors the original code path that calls strlen(bus->name). */\n        fprintf(f, \"  bus->name = \\\"%s\\\"\\n\", bus->name);\n        fprintf(f, \"  strlen(bus->name) = %zu\\n\", strlen(bus->name));\n    }\n\n    if (find_ret != INT32_MIN) {\n        fprintf(f, \"  metal_bus_find returned = %d\\n\", find_ret);\n    } else {\n        fprintf(f, \"  metal_bus_find not yet called\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    /* Entry probe */\n    probe_log_bus(bus, 0, INT32_MIN);\n\n    if (!bus || !bus->name || !strlen(bus->name))\n    {\n        /* Log which condition caused the early return. */\n        probe_log_bus(bus, 1, INT32_MIN);\n        return -EINVAL;\n    }\n\n    /* Before calling metal_bus_find */\n    probe_log_bus(bus, 2, INT32_MIN);\n\n    int find_ret = metal_bus_find(bus->name, NULL);\n\n    /* Log result of lookup */\n    probe_log_bus(bus, 3, find_ret);\n\n    if (find_ret == 0)\n    {\n        probe_log_bus(bus, 4, find_ret);\n        return -EEXIST;\n    }\n\n    /* Preserve original behavior: initialize lists and add the bus. */\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\n    /* Keep the original logging call intact. */\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    /* Final probe showing successful registration */\n    probe_log_bus(bus, 5, find_ret);\n\n    return 0;\n}\n"
}