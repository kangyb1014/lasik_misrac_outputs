{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 calling strlen(bus->name) after only checking that bus and bus->name are non-NULL does not guarantee that the referenced character object is NUL-terminated. If bus->name points to a buffer that is not terminated (or to a region smaller than the string), strlen will read past the object bounds and cause out-of-bounds access (undefined behaviour). For example, if bus->name is set to a pointer into a fixed-size buffer that lacks a terminating '\\0', the strlen call can overrun the buffer \u2014 this violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append a log line to /tmp/logs/31.txt. */\nstatic void probe_log_enter(const void *bus)\n{\n    FILE *f = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_bus_register: enter - bus=%p\\n\", bus);\n    fclose(f);\n}\n\nstatic void probe_log_msg(const char *msg, const void *bus, const void *name)\n{\n    FILE *f = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_bus_register: %s - bus=%p name=%p\\n\", msg, bus, name);\n    fclose(f);\n}\n\n/*\n * Modified metal_bus_register with lightweight probes that record the\n * control flow and key pointer state to /tmp/logs/31.txt. The original\n * logic is preserved: the strlen call is performed only after checking\n * bus and bus->name for NULL as in the original snippet.\n */\nint metal_bus_register(struct metal_bus *bus)\n{\n    probe_log_enter(bus);\n\n    if (!bus) {\n        probe_log_msg(\"return -EINVAL (bus is NULL)\", bus, NULL);\n        return -EINVAL;\n    }\n\n    if (!bus->name) {\n        probe_log_msg(\"return -EINVAL (bus->name is NULL)\", bus, NULL);\n        return -EINVAL;\n    }\n\n    /* Log that we are about to call strlen on bus->name (this mirrors the original behavior). */\n    probe_log_msg(\"about to call strlen\", bus, (const void *)bus->name);\n\n    /* Original check retained: this call may read beyond the object if bus->name is not NUL-terminated. */\n    if (!strlen(bus->name)) {\n        probe_log_msg(\"return -EINVAL (strlen returned 0)\", bus, (const void *)bus->name);\n        return -EINVAL;\n    }\n\n    /* Record result of existence check and subsequent actions. */\n    probe_log_msg(\"calling metal_bus_find\", bus, (const void *)bus->name);\n    if (metal_bus_find(bus->name, NULL) == 0) {\n        probe_log_msg(\"return -EEXIST (bus already exists)\", bus, (const void *)bus->name);\n        return -EEXIST;\n    }\n\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    probe_log_msg(\"return 0 (registered)\", bus, (const void *)bus->name);\n    return 0;\n}\n"
}