{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(bus->name, name) without validating either pointer. If metal_bus_find is invoked with name == NULL (for example, metal_bus_find(NULL, NULL)) then strcmp will be passed a NULL pointer and may access out-of-bounds memory. Similarly, if a bus on the list has bus->name == NULL, the strcmp call will dereference it. Although metal_bus_register validates bus->name before calling metal_bus_find in that call path, metal_bus_find itself lacks the necessary null/termination checks, so the use of strcmp can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/31.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    probe_log(\"ENTER: metal_bus_register(bus=%p)\", (void *)bus);\n\n    if (!bus) {\n        probe_log(\"EXIT: bus == NULL -> return -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"bus pointer OK: bus=%p, bus->name_ptr=%p\", (void *)bus, (void *)bus->name);\n\n    if (!bus->name) {\n        probe_log(\"EXIT: bus->name == NULL -> return -EINVAL\");\n        return -EINVAL;\n    }\n\n    /* Safe to call strlen now because bus->name was validated */\n    size_t name_len = strlen(bus->name);\n    probe_log(\"bus->name (ptr=%p) length=%zu\", (void *)bus->name, name_len);\n\n    if (name_len == 0) {\n        probe_log(\"EXIT: bus->name is empty string -> return -EINVAL\");\n        return -EINVAL;\n    }\n\n    probe_log(\"Calling metal_bus_find(name='%s', NULL)\", bus->name);\n    int found = metal_bus_find(bus->name, NULL);\n    probe_log(\"metal_bus_find returned %d\", found);\n\n    if (found == 0) {\n        probe_log(\"EXIT: bus already exists -> return -EEXIST\");\n        return -EEXIST;\n    }\n\n    probe_log(\"Initializing and adding bus (name='%s') to list\", bus->name);\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    probe_log(\"EXIT: registered %s bus -> return 0\", bus->name);\n    return 0;\n}\n"
}