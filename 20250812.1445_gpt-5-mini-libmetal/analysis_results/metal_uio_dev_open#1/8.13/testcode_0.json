{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct linux_driver *ldrv' is not const-qualified even though the function only reads from it (accesses ldrv->drv_name and ldrv->sdrv) and does not modify the driver object. According to MISRA C 2023 Rule 8.13, this pointer should be declared as 'const struct linux_driver *ldrv' to indicate non-modification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n    char *instance, path[SYSFS_PATH_MAX];\n    struct linux_driver *ldrv = ldev->ldrv;\n    unsigned long *phys, offset = 0, size = 0;\n    struct metal_io_region *io;\n    struct dlist *dlist;\n    int result, i;\n    void *virt;\n    int irq_info;\n\n    /* Probe: entering function and initial pointers */\n    probe_log(\"ENTER: metal_uio_dev_open lbus=%p ldev=%p ldrv=%p\", (void *)lbus, (void *)ldev, (void *)ldrv);\n    if (ldrv) {\n        /* Guard access to driver fields to avoid crashes */\n        probe_log(\"LDVR INFO: drv_name=%s sdrv=%p\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\", (void *)ldrv->sdrv);\n    } else {\n        probe_log(\"LDVR INFO: ldrv is NULL\");\n    }\n\n    ldev->fd = -1;\n    ldev->device.irq_info = (void *)-1;\n\n    ldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n    if (!ldev->sdev) {\n        probe_log(\"ERROR: sysfs_open_device failed for %s:%s\", lbus->bus_name, ldev->dev_name);\n        metal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n                  lbus->bus_name, ldev->dev_name);\n        return -ENODEV;\n    }\n    probe_log(\"SYSFS OPENED: sdev=%p path=%s\", (void *)ldev->sdev,\n              ldev->sdev->path ? ldev->sdev->path : \"(null)\");\n\n    metal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n              lbus->bus_name, ldev->dev_name);\n\n    probe_log(\"CALL: metal_uio_dev_bind with ldrv=%p\", (void *)ldrv);\n    result = metal_uio_dev_bind(ldev, ldrv);\n    probe_log(\"RETURN: metal_uio_dev_bind result=%d\", result);\n    if (result)\n        return result;\n\n    result = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n    if (result >= (int)sizeof(path))\n        return -EOVERFLOW;\n    dlist = sysfs_open_directory_list(path);\n    if (!dlist) {\n        probe_log(\"ERROR: sysfs_open_directory_list failed for path=%s\", path);\n        metal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n                  path);\n        return -errno;\n    }\n\n    dlist_for_each_data(dlist, instance, char) {\n        result = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n                          \"%s/%s\", path, instance);\n        if (result >= (int)sizeof(ldev->cls_path))\n            return -EOVERFLOW;\n        result = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n                          \"/dev/%s\", instance);\n        if (result >= (int)sizeof(ldev->dev_path))\n            return -EOVERFLOW;\n        probe_log(\"FOUND INSTANCE: instance=%s cls_path=%s dev_path=%s\",\n                  instance ? instance : \"(null)\", ldev->cls_path, ldev->dev_path);\n        break;\n    }\n    sysfs_close_list(dlist);\n\n    if (sysfs_path_is_dir(ldev->cls_path) != 0) {\n        probe_log(\"ERROR: invalid device class path %s\", ldev->cls_path);\n        metal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n                  ldev->cls_path);\n        return -ENODEV;\n    }\n\n    i = 0;\n    do {\n        if (!access(ldev->dev_path, F_OK))\n            break;\n        usleep(10);\n        i++;\n    } while (i < 1000);\n    probe_log(\"WAIT DEVICE: waited iterations=%d\", i);\n    if (i >= 1000) {\n        probe_log(\"ERROR: failed to open file %s, timeout.\", ldev->dev_path);\n        metal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n                  ldev->dev_path);\n        return -ENODEV;\n    }\n    result = metal_open(ldev->dev_path, 0);\n    if (result < 0) {\n        probe_log(\"ERROR: metal_open failed for %s (err=%d)\", ldev->dev_path, result);\n        metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n                  ldev->dev_path, strerror(-result));\n        return result;\n    }\n    ldev->fd = result;\n    probe_log(\"DEVICE OPENED: fd=%d\", ldev->fd);\n\n    metal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n              lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n    for (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n        phys = &ldev->region_phys[ldev->device.num_regions];\n        probe_log(\"MAP LOOP START: i=%d num_regions=%d phys_addr_ptr=%p\", i, ldev->device.num_regions, (void *)phys);\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n        probe_log(\"MAP ATTR: i=%d offset=%lu result=%d\", i, offset, result);\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n        probe_log(\"MAP ATTR: i=%d phys=%lu result=%d\", i, (unsigned long)*phys, result);\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"size\", &size));\n        probe_log(\"MAP ATTR: i=%d size=%lu result=%d\", i, size, result);\n        result = (result ? result :\n                 metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n        probe_log(\"MAP CALL: i=%d virt=%p result=%d\", i, virt, result);\n        if (!result) {\n            io = &ldev->device.regions[ldev->device.num_regions];\n            metal_io_init(io, virt, phys, size, -1, 0, NULL);\n            probe_log(\"MAP SUCCESS: region_index=%d phys=%lu offset=%lu size=%lu virt=%p\",\n                      ldev->device.num_regions, (unsigned long)*phys, offset, size, virt);\n            ldev->device.num_regions++;\n        }\n    }\n    probe_log(\"MAP LOOP END: result=%d num_regions=%d\", result, ldev->device.num_regions);\n\n    irq_info = 1;\n    probe_log(\"IRQ: writing irq_info=%d to fd=%d\", irq_info, ldev->fd);\n    if (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n        probe_log(\"IRQ: write failed or returned <=0 - no IRQ for device %s\", ldev->dev_name);\n        metal_log(METAL_LOG_INFO,\n                  \"%s: No IRQ for device %s.\\n\",\n                  __func__, ldev->dev_name);\n        ldev->device.irq_num =  0;\n        ldev->device.irq_info = (void *)-1;\n        probe_log(\"IRQ STATE: irq_num=%d irq_info=%p\", ldev->device.irq_num, ldev->device.irq_info);\n    } else {\n        ldev->device.irq_num =  1;\n        ldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n        probe_log(\"IRQ: write succeeded, registering irq fd=%d\", ldev->fd);\n        metal_linux_irq_register_dev(&ldev->device, ldev->fd);\n        probe_log(\"IRQ STATE: irq_num=%d irq_info=%p\", ldev->device.irq_num, ldev->device.irq_info);\n    }\n\n    probe_log(\"EXIT: metal_uio_dev_open returning 0 ldev=%p ldrv=%p (drv_name=%s)\",\n              (void *)ldev, (void *)ldrv, ldrv && ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    return 0;\n}\n"
}