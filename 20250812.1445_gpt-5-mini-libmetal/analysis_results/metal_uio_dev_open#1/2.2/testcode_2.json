{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf sysfs_open_attribute() returns NULL, the conditional is true and sysfs_close_attribute(attr) is executed with attr == NULL. If sysfs_close_attribute() is a no-op when given NULL (a common safe pattern), that call has no effect and could be removed without changing program behaviour \u2014 i.e. it is dead code. Thus the fragment violates MISRA C 2023 Rule 2.2. A safe fix is to call sysfs_close_attribute(attr) only when attr != NULL (or ensure the close function must be called unconditionally by design).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/10.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n    char *instance, path[SYSFS_PATH_MAX];\n    struct linux_driver *ldrv = ldev->ldrv;\n    unsigned long *phys, offset = 0, size = 0;\n    struct metal_io_region *io;\n    struct dlist *dlist;\n    int result, i;\n    void *virt;\n    int irq_info;\n\n\n    probe_log(\"metal_uio_dev_open: entry bus='%s' dev='%s' ldrv=%p ldev=%p\",\n              lbus ? lbus->bus_name : \"(null)\", ldev ? ldev->dev_name : \"(null)\", (void *)ldrv, (void *)ldev);\n\n    ldev->fd = -1;\n    ldev->device.irq_info = (void *)-1;\n\n    ldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n    probe_log(\"sysfs_open_device returned sdev=%p\", (void *)ldev->sdev);\n    if (!ldev->sdev) {\n        metal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n                  lbus->bus_name, ldev->dev_name);\n        probe_log(\"metal_uio_dev_open: sysfs device not found, returning -ENODEV\");\n        return -ENODEV;\n    }\n    probe_log(\"opened sysfs device path='%s'\", ldev->sdev->path ?: \"(null)\");\n    metal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n              lbus->bus_name, ldev->dev_name);\n\n    result = metal_uio_dev_bind(ldev, ldrv);\n    probe_log(\"metal_uio_dev_bind returned %d\", result);\n    if (result) {\n        probe_log(\"metal_uio_dev_open: bind failed, returning %d\", result);\n        return result;\n    }\n\n    result = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n    probe_log(\"snprintf path -> '%s' (result=%d)\", path, result);\n    if (result >= (int)sizeof(path)) {\n        probe_log(\"metal_uio_dev_open: path overflow, returning -EOVERFLOW\");\n        return -EOVERFLOW;\n    }\n    dlist = sysfs_open_directory_list(path);\n    probe_log(\"sysfs_open_directory_list('%s') returned %p\", path, (void *)dlist);\n    if (!dlist) {\n        metal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n                  path);\n        probe_log(\"metal_uio_dev_open: failed to open directory list, errno=%d\", errno);\n        return -errno;\n    }\n\n    dlist_for_each_data(dlist, instance, char) {\n        result = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n                          \"%s/%s\", path, instance);\n        probe_log(\"found instance '%s', cls_path -> '%s' (result=%d)\", instance, ldev->cls_path, result);\n        if (result >= (int)sizeof(ldev->cls_path)) {\n            probe_log(\"metal_uio_dev_open: cls_path overflow, returning -EOVERFLOW\");\n            return -EOVERFLOW;\n        }\n        result = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n                          \"/dev/%s\", instance);\n        probe_log(\"dev_path -> '%s' (result=%d)\", ldev->dev_path, result);\n        if (result >= (int)sizeof(ldev->dev_path)) {\n            probe_log(\"metal_uio_dev_open: dev_path overflow, returning -EOVERFLOW\");\n            return -EOVERFLOW;\n        }\n        break;\n    }\n    sysfs_close_list(dlist);\n    probe_log(\"sysfs_close_list called\");\n\n    if (sysfs_path_is_dir(ldev->cls_path) != 0) {\n        metal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n                  ldev->cls_path);\n        probe_log(\"metal_uio_dev_open: cls_path '%s' is not a dir, returning -ENODEV\", ldev->cls_path);\n        return -ENODEV;\n    }\n\n    i = 0;\n    do {\n        if (!access(ldev->dev_path, F_OK))\n            break;\n        usleep(10);\n        i++;\n        if ((i & 0x7F) == 0) /* log periodically to avoid excessive output */\n            probe_log(\"waiting for device file '%s', attempt %d\", ldev->dev_path, i);\n    } while (i < 1000);\n    if (i >= 1000) {\n        metal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n                  ldev->dev_path);\n        probe_log(\"metal_uio_dev_open: timeout waiting for dev_path '%s', returning -ENODEV\", ldev->dev_path);\n        return -ENODEV;\n    }\n    result = metal_open(ldev->dev_path, 0);\n    probe_log(\"metal_open('%s') returned %d\", ldev->dev_path, result);\n    if (result < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n                  ldev->dev_path, strerror(-result));\n        probe_log(\"metal_uio_dev_open: metal_open failed, returning %d\", result);\n        return result;\n    }\n    ldev->fd = result;\n\n    probe_log(\"device fd set to %d\", ldev->fd);\n    metal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n              lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n    for (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n        probe_log(\"region loop i=%d num_regions=%d\", i, ldev->device.num_regions);\n        phys = &ldev->region_phys[ldev->device.num_regions];\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n        probe_log(\"read_map_attr offset (i=%d) -> result=%d offset=%lu\", i, result, offset);\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n        probe_log(\"read_map_attr addr (i=%d) -> result=%d phys=%lu\", i, result, (unsigned long)*phys);\n        result = (result ? result :\n                 metal_uio_read_map_attr(ldev, i, \"size\", &size));\n        probe_log(\"read_map_attr size (i=%d) -> result=%d size=%lu\", i, result, (unsigned long)size);\n        result = (result ? result :\n                 metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n        probe_log(\"metal_map (i=%d) -> result=%d virt=%p\", i, result, virt);\n        if (!result) {\n            io = &ldev->device.regions[ldev->device.num_regions];\n            metal_io_init(io, virt, phys, size, -1, 0, NULL);\n            probe_log(\"mapped region %d: virt=%p phys=%lu size=%lu\", ldev->device.num_regions, virt, (unsigned long)*phys, (unsigned long)size);\n            ldev->device.num_regions++;\n        }\n    }\n\n    irq_info = 1;\n    probe_log(\"about to write irq_info=%d to fd=%d\", irq_info, ldev->fd);\n    if (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n        metal_log(METAL_LOG_INFO,\n                  \"%s: No IRQ for device %s.\\n\",\n                  __func__, ldev->dev_name);\n        ldev->device.irq_num =  0;\n        ldev->device.irq_info = (void *)-1;\n        probe_log(\"no IRQ: write returned <=0, irq_num=0 irq_info=%p\", ldev->device.irq_info);\n    } else {\n        ldev->device.irq_num =  1;\n        ldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n        probe_log(\"IRQ available: irq_num=1 irq_info=%p\", ldev->device.irq_info);\n        metal_linux_irq_register_dev(&ldev->device, ldev->fd);\n        probe_log(\"metal_linux_irq_register_dev called for fd=%d\", ldev->fd);\n    }\n\n    probe_log(\"metal_uio_dev_open: exit success\");\n    return 0;\n}\n"
}