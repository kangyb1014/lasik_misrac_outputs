{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses 'result' as the loop control flag in the second clause (!result && i < ...), but 'result' has type int (not a Boolean type) and is modified inside the loop body by the fragment result = (result ? result : metal_map(...)); MISRA C 2023 Rule 14.2 requires the optional loop control flag to be a single identifier denoting an object with Boolean type and forbids using other objects that are modified in the loop body in the second clause. Because 'result' is not a Boolean-typed object and is modified in the body, this violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/12.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <errno.h>\n#include <string.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/12.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n    char *instance, path[SYSFS_PATH_MAX];\n    struct linux_driver *ldrv = ldev->ldrv;\n    unsigned long *phys, offset = 0, size = 0;\n    struct metal_io_region *io;\n    struct dlist *dlist;\n    int result, i;\n    void *virt;\n    int irq_info;\n    /* temporary variable to capture individual call results for logging */\n    int tmp_r;\n\n    probe_log(\"ENTER: metal_uio_dev_open bus=%s device=%s\", lbus->bus_name, ldev->dev_name);\n\n    ldev->fd = -1;\n    ldev->device.irq_info = (void *)-1;\n\n    ldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n    probe_log(\"sysfs_open_device returned sdev=%p\", (void *)ldev->sdev);\n    if (!ldev->sdev) {\n        metal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n              lbus->bus_name, ldev->dev_name);\n        probe_log(\"EXIT: sysfs device not found\");\n        return -ENODEV;\n    }\n    metal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n          lbus->bus_name, ldev->dev_name);\n\n    result = metal_uio_dev_bind(ldev, ldrv);\n    probe_log(\"metal_uio_dev_bind returned %d\", result);\n    if (result)\n        return result;\n\n    result = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n    probe_log(\"snprintf path result=%d path=%s\", result, path);\n    if (result >= (int)sizeof(path))\n        return -EOVERFLOW;\n    dlist = sysfs_open_directory_list(path);\n    probe_log(\"sysfs_open_directory_list returned dlist=%p for path=%s\", (void *)dlist, path);\n    if (!dlist) {\n        metal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n              path);\n        probe_log(\"EXIT: failed to scan class path %s\", path);\n        return -errno;\n    }\n\n    dlist_for_each_data(dlist, instance, char) {\n        result = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n                  \"%s/%s\", path, instance);\n        probe_log(\"found instance=%s cls_path=%s snprintf_res=%d\", instance, ldev->cls_path, result);\n        if (result >= (int)sizeof(ldev->cls_path))\n            return -EOVERFLOW;\n        result = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n                  \"/dev/%s\", instance);\n        probe_log(\"dev_path=%s snprintf_res=%d\", ldev->dev_path, result);\n        if (result >= (int)sizeof(ldev->dev_path))\n            return -EOVERFLOW;\n        break;\n    }\n    sysfs_close_list(dlist);\n\n    if (sysfs_path_is_dir(ldev->cls_path) != 0) {\n        metal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n              ldev->cls_path);\n        probe_log(\"EXIT: invalid device class path %s\", ldev->cls_path);\n        return -ENODEV;\n    }\n\n    i = 0;\n    do {\n        if (!access(ldev->dev_path, F_OK))\n            break;\n        usleep(10);\n        i++;\n    } while (i < 1000);\n    probe_log(\"device path wait finished i=%d dev_path=%s\", i, ldev->dev_path);\n    if (i >= 1000) {\n        metal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n              ldev->dev_path);\n        probe_log(\"EXIT: timeout opening device path %s\", ldev->dev_path);\n        return -ENODEV;\n    }\n    result = metal_open(ldev->dev_path, 0);\n    probe_log(\"metal_open returned %d\", result);\n    if (result < 0) {\n        metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n              ldev->dev_path, strerror(-result));\n        probe_log(\"EXIT: failed to open device %s err=%d\", ldev->dev_path, result);\n        return result;\n    }\n    ldev->fd = result;\n\n    metal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n          lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n    probe_log(\"ABOUT TO ENTER for-loop: initial result=%d i=%d METAL_MAX_DEVICE_REGIONS=%d num_regions=%d\", result, 0, METAL_MAX_DEVICE_REGIONS, ldev->device.num_regions);\n\n    for (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n        probe_log(\"LOOP ITER START: i=%d result=%d num_regions=%d\", i, result, ldev->device.num_regions);\n\n        phys = &ldev->region_phys[ldev->device.num_regions];\n\n        /* Read offset */\n        tmp_r = metal_uio_read_map_attr(ldev, i, \"offset\", &offset);\n        probe_log(\"metal_uio_read_map_attr(offset) returned %d offset=%lu\", tmp_r, offset);\n        result = (result ? result : tmp_r);\n        probe_log(\"result after offset check=%d\", result);\n\n        /* Read addr */\n        tmp_r = metal_uio_read_map_attr(ldev, i, \"addr\", phys);\n        probe_log(\"metal_uio_read_map_attr(addr) returned %d addr=*phys=%lu phys_ptr=%p\", tmp_r, (unsigned long)(*phys), (void *)phys);\n        result = (result ? result : tmp_r);\n        probe_log(\"result after addr check=%d\", result);\n\n        /* Read size */\n        tmp_r = metal_uio_read_map_attr(ldev, i, \"size\", &size);\n        probe_log(\"metal_uio_read_map_attr(size) returned %d size=%lu\", tmp_r, size);\n        result = (result ? result : tmp_r);\n        probe_log(\"result after size check=%d\", result);\n\n        /* Map region */\n        tmp_r = metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt);\n        probe_log(\"metal_map(fd=%d, off=%lu, size=%lu) returned %d virt=%p\", ldev->fd, (unsigned long)(i * getpagesize()), size, tmp_r, virt);\n        result = (result ? result : tmp_r);\n        probe_log(\"result after map check=%d\", result);\n\n        if (!result) {\n            io = &ldev->device.regions[ldev->device.num_regions];\n            metal_io_init(io, virt, phys, size, -1, 0, NULL);\n            ldev->device.num_regions++;\n            probe_log(\"mapped region added: index=%d phys=%lu size=%lu virt=%p new_num_regions=%d\", ldev->device.num_regions - 1, (unsigned long)(*phys), size, virt, ldev->device.num_regions);\n        } else {\n            probe_log(\"mapping failed in this iteration i=%d result=%d\", i, result);\n        }\n    }\n\n    probe_log(\"FOR-LOOP EXIT: final result=%d i=%d num_regions=%d\", result, i, ldev->device.num_regions);\n\n    irq_info = 1;\n    if (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n        metal_log(METAL_LOG_INFO,\n              \"%s: No IRQ for device %s.\\n\",\n              __func__, ldev->dev_name);\n        ldev->device.irq_num =  0;\n        ldev->device.irq_info = (void *)-1;\n        probe_log(\"No IRQ for device %s\", ldev->dev_name);\n    } else {\n        ldev->device.irq_num =  1;\n        ldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n        metal_linux_irq_register_dev(&ldev->device, ldev->fd);\n        probe_log(\"IRQ registered fd=%d device=%s irq_num=%d irq_info=%p\", ldev->fd, ldev->dev_name, ldev->device.irq_num, ldev->device.irq_info);\n    }\n\n    probe_log(\"EXIT: metal_uio_dev_open returning 0 for device=%s\", ldev->dev_name);\n    return 0;\n}\n"
}