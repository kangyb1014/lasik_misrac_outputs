{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(dev->name, dev_name) is made with no checks that either pointer is non-NULL and points to a NUL-terminated string. This can read past object bounds. Example violation: dev->name was malloc(4); memcpy(dev->name, \"dev1\", 4); (no terminating '\\0') or dev_name points to a non-NUL-terminated/invalid buffer \u2014 strcmp will continue reading until it finds a '\\0', causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: write informative logs about pointers and control flow to /tmp/logs/71.txt */\nstatic void metal_log_probe_before_cmp(const struct metal_device *dev, const char *dev_name)\n{\n    FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[probe] metal_generic_dev_open: about to compare device names\\n\");\n    fprintf(f, \"[probe]   dev pointer: %p\\n\", (const void *)dev);\n    if (dev) {\n        fprintf(f, \"[probe]   dev->name pointer: %p\\n\", (const void *)dev->name);\n    } else {\n        fprintf(f, \"[probe]   dev is NULL\\n\");\n    }\n    fprintf(f, \"[probe]   dev_name param pointer: %p\\n\", (const void *)dev_name);\n    fprintf(f, \"[probe]   Note: strcmp will be invoked without prior validation of pointers or NUL-termination\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void metal_log_probe_after_cmp(const struct metal_device *dev, const char *dev_name, int cmp_res)\n{\n    FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[probe] metal_generic_dev_open: strcmp(dev->name, dev_name) returned %d\\n\", cmp_res);\n    fprintf(f, \"[probe]   dev pointer: %p, dev->name pointer: %p, dev_name pointer: %p\\n\",\n            (const void *)dev,\n            (const void *)(dev ? dev->name : NULL),\n            (const void *)dev_name);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n               struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    (void)bus;\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n\n        /* Insert probe: record pointers and the fact that strcmp will be called without validation. */\n        metal_log_probe_before_cmp(dev, dev_name);\n\n        /* Original comparison left intact: this may trigger the reported violation in some scenarios. */\n        if (strcmp(dev->name, dev_name) == 0) {\n            int cmp_res = 0; /* already known to be equal */\n            metal_log_probe_after_cmp(dev, dev_name, cmp_res);\n\n            *device = dev;\n            return metal_generic_dev_sys_open(dev);\n        } else {\n            /* Log non-match result for additional evidence */\n            int cmp_res = 1; /* non-zero indicates non-equal; exact value not re-computed to avoid extra side effects */\n            metal_log_probe_after_cmp(dev, dev_name, cmp_res);\n        }\n    }\n\n    return -ENODEV;\n}\n"
}