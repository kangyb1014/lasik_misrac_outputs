{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns the address of an internal io region (shmem->io) to a non-const pointer (struct metal_io_region **result). If callers are not supposed to modify the returned io region (which is likely because it is an internal shared object), the result parameter should be a pointer-to-pointer-to-const (e.g. const struct metal_io_region ** or struct metal_io_region const **). By returning a non-const pointer to an internal object, the code fails to const-qualify the pointed-to type and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append a log line describing current state to /tmp/logs/83.txt */\nstatic void metal_shmem_probe_log(const char *stage, const char *search_name, size_t requested_size,\n                                  struct metal_generic_shmem *shmem, struct metal_list *node, int cmp)\n{\n    FILE *fp = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!fp)\n        return;\n\n    /* Basic info always useful */\n    fprintf(fp, \"[%s] search_name=%s requested_size=%zu node=%p shmem=%p cmp=%d\",\n            stage, (search_name ? search_name : \"(null)\"), requested_size,\n            (void *)node, (void *)shmem, cmp);\n\n    if (shmem) {\n        const char *shname = shmem->name ? shmem->name : \"(null)\";\n        fprintf(fp, \" shmem_name=%s io_addr=%p\", shname, (void *)&shmem->io);\n        /* Record io region size if available via metal_io_region_size */\n        /* Call metal_io_region_size only when shmem is present to avoid side effects */\n        size_t io_sz = metal_io_region_size(&shmem->io);\n        fprintf(fp, \" io_size=%zu\", io_sz);\n    }\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    /* Log entry into the function */\n    metal_shmem_probe_log(\"enter\", name, size, (struct metal_generic_shmem *)NULL, (struct metal_list *)NULL, 0);\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        /* compute strcmp once, log iteration state */\n        int cmp = (shmem && shmem->name && name) ? strcmp(shmem->name, name) : -1;\n        metal_shmem_probe_log(\"iter\", name, size, shmem, node, cmp);\n\n        if (cmp != 0)\n            continue;\n\n        /* Check size against io region size and log details */\n        size_t io_sz = metal_io_region_size(&shmem->io);\n        if (size <= io_sz) {\n            metal_shmem_probe_log(\"match_ok\", name, size, shmem, node, cmp);\n            *result = &shmem->io;\n            /* Log the assignment event for evidence */\n            metal_shmem_probe_log(\"assigned\", name, size, shmem, node, cmp);\n            return 0;\n        }\n\n        /* Found by name but size too small */\n        metal_shmem_probe_log(\"match_size_small\", name, size, shmem, node, cmp);\n    }\n\n    /* Not found: log and return */\n    metal_shmem_probe_log(\"not_found\", name, size, (struct metal_generic_shmem *)NULL, (struct metal_list *)NULL, 0);\n    return -ENOENT;\n}\n"
}