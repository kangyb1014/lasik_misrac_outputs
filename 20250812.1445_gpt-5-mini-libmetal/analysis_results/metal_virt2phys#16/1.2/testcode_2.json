{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe metal_log macro (shown in additional code) expands to a GCC statement-expression using ({ ... }) and also uses the GNU extension '##__VA_ARGS__' to swallow a trailing comma. Both are compiler-specific language extensions (GCC) and therefore the use of metal_log in the shown line violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_virt2phys code that contains useful probe functions that print useful logs to a file \"/tmp/logs/128.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_virt2phys as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_virt2phys:\n```c\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n\toff_t offset;\n\tuint64_t entry;\n\tint error;\n\n\tif (_metal.pagemap_fd < 0)\n\t\treturn -EINVAL;\n\n\toffset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\terror = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n\tif (error < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n\t\t\t  (unsigned long long)offset, strerror(errno));\n\t\treturn -errno;\n\t}\n\n\t/* Check page present and not swapped. */\n\tif ((entry >> 62) != 2) {\n\t\tmetal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n\t\t\t  (unsigned long long)offset, (unsigned long long)entry);\n\t\treturn -ENOENT;\n\t}\n\n\t*phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_virt2phys code.\n",
  "test_code": "static void probe_log_enter(void *addr)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: enter addr=%p\\n\", addr);\n    fclose(f);\n}\n\nstatic void probe_log_fd_invalid(int fd)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: invalid pagemap_fd=%d\\n\", fd);\n    fclose(f);\n}\n\nstatic void probe_log_pread_attempt(off_t offset, size_t size)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: pread attempt offset=0x%llx size=%zu\\n\",\n            (unsigned long long)offset, size);\n    fclose(f);\n}\n\nstatic void probe_log_pread_error(off_t offset, int read_ret, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: pread failed offset=0x%llx read_ret=%d errno=%d\\n\",\n            (unsigned long long)offset, read_ret, err);\n    fclose(f);\n}\n\nstatic void probe_log_pagemap_not_present(off_t offset, uint64_t entry)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: pagemap page not present offset=0x%llx entry=0x%llx\\n\",\n            (unsigned long long)offset, (unsigned long long)entry);\n    fclose(f);\n}\n\nstatic void probe_log_success(off_t offset, uint64_t entry, unsigned long phys)\n{\n    FILE *f = fopen(\"/tmp/logs/128.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_virt2phys: success offset=0x%llx entry=0x%llx phys=0x%lx\\n\",\n            (unsigned long long)offset, (unsigned long long)entry, phys);\n    fclose(f);\n}\n\nstatic int metal_virt2phys(void *addr, unsigned long *phys)\n{\n    off_t offset;\n    uint64_t entry;\n    int error;\n\n    probe_log_enter(addr);\n\n    if (_metal.pagemap_fd < 0) {\n        probe_log_fd_invalid(_metal.pagemap_fd);\n        return -EINVAL;\n    }\n\n    offset = ((uintptr_t)addr >> _metal.page_shift) * sizeof(entry);\n\n    probe_log_pread_attempt(offset, sizeof(entry));\n    error = pread(_metal.pagemap_fd, &entry, sizeof(entry), offset);\n    if (error < 0) {\n        probe_log_pread_error(offset, error, errno);\n        metal_log(METAL_LOG_ERROR, \"failed pagemap pread (offset %llx) - %s\\n\",\n                  (unsigned long long)offset, strerror(errno));\n        return -errno;\n    }\n\n    /* Check page present and not swapped. */\n    if ((entry >> 62) != 2) {\n        probe_log_pagemap_not_present(offset, entry);\n        metal_log(METAL_LOG_ERROR, \"pagemap page not present, %llx -> %llx\\n\",\n                  (unsigned long long)offset, (unsigned long long)entry);\n        return -ENOENT;\n    }\n\n    *phys = (entry & ((1ULL << 54) - 1)) << _metal.page_shift;\n    probe_log_success(offset, entry, *phys);\n    return 0;\n}\n"
}