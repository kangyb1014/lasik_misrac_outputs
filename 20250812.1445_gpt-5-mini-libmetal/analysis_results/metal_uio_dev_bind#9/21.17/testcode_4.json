{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ldrv->drv_name is NULL or the pointed buffer is not NUL-terminated (or shorter than expected), calling strlen(ldrv->drv_name) will scan past the object boundary and read out-of-bounds. The code does not validate that ldrv->drv_name is non-NULL and NUL-terminated before calling strlen, so Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/79.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "static void probe_log(const char *stage, struct linux_device *ldev, struct linux_driver *ldrv)\n{\n    FILE *f = fopen(\"/tmp/logs/79.txt\", \"a\");\n    if (!f)\n        return;\n\n    const void *ldev_ptr = (const void *)ldev;\n    const void *ldev_dev_name = (ldev && ldev->dev_name) ? (const void *)ldev->dev_name : NULL;\n    const void *ldev_sdev = (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL;\n    const void *ldev_sdev_driver = (ldev && ldev->sdev && ldev->sdev->driver_name) ? (const void *)ldev->sdev->driver_name : NULL;\n\n    const void *ldrv_ptr = (const void *)ldrv;\n    const void *ldrv_drv_name = (ldrv && ldrv->drv_name) ? (const void *)ldrv->drv_name : NULL;\n    const void *ldrv_sdrv = (ldrv && ldrv->sdrv) ? (const void *)ldrv->sdrv : NULL;\n\n    fprintf(f, \"[probe] stage=%s\\n\", stage);\n    fprintf(f, \"[probe] ldev=%p ldev->dev_name=%p ldev->sdev=%p ldev->sdev->driver_name=%p\\n\",\n            ldev_ptr, ldev_dev_name, ldev_sdev, ldev_sdev_driver);\n    fprintf(f, \"[probe] ldrv=%p ldrv->drv_name=%p ldrv->sdrv=%p\\n\",\n            ldrv_ptr, ldrv_drv_name, ldrv_sdrv);\n\n    if (ldrv == NULL)\n        fprintf(f, \"[probe] NOTE: ldrv is NULL\\n\");\n    else if (ldrv->drv_name == NULL)\n        fprintf(f, \"[probe] WARNING: ldrv->drv_name is NULL (this will cause strlen/strcmp to dereference a NULL pointer)\\n\");\n\n    if (ldev == NULL)\n        fprintf(f, \"[probe] NOTE: ldev is NULL\\n\");\n    else if (ldev->sdev == NULL)\n        fprintf(f, \"[probe] NOTE: ldev->sdev is NULL\\n\");\n    else if (ldev->sdev->driver_name == NULL)\n        fprintf(f, \"[probe] NOTE: ldev->sdev->driver_name is NULL\\n\");\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry state */\n    probe_log(\"entry\", ldev, ldrv);\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n        return 0;\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        probe_log(\"in_use_by_other_driver\", ldev, ldrv);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"no_override_attr\", ldev, ldrv);\n        return -errno;\n    }\n\n    /* Log just before writing override. This is where strlen(ldrv->drv_name) is used. */\n    probe_log(\"before_sysfs_write_override\", ldev, ldrv);\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"after_sysfs_write_override_failed\", ldev, ldrv);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"no_driver_bind_attr\", ldev, ldrv);\n        return -ENOTSUP;\n    }\n\n    /* Log just before writing the bind attribute */\n    probe_log(\"before_sysfs_write_bind\", ldev, ldrv);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"after_sysfs_write_bind_failed\", ldev, ldrv);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    probe_log(\"success\", ldev, ldrv);\n\n    return 0;\n}\n"
}