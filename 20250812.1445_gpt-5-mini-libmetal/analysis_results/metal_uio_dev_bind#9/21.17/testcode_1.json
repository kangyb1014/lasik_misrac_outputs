{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(ldrv->drv_name) can read beyond the bounds of the object if ldrv->drv_name is NULL or is not NUL-terminated. For example, if drv_name is a fixed-size buffer filled with strncpy without ensuring a trailing '\\0' (e.g. char drv_name[8]; strncpy(drv_name, src, sizeof(drv_name));), strlen will scan past the buffer and invoke undefined behavior. Because the fragment provides no guarantee that ldrv->drv_name is non-NULL and NUL-terminated, Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/79.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe logger that appends diagnostic messages to /tmp/logs/79.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure the directory exists; ignore errors if it already does */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/79.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to safely capture a short preview of a possibly non-NULL string.\n * Does not dereference a NULL pointer.\n */\nstatic void probe_log_str_preview(const char *label, const char *s)\n{\n    if (!s) {\n        probe_log(\"%s = NULL\", label);\n        return;\n    }\n\n    /* Limit preview to a reasonable maximum to avoid huge logs */\n    size_t max_preview = 128;\n    size_t len = strnlen(s, max_preview);\n\n    if (len == max_preview) {\n        /* No NUL found within preview range */\n        probe_log(\"%s = '%.*s' (no NUL within %zu bytes) [ptr=%p]\",\n                  label, (int)max_preview, s, max_preview, (const void *)s);\n    } else {\n        probe_log(\"%s = '%.*s' [len=%zu] [ptr=%p]\",\n                  label, (int)len, s, len, (const void *)s);\n    }\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Entry probe: log pointers and short previews where safe */\n    probe_log(\"ENTER metal_uio_dev_bind: ldev=%p, ldrv=%p\", (void *)ldev, (void *)ldrv);\n\n    if (ldev) {\n        probe_log(\"ldev->dev_name ptr=%p\", (void *)ldev->dev_name);\n        probe_log_str_preview(\"ldev->dev_name\", ldev->dev_name);\n        if (ldev->sdev) {\n            probe_log(\"ldev->sdev ptr=%p\", (void *)ldev->sdev);\n            probe_log_str_preview(\"ldev->sdev->driver_name\", ldev->sdev->driver_name);\n        } else {\n            probe_log(\"ldev->sdev = NULL\");\n        }\n    } else {\n        probe_log(\"ldev = NULL\");\n    }\n\n    if (ldrv) {\n        probe_log(\"ldrv ptr=%p\", (void *)ldrv);\n        probe_log(\"ldrv->drv_name ptr=%p\", (void *)ldrv->drv_name);\n        probe_log_str_preview(\"ldrv->drv_name\", ldrv->drv_name);\n        probe_log(\"ldrv->sdrv ptr=%p\", (void *)ldrv->sdrv);\n    } else {\n        probe_log(\"ldrv = NULL\");\n    }\n\n    probe_log(\"About to compare driver names using strcmp\");\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"strcmp returned 0: device %s already bound to driver %s\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        return 0;\n    }\n\n    probe_log(\"First strcmp != 0, checking for SYSFS_UNKNOWN\");\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"device %s in use by driver %s\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\",\n                  ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        probe_log(\"RETURN -EBUSY\");\n        return -EBUSY;\n    }\n\n    probe_log(\"Attempting to get device attribute 'driver_override'\");\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"sysfs_get_device_attr returned attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"device %s has no override (attr == NULL)\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"RETURN -errno (errno=%d)\", errno);\n        return -errno;\n    }\n\n    /* Log details about ldrv->drv_name safely before the write */\n    probe_log(\"Preparing to write driver override using sysfs_write_attribute\");\n    probe_log_str_preview(\"drv_name (preview)\", ldrv->drv_name);\n    if (ldrv && ldrv->drv_name)\n        probe_log(\"Note: actual code will call strlen(ldrv->drv_name) which may scan beyond bounds if not NUL-terminated\");\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"sysfs_write_attribute returned %d\", result);\n    if (result) {\n        probe_log(\"failed to set override on %s\", ldev->dev_name ? ldev->dev_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"RETURN -errno (errno=%d)\", errno);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"override attribute set: ldev->override=%p\", (void *)ldev->override);\n\n    probe_log(\"Attempting to get driver attribute 'bind'\");\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"sysfs_get_driver_attr returned attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"driver %s has no bind (attr == NULL)\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"RETURN -ENOTSUP\");\n        return -ENOTSUP;\n    }\n\n    probe_log(\"Preparing to write bind using sysfs_write_attribute\");\n    probe_log_str_preview(\"ldev->dev_name (preview)\", ldev->dev_name);\n    if (ldev && ldev->dev_name)\n        probe_log(\"Note: actual code will call strlen(ldev->dev_name) for write length\");\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"sysfs_write_attribute returned %d\", result);\n    if (result) {\n        probe_log(\"failed to bind %s to %s\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"RETURN -errno (errno=%d)\", errno);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"BOUND device %s to driver %s\",\n              ldev->dev_name ? ldev->dev_name : \"(null)\",\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n\n    probe_log(\"EXIT metal_uio_dev_bind returning 0\");\n    return 0;\n}\n"
}