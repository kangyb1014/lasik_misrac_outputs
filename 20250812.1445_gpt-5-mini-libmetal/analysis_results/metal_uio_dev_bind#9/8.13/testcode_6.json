{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ldrv' is only read (used in strcmp, sysfs_get_driver_attr and sysfs_write_attribute) and is not modified; therefore it should be declared as a pointer to a const-qualified type (e.g. 'const struct linux_driver *ldrv'). 'ldev' is modified (ldev->override = attr) and must remain non-const. Because 'ldrv' is not const-qualified despite being eligible, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/75.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (!fp)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Modified function with probes inserted. Original logic preserved. */\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry and pointers */\n    probe_log(\"ENTER metal_uio_dev_bind: ldev=%p, ldrv=%p\", (void *)ldev, (void *)ldrv);\n\n    if (ldev == NULL) {\n        probe_log(\"ERROR: ldev is NULL\");\n        return -EINVAL;\n    }\n    if (ldrv == NULL) {\n        probe_log(\"ERROR: ldrv is NULL\");\n        return -EINVAL;\n    }\n\n    /* Safely log available string fields */\n    probe_log(\"ldev->dev_name='%s', ldev->sdev=%p, ldrv->drv_name='%s', ldrv->sdrv=%p\",\n              ldev->dev_name ? ldev->dev_name : \"(null)\",\n              (void *)ldev->sdev,\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n              (void *)ldrv->sdrv);\n\n    /* First comparison */\n    if (ldev->sdev && ldrv->drv_name) {\n        probe_log(\"Comparing device driver '%s' with driver '%s'\",\n                  ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\",\n                  ldrv->drv_name);\n    } else {\n        probe_log(\"Skipping first strcmp: ldev->sdev or ldrv->drv_name is NULL\");\n    }\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"Branch: device already bound to driver '%s' -> returning 0\",\n                  ldrv->drv_name);\n        return 0;\n    }\n\n    /* Second comparison */\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"Branch: device %s in use by driver %s -> returning -EBUSY\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\",\n                  ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    probe_log(\"Attempting to get device attribute 'driver_override' for device %s\",\n              ldev->dev_name ? ldev->dev_name : \"(null)\");\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        probe_log(\"device %s has no override attribute (attr==NULL)\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    probe_log(\"Got device attribute 'driver_override' -> attr=%p; preparing to write driver name '%s' (len=%zu)\",\n              (void *)attr,\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\",\n              ldrv->drv_name ? strlen(ldrv->drv_name) : 0);\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"sysfs_write_attribute(driver_override) returned %d\", result);\n    if (result) {\n        probe_log(\"failed to set override on %s -> returning -errno\", ldev->dev_name ? ldev->dev_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"Set ldev->override = %p\", (void *)ldev->override);\n\n    probe_log(\"Attempting to get driver attribute 'bind' for driver %s\",\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        probe_log(\"driver %s has no bind attribute (attr==NULL) -> returning -ENOTSUP\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    probe_log(\"Got driver attribute 'bind' -> attr=%p; preparing to write device name '%s' (len=%zu)\",\n              (void *)attr,\n              ldev->dev_name ? ldev->dev_name : \"(null)\",\n              ldev->dev_name ? strlen(ldev->dev_name) : 0);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"sysfs_write_attribute(bind) returned %d\", result);\n    if (result) {\n        probe_log(\"failed to bind %s to %s -> returning -errno\",\n                  ldev->dev_name ? ldev->dev_name : \"(null)\",\n                  ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    probe_log(\"Bound device %s to driver %s successfully -> returning 0\",\n              ldev->dev_name ? ldev->dev_name : \"(null)\",\n              ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}