{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct sysfs_device::driver_name is declared without const (e.g. char *driver_name or char driver_name[]), then the use of ldev->sdev->driver_name in the read-only strcmp(...) call violates MISRA C 2023 Rule 8.13 because the pointer should be const-qualified when only read access is required. Note: ldrv->drv_name is already const char *, so the asymmetric non-const declaration of sdev->driver_name is the problematic case.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Lightweight probe logger that appends control-flow and state info\n * to /tmp/logs/75.txt so other agents can reproduce the scenario.\n * This helper intentionally takes plain char pointers so it doesn't\n * require the full device/driver struct definitions and preserves\n * the original logic of metal_uio_dev_bind.\n */\nstatic void probe_log(const char *stage,\n                      const char *dev_name,\n                      const char *sdev_driver_name,\n                      const char *ldrv_drv_name,\n                      const void *ldev_addr,\n                      const void *sdev_addr,\n                      const void *ldrv_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[probe] stage=%s\\n\", stage);\n    fprintf(f, \"[probe] ldev=%p, ldrv=%p, sdev=%p\\n\", ldev_addr, ldrv_addr, sdev_addr);\n    fprintf(f, \"[probe] dev_name=%s\\n\", dev_name ? dev_name : \"(null)\");\n    fprintf(f, \"[probe] sdev->driver_name=%s\\n\", sdev_driver_name ? sdev_driver_name : \"(null)\");\n    fprintf(f, \"[probe] ldrv->drv_name=%s\\n\", ldrv_drv_name ? ldrv_drv_name : \"(null)\");\n    fprintf(f, \"-------------------------------\\n\");\n\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry with addresses and current string values. */\n    probe_log(\"entry\",\n              ldev ? ldev->dev_name : NULL,\n              (ldev && ldev->sdev) ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"already_bound\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return 0;\n    }\n\n    probe_log(\"after_first_cmp\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n\n        probe_log(\"in_use_by_other_driver\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return -EBUSY;\n    }\n\n    probe_log(\"before_get_device_attr\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n\n        probe_log(\"no_override_attr\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return -errno;\n    }\n\n    probe_log(\"before_write_override\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n\n        probe_log(\"write_override_failed\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    probe_log(\"before_get_driver_attr\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\n        probe_log(\"no_driver_bind\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return -ENOTSUP;\n    }\n\n    probe_log(\"before_write_bind\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n\n        probe_log(\"write_bind_failed\",\n                  ldev ? ldev->dev_name : NULL,\n                  ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n                  ldrv ? ldrv->drv_name : NULL,\n                  (const void *)ldev,\n                  (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n                  (const void *)ldrv);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    probe_log(\"success\",\n              ldev ? ldev->dev_name : NULL,\n              ldev && ldev->sdev ? ldev->sdev->driver_name : NULL,\n              ldrv ? ldrv->drv_name : NULL,\n              (const void *)ldev,\n              (ldev && ldev->sdev) ? (const void *)ldev->sdev : NULL,\n              (const void *)ldrv);\n\n    return 0;\n}\n"
}