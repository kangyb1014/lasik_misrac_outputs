{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWithin the shown for-loop, if 'result' is already non-zero the conditional operator evaluates the first branch (result) and performs the assignment result = result. That assignment has no effect and is executed at runtime; removing it would not change program behaviour. Thus this is dead code (e.g. after an earlier error, subsequent chained assignments become no-op self-assignments).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/74.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append execution and state information to /tmp/logs/74.txt */\nstatic void probe_log(const char *point, struct linux_device *ldev,\n                      struct linux_driver *ldrv, int result,\n                      struct sysfs_attribute *attr)\n{\n    FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[probe] %s\\n\", point);\n    fprintf(f, \"  probe: result=%d errno=%d\\n\", result, errno);\n    fprintf(f, \"  probe: ldev=%p ldrv=%p attr=%p\\n\",\n            (void *)ldev, (void *)ldrv, (void *)attr);\n\n    if (ldev) {\n        fprintf(f, \"  probe: ldev->dev_name=%s\\n\",\n                ldev->dev_name ? ldev->dev_name : \"(null)\");\n        if (ldev->sdev)\n            fprintf(f, \"  probe: ldev->sdev->driver_name=%s\\n\",\n                    ldev->sdev->driver_name ? ldev->sdev->driver_name : \"(null)\");\n        fprintf(f, \"  probe: ldev->override=%p\\n\", (void *)ldev->override);\n    }\n\n    if (ldrv) {\n        fprintf(f, \"  probe: ldrv->drv_name=%s\\n\",\n                ldrv->drv_name ? ldrv->drv_name : \"(null)\");\n        fprintf(f, \"  probe: ldrv->sdrv=%p\\n\", (void *)ldrv->sdrv);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Entry probe */\n    probe_log(\"entry\", ldev, ldrv, 0, NULL);\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"already bound: returning 0\", ldev, ldrv, 0, NULL);\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        probe_log(\"device in use: returning -EBUSY\", ldev, ldrv, -EBUSY, NULL);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"got device override attr\", ldev, ldrv, 0, attr);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"no override attr: returning -errno\", ldev, ldrv, -errno, attr);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"after write override\", ldev, ldrv, result, attr);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"failed to set override: returning -errno\", ldev, ldrv, -errno, attr);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"set override assigned to ldev->override\", ldev, ldrv, 0, attr);\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"got driver bind attr\", ldev, ldrv, 0, attr);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"no bind attr: returning -ENOTSUP\", ldev, ldrv, -ENOTSUP, attr);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"after write bind\", ldev, ldrv, result, attr);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"failed to bind: returning -errno\", ldev, ldrv, -errno, attr);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"success: returning 0\", ldev, ldrv, 0, attr);\n\n    return 0;\n}\n"
}