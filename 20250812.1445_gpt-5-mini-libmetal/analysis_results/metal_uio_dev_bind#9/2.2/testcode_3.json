{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf prior code has set 'result' to a non-zero error value, the ternary expression returns that same value and assigns it back: result = (result ? result : metal_uio_read_map_attr(...));. In that case the assignment is a no-op (self-assignment) and the function call is not executed. The executed self-assignment (and the evaluation that just returns the same value) has no effect on program behaviour and thus constitutes dead code. Note: this conclusion assumes 'result' is a non-volatile local int as shown; if it were volatile or had observable side-effects on read/write, the situation would differ.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/74.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/74.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                  struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    probe_log(\"ENTER metal_uio_dev_bind: dev=%s, sdev_driver=%s, drv=%s\",\n              ldev ? ldev->dev_name : \"(null)\",\n              (ldev && ldev->sdev) ? ldev->sdev->driver_name : \"(null)\",\n              ldrv ? ldrv->drv_name : \"(null)\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"PATH: device driver matches driver name -> return 0\");\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"PATH: device %s in use by driver %s -> return -EBUSY\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n              ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"AFTER sysfs_get_device_attr(driver_override): attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"ERROR: device %s has no override -> errno=%d -> return -errno\",\n                  ldev->dev_name, errno);\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n              ldev->dev_name);\n        return -errno;\n    }\n\n    probe_log(\"CALL sysfs_write_attribute (driver_override = %s)\",\n              ldrv->drv_name);\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                       strlen(ldrv->drv_name));\n    probe_log(\"RETURN from sysfs_write_attribute (driver_override): result=%d\", result);\n    if (result) {\n        probe_log(\"ERROR: failed to set override on %s -> errno=%d -> return -errno\",\n                  ldev->dev_name, errno);\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n              ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"STATE: ldev->override set to %p\", (void *)ldev->override);\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"AFTER sysfs_get_driver_attr(bind): attr=%p\", (void *)attr);\n    if (!attr) {\n        probe_log(\"ERROR: driver %s has no bind -> return -ENOTSUP\", ldrv->drv_name);\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    probe_log(\"CALL sysfs_write_attribute (driver bind = %s)\", ldev->dev_name);\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                       strlen(ldev->dev_name));\n    probe_log(\"RETURN from sysfs_write_attribute (bind): result=%d\", result);\n    if (result) {\n        probe_log(\"ERROR: failed to bind %s to %s -> errno=%d -> return -errno\",\n                  ldev->dev_name, ldrv->drv_name, errno);\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n          ldev->dev_name, ldrv->drv_name);\n    probe_log(\"EXIT: bound device %s to driver %s -> return 0\",\n              ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}