{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic unsigned int\nos_log_sys_cpu_count;\nstatic unsigned int\nos_log_proc_cpu_count;\nstatic void log_state(const char* msg, int sys_cpu_count, int proc_cpu_count)\n{\n    FILE *log = fopen(\"/tmp/logs/337.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"%s: sys_cpu_count=%d, proc_cpu_count=%d\\n\", msg, sys_cpu_count, proc_cpu_count);\n        fclose(log);\n    }\n}\nstatic unsigned int\nfail_cpu_core_count_logging_fallback(int *sys_cpu_count_p)\n{\n    int proc_cpu_count;\n    fprintf(stderr, \"Failed to detect the number of logical CPU cores available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_state(\"After proc_cpu_count fetch\", *sys_cpu_count_p, proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n        fprintf(stderr, \"The number of CPU cores available for this process is used as a fallback.\\n\");\n        *sys_cpu_count_p = proc_cpu_count;\n        log_state(\"Fallback sys_cpu_count assigned proc_cpu_count\", *sys_cpu_count_p, proc_cpu_count);\n    }\n\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= *sys_cpu_count_p)\n    {\n        fprintf(stderr, \"configure-detected hardcoded number is used as a fallback.\\n\");\n        *sys_cpu_count_p = MHD_REAL_CPU_COUNT;\n        log_state(\"Fallback sys_cpu_count assigned MHD_REAL_CPU_COUNT\", *sys_cpu_count_p, proc_cpu_count);\n    }\n#endif\n    if (0 >= *sys_cpu_count_p)\n        *sys_cpu_count_p = 1;\n    printf(\"Assuming %d logical CPU core%s on this system.\\n\", *sys_cpu_count_p, (*sys_cpu_count_p == 1) ? \"\" : \"s\");\n    log_state(\"Final fallback sys_cpu_count\", *sys_cpu_count_p, proc_cpu_count);\n\n    return (unsigned int)*sys_cpu_count_p;\n}\n\nstatic unsigned int\n\n\ndetect_cpu_core_count(void)\n{\n    int sys_cpu_count;\n    sys_cpu_count = mhd_tool_get_system_cpu_count ();\n    log_state(\"Initial sys_cpu_count\", sys_cpu_count, -1);\n    if (0 >= sys_cpu_count)\n    {\n        return fail_cpu_core_count_logging_fallback(&sys_cpu_count);\n    }\n    else\n    {\n        printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count, (1 == sys_cpu_count) ? \"\" : \"s\");\n        log_state(\"Detected valid sys_cpu_count\", sys_cpu_count, -1);\n    }\n    return (unsigned int) sys_cpu_count;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp77ww2pkp/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static unsigned int\nos_log_sys_cpu_count;\nstatic unsigned int\nos_log_proc_cpu_count;\nstatic void log_state(const char* msg, int sys_cpu_count, int proc_cpu_count)\n{\n    FILE *log = fopen(\"/tmp/logs/337.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"%s: sys_cpu_count=%d, proc_cpu_count=%d\\n\", msg, sys_cpu_count, proc_cpu_count);\n        fclose(log);\n    }\n}\nstatic unsigned int\nfail_cpu_core_count_logging_fallback(int *sys_cpu_count_p)\n{\n    int proc_cpu_count;\n    fprintf(stderr, \"Failed to detect the number of logical CPU cores available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count();\n    log_state(\"After proc_cpu_count fetch\", *sys_cpu_count_p, proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n        fprintf(stderr, \"The number of CPU cores available for this process is used as a fallback.\\n\");\n        *sys_cpu_count_p = proc_cpu_count;\n        log_state(\"Fallback sys_cpu_count assigned proc_cpu_count\", *sys_cpu_count_p, proc_cpu_count);\n    }\n\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= *sys_cpu_count_p)\n    {\n        fprintf(stderr, \"configure-detected hardcoded number is used as a fallback.\\n\");\n        *sys_cpu_count_p = MHD_REAL_CPU_COUNT;\n        log_state(\"Fallback sys_cpu_count assigned MHD_REAL_CPU_COUNT\", *sys_cpu_count_p, proc_cpu_count);\n    }\n#endif\n    if (0 >= *sys_cpu_count_p)\n        *sys_cpu_count_p = 1;\n    printf(\"Assuming %d logical CPU core%s on this system.\\n\", *sys_cpu_count_p, (*sys_cpu_count_p == 1) ? \"\" : \"s\");\n    log_state(\"Final fallback sys_cpu_count\", *sys_cpu_count_p, proc_cpu_count);\n\n    return (unsigned int)*sys_cpu_count_p;\n}\n\nstatic unsigned int\n\ndetect_cpu_core_count(void)\n{\n    int sys_cpu_count;\n    sys_cpu_count = mhd_tool_get_system_cpu_count();\n    log_state(\"Initial sys_cpu_count\", sys_cpu_count, -1);\n    if (0 >= sys_cpu_count)\n    {\n        return fail_cpu_core_count_logging_fallback(&sys_cpu_count);\n    }\n    else\n    {\n        printf(\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count, (1 == sys_cpu_count) ? \"\" : \"s\");\n        log_state(\"Detected valid sys_cpu_count\", sys_cpu_count, -1);\n    }\n    return (unsigned int) sys_cpu_count;\n}\n",
  "explanation": "The build error indicates a missing 'makeinfo' command, which is related to the documentation build process, not the C code itself. The provided C code compiles successfully as-is, assuming the functions `mhd_tool_get_proc_cpu_count` and `mhd_tool_get_system_cpu_count` are defined and linked correctly. Since no syntax or semantic errors exist in the code snippet, no code changes are required to fix compilation errors. The error should be resolved by installing the 'makeinfo' utility (part of the Texinfo package) on your system or by adjusting the build setup to skip documentation generation, not by modifying the source code."
}