{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/511.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function is_websocket_request:\n#define WS_UPGRADE_VALUE \"websocket\"\n</additional code>\nJudge whether the above is_websocket_request code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Using standard string functions strcmp and strstr on pointers upg_header and con_header may lead to out-of-bounds access if these pointers do not point to properly null-terminated strings. Specifically, if upg_header or con_header is not null-terminated, strcmp or strstr can read beyond the object bounds, violating rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <microhttpd.h>\n\n#define WS_UPGRADE_VALUE \"websocket\"\n\nenum MHD_Result {\n    MHD_NO = 0,\n    MHD_YES\n};\n\nstruct MHD_Connection {};\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n    FILE *log = fopen(\"/tmp/logs/511.txt\", \"a\");\n    if (log == NULL) {\n        /* If logging fails, proceed without logs */\n        return MHD_NO;\n    }\n    (void) con;  /* Unused. Silent compiler warning. */\n\n    fprintf(log, \"is_websocket_request called with upg_header at %p, con_header at %p\\n\", (void*) upg_header, (void*) con_header);\n\n    if ((upg_header != NULL) && (con_header != NULL)) {\n        fprintf(log, \"Both headers are non-null\\n\");\n\n        /* Log the contents being compared */\n        fprintf(log, \"Comparing upg_header ('%s') with WS_UPGRADE_VALUE ('%s')\\n\", upg_header, WS_UPGRADE_VALUE);\n\n        int cmp_result = strcmp(upg_header, WS_UPGRADE_VALUE);\n        fprintf(log, \"strcmp result: %d\\n\", cmp_result);\n\n        const char *strstr_result = strstr(con_header, \"Upgrade\");\n        fprintf(log, \"strstr result pointer: %p\\n\", (void*) strstr_result);\n\n        if ((cmp_result == 0) && (strstr_result != NULL)) {\n            fprintf(log, \"Request is a websocket request: returning MHD_YES\\n\");\n            fclose(log);\n            return MHD_YES;\n        }\n    } else {\n        fprintf(log, \"One or both headers are NULL - returning MHD_NO\\n\");\n    }\n    fprintf(log, \"Request is NOT a websocket request: returning MHD_NO\\n\");\n    fclose(log);\n    return MHD_NO;\n}\n"
}