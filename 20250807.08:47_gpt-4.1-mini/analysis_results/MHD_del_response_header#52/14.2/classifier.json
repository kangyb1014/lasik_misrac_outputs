{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/420.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_del_response_header:\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n...\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n...\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n...\n#define _MHD_remove_header(presponse, phdr) do{mhd_assert(NULL!=presponse->first_header);mhd_assert(NULL!=presponse->last_header);if(NULL==phdr->prev){mhd_assert(phdr==presponse->first_header);presponse->first_header=phdr->next;}else{mhd_assert(phdr!=presponse->first_header);mhd_assert(phdr==phdr->prev->next);phdr->prev->next=phdr->next;}if(NULL==phdr->next){mhd_assert(phdr==presponse->last_header);presponse->last_header=phdr->prev;}else{mhd_assert(phdr!=presponse->last_header);mhd_assert(phdr==phdr->next->prev);phdr->next->prev=phdr->prev;}\\\n}while(0)\n...\n#define MHD_STATICSTR_LEN_(macro) (sizeof(macro)/sizeof(char)-1)\n</additional code>\nJudge whether the above MHD_del_response_header code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "In the while loop iterating over response headers, the loop variable 'pos' is modified inside the loop body and also updated in the loop iteration statement (pos = pos->next). This means the loop counter 'pos' is modified in the loop body and also in the third clause, violating the requirement that the loop counter shall not be modified in the body and only in the third clause.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\nstruct MHD_HTTP_Res_Header {\n    char *header;\n    char *value;\n    size_t header_size;\n    size_t value_size;\n    struct MHD_HTTP_Res_Header *next;\n    struct MHD_HTTP_Res_Header *prev;\n    int kind;\n};\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ResponseAutoFlags {\n    MHD_RAF_HAS_CONNECTION_HDR = 1 << 0,\n    MHD_RAF_HAS_TRANS_ENC_CHUNKED = 1 << 1,\n    MHD_RAF_HAS_DATE_HDR = 1 << 2,\n    MHD_RAF_HAS_CONTENT_LENGTH = 1 << 3\n};\n\nstruct MHD_Response {\n    struct MHD_HTTP_Res_Header *first_header;\n    struct MHD_HTTP_Res_Header *last_header;\n    int flags_auto;\n};\n\n// Stub definitions for used external functions\nsize_t strlen(const char *s) { size_t len = 0; while(*s++) ++len; return len; }\n\nbool MHD_str_equal_caseless_bin_n_(const char *const str1, const char *const str2, size_t len) {\n    for (size_t i = 0; i < len; ++i) {\n        char c1 = str1[i], c2 = str2[i];\n        if (c1 >= 'A' && c1 <= 'Z') c1 += ('a' - 'A');\n        if (c2 >= 'A' && c2 <= 'Z') c2 += ('a' - 'A');\n        if (c1 != c2) return false;\n    }\n    return true;\n}\n\nvoid _MHD_remove_header(struct MHD_Response *response, struct MHD_HTTP_Res_Header *phdr) {\n    // Just log\n    FILE *logf = fopen(\"/tmp/logs/420.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"_MHD_remove_header called for header: %.*s\\n\", (int)phdr->header_size, phdr->header);\n        fclose(logf);\n    }\n    // Simple removal from doubly linked list\n    if (phdr->prev) phdr->prev->next = phdr->next;\n    else response->first_header = phdr->next;\n    if (phdr->next) phdr->next->prev = phdr->prev;\n    else response->last_header = phdr->prev;\n}\n\nenum MHD_Result MHD_del_response_header(struct MHD_Response *response, const char *header, const char *content) {\n    struct MHD_HTTP_Res_Header *pos;\n    size_t header_len;\n    size_t content_len;\n\n    FILE *logf = fopen(\"/tmp/logs/420.txt\", \"a\");\n    if (logf) fprintf(logf, \"Entering MHD_del_response_header\\n\");\n\n    if ((NULL == header) || (NULL == content)) {\n        if (logf) {\n            fprintf(logf, \"Input header or content NULL\\n\");\n            fclose(logf);\n        }\n        return MHD_NO;\n    }\n\n    header_len = strlen(header);\n    content_len = strlen(content);\n\n    pos = response->first_header;\n    while (NULL != pos) {\n        if (logf) fprintf(logf, \"Inspecting header: %.*s\\n\", (int)pos->header_size, pos->header);\n        if ((header_len == pos->header_size) &&\n            (content_len == pos->value_size) &&\n            (0 == memcmp(header, pos->header, header_len)) &&\n            (0 == memcmp(content, pos->value, content_len)))\n        {\n            if (logf) fprintf(logf, \"Found matching header, removing\\n\");\n            _MHD_remove_header(response, pos);\n\n            free(pos->header);\n            free(pos->value);\n            free(pos);\n\n            if (logf) {\n                fprintf(logf, \"Header removed, returning MHD_YES\\n\");\n                fclose(logf);\n            }\n\n            return MHD_YES;\n        }\n        if (logf) fprintf(logf, \"Moving to next header\\n\");\n        pos = pos->next; // 'pos' modified here and also controls the loop\n    }\n\n    if (logf) {\n        fprintf(logf, \"No matching header found, returning MHD_NO\\n\");\n        fclose(logf);\n    }\n    return MHD_NO;\n}\n"
}