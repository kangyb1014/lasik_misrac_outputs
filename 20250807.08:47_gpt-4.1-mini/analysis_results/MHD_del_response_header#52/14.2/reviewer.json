{
  "user_message": "An agent A claimed that the following MHD_del_response_header code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_del_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the while loop iterating over response headers, the loop variable 'pos' is modified inside the loop body and also updated in the loop iteration statement (pos = pos->next). This means the loop counter 'pos' is modified in the loop body and also in the third clause, violating the requirement that the loop counter shall not be modified in the body and only in the third clause.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nsize_t strlen(const char *s) {\n    size_t len = 0;\n    while (*s++) ++len;\n    return len;\n}\nvoid _MHD_remove_header(struct MHD_Response *response, struct MHD_HTTP_Res_Header *phdr) {\n    // Just log\n    FILE *logf = fopen(\"/tmp/logs/420.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"_MHD_remove_header called for header: %.*s\\n\", (int)phdr->header_size, phdr->header);\n        fclose(logf);\n    }\n    // Simple removal from doubly linked list\n    if (phdr->prev) phdr->prev->next = phdr->next;\n    else response->first_header = phdr->next;\n    if (phdr->next) phdr->next->prev = phdr->prev;\n    else response->last_header = phdr->prev;\n}\n\nMHD_Result MHD_del_response_header(struct MHD_Response *response, const char *header, const char *content) {\n    struct MHD_HTTP_Res_Header *pos;\n    size_t header_len;\n    size_t content_len;\n\n    FILE *logf = fopen(\"/tmp/logs/420.txt\", \"a\");\n    if (logf) fprintf(logf, \"Entering MHD_del_response_header\\n\");\n\n    if ((NULL == header) || (NULL == content)) {\n        if (logf) {\n            fprintf(logf, \"Input header or content NULL\\n\");\n            fclose(logf);\n        }\n        return MHD_NO;\n    }\n\n    header_len = strlen(header);\n    content_len = strlen(content);\n\n    pos = response->first_header;\n    while (NULL != pos) {\n        if (logf) fprintf(logf, \"Inspecting header: %.*s\\n\", (int)pos->header_size, pos->header);\n        if ((header_len == pos->header_size) &&\n            (content_len == pos->value_size) &&\n            (0 == memcmp(header, pos->header, header_len)) &&\n            (0 == memcmp(content, pos->value, content_len)))\n        {\n            if (logf) fprintf(logf, \"Found matching header, removing\\n\");\n            _MHD_remove_header(response, pos);\n\n            free(pos->header);\n            free(pos->value);\n            struct MHD_HTTP_Res_Header *to_free = pos;\n            pos = pos->next;\n            free(to_free);\n\n            if (logf) {\n                fprintf(logf, \"Header removed, returning MHD_YES\\n\");\n                fclose(logf);\n            }\n\n            return MHD_YES;\n        }\n        if (logf) fprintf(logf, \"Moving to next header\\n\");\n        pos = pos->next; // 'pos' modified here and also controls the loop\n    }\n\n    if (logf) {\n        fprintf(logf, \"No matching header found, returning MHD_NO\\n\");\n        fclose(logf);\n    }\n    return MHD_NO;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The provided code uses a while loop rather than a for loop. MISRA C 2023 Rule 14.2 specifically applies to for loops and mandates constraints on the three clauses of the for statement, including initialization, condition, and increment expressions, and the usage/modification of the loop counter variable. The report claims a violation based on modifying the loop counter variable 'pos' inside the loop body and also in the loop iteration statement, which is a valid concern for a for loop under Rule 14.2. However, since the code does not use a for loop but a while loop, this rule does not apply. Consequently, modifying 'pos' inside the while loop body and as part of iteration control is not a violation of MISRA Rule 14.2. Therefore, the claim of violation of Rule 14.2 is not correct because the rule concerns for loops only, and the code uses a while loop."
}