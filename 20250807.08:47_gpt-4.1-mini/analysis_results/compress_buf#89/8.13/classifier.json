{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified compress_buf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/715.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of compress_buf as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function compress_buf:\n#define CHUNK 16384\n...\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n</additional code>\nJudge whether the above compress_buf code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The pointer strm->next_in is assigned a pointer to a const-qualified type (const Bytef *), but strm->next_in is a non-const pointer and is used as input to deflate(), which modifies the buffer pointed to by next_in. This contradicts the rule that a pointer should point to a const-qualified type whenever possible unless the pointed object is modified. Here, next_in points to const data but is used by a function that modifies it, violating MISRA C 2023 Rule 8.13.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include <zlib.h>\n\n#define CHUNK 16384\n\ntypedef enum MHD_Result\n{\n  MHD_NO = 0,\n  MHD_YES = 1\n} MHD_Result;\n\nstatic FILE *log_file = NULL;\n\nstatic void log_state(const char *msg, size_t src_size, size_t offset, size_t dest_size) {\n    if (log_file == NULL) {\n        log_file = fopen(\"/tmp/logs/715.txt\", \"w\");\n    }\n    if (log_file != NULL) {\n        fprintf(log_file, \"%s src_size=%zu offset=%zu dest_size=%zu\\n\", msg, src_size, offset, dest_size);\n        fflush(log_file);\n    }\n}\n\nstatic MHD_Result compress_buf(z_stream *strm, const void *src, size_t src_size, size_t *offset,\n                               void **dest, size_t *dest_size,\n                               void *tmp)\n{\n  unsigned int have;\n  MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  log_state(\"Start compress_buf\", src_size, *offset, *dest_size);\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n      log_state(\"Processing chunk with Z_NO_FLUSH\", src_size, *offset, *dest_size);\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n      log_state(\"Processing last chunk with Z_SYNC_FLUSH\", src_size, *offset, *dest_size);\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src; // Assignment to const Bytef* from const void*\n    log_state(\"Set next_in to const data pointer (potential violation here)\", src_size, *offset, *dest_size);\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate(strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc(*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free(*dest);\n        *dest = NULL;\n        log_state(\"Memory allocation failed, freeing dest and returning\", src_size, *offset, *dest_size);\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy(((uint8_t *)(*dest)) + ((*dest_size) - have), tmp, have);\n      log_state(\"Copied compressed data chunk\", src_size, *offset, *dest_size);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  log_state(\"Finished compress_buf\", src_size, *offset, *dest_size);\n  if (log_file != NULL) {\n      fclose(log_file);\n      log_file = NULL;\n  }\n  return ret;\n}\n"
}