{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified compress_buf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/716.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of compress_buf as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function compress_buf:\n#define CHUNK 16384\n</additional code>\nJudge whether the above compress_buf code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "The inner do-while loop in compress_buf violates MISRA C 2023 Rule 14.2 because the for-like loop structure implied by 'do { ... } while (0 == strm->avail_out);' relies on modification of strm->avail_out within the loop body (via deflate call), which acts as a loop counter and is modified inside the loop body rather than only in the third clause (increment). Although not a for loop syntactically, if this were replaced with a for-loop, modification of the loop counter inside the loop body violates the rule. Since the standard explicitly applies only to for loops, the code itself does not contain a for-loop, but the iteration control violates the principle that the loop counter should not be modified within the loop body. If the inner loop was rewritten as a for loop with strm->avail_out as the counter, it would violate clause 4 of the rule. Hence, while the current code uses a do-while loop, it violates the same principle expressed in Rule 14.2 for loop counters and their modification inside the loop body, evidencing poor loop counter management and violation of the rule's intent when applied to similar loops.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <zlib.h>\n\nenum MHD_Result { MHD_YES = 0, MHD_NO };\n#define CHUNK 16384\n\ntypedef unsigned char Bytef;\n\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  FILE *log_file = fopen(\"/tmp/logs/716.txt\", \"w\");\n  if (log_file == NULL) return MHD_NO;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    fprintf(log_file, \"Enter outer loop: src_size=%zu\\n\", src_size);\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n      fprintf(log_file, \"Chunk > CHUNK: avail_in=%u flush=Z_NO_FLUSH\\n\", strm->avail_in);\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n      fprintf(log_file, \"Chunk <= CHUNK: avail_in=%u flush=Z_SYNC_FLUSH\\n\", strm->avail_in);\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      fprintf(log_file, \"Enter inner loop: avail_out before=%u\\n\", strm->avail_out);\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      fprintf(log_file, \"After deflate: have=%u dest_size=%zu avail_out after=%u\\n\", have, *dest_size, strm->avail_out);\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        fprintf(log_file, \"realloc failure, exiting\\n\");\n        fclose(log_file);\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n      fprintf(log_file, \"Memcopy done, loop continues if avail_out == 0\\n\");\n    }\n    while (0 == strm->avail_out);\n    fprintf(log_file, \"Exit inner loop: avail_out=%u\\n\", strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  fprintf(log_file, \"Exit outer loop: flush=%d\\n\", flush);\n  fclose(log_file);\n  return ret;\n}\n"
}