{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/735.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_response_element_n_:\nstruct MHD_Response\n{\n\n  /**\n   * Head of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *first_header;\n\n  /**\n   * Tail of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *last_header;\n\n  /**\n   * Buffer pointing to data that we are supposed\n   * to send as a response.\n   */\n  const char *data;\n\n  /**\n   * Closure to give to the content reader @e crc\n   * and content reader free callback @e crfc.\n   */\n  void *crc_cls;\n\n  /**\n   * How do we get more data?  NULL if we are\n   * given all of the data up front.\n   */\n  MHD_ContentReaderCallback crc;\n\n  /**\n   * NULL if data must not be freed, otherwise\n   * either user-specified callback or \"&free\".\n   */\n  MHD_ContentReaderFreeCallback crfc;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * Application function to call once we are done sending the headers\n   * of the response; NULL unless this is a response created with\n   * #MHD_create_response_for_upgrade().\n   */\n  MHD_UpgradeHandler upgrade_handler;\n\n  /**\n   * Closure for @e uh.\n   */\n  void *upgrade_handler_cls;\n#endif /* UPGRADE_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Mutex to synchronize access to @e data, @e size and\n   * @e reference_count.\n   */\n  MHD_mutex_ mutex;\n#endif\n\n  /**\n   * The size of the response body.\n   * Set to #MHD_SIZE_UNKNOWN if size is not known.\n   */\n  uint64_t total_size;\n\n  /**\n   * At what offset in the stream is the\n   * beginning of @e data located?\n   */\n  uint64_t data_start;\n\n  /**\n   * Offset to start reading from when using @e fd.\n   */\n  uint64_t fd_off;\n\n  /**\n   * Number of bytes ready in @e data (buffer may be larger\n   * than what is filled with payload).\n   */\n  size_t data_size;\n\n  /**\n   * Size of the writable data buffer @e data.\n   */\n  size_t data_buffer_size;\n\n  /**\n   * Reference count for this response.  Free once the counter hits\n   * zero.\n   */\n  unsigned int reference_count;\n\n  /**\n   * File-descriptor if this response is FD-backed.\n   */\n  int fd;\n\n  /**\n   * Flags set for the MHD response.\n   */\n  enum MHD_ResponseFlags flags;\n\n  /**\n   * Automatic flags set for the MHD response.\n   */\n  enum MHD_ResponseAutoFlags flags_auto;\n\n  /**\n   * If the @e fd is a pipe (no sendfile()).\n   */\n  bool is_pipe;\n\n  /**\n   * I/O vector used with MHD_create_response_from_iovec.\n   */\n  MHD_iovec_ *data_iov;\n\n  /**\n   * Number of elements in data_iov.\n   */\n  unsigned int data_iovcnt;\n}\n...\nstruct MHD_HTTP_Res_Header\n{\n  /**\n   * Headers are kept in a double-linked list.\n   */\n  struct MHD_HTTP_Res_Header *next;\n\n  /**\n   * Headers are kept in a double-linked list.\n   */\n  struct MHD_HTTP_Res_Header *prev;\n\n  /**\n   * The name of the header (key), without the colon.\n   */\n  char *header;\n\n  /**\n   * The length of the @a header, not including the final zero termination.\n   */\n  size_t header_size;\n\n  /**\n   * The value of the header.\n   */\n  char *value;\n\n  /**\n   * The length of the @a value, not including the final zero termination.\n   */\n  size_t value_size;\n\n  /**\n   * Type of the value.\n   */\n  enum MHD_ValueKind kind;\n\n}\n...\n#define mhd_assert(ignore) ((void)0)\n...\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n</additional code>\nJudge whether the above MHD_get_response_element_n_ code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the 'header' pointer in any MHD_HTTP_Res_Header structure within the linked list is not properly null-terminated or is smaller than 'header_size', or if 'key' points to a shorter buffer than 'key_len', then the function MHD_str_equal_caseless_bin_n_ might access memory beyond the bounds of these pointer parameters when comparing the headers, violating Rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstruct MHD_HTTP_Res_Header\n{\n  struct MHD_HTTP_Res_Header *next;\n  char *header;\n  size_t header_size;\n  char *value;\n  size_t value_size;\n  enum MHD_ValueKind kind;\n};\n\nstruct MHD_Response\n{\n  struct MHD_HTTP_Res_Header *first_header;\n};\n\nstatic void log_state(const char *message, const char *header, size_t header_size, const char *key, size_t key_len)\n{\n  FILE *log = fopen(\"/tmp/logs/735.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"%s - header_size: %zu, key_len: %zu\\n\", message, header_size, key_len);\n    if (header != NULL && header_size > 0)\n      fprintf(log, \"Header segment: '%.10s'\\n\", header);\n    if (key != NULL && key_len > 0)\n      fprintf(log, \"Key segment: '%.10s'\\n\", key);\n    fclose(log);\n  }\n}\n\nbool MHD_str_equal_caseless_bin_n_(const char *str1, const char *str2, size_t len)\n{\n  size_t i;\n  log_state(\"Entering MHD_str_equal_caseless_bin_n_\", str1, len, str2, len);\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (c1 >= 'A' && c1 <= 'Z')\n      c1 += 'a' - 'A';\n    if (c2 >= 'A' && c2 <= 'Z')\n      c2 += 'a' - 'A';\n    if (c1 != c2)\n    {\n      log_state(\"Mismatch at position\", str1 + i, 1, str2 + i, 1);\n      return false;\n    }\n  }\n  log_state(\"Strings matched\", str1, len, str2, len);\n  return true;\n}\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                           enum MHD_ValueKind kind,\n                           const char *key,\n                           size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  // Assertions replaced by simple null checks for logging\n  if (NULL == key || 0 == key[0] || 0 == key_len)\n  {\n    log_state(\"Invalid key or key_len\", NULL, 0, key, key_len);\n    return NULL;\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    log_state(\"Checking header\", pos->header, pos->header_size, key, key_len);\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      log_state(\"Match found\", pos->header, pos->header_size, key, key_len);\n      return pos;\n    }\n  }\n  log_state(\"No match found\", NULL, 0, key, key_len);\n  return NULL;\n}\n"
}