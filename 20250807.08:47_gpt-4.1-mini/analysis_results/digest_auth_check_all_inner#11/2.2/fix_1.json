{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic enum MHD_DigestAuthResult\n digest_auth_check_all_inner (struct MHD_Connection *connection,\n                              const char *realm,\n                              const char *username,\n                              const char *password,\n                              const uint8_t *userdigest,\n                              unsigned int nonce_timeout,\n                              uint32_t max_nc,\n                              enum MHD_DigestAuthMultiQOP mqop,\n                              enum MHD_DigestAuthMultiAlgo3 malgo3,\n                              char **pbuf,\n                              struct DigestAlgorithm *da)\n{\n  FILE *log_file = fopen(\"/tmp/logs/90.txt\", \"a\");\n  if (log_file) fprintf(log_file, \"Start digest_auth_check_all_inner\\n\");\n\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  enum MHD_DigestAuthAlgo3 c_algo; /**< Client's algorithm */\n  enum MHD_DigestAuthQOP c_qop; /**< Client's QOP */\n  unsigned int digest_size;\n  uint8_t hash1_bin[MAX_DIGEST];\n  uint8_t hash2_bin[MAX_DIGEST];\n#if 0\n  const char *hentity = NULL; /* \"auth-int\" is not supported */\n#endif\n  uint64_t nonce_time;\n  uint64_t nci;\n  const struct MHD_RqDAuth *params;\n  char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE];\n  char **const ptmp2 = pbuf;     /**< Temporal malloc'ed buffer for unquoting */\n  size_t tmp2_size; /**< The size of @a tmp2 buffer */\n  struct _MHD_str_w_len unquoted;\n  struct _MHD_mstr_w_len unq_copy;\n  enum _MHD_GetUnqResult unq_res;\n  size_t username_len;\n  size_t realm_len;\n\n  if (log_file) fprintf(log_file, \"Claims about password and userdigest asserted\\n\");\n  mhd_assert ((NULL != password) || (NULL != userdigest));\n  mhd_assert (! ((NULL != userdigest) && (NULL != password)));\n\n  tmp2_size = 0;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params) {\n    if (log_file) fprintf(log_file, \"Params NULL, returning MHD_DAUTH_WRONG_HEADER\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_DAUTH_WRONG_HEADER;\n  }\n\n  /* Similar logging and original logic preserved, omitted rest for brevity */\n\n  if (log_file) fprintf(log_file, \"Finished digest_auth_check_all_inner\\n\");\n  if (log_file) fclose(log_file);\n  return MHD_DAUTH_OK;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmps2n94eai/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of digest_auth_check_all_inner as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static enum MHD_DigestAuthResult\n digest_auth_check_all_inner (struct MHD_Connection *connection,\n                              const char *realm,\n                              const char *username,\n                              const char *password,\n                              const uint8_t *userdigest,\n                              unsigned int nonce_timeout,\n                              uint32_t max_nc,\n                              enum MHD_DigestAuthMultiQOP mqop,\n                              enum MHD_DigestAuthMultiAlgo3 malgo3,\n                              char **pbuf,\n                              struct DigestAlgorithm *da)\n{\n  FILE *log_file = fopen(\"/tmp/logs/90.txt\", \"a\");\n  if (log_file) fprintf(log_file, \"Start digest_auth_check_all_inner\\n\");\n\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  enum MHD_DigestAuthAlgo3 c_algo; /**< Client's algorithm */\n  enum MHD_DigestAuthQOP c_qop; /**< Client's QOP */\n  unsigned int digest_size;\n  uint8_t hash1_bin[MAX_DIGEST];\n  uint8_t hash2_bin[MAX_DIGEST];\n#if 0\n  const char *hentity = NULL; /* \"auth-int\" is not supported */\n#endif\n  uint64_t nonce_time;\n  uint64_t nci;\n  const struct MHD_RqDAuth *params;\n  char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE];\n  char **const ptmp2 = pbuf;     /**< Temporal malloc'ed buffer for unquoting */\n  size_t tmp2_size; /**< The size of @a tmp2 buffer */\n  struct _MHD_str_w_len unquoted;\n  struct _MHD_mstr_w_len unq_copy;\n  enum _MHD_GetUnqResult unq_res;\n  size_t username_len;\n  size_t realm_len;\n\n  if (log_file) fprintf(log_file, \"Claims about password and userdigest asserted\\n\");\n  mhd_assert ((NULL != password) || (NULL != userdigest));\n  mhd_assert (! ((NULL != userdigest) && (NULL != password)));\n\n  tmp2_size = 0;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params) {\n    if (log_file) fprintf(log_file, \"Params NULL, returning MHD_DAUTH_WRONG_HEADER\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_DAUTH_WRONG_HEADER;\n  }\n\n  /* Similar logging and original logic preserved, omitted rest for brevity */\n\n  if (log_file) fprintf(log_file, \"Finished digest_auth_check_all_inner\\n\");\n  if (log_file) fclose(log_file);\n  return MHD_DAUTH_OK;\n}\n",
  "explanation": "The build error shown relates to a missing external tool 'makeinfo' during the documentation build, which is unrelated to C source code compilation errors. Since the provided code snippet did not contain any direct compilation errors, no changes were necessary in the function logic or syntax. The code snippet is syntactically correct for compilation. To fix build failures due to 'makeinfo', one needs to install the Texinfo package on the build system, not modify the source code. Therefore, the function code is left unchanged, ensuring it compiles successfully as is."
}