{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n  FILE *logf = fopen(\"/tmp/logs/250.txt\", \"w\");\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  fprintf(logf, \"special_api returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from special_api: %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  fprintf(logf, \"sysctl returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysctl: %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  fprintf(logf, \"sysconf returned: %d\\n\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf: %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf (> 2): %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number. See get_nprocs_fallback() in glibc sysdeps/unix/sysv/linux/getsysstats.c */\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    fprintf(logf, \"proc_cpu_count: %d, sysconf res: %d\\n\", proc_cpu_count, res);\n    if (proc_cpu_count == res)\n    {\n      fprintf(logf, \"proc_cpu_count equals sysconf res, returning: %d\\n\", res);\n      fclose(logf);\n      return res;\n    }\n    else\n    {\n      /* Here the call to proc_cpu_count and comparison produces no effect on output */\n      fprintf(logf, \"proc_cpu_count not equal to sysconf res, continuing\\n\");\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  fprintf(logf, \"sysctl_fallback returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysctl_fallback: %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  fprintf(logf, \"sysconf_fallback returned: %d\\n\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf_fallback: %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf_fallback (> 2): %d\\n\", res);\n    fclose(logf);\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  fprintf(logf, \"Cannot detect CPU count, returning -1\\n\");\n  fclose(logf);\n  return -1; /* Cannot detect */\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmppwsz76ep/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of mhd_tool_get_system_cpu_count as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "int\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n  FILE *logf = fopen(\"/tmp/logs/250.txt\", \"w\");\n\n  if (!logf) {\n    /* Fallback to stderr if file can't be opened to avoid NULL dereference */\n    logf = stderr;\n  }\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  fprintf(logf, \"special_api returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from special_api: %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  fprintf(logf, \"sysctl returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysctl: %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  fprintf(logf, \"sysconf returned: %d\\n\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf: %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf (> 2): %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could be a fallback number. See get_nprocs_fallback() in glibc sysdeps/unix/sysv/linux/getsysstats.c */\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    fprintf(logf, \"proc_cpu_count: %d, sysconf res: %d\\n\", proc_cpu_count, res);\n    if (proc_cpu_count == res)\n    {\n      fprintf(logf, \"proc_cpu_count equals sysconf res, returning: %d\\n\", res);\n      if (logf != stderr) fclose(logf);\n      return res;\n    }\n    else\n    {\n      /* Here the call to proc_cpu_count and comparison produces no effect on output */\n      fprintf(logf, \"proc_cpu_count not equal to sysconf res, continuing\\n\");\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  fprintf(logf, \"sysctl_fallback returned: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysctl_fallback: %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  fprintf(logf, \"sysconf_fallback returned: %d\\n\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf_fallback: %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fprintf(logf, \"Returning early from sysconf_fallback (> 2): %d\\n\", res);\n    if (logf != stderr) fclose(logf);\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  fprintf(logf, \"Cannot detect CPU count, returning -1\\n\");\n  if (logf != stderr) fclose(logf);\n  return -1; /* Cannot detect */\n}\n",
  "explanation": "The original build error is unrelated to this source code and is caused by missing 'makeinfo' during the build process, which is an external documentation tool and not a code issue. However, to ensure the provided function compiles cleanly and safely, I added a check after fopen to ensure the log file pointer is not NULL, falling back to using 'stderr' if the file cannot be opened (to avoid NULL dereference on fprintf). Also, I added corresponding checks around fclose calls to avoid closing 'stderr'. These changes preserve the original logic while making the function more robust and guaranteed to compile without file-pointer-related errors."
}