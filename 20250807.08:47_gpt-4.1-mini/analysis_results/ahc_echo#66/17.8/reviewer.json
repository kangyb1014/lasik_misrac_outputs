{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter '*req_cls' is modified inside the function by assigning a new value to it ('*req_cls = &already_called_marker;'). According to MISRA C 2023 Rule 17.8, a function parameter should not be modified. Although the object referred to by a pointer parameter may be modified, the pointer itself shall not be modified. Here, '*req_cls' is modified, so this violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  FILE *log_file = fopen(\"/tmp/logs/533.txt\", \"w\");\n  if (log_file == NULL)\n    return MHD_NO;\n\n  struct MHD_Response *response;\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  (void) cls;\n  (void) url;\n  (void) method;\n  (void) version;\n  (void) upload_data;\n  (void) upload_data_size;\n\n  fprintf(log_file, \"Entered ahc_echo\\n\");\n  fprintf(log_file, \"*req_cls before: %p\\n\", *req_cls);\n\n  if ((void *)&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    fprintf(log_file, \"Modifying *req_cls inside function to address: %p\\n\", (void *)&already_called_marker);\n    *req_cls = (void *)&already_called_marker;  /* <== This is modification of a function parameter */\n    fprintf(log_file, \"*req_cls after modification: %p\\n\", *req_cls);\n    fclose(log_file);\n    return MHD_YES;\n  }\n\n  /* ... rest unchanged for brevity ... */\n  fclose(log_file);\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter itself (the parameter variable) should not be modified. In this function, the parameter is 'void **req_cls', which means the parameter variable 'req_cls' is a pointer to a pointer. According to the rule, modifying the pointer 'req_cls' itself would be a violation, but modifying the object pointed to by 'req_cls' (i.e., '*req_cls') is allowed. In the code, the statement '*req_cls = &already_called_marker;' modifies the object pointed to by 'req_cls', not 'req_cls' itself. Therefore, this usage is compliant with the rule. Agent A's claim misunderstands the rule: the rule forbids modifying the pointer parameter, not the pointee. Hence, there is no violation of MISRA C 2023 Rule 17.8 in this code."
}