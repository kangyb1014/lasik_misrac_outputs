{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic clockid_t mono_clock_id = 0;\nstatic time_t mono_clock_start = 0;\nstatic enum _MHD_mono_clock_source { _MHD_CLOCK_NO_SOURCE, _MHD_CLOCK_GETTIME, _MHD_CLOCK_GET_TIME, _MHD_CLOCK_GETTICKCOUNT64, _MHD_CLOCK_PERFCOUNTER, _MHD_CLOCK_GETHRTIME } mono_clock_source;\nstatic mach_port_t mono_clock_service = 0;\nstatic uint64_t tick_start = 0;\nstatic uint64_t perf_freq = 0;\nstatic uint64_t perf_start = 0;\nstatic uint64_t hrtime_start = 0;\nstatic time_t gettime_start = 0;\n\nvoid MHD_monotonic_sec_counter_init(void)\n{\n  FILE *log = fopen(\"/tmp/logs/177.txt\", \"a\");\n  if (log == NULL) return;\n\n#ifdef HAVE_CLOCK_GET_TIME\n  mach_timespec_t cur_time;\n#endif\n\n  mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n\n#ifdef HAVE_CLOCK_GETTIME\n  struct timespec ts;\n  mono_clock_id = 0; /* _MHD_UNWANTED_CLOCK */\n#endif\n\n#ifdef HAVE_CLOCK_GET_TIME\n  mono_clock_service = 0; /* _MHD_INVALID_CLOCK_SERV */\n#endif\n\n  fprintf(log, \"Entered MHD_monotonic_sec_counter_init\\n\");\n\n  if (0)\n  {\n    fprintf(log, \"Inside if(0) block: unreachable code\\n\");\n    (void)0;\n  }\n  else\n#ifdef HAVE_CLOCK_GETTIME\n#ifdef CLOCK_MONOTONIC_COARSE\n  if (0 == clock_gettime(CLOCK_MONOTONIC_COARSE, &ts))\n  {\n    fprintf(log, \"CLOCK_MONOTONIC_COARSE succeeded\\n\");\n    mono_clock_id = CLOCK_MONOTONIC_COARSE;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif\n#endif\n  {\n    fprintf(log, \"Fell through to else block: setting clock source to no source\\n\");\n    mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n  }\n\n  fprintf(log, \"mono_clock_source set to %d, mono_clock_start=%ld\\n\",\n          (int)mono_clock_source, (long)mono_clock_start);\n\n#ifdef HAVE_CLOCK_GET_TIME\n  if ((mono_clock_source != _MHD_CLOCK_GET_TIME) && (mono_clock_service != 0))\n  {\n    fprintf(log, \"Deallocating mono_clock_service\\n\");\n    mach_port_deallocate(mach_task_self(), mono_clock_service);\n    mono_clock_service = 0;\n  }\n#else\n  (void)mono_clock_source;\n#endif\n\n#ifdef HAVE_TIMESPEC_GET\n  {\n    struct timespec tsg;\n    if (TIME_UTC == timespec_get(&tsg, TIME_UTC))\n      gettime_start = tsg.tv_sec;\n    else\n      gettime_start = 0;\n    fprintf(log, \"gettime_start set to %ld\\n\", (long)gettime_start);\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday(&tv, NULL))\n      gettime_start = tv.tv_sec;\n    else\n      gettime_start = 0;\n    fprintf(log, \"gettime_start set to %ld\\n\", (long)gettime_start);\n  }\n#endif\n\n  sys_clock_start = time(NULL);\n  fprintf(log, \"sys_clock_start set to %ld\\n\", (long)sys_clock_start);\n\n  fclose(log);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nmhd_mono_clock.c:5:10: fatal error: mach/mach.h: No such file or directory\n    5 | #include <mach/mach.h>\n      |          ^~~~~~~~~~~~~\ncompilation terminated.\nmake[3]: *** [Makefile:2133: libmicrohttpd_la-mhd_mono_clock.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_monotonic_sec_counter_init as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n#include <sys/time.h>\n#include <time.h>\n#include <stdlib.h>\n\nstatic clockid_t mono_clock_id = 0;\nstatic time_t mono_clock_start = 0;\nenum _MHD_mono_clock_source { _MHD_CLOCK_NO_SOURCE, _MHD_CLOCK_GETTIME, _MHD_CLOCK_GET_TIME, _MHD_CLOCK_GETTICKCOUNT64, _MHD_CLOCK_PERFCOUNTER, _MHD_CLOCK_GETHRTIME };\nstatic enum _MHD_mono_clock_source mono_clock_source;\n\nstatic uint64_t tick_start = 0;\nstatic uint64_t perf_freq = 0;\nstatic uint64_t perf_start = 0;\nstatic uint64_t hrtime_start = 0;\nstatic time_t gettime_start = 0;\nstatic time_t sys_clock_start = 0;\n\nvoid MHD_monotonic_sec_counter_init(void)\n{\n  FILE *log = fopen(\"/tmp/logs/177.txt\", \"a\");\n  if (log == NULL) return;\n\n#ifdef HAVE_CLOCK_GETTIME\n  struct timespec ts;\n  mono_clock_id = 0; /* _MHD_UNWANTED_CLOCK */\n#endif\n\n  mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n\n  fprintf(log, \"Entered MHD_monotonic_sec_counter_init\\n\");\n\n  if (0)\n  {\n    fprintf(log, \"Inside if(0) block: unreachable code\\n\");\n    (void)0;\n  }\n#ifdef HAVE_CLOCK_GETTIME\n#ifdef CLOCK_MONOTONIC_COARSE\n  else if (0 == clock_gettime(CLOCK_MONOTONIC_COARSE, &ts))\n  {\n    fprintf(log, \"CLOCK_MONOTONIC_COARSE succeeded\\n\");\n    mono_clock_id = CLOCK_MONOTONIC_COARSE;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n#endif\n#endif\n  else\n  {\n    fprintf(log, \"Fell through to else block: setting clock source to no source\\n\");\n    mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n  }\n\n  fprintf(log, \"mono_clock_source set to %d, mono_clock_start=%ld\\n\",\n          (int)mono_clock_source, (long)mono_clock_start);\n\n  (void)mono_clock_source;\n\n#ifdef HAVE_TIMESPEC_GET\n  {\n    struct timespec tsg;\n    if (TIME_UTC == timespec_get(&tsg, TIME_UTC))\n      gettime_start = tsg.tv_sec;\n    else\n      gettime_start = 0;\n    fprintf(log, \"gettime_start set to %ld\\n\", (long)gettime_start);\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday(&tv, NULL))\n      gettime_start = tv.tv_sec;\n    else\n      gettime_start = 0;\n    fprintf(log, \"gettime_start set to %ld\\n\", (long)gettime_start);\n  }\n#else\n  gettime_start = 0;\n  fprintf(log, \"gettime_start set to %ld\\n\", (long)gettime_start);\n#endif\n\n  sys_clock_start = time(NULL);\n  fprintf(log, \"sys_clock_start set to %ld\\n\", (long)sys_clock_start);\n\n  fclose(log);\n}\n",
  "explanation": "The original code included <mach/mach.h> which is a macOS-specific header not available on other platforms, causing compilation failure. I removed all macOS-specific constructs and headers, including \"mach/mach.h\" and related types and functions (like mach_port_t and mach_port_deallocate). I replaced the enum _MHD_mono_clock_source declaration with a correct standard enum definition and ensured mono_clock_source is declared accordingly. The conditionals referencing HAVE_CLOCK_GET_TIME and other mach-specific symbols were removed or disabled to avoid undefined references. I preserved the logic for checking CLOCK_MONOTONIC_COARSE and fallback behavior using standard POSIX clock_gettime APIs guarded by HAVE_CLOCK_GETTIME. I also ensured gettime_start initialization uses available portable POSIX and standard C APIs. The code now compiles on platforms without macOS-specific includes while preserving core logic of the monotonic counter initialization and logging."
}