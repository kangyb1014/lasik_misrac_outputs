{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/737.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_ip_count_lock:\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nJudge whether the above MHD_ip_count_lock code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "If neither MHD_USE_POSIX_THREADS nor MHD_USE_W32_THREADS is defined, the code contains unreachable code inside the #if block because the #else block is always executed, making the #if block unreachable in that configuration.",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\nstruct MHD_Daemon {\n    void* master;\n    int per_ip_connection_mutex;\n};\n\nstatic void\nMHD_mutex_lock_chk_(int *pmutex)\n{\n    FILE *f = fopen(\"/tmp/logs/737.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"Entering MHD_mutex_lock_chk_\\n\");\n    \n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    fprintf(f, \"Locking mutex\\n\");\n    // Simulate locking\n    fprintf(f, \"Mutex locked successfully\\n\");\n#else\n    fprintf(f, \"No threading support defined, skipping lock\\n\");\n#endif\n\n    fprintf(f, \"Exiting MHD_mutex_lock_chk_\\n\");\n    fclose(f);\n}\n\n// noop assert\n#define mhd_assert(ignore) ((void)0)\n\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n    FILE *f = fopen(\"/tmp/logs/737.txt\", \"a\");\n    if (f == NULL) return;\n\n    mhd_assert (NULL == daemon->master);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    fprintf(f, \"Defined threading macro, calling lock check.\\n\");\n    MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n    fprintf(f, \"No threading macro defined, skipping lock.\\n\");\n    (void) daemon;\n#endif\n\n    fprintf(f, \"Exiting MHD_ip_count_lock\\n\");\n    fclose(f);\n}\n"
}