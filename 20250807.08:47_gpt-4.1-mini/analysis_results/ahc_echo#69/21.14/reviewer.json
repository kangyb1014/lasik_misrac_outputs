{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses memcmp to compare authentication username and password strings which are null terminated strings, violating MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nahc_echo(void *cls,\n         struct MHD_Connection *connection,\n         const char *url,\n         const char *method,\n         const char *version,\n         const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  FILE *log_file = fopen(\"/tmp/logs/558.txt\", \"a\");\n  (void) cls;\n  (void) url;\n  (void) version;\n  (void) upload_data;\n  (void) upload_data_size;\n\n  // Define denied and page strings to fix undeclared identifiers\n  const char DENIED[] = \"Access Denied.\";\n  const char PAGE[] = \"Welcome!\";\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"ahc_echo called with method: %s\\n\", method);\n  }\n\n  if (0 != strcmp(method, \"GET\"))\n  {\n    if (log_file != NULL)\n      fprintf(log_file, \"Method is not GET, returning MHD_NO\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO; /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    if (log_file != NULL)\n      fprintf(log_file, \"First call, setting req_cls to aptr and returning MHD_YES\\n\");\n    *req_cls = &aptr;\n    if (log_file != NULL) fclose(log_file);\n    return MHD_YES;\n  }\n  *req_cls = NULL; /* reset when done */\n\n  auth_info = MHD_basic_auth_get_username_password3(connection);\n  if (log_file != NULL)\n    fprintf(log_file, \"Obtained auth_info at %p\\n\", (void*)auth_info);\n\n  fail = ((NULL == auth_info) ||\n          (strlen(\"Aladdin\") != auth_info->username_len) ||\n          (0 != memcmp(auth_info->username, \"Aladdin\",\n                        (size_t)auth_info->username_len)) ||\n          (NULL == auth_info->password) ||\n          (strlen(\"open sesame\") != auth_info->password_len) ||\n          (0 != memcmp(auth_info->password, \"open sesame\",\n                        (size_t)auth_info->password_len)));\n\n  if (log_file != NULL)\n    fprintf(log_file, \"Authentication %s\\n\", fail ? \"failed\" : \"succeeded\");\n\n  if (fail)\n  {\n    response = MHD_create_response_from_buffer(strlen(DENIED), (void *)DENIED, MHD_RESPMEM_MUST_COPY);\n    ret = MHD_queue_basic_auth_required_response3(connection,\n                                                 \"TestRealm\",\n                                                 MHD_NO,\n                                                 response);\n  }\n  else\n  {\n    response = MHD_create_response_from_buffer(strlen(PAGE), (void *)PAGE, MHD_RESPMEM_MUST_COPY);\n    ret = MHD_queue_response(connection, MHD_HTTP_OK, response);\n  }\n\n  if (NULL != auth_info)\n    MHD_free(auth_info);\n  MHD_destroy_response(response);\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Response sent, ret=%d\\n\", ret);\n    fclose(log_file);\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 21.14 states that the standard library function memcmp shall not be used to compare null-terminated strings. In the provided ahc_echo code, memcmp is used to compare username and password fields against string literals. However, these username and password fields are not standard null-terminated strings; they are accompanied by explicit length fields (username_len and password_len), and memcmp compares only the specified number of bytes rather than relying on null-termination. Using memcmp to compare buffers of known length does not violate the rule because they are not being used to compare null-terminated strings; instead, they are used for binary-safe length-specified comparisons. Therefore, the report by agent A that this usage violates MISRA C 2023 Rule 21.14 is incorrect."
}