{
  "user_message": "An agent A claimed that the following ws_receive_frame code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of ws_receive_frame.\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:When the frame indicates a text frame (frame[0] == WS_FIN | WS_OPCODE_TEXT_FRAME) and the declared length (*length) is less than the computed minimum offset for the masks and data (idx_first_data), the code accesses frame beyond its actual bounds when reading masks and data. Specifically, if *length is less than idx_first_data, indexing frame at idx_first_mask + 0..3 or idx_first_data..*length results in out-of-bounds access, violating Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic unsigned char *\nws_receive_frame(unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log_file = fopen(\"/tmp/logs/31.txt\", \"a\");\n  if (log_file == NULL)\n  {\n    // Cannot log, but continue normally\n    // Do not return NULL here because this means no logging, not failure of the function\n  }\n\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned int flength;\n  unsigned int idx_first_mask;\n  unsigned int idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n\n  if (log_file != NULL)\n    fprintf(log_file, \"[ws_receive_frame] Entered with length=*length=%zd\\n\", *length);\n\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (log_file != NULL)\n      fprintf(log_file, \"[ws_receive_frame] Text frame detected. flength=%u\\n\", flength);\n\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log_file != NULL)\n        fprintf(log_file, \"[ws_receive_frame] flength==126, idx_first_mask=%u\\n\", idx_first_mask);\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log_file != NULL)\n        fprintf(log_file, \"[ws_receive_frame] flength==127, idx_first_mask=%u\\n\", idx_first_mask);\n    }\n    idx_first_data = idx_first_mask + 4;\n    if (log_file != NULL)\n      fprintf(log_file, \"[ws_receive_frame] idx_first_data=%u\\n\", idx_first_data);\n\n    if ((size_t)(*length) < idx_first_data)\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"[ws_receive_frame] ERROR: *length (%zd) < idx_first_data (%u), out-of-bounds access likely\\n\", *length, idx_first_data);\n      if (log_file != NULL)\n        fclose(log_file);\n      return NULL; // Prevent out-of-bounds\n    }\n\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    if (log_file != NULL)\n      fprintf(log_file, \"[ws_receive_frame] masks bytes: %02X %02X %02X %02X\\n\",\n              masks[0], masks[1], masks[2], masks[3]);\n\n    data_length = (size_t)*length - idx_first_data;\n    if (data_length > 0)\n    {\n      msg = (unsigned char *)malloc(data_length + 1);\n      if (msg != NULL)\n      {\n        for (i = idx_first_data, j = 0; i < *length; i++, j++)\n        {\n          msg[j] = frame[i] ^ masks[j % 4];\n        }\n        msg[j] = '\\0';\n        *length = (ssize_t)data_length;\n        if (log_file != NULL)\n          fprintf(log_file, \"[ws_receive_frame] Unmasked message length=%zd\\n\", *length);\n      }\n      else\n      {\n        if (log_file != NULL)\n          fprintf(log_file, \"[ws_receive_frame] malloc failed\\n\");\n      }\n    }\n    else\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"[ws_receive_frame] No data to process, data_length=%zu\\n\", data_length);\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    if (log_file != NULL)\n      fprintf(log_file, \"[ws_receive_frame] Control close frame detected\\n\");\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log_file != NULL)\n      fprintf(log_file, \"[ws_receive_frame] Other frame type=%d\\n\", *type);\n  }\n\n  if (log_file != NULL)\n    fclose(log_file);\n  return msg;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The original ws_receive_frame code reads from the frame buffer at indices idx_first_mask + 0..3 and from idx_first_data up to *length, assuming *length is at least idx_first_data + data bytes. However, the code does not check whether *length is sufficient to cover these accesses before dereferencing the frame buffer. If *length is less than idx_first_data, accessing frame at idx_first_mask + 0..3 (which is just before idx_first_data) or iterating over indices from idx_first_data to *length will go beyond the valid bounds of frame. This constitutes an out-of-bounds access, violating MISRA C 2023 Rule 21.17 which forbids string handling operations that access out-of-bounds memory of the referenced objects. The scenario given by agent A to demonstrate this violation is logically sound: insufficient *length can cause out-of-bounds reads in the original code. The provided test code tries to add a safeguard check to prevent this out-of-bounds access, confirming the potential issue. Although the test code failed to compile, the reasoning about the out-of-bounds access remains valid. Therefore, the violation report of Rule 21.17 is correct."
}