{
  "user_message": "An agent A claimed that the following ws_receive_frame code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of ws_receive_frame.\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the for loop 'for (i = idx_first_data, j = 0; i < *length; i++, j++)' there are two loop counters 'i' and 'j'. Rule 14.2 mandates that there shall be only one loop counter in a for loop, and it shall not be modified in the loop body. Here, two loop counters are used, which violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic unsigned char *\nws_receive_frame(unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  FILE *log_file = fopen(\"/tmp/logs/28.txt\", \"w\");\n  if (log_file == NULL) {\n    /* Handle error opening log file if needed */\n    // For safety, we continue without logging if fopen fails\n  }\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log_file) fprintf(log_file, \"flength is 126, idx_first_mask set to 4\\n\");\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log_file) fprintf(log_file, \"flength is 127, idx_first_mask set to 10\\n\");\n    }\n    idx_first_data = (unsigned char)(idx_first_mask + 4);\n    data_length = (size_t)*length - idx_first_data;\n    if (log_file) fprintf(log_file, \"Calculated idx_first_data=%d, data_length=%zu\\n\", idx_first_data, data_length);\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = (unsigned char *)malloc(data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        if (log_file) fprintf(log_file, \"Loop iteration i=%d, j=%d: frame[i]=%02x mask[j%%4]=%02x\\n\", i, j, frame[i], masks[j % 4]);\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t)data_length;\n      msg[j] = '\\0';\n      if (log_file) fprintf(log_file, \"Loop completed, message length set to %zd\\n\", data_length);\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    if (log_file) fprintf(log_file, \"Frame type is CON_CLOSE_FRAME\\n\");\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log_file) fprintf(log_file, \"Frame type set to opcode %d\\n\", *type);\n  }\n\n  if (log_file) fclose(log_file);\n  return msg;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 14.2 requires that a for loop shall be well-formed with exactly one loop counter. In the code provided, the for loop header declares and uses two variables, 'i' and 'j', both being incremented in the third clause (i++, j++). According to the rule, there shall only be one loop counter in a for loop, and it shall not be modified in the loop body. Here, both 'i' and 'j' are effectively loop counters because both are initialized, tested implicitly through 'i < *length', and incremented each iteration. Moreover, 'j' is used in the loop body to index into msg[] and masks[], thus 'j' serves as a loop counter. This structure violates Rule 14.2's requirement of having only one loop counter in the for statement. Therefore, the violation reported by agent A is correct. The addition of logging does not affect the rule but the agent's modified code does not compile, which does not invalidate the violation report. The core issue is the use of two loop counters 'i' and 'j' in the for loop, which is non-compliant with MISRA C 2023 Rule 14.2."
}