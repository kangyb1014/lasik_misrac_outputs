{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_receive_frame:\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n</additional code>\nJudge whether the above ws_receive_frame code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The pointer 'frame' passed to the function ws_receive_frame is of type 'unsigned char *' and points to data that is not intended to be modified by the function. The function reads the data from 'frame' without modifying it, so to conform to MISRA C 2023 Rule 8.13, the pointer should be to a 'const unsigned char *' to indicate the data is not modified. Hence, the rule is violated because 'frame' should be 'const unsigned char *'.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n#define WS_FIN 128\n#define WS_OPCODE_TEXT_FRAME 1\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log_file = fopen(\"/tmp/logs/27.txt\", \"a\");\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg = NULL;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered ws_receive_frame\\n\");\n    fprintf(log_file, \"First byte of frame: 0x%X\\n\", frame[0]);\n  }\n\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Frame indicates text frame. Length fields: flength=%u, idx_first_mask=%u, idx_first_data=%u\\n\",\n              flength, idx_first_mask, idx_first_data);\n      fprintf(log_file, \"Data length calculated: %zu\\n\", data_length);\n    }\n\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Masks extracted: %02X %02X %02X %02X\\n\",\n              masks[0], masks[1], masks[2], masks[3]);\n    }\n\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n\n      if (log_file != NULL)\n      {\n        fprintf(log_file, \"Message unmasked and allocated with length: %zd\\n\", *length);\n      }\n    }\n    else\n    {\n      if (log_file != NULL)\n      {\n        fprintf(log_file, \"Memory allocation failed for message\\n\");\n      }\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    if (log_file != NULL) {\n      fprintf(log_file, \"Control close frame received\\n\");\n    }\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log_file != NULL) {\n      fprintf(log_file, \"Other frame type: %d\\n\", *type);\n    }\n  }\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Exiting ws_receive_frame\\n\");\n    fclose(log_file);\n  }\n\n  return msg;\n}\n"
}