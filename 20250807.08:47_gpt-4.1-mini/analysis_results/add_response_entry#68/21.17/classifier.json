{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/551.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function add_response_entry:\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n</additional code>\nJudge whether the above add_response_entry code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the parameter 'header' is passed as a NULL pointer, the call to strlen(header) will access memory beyond the bounds of 'header', causing undefined behavior and violating Rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n// Definitions and enums to support the test\ntypedef enum { MHD_NO = 0, MHD_YES = 1 } MHD_Result;\nenum MHD_ValueKind {};\nstruct MHD_Response {};\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  (void)response; (void)kind; (void)header; (void)header_len; (void)content; (void)content_len;\n  return true;\n}\n\nstatic MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n  FILE *log_file = fopen(\"/tmp/logs/551.txt\", \"a\");\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"Entered add_response_entry with header=%p, content=%p\\n\", (void*)header, (void*)content);\n  }\n\n  if (NULL == content)\n  {\n    if (log_file != NULL) {\n      fprintf(log_file, \"Content is NULL, returning MHD_NO\\n\");\n      fclose(log_file);\n    }\n    return MHD_NO;\n  }\n\n  // Log before strlen\n  if (log_file != NULL) {\n    fprintf(log_file, \"Calling strlen(header) where header=%p\\n\", (void*)header);\n  }\n  header_len = strlen(header);  // Potential violation if header is NULL\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"header_len = %zu\\n\", header_len);\n    fprintf(log_file, \"Calling strlen(content)\\n\");\n  }\n  content_len = strlen(content);\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"content_len = %zu\\n\", content_len);\n    fclose(log_file);\n  }\n\n  return add_response_entry_n(response, kind, header,\n                              header_len, content,\n                              content_len) ? MHD_YES : MHD_NO;\n}\n"
}