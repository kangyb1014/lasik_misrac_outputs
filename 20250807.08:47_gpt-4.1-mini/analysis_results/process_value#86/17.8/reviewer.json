{
  "user_message": "An agent A claimed that the following process_value code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of process_value.\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function process_value, the pointer parameter 'value_end' is modified by assignment (e.g., 'value_end = last_escape;'), which violates MISRA C 2023 Rule 17.8 that states function parameters should not be modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nsize_t MHD_http_unescape(char *val) { return strlen(val); }\nstatic FILE *open_log_file(void)\n{\n  static FILE *fp = NULL;\n  if (!fp) fp = fopen(\"/tmp/logs/693.txt\", \"w\");\n  return fp;\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  FILE *log_fp = open_log_file();\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  fprintf(log_fp, \"Start process_value\\n\");\n\n  (void)((pp->xbuf_pos < sizeof(xbuf)) || (fprintf(log_fp, \"Assertion failed: xbuf_pos < sizeof(xbuf)\\n\"), 0));\n  (void)(((NULL == value_start) || (NULL != value_end)) || (fprintf(log_fp, \"Assertion failed: (NULL == value_start) || (NULL != value_end)\\n\"), 0));\n  (void)(((NULL != value_start) || (NULL == value_end)) || (fprintf(log_fp, \"Assertion failed: (NULL != value_start) || (NULL == value_end)\\n\"), 0));\n  (void)(((NULL == last_escape) || (NULL != value_start)) || (fprintf(log_fp, \"Assertion failed: (NULL == last_escape) || (NULL != value_start)\\n\"), 0));\n\n  if (0 != pp->xbuf_pos) {\n    memcpy(xbuf, pp->xbuf, pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n\n  if ((NULL != last_escape) && (((size_t)(value_end - last_escape)) < sizeof(pp->xbuf)))\n  {\n    (void)((value_end >= last_escape) || (fprintf(log_fp, \"Assertion failed: value_end >= last_escape\\n\"), 0));\n    pp->xbuf_pos = (size_t)(value_end - last_escape);\n    memcpy(pp->xbuf, last_escape, (size_t)(value_end - last_escape));\n    fprintf(log_fp, \"Modifying parameter value_end from %p to %p (last_escape)\\n\", (void *)value_end, (void *)last_escape);\n    value_end = last_escape; // Rule 17.8 violation: modifying pointer parameter\n  }\n\n  while ((value_start != value_end) || (pp->must_ikvi) || (xoff > 0))\n  {\n    size_t delta = (size_t)(value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    (void)((value_end >= value_start) || (fprintf(log_fp, \"Assertion failed: value_end >= value_start\\n\"), 0));\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n\n    if (0 != delta)\n    {\n      memcpy(&xbuf[xoff], value_start, delta);\n      xoff += delta;\n      value_start += delta;\n    }\n\n    if ((xoff > 0) && ('%' == xbuf[xoff - 1]))\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ((xoff > 1) && ('%' == xbuf[xoff - 2]))\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        memcpy(pp->xbuf, &xbuf[xoff], 2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    (void)((xoff < sizeof(xbuf)) || (fprintf(log_fp, \"Assertion failed: xoff < sizeof(xbuf)\\n\"), 0));\n    xbuf[xoff] = '\\0';\n    if (0 != xoff)\n    {\n      MHD_unescape_plus(xbuf);\n      xoff = MHD_http_unescape(xbuf);\n    }\n\n    if (pp->must_ikvi || (0 != xoff))\n    {\n      pp->must_ikvi = false;\n      fprintf(log_fp, \"Calling ikvi callback with offset %llu and length %zu\\n\",\n           (unsigned long long)pp->value_offset, xoff);\n      if (pp->ikvi(pp->cls, 0, (const char *)&pp[1], NULL, NULL, NULL, xbuf, pp->value_offset, xoff) == 0)\n      {\n        pp->state = PP_Error;\n        fprintf(log_fp, \"ikvi callback returned MHD_NO, setting state to PP_Error and returning\\n\");\n        fflush(log_fp);\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';\n      memmove(xbuf, &xbuf[delta], clen);\n    }\n    xoff = clen;\n  }\n  fprintf(log_fp, \"End process_value\\n\");\n  fflush(log_fp);\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The MISRA C 2023 Rule 17.8 states that a function parameter itself should not be modified. While the object referred to by a pointer parameter can be modified, the pointer variable passed as a parameter shall not be assigned a new value within the function. In the provided code, 'value_end' is a parameter declared as 'const char *value_end'. Inside the function, the line 'value_end = last_escape;' modifies the pointer 'value_end', assigning it a different address. This is a direct modification of a function parameter variable, which violates Rule 17.8. The fact that 'value_end' is a pointer to const data does not prevent modification of the pointer variable itself; it only restricts modifying the data pointed to. Therefore, the agent A's claim that the code violates Rule 17.8 is correct because the pointer parameter 'value_end' is reassigned within the function. The test code to demonstrate this also reflects this pointer modification, confirming the claim. Hence, the report by agent A is correct."
}