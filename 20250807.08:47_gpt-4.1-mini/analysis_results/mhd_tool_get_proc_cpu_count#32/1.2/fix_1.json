{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  FILE *log_file = fopen(\"/tmp/logs/256.txt\", \"a\");\n  if (log_file == NULL)\n  {\n    return -1;\n  }\n\n  fprintf(log_file, \"Entering mhd_tool_get_proc_cpu_count\\n\");\n\n#if defined(__linux__) || defined(__GLIBC__)\n  fprintf(log_file, \"Using linux/glibc affinity APIs\\n\");\n  int res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  fprintf(log_file, \"sched_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  fprintf(log_file, \"cpuset_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from cpuset_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n#else  /* ! __linux__ && ! __GLIBC__ */\n  fprintf(log_file, \"Using non-linux/glibc affinity APIs\\n\");\n  int res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  fprintf(log_file, \"cpuset_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from cpuset_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  fprintf(log_file, \"sched_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  fprintf(log_file, \"sched_getaffinity_np result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity_np path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  fprintf(log_file, \"w32 result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from w32 path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  fprintf(log_file, \"All methods failed, returning -1\\n\");\n  fclose(log_file);\n  return -1;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpm5o1z88r/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of mhd_tool_get_proc_cpu_count as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "int\nmhd_tool_get_proc_cpu_count (void)\n{\n  FILE *log_file = fopen(\"/tmp/logs/256.txt\", \"a\");\n  if (log_file == NULL)\n  {\n    return -1;\n  }\n\n  fprintf(log_file, \"Entering mhd_tool_get_proc_cpu_count\\n\");\n\n#if defined(__linux__) || defined(__GLIBC__)\n  fprintf(log_file, \"Using linux/glibc affinity APIs\\n\");\n  int res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  fprintf(log_file, \"sched_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  fprintf(log_file, \"cpuset_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from cpuset_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n#else  /* ! __linux__ && ! __GLIBC__ */\n  fprintf(log_file, \"Using non-linux/glibc affinity APIs\\n\");\n  int res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  fprintf(log_file, \"cpuset_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from cpuset_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  fprintf(log_file, \"sched_getaffinity result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  fprintf(log_file, \"sched_getaffinity_np result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from sched_getaffinity_np path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  fprintf(log_file, \"w32 result: %d\\n\", res);\n  if (0 < res)\n  {\n    fprintf(log_file, \"Returning %d from w32 path\\n\", res);\n    fclose(log_file);\n    return res;\n  }\n\n  fprintf(log_file, \"All methods failed, returning -1\\n\");\n  fclose(log_file);\n  return -1;\n}\n",
  "explanation": "The original compilation error is related to a missing 'makeinfo' tool during the build process, which is unrelated to the provided C code; hence no changes to the code logic were needed.\n\nHowever, the code as is uses functions whose declarations are missing from the snippet, which could cause compilation warnings/errors if those functions aren't declared or linked properly.\n\nAssuming the functions like mhd_tool_get_proc_cpu_count_sched_getaffinity_() etc. are defined elsewhere, this code should compile correctly.\n\nTherefore, the fix is to ensure the code snippet is syntactically correct and keeps the original logic intact, which it already does.\n\nNo modifications to the function's internals or macros were needed, preserving original behavior.\n\nIf compilation issues arise in the overall build, install the 'makeinfo' utility from the Texinfo package to resolve the build failure, as it is a missing external tool causing the reported error, not an issue with this C code."
}