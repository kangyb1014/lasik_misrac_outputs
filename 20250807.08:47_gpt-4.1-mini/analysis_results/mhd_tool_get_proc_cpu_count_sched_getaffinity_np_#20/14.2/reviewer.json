{
  "user_message": "An agent A claimed that the following mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_proc_cpu_count_sched_getaffinity_np_.\n```c\nstatic int\nmhd_tool_get_proc_cpu_count_sched_getaffinity_np_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SCHED_GETAFFINITY_NP) && defined(HAVE_GETPID)\n  /* NetBSD style */\n  cpuset_t *cpuset_ptr;\n  cpuset_ptr = cpuset_create ();\n  if (NULL != cpuset_ptr)\n  {\n    if (0 == sched_getaffinity_np (getpid (), cpuset_size (cpuset_ptr),\n                                   cpuset_ptr))\n    {\n      cpuid_t cpu_num;\n#if defined(HAVE_SYSCONF) && defined(HAVE_DECL__SC_NPROCESSORS_CONF)\n      unsigned int max_num = 0;\n      long sc_value;\n      sc_value = sysconf (_SC_NPROCESSORS_ONLN);\n      if (0 < sc_value)\n        max_num = (unsigned int) sc_value;\n      if (0 < max_num)\n      {\n        ret = 0;\n        for (cpu_num = 0; cpu_num < max_num; ++cpu_num)\n          if (0 < cpuset_isset (cpu_num, cpuset_ptr))\n            ++ret;\n      }\n      else /* Combined with the next 'if' */\n#endif /* HAVE_SYSCONF && HAVE_DECL__SC_NPROCESSORS_CONF */\n      if (1)\n      {\n        int res;\n        cpu_num = 0;\n        ret = 0;\n        do\n        {\n          res = cpuset_isset (cpu_num++, cpuset_ptr);\n          if (0 < res)\n            ++ret;\n        } while (0 <= res);\n      }\n#ifdef __NetBSD__\n      if (0 == ret)\n      {\n        /* On NetBSD \"unset\" affinity (exactly zero CPUs) means\n           \"all CPUs are available\". */\n        ret = mhd_tool_get_sys_cpu_count_sysctl_ ();\n      }\n#endif /* __NetBSD__ */\n    }\n    cpuset_destroy (cpuset_ptr);\n  }\n#endif /* HAVE_SCHED_GETAFFINITY_NP && HAVE_GETPID */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs because the loop counter 'cpu_num' is modified within the loop body via the call to cpuset_isset(cpu_num++, cpuset_ptr) inside the do-while loop, which violates clause 4 that states the loop counter shall not be modified in the for loop body. Specifically, although the loop is a do-while loop, the post-increment in the function argument effectively modifies the loop counter in the loop body, causing the violation of MISRA C 2023 Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic int\nmhd_tool_get_proc_cpu_count_sched_getaffinity_np_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SCHED_GETAFFINITY_NP) && defined(HAVE_GETPID)\n  FILE *log_file = fopen(\"/tmp/logs/164.txt\", \"w\");\n  cpu_set_t *cpuset_ptr;\n  cpuset_ptr = CPU_ALLOC(CPU_SETSIZE);\n  if (NULL != cpuset_ptr)\n  {\n    size_t size = CPU_ALLOC_SIZE(CPU_SETSIZE);\n    if (0 == sched_getaffinity(getpid(), size, cpuset_ptr))\n    {\n      unsigned int cpu_num;\n#if defined(HAVE_SYSCONF) && defined(HAVE_DECL__SC_NPROCESSORS_CONF)\n      unsigned int max_num = 0;\n      long sc_value;\n      sc_value = sysconf(_SC_NPROCESSORS_ONLN);\n      if (0 < sc_value)\n        max_num = (unsigned int) sc_value;\n      if (0 < max_num)\n      {\n        ret = 0;\n        fprintf(log_file, \"Entering for loop with max_num=%u\\n\", max_num);\n        for (cpu_num = 0; cpu_num < max_num; ++cpu_num)\n        {\n          fprintf(log_file, \"for loop iteration cpu_num=%u\\n\", cpu_num);\n          if (CPU_ISSET(cpu_num, cpuset_ptr))\n            ++ret;\n        }\n        fprintf(log_file, \"Exited for loop with ret=%d\\n\", ret);\n      }\n      else\n#endif /* HAVE_SYSCONF && HAVE_DECL__SC_NPROCESSORS_CONF */\n      {\n        int res;\n        cpu_num = 0;\n        ret = 0;\n        fprintf(log_file, \"Starting do-while loop with cpu_num=0\\n\");\n        do\n        {\n          res = CPU_ISSET(cpu_num++, cpuset_ptr);\n          fprintf(log_file, \"do-while loop cpu_num incremented to %u, res=%d\\n\", cpu_num, res);\n          if (0 < res)\n            ++ret;\n        } while (0 <= res);\n        fprintf(log_file, \"Exited do-while loop with ret=%d and cpu_num=%u\\n\", ret, cpu_num);\n      }\n#ifdef __NetBSD__\n      if (0 == ret)\n      {\n        ret = mhd_tool_get_sys_cpu_count_sysctl_();\n        fprintf(log_file, \"NetBSD fallback: ret=%d\\n\", ret);\n      }\n#endif /* __NetBSD__ */\n    }\n    CPU_FREE(cpuset_ptr);\n  }\n  if (log_file != NULL)\n  {\n    fclose(log_file);\n  }\n#endif /* HAVE_SCHED_GETAFFINITY_NP && HAVE_GETPID */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 14.2 specifies strict requirements for 'for' loops to be well-formed, including that the loop counter shall not be modified within the loop body. However, the reported code uses a do-while loop, not a 'for' loop, to iterate with the counter 'cpu_num'. Rule 14.2 applies specifically to 'for' loops, not other loop types. Therefore, the post-increment of 'cpu_num' inside the do-while loop does not violate Rule 14.2. Also, in the prior 'for' loop shown, there is no modification of the loop counter inside the loop body. Thus, the claim that the code violates MISRA C 2023 Rule 14.2 is incorrect. The test code provided failed to compile, so no runtime evidence was obtained, but structurally and by rule text, the report is inaccurate."
}