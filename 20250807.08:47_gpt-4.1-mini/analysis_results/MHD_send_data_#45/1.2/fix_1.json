{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nssize_t MHD_send_data_ (struct MHD_Connection *connection,\n                        const char *buffer,\n                        size_t buffer_size,\n                        bool push_data)\n{\n    FILE *log = fopen(\"/tmp/logs/360.txt\", \"a\");\n    if (!log) return -1;\n\n    fprintf(log, \"Entering MHD_send_data_ with socket_fd=%d, buffer_size=%zu, push_data=%d\\n\",\n            connection->socket_fd, buffer_size, push_data);\n\n    int s = connection->socket_fd;\n    ssize_t ret;\n\n#ifdef HTTPS_SUPPORT\n    const bool tls_conn = (connection->daemon->options & MHD_USE_TLS) != 0;\n#else\n    const bool tls_conn = false;\n#endif\n\n    if ((MHD_INVALID_SOCKET == s) || (MHD_CONNECTION_CLOSED == connection->state))\n    {\n        fprintf(log, \"Socket invalid or connection closed\\n\");\n        fclose(log);\n        return MHD_ERR_NOTCONN_;\n    }\n\n    if (buffer_size > SSIZE_MAX)\n    {\n        buffer_size = SSIZE_MAX;\n        push_data = false;\n        fprintf(log, \"Buffer size clipped to SSIZE_MAX, push_data set to false\\n\");\n    }\n\n    if (!tls_conn)\n    {\n        if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n        {\n            buffer_size = MHD_SCKT_SEND_MAX_SIZE_;\n            push_data = false;\n            fprintf(log, \"Buffer size clipped to MHD_SCKT_SEND_MAX_SIZE_, push_data set to false\\n\");\n        }\n\n        // Probe output before send\n        fprintf(log, \"Calling MHD_send4_ with flags including MSG_NOSIGNAL: 0x%x\\n\", MSG_NOSIGNAL_OR_ZERO);\n\n        ret = MHD_send4_(s, buffer, buffer_size, push_data ? 0 : MSG_MORE);\n\n        if (ret < 0)\n        {\n            int err = errno;\n            fprintf(log, \"send() failed with errno=%d\\n\", err);\n            fclose(log);\n            return -1; // Simplified error handling\n        }\n        fprintf(log, \"send() succeeded, returned %zd\\n\", ret);\n    }\n    else\n    {\n        fprintf(log, \"TLS connection not handled in this probe code\\n\");\n        ret = -1;\n    }\n\n    fclose(log);\n    return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpp93sgfaz/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_send_data_ as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "ssize_t MHD_send_data_ (struct MHD_Connection *connection,\n                        const char *buffer,\n                        size_t buffer_size,\n                        int push_data)  // Changed bool to int since bool may require including <stdbool.h>\n{\n    FILE *log = fopen(\"/tmp/logs/360.txt\", \"a\");\n    if (!log) return -1;\n\n    fprintf(log, \"Entering MHD_send_data_ with socket_fd=%d, buffer_size=%zu, push_data=%d\\n\",\n            connection->socket_fd, buffer_size, push_data);\n\n    int s = connection->socket_fd;\n    ssize_t ret;\n\n#ifdef HTTPS_SUPPORT\n    const int tls_conn = (connection->daemon->options & MHD_USE_TLS) != 0;\n#else\n    const int tls_conn = 0;\n#endif\n\n    if ((MHD_INVALID_SOCKET == s) || (MHD_CONNECTION_CLOSED == connection->state))\n    {\n        fprintf(log, \"Socket invalid or connection closed\\n\");\n        fclose(log);\n        return MHD_ERR_NOTCONN_;\n    }\n\n    if (buffer_size > SSIZE_MAX)\n    {\n        buffer_size = SSIZE_MAX;\n        push_data = 0;\n        fprintf(log, \"Buffer size clipped to SSIZE_MAX, push_data set to false\\n\");\n    }\n\n    if (!tls_conn)\n    {\n        if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n        {\n            buffer_size = MHD_SCKT_SEND_MAX_SIZE_;\n            push_data = 0;\n            fprintf(log, \"Buffer size clipped to MHD_SCKT_SEND_MAX_SIZE_, push_data set to false\\n\");\n        }\n\n        // Probe output before send\n        fprintf(log, \"Calling MHD_send4_ with flags including MSG_NOSIGNAL: 0x%x\\n\", MSG_NOSIGNAL_OR_ZERO);\n\n        ret = MHD_send4_(s, buffer, buffer_size, push_data ? 0 : MSG_MORE);\n\n        if (ret < 0)\n        {\n            int err = errno;\n            fprintf(log, \"send() failed with errno=%d\\n\", err);\n            fclose(log);\n            return -1; // Simplified error handling\n        }\n        fprintf(log, \"send() succeeded, returned %zd\\n\", ret);\n    }\n    else\n    {\n        fprintf(log, \"TLS connection not handled in this probe code\\n\");\n        ret = -1;\n    }\n\n    fclose(log);\n    return ret;\n}\n",
  "explanation": "The build error was related to missing tools for documentation (makeinfo) and not the code syntax itself. However, to ensure the provided code compiles cleanly in typical C environments, I replaced the use of 'bool' with 'int' as a parameter and for internal booleans because the original code didn't show an include for <stdbool.h>. This avoids compilation errors due to undefined 'bool' in C. Similarly, 'const bool tls_conn' was changed to 'const int tls_conn'. No other modifications were made to preserve the original logic. The rest of the code remains unchanged and follows the original logic precisely."
}