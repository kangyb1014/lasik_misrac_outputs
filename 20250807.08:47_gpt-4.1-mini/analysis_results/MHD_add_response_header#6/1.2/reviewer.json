{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Use of the '_MHD_EXTERN' specifier which is likely a compiler-specific language extension for symbol visibility or linkage, as it is not part of standard C. This specifier appears before the function definition of MHD_add_response_header.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const int MHD_RAF_HAS_TRANS_ENC_CHUNKED = 0x01;\nstatic const int MHD_RAF_HAS_CONTENT_LENGTH = 0x02;\nstatic const int MHD_RAF_HAS_DATE_HDR = 0x04;\nstatic const int MHD_RF_INSANITY_HEADER_CONTENT_LENGTH = 0x10;\nstatic const int MHD_RF_HEAD_ONLY_RESPONSE = 0x20;\nstatic const char *MHD_HTTP_HEADER_CONNECTION = \"Connection\";\nstatic const char *MHD_HTTP_HEADER_TRANSFER_ENCODING = \"Transfer-Encoding\";\nstatic const char *MHD_HTTP_HEADER_DATE = \"Date\";\nstatic const char *MHD_HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\n\nstatic MHD_Result add_response_header_connection(struct MHD_Response *resp, const char *content)\n{\n    // Dummy implementation\n    (void)resp; (void)content;\n    return MHD_YES;\n}\nstatic MHD_Result add_response_entry(struct MHD_Response *response, int kind, const char *header, const char *content)\n{\n    // Dummy always yes\n    (void)response; (void)kind; (void)header; (void)content;\n    return MHD_YES;\n}\nenum MHD_Result\nMHD_add_response_header(struct MHD_Response *response,\n                       const char *header,\n                       const char *content)\n{\n    FILE *log_file = fopen(\"/tmp/logs/48.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"MHD_add_response_header called with header='%s', content='%s'\\n\", header, content);\n    }\n\n    if (MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_CONNECTION))\n    {\n        if (log_file) fprintf(log_file, \"Header is 'Connection', calling add_response_header_connection\\n\");\n        if (log_file) fclose(log_file);\n        return add_response_header_connection(response, content);\n    }\n\n    if (MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_TRANSFER_ENCODING))\n    {\n        if (log_file) fprintf(log_file, \"Header is 'Transfer-Encoding'\\n\");\n        if (!MHD_str_equal_caseless_(content, \"chunked\"))\n        {\n            if (log_file) fprintf(log_file, \"Content is not 'chunked', returning MHD_NO\\n\");\n            if (log_file) fclose(log_file);\n            return MHD_NO;\n        }\n        if ((response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED) != 0)\n        {\n            if (log_file) fprintf(log_file, \"Already has chunked encoding, returning MHD_YES\\n\");\n            if (log_file) fclose(log_file);\n            return MHD_YES;\n        }\n        if (((response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH) != 0) &&\n            ((response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH) == 0))\n        {\n            if (log_file) fprintf(log_file, \"Has Content-Length header and no insanity flag, returning MHD_NO\\n\");\n            if (log_file) fclose(log_file);\n            return MHD_NO;\n        }\n        if (MHD_NO != add_response_entry(response, 0, header, content))\n        {\n            response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n            if (log_file) fprintf(log_file, \"Added chunked Transfer-Encoding header, returning MHD_YES\\n\");\n            if (log_file) fclose(log_file);\n            return MHD_YES;\n        }\n        if (log_file) fprintf(log_file, \"Failed to add Transfer-Encoding header, returning MHD_NO\\n\");\n        if (log_file) fclose(log_file);\n        return MHD_NO;\n    }\n\n    if (MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_DATE))\n    {\n        if (log_file) fprintf(log_file, \"Header is 'Date'\\n\");\n        if ((response->flags_auto & MHD_RAF_HAS_DATE_HDR) != 0)\n        {\n            // In original code removes old header\n            if (log_file) fprintf(log_file, \"Date header already present, old header removed\\n\");\n        }\n        if (MHD_NO != add_response_entry(response, 0, header, content))\n        {\n            response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n            if (log_file) fprintf(log_file, \"Added Date header, returning MHD_YES\\n\");\n            if (log_file) fclose(log_file);\n            return MHD_YES;\n        }\n        if (log_file) fprintf(log_file, \"Failed to add Date header, returning MHD_NO\\n\");\n        if (log_file) fclose(log_file);\n        return MHD_NO;\n    }\n\n    if (MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_CONTENT_LENGTH))\n    {\n        if (log_file) fprintf(log_file, \"Header is 'Content-Length'\\n\");\n        if (((response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH) != 0) ||\n            (((response->flags & MHD_RF_HEAD_ONLY_RESPONSE) != 0) &&\n             ((response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED | MHD_RAF_HAS_CONTENT_LENGTH)) == 0)))\n        {\n            if (MHD_NO != add_response_entry(response, 0, header, content))\n            {\n                response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n                if (log_file) fprintf(log_file, \"Added Content-Length header, returning MHD_YES\\n\");\n                if (log_file) fclose(log_file);\n                return MHD_YES;\n            }\n        }\n        if (log_file) fprintf(log_file, \"Conditions for adding Content-Length not met or add failed, returning MHD_NO\\n\");\n        if (log_file) fclose(log_file);\n        return MHD_NO;\n    }\n\n    if (log_file) fprintf(log_file, \"Default case, calling add_response_entry\\n\");\n    if (log_file) fclose(log_file);\n    return add_response_entry(response, 0, header, content);\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent A claims that the usage of the '_MHD_EXTERN' specifier in the function definition constitutes a violation of MISRA C 2023 Rule 1.2, which prohibits use of language extensions not in standard C. However, '_MHD_EXTERN' is likely a macro defined elsewhere in the code base, commonly to manage linkage specifications such as 'extern' or compiler-specific attributes (e.g., visibility attributes) in a way that can be toggled per compiler or platform. Without the actual definition of '_MHD_EXTERN', we cannot definitely conclude it is a language extension; it might simply expand to 'extern' or be empty, both of which are standard C language constructs. MISRA 1.2 only prohibits compiler language extensions explicitly documented as such, not standard macros or common idioms for linkage. Since no evidence has been provided that '_MHD_EXTERN' expands to a compiler-specific extension, the assertion is speculative. Therefore, the report that the code violates Rule 1.2 based solely on the presence of '_MHD_EXTERN' is not confirmed and so the report is not correct per MISRA criteria."
}