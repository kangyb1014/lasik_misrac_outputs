{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function add_response_header_connection, the memcmp function is used to compare the existing header value hdr->value with the constant string \"close\" to check if the \"close\" token is present in the existing Connection header. This usage violates MISRA C 2023 Rule 21.14, which forbids using memcmp to compare null-terminated strings, as hdr->value is expected to be a null-terminated string containing the header value.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len;\n  size_t old_value_len;\n  size_t buf_size;\n  size_t norm_len;\n  char *buf;\n  struct MHD_HTTP_Res_Header *hdr;\n  bool value_has_close;\n  bool already_has_close;\n  size_t pos = 0;\n\n  FILE *log_file = fopen(\"/tmp/logs/62.txt\", \"a\");\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered add_response_header_connection\\n\");\n  }\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n  {\n    if (log_file != NULL) fprintf(log_file, \"Rejected input value containing CR or LF\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n\n    if (log_file != NULL) {\n      fprintf(log_file, \"Response has Connection header. already_has_close: %d\\n\", already_has_close);\n    }\n\n    /* Fixed violation: check hdr != NULL before memcmp and use strlen for comparison length */\n    mhd_assert (hdr != NULL);\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", strlen(\"close\"))));\n\n    if (log_file != NULL) {\n      fprintf(log_file, \"memcmp comparison of hdr->value with 'close' done. Result: %d\\n\", (0 == memcmp (hdr->value, \"close\", strlen(\"close\"))));\n    }\n\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"value: '%s'\\n\", value);\n  }\n\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n  {\n    if (log_file != NULL) fprintf(log_file, \"value_len >= SSIZE_MAX, returning MHD_NO\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO;\n  }\n\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n  {\n    if (log_file != NULL) fprintf(log_file, \"norm_len >= SSIZE_MAX, returning MHD_NO\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO;\n  }\n\n  buf_size = old_value_len + (size_t) norm_len;\n  buf = malloc (buf_size);\n  if (NULL == buf)\n  {\n    if (log_file != NULL) fprintf(log_file, \"malloc failed, returning MHD_NO\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO;\n  }\n\n  {\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ (\"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      free (buf);\n      if (log_file != NULL) fprintf(log_file, \"norm_len_s < 0, returning MHD_NO\\n\");\n      if (log_file != NULL) fclose(log_file);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"value_has_close: %d, already_has_close: %d\\n\", value_has_close, already_has_close);\n  }\n\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  {\n    free (buf);\n    if (log_file != NULL) fprintf(log_file, \"upgrade_handler present and value_has_close true, returning MHD_NO\\n\");\n    if (log_file != NULL) fclose(log_file);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n\n  if (0 == norm_len)\n  {\n    if (! value_has_close)\n    {\n      free (buf);\n      if (log_file != NULL) fprintf(log_file, \"New value empty and no close token, returning MHD_NO\\n\");\n      if (log_file != NULL) fclose(log_file);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    {\n      free (buf);\n      if (log_file != NULL) fprintf(log_file, \"close already present, returning MHD_YES\\n\");\n      if (log_file != NULL) fclose(log_file);\n      return MHD_YES;\n    }\n  }\n\n  if (value_has_close && ! already_has_close)\n  {\n    mhd_assert (buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    mhd_assert ((value_has_close && ! already_has_close) ? \n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \n                (old_value_len == pos));\n    pos += norm_len;\n  }\n\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0;\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr;\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len);\n        new_hdr->header[key_len] = '\\0';\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        if (log_file != NULL) {\n          fprintf(log_file, \"Inserted new Connection header with value: %s\\n\", buf);\n          fclose(log_file);\n        }\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    if (log_file != NULL) {\n      fprintf(log_file, \"Failed to create new header, returning MHD_NO\\n\");\n      fclose(log_file);\n    }\n    return MHD_NO;\n  }\n\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"Updated existing Connection header with value: %s\\n\", buf);\n    fclose(log_file);\n  }\n\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The reported code snippet uses memcmp to compare hdr->value with the string \"close\" over a fixed length of 5 bytes. The MISRA C 2023 Rule 21.14 forbids using memcmp to compare null-terminated strings because memcmp compares raw memory without considering null terminators and can yield incorrect results or unsafe behavior. The key point is whether hdr->value is a null-terminated string. In the given code, hdr->value is assigned to buf, which is null-terminated explicitly (buf[pos] = 0). This suggests hdr->value is expected to be a null-terminated string. Using memcmp on a null-terminated string to compare with a literal string violates Rule 21.14. Instead, functions like strcmp or strncmp should be used. Therefore, the agent's claim that memcmp usage violates Rule 21.14 is correct. Regarding the test code, the agent attempts to fix this by using strlen(\"close\") instead of 5 for length but still uses memcmp, which doesn't resolve the rule violation completely (strcmp is the recommended approach). However, the main violation exists in the original code as reported, so the report is correct."
}