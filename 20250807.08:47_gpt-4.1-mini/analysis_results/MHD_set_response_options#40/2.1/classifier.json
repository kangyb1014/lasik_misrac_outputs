{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/321.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_response_options:\nstruct MHD_Response\n{\n\n  /**\n   * Head of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *first_header;\n\n  /**\n   * Tail of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *last_header;\n\n  /**\n   * Buffer pointing to data that we are supposed\n   * to send as a response.\n   */\n  const char *data;\n\n  /**\n   * Closure to give to the content reader @e crc\n   * and content reader free callback @e crfc.\n   */\n  void *crc_cls;\n\n  /**\n   * How do we get more data?  NULL if we are\n   * given all of the data up front.\n   */\n  MHD_ContentReaderCallback crc;\n\n  /**\n   * NULL if data must not be freed, otherwise\n   * either user-specified callback or \"&free\".\n   */\n  MHD_ContentReaderFreeCallback crfc;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * Application function to call once we are done sending the headers\n   * of the response; NULL unless this is a response created with\n   * #MHD_create_response_for_upgrade().\n   */\n  MHD_UpgradeHandler upgrade_handler;\n\n  /**\n   * Closure for @e uh.\n   */\n  void *upgrade_handler_cls;\n#endif /* UPGRADE_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Mutex to synchronize access to @e data, @e size and\n   * @e reference_count.\n   */\n  MHD_mutex_ mutex;\n#endif\n\n  /**\n   * The size of the response body.\n   * Set to #MHD_SIZE_UNKNOWN if size is not known.\n   */\n  uint64_t total_size;\n\n  /**\n   * At what offset in the stream is the\n   * beginning of @e data located?\n   */\n  uint64_t data_start;\n\n  /**\n   * Offset to start reading from when using @e fd.\n   */\n  uint64_t fd_off;\n\n  /**\n   * Number of bytes ready in @e data (buffer may be larger\n   * than what is filled with payload).\n   */\n  size_t data_size;\n\n  /**\n   * Size of the writable data buffer @e data.\n   */\n  size_t data_buffer_size;\n\n  /**\n   * Reference count for this response.  Free once the counter hits\n   * zero.\n   */\n  unsigned int reference_count;\n\n  /**\n   * File-descriptor if this response is FD-backed.\n   */\n  int fd;\n\n  /**\n   * Flags set for the MHD response.\n   */\n  enum MHD_ResponseFlags flags;\n\n  /**\n   * Automatic flags set for the MHD response.\n   */\n  enum MHD_ResponseAutoFlags flags_auto;\n\n  /**\n   * If the @e fd is a pipe (no sendfile()).\n   */\n  bool is_pipe;\n\n  /**\n   * I/O vector used with MHD_create_response_from_iovec.\n   */\n  MHD_iovec_ *data_iov;\n\n  /**\n   * Number of elements in data_iov.\n   */\n  unsigned int data_iovcnt;\n}\n</additional code>\nJudge whether the above MHD_set_response_options code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "There exists unreachable code inside the switch statement: the case 'MHD_RO_END' has a break statement, but this case is never encountered within the while loop since the loop exits when 'ro == MHD_RO_END'. Hence, the 'case MHD_RO_END:' and its break statement are unreachable code.",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ResponseFlags {\n    MHD_RF_INSANITY_HEADER_CONTENT_LENGTH = 0x01,\n    MHD_RF_HEAD_ONLY_RESPONSE = 0x02\n};\nenum MHD_ResponseAutoFlags { MHD_RAF_HAS_CONTENT_LENGTH = 0x01 };\nenum MHD_ResponseOptions { MHD_RO_END = 0 };\n\nstruct MHD_Response {\n    enum MHD_ResponseFlags flags;\n    enum MHD_ResponseAutoFlags flags_auto;\n    uint64_t total_size;\n};\n\nextern enum MHD_Result MHD_set_response_options(struct MHD_Response *response, enum MHD_ResponseFlags flags, ...);\n\nenum MHD_Result MHD_set_response_options(struct MHD_Response *response,\n                                        enum MHD_ResponseFlags flags,\n                                        ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/321.txt\", \"a\");\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (fp) fprintf(fp, \"Entry: flags_auto=0x%x, flags=0x%x\\n\", response->flags_auto, response->flags);\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \\\"Content-Length\\\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      if (fp) fprintf(fp, \"Early return: remove INSANITY_HEADER_CONTENT_LENGTH flag requested\\n\");\n      if (fp) fclose(fp);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) {\n        if (fp) fprintf(fp, \"Early return: remove HEAD_ONLY_RESPONSE and no INSANITY_HEADER_CONTENT_LENGTH flag\\n\");\n        if (fp) fclose(fp);\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    if (fp) fprintf(fp, \"Early return: flags has HEAD_ONLY_RESPONSE and total_size != 0\\n\");\n    if (fp) fclose(fp);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  if (fp) fprintf(fp, \"Processing va_arg options\\n\");\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    if (fp) fprintf(fp, \"Switch case with ro=%d\\n\", ro);\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible (unreachable) */\n      if (fp) fprintf(fp, \"Unreachable case MHD_RO_END encountered\\n\");\n      break;\n    default:\n      ret = MHD_NO;\n      if (fp) fprintf(fp, \"Default case: ret set to MHD_NO\\n\");\n      break;\n    }\n  }\n  va_end (ap);\n\n  if (fp) fprintf(fp, \"Return ret=%d\\n\", ret);\n  if (fp) fclose(fp);\n  return ret;\n}\n"
}