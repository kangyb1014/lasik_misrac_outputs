{
  "user_message": "An agent A claimed that the following MHD_set_response_options code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_response_options.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the compiler-specific language extension __attribute__((visibility(\"default\"))) in the macro _MHD_EXTERN, which is a GCC extension and thus violates MISRA C 2023 Rule 1.2 that prohibits language extensions.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n    FILE *log_file = fopen(\"/tmp/logs/320.txt\", \"a\");\n    if (log_file != NULL)\n    {\n        fprintf(log_file, \"Entry: MHD_set_response_options\\n\");\n        fprintf(log_file, \"Current flags_auto: 0x%X\\n\", response->flags_auto);\n        fprintf(log_file, \"Current flags: 0x%X\\n\", response->flags);\n        fprintf(log_file, \"Requested flags: 0x%X\\n\", flags);\n    }\n\n    va_list ap;\n    enum MHD_Result ret;\n    enum MHD_ResponseOptions ro;\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    {\n        if ((0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n            (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n        {\n            if (log_file != NULL)\n            {\n                fprintf(log_file, \"Violation detected: attempt to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag. Returning MHD_NO.\\n\");\n                fclose(log_file);\n            }\n            return MHD_NO;\n        }\n        if ((0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n            (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n        {\n            if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n            {\n                if (log_file != NULL)\n                {\n                    fprintf(log_file, \"Violation detected: attempt to remove MHD_RF_HEAD_ONLY_RESPONSE flag without insanity flag. Returning MHD_NO.\\n\");\n                    fclose(log_file);\n                }\n                return MHD_NO;\n            }\n        }\n    }\n\n    if ((0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n        (0 != response->total_size))\n    {\n        if (log_file != NULL)\n        {\n            fprintf(log_file, \"Violation detected: MHD_RF_HEAD_ONLY_RESPONSE set with non-zero total_size. Returning MHD_NO.\\n\");\n            fclose(log_file);\n        }\n        return MHD_NO;\n    }\n\n    ret = MHD_YES;\n    response->flags = flags;\n\n    if (log_file != NULL)\n    {\n        fprintf(log_file, \"Flags set successfully. Proceeding to parse options.\\n\");\n    }\n\n    va_start(ap, flags);\n    while (MHD_RO_END != (ro = va_arg(ap, enum MHD_ResponseOptions)))\n    {\n        switch (ro)\n        {\n            case MHD_RO_END:\n                break;\n            default:\n                ret = MHD_NO;\n                if (log_file != NULL)\n                {\n                    fprintf(log_file, \"Unknown response option encountered. Setting ret to MHD_NO.\\n\");\n                }\n                break;\n        }\n    }\n    va_end(ap);\n\n    if (log_file != NULL)\n    {\n        fprintf(log_file, \"Exiting MHD_set_response_options with ret: %d\\n\", ret);\n        fclose(log_file);\n    }\n\n    return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim that the code violates MISRA C 2023 Rule 1.2 due to use of __attribute__((visibility(\"default\"))) in the macro _MHD_EXTERN cannot be confirmed just from the provided code snippet, because the macro definition of _MHD_EXTERN is not shown. The provided code snippet itself does not include any language compiler extensions explicitly. It is common in some projects to define _MHD_EXTERN differently depending on compiler and platform; if it expands to a compiler-specific attribute such as GCC's __attribute__((visibility(\"default\"))), then technically that is a language extension as per MISRA Rule 1.2. However, this depends on the macro definition, which is not provided. Without seeing the macro definition or confirmation that such extension is present in the actual compiled code, we cannot definitively say the code violates Rule 1.2. The test code simply added standard C code to log info and failed to compile \u2014 but that does not prove that the original code contains an extension. Therefore, the agent A's report hinges on _MHD_EXTERN being defined as a language extension which is not confirmed here. Absent evidence of such extension use in the provided source, the report is not correct."
}