{
  "user_message": "An agent A claimed that the following try_ready_normal_body code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of try_ready_normal_body.\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In try_ready_normal_body, the function pointer response->crc is called with response->data cast to a non-const pointer (char *), while it likely points to a const-qualified type representing the response data. This cast removes const qualification to pass to a function that may modify data, which violates Rule 8.13: a pointer should point to a const-qualified type whenever possible, except when the function modifies the pointed data. Here, casting away const to pass to response->crc indicates a potential violation as the function may modify the data, or the design is inconsistent regarding const qualification.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct response_props {\n  void *response;\n  size_t rsp_write_position;\n  struct {\n    void *iov;\n    size_t cnt;\n    size_t sent;\n  } resp_iov;\n  int resp_sender;\n};\nstatic void log_to_file(const char *msg)\n{\n  FILE *file = fopen(\"/tmp/logs/755.txt\", \"a\");\n  if (file != NULL)\n  {\n    fprintf(file, \"%s\\n\", msg);\n    fclose(file);\n  }\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response = (struct MHD_Response *)connection->rp.response;\n\n  log_to_file(\"Entered try_ready_normal_body\");\n\n  if ((0 == response->total_size) || (connection->rp.rsp_write_position == response->total_size))\n  {\n    log_to_file(\"Response total size is zero or fully written - ready\");\n    return MHD_YES;\n  }\n\n  if (NULL != response->data_iov)\n  {\n    log_to_file(\"Copying iov data to connection response iov\");\n    /* copied size calculation from original code */\n    /* here copy_size unused but kept as comment to keep logic consistent */\n    size_t copy_size = response->data_iovcnt * sizeof(void*);\n\n    connection->rp.resp_iov.iov = (void *)response->data_iov; /* simplified */\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    log_to_file(\"Response iov set\");\n    return MHD_YES;\n  }\n\n  if (NULL == response->crc)\n  {\n    log_to_file(\"No crc function, response ready\");\n    return MHD_YES;\n  }\n\n  /* Log state before crc call */\n  char logbuf[256];\n  snprintf(logbuf, sizeof(logbuf), \"Calling crc with rsp_write_position=%zu, data_buffer_size=%zu\", connection->rp.rsp_write_position, response->data_buffer_size);\n  log_to_file(logbuf);\n\n  /* Corrected cast to const char* as crc expects const char* */\n  ret = response->crc(response->crc_cls,\n                      connection->rp.rsp_write_position,\n                      (const char *) response->data,\n                      (size_t) MHD_MIN((uint64_t) response->data_buffer_size,\n                                       response->total_size - connection->rp.rsp_write_position));\n\n  snprintf(logbuf, sizeof(logbuf), \"crc returned %zd\", ret);\n  log_to_file(logbuf);\n\n  if (ret < 0)\n  {\n    log_to_file(\"crc returned error, closing connection\");\n    response->total_size = connection->rp.rsp_write_position;\n    return MHD_NO;\n  }\n\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n\n  if (ret == 0)\n  {\n    connection->state = 1; /* MHD_CONNECTION_NORMAL_BODY_UNREADY */\n    log_to_file(\"crc returned zero, normal body unready\");\n    return MHD_NO;\n  }\n\n  log_to_file(\"Response is ready\");\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 8.13 states that pointers should point to const-qualified types whenever possible, and pointers should not point to const-qualified types if the function modifies the pointed data. In the given code, the function pointer response->crc is called with (char *)response->data, casting away any const qualification that might exist. This cast potentially violates Rule 8.13 because it removes const qualification to pass data to a function that might modify it, suggesting an inconsistency in const usage. The actual modification by the crc function is unknown, but casting away const without clear justification is discouraged by the rule. The agent's scenario correctly identifies this risky cast and explains its relationship to Rule 8.13. Thus, the report that the code violates MISRA C 2023 Rule 8.13 is correct."
}