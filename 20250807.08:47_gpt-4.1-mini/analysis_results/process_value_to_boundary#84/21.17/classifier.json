{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified process_value_to_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of process_value_to_boundary as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of process_value_to_boundary:\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_value_to_boundary:\nstruct MHD_PostProcessor\n{\n\n  /**\n   * The connection for which we are doing\n   * POST processing.\n   */\n  struct MHD_Connection *connection;\n\n  /**\n   * Function to call with POST data.\n   */\n  MHD_PostDataIterator ikvi;\n\n  /**\n   * Extra argument to ikvi.\n   */\n  void *cls;\n\n  /**\n   * Encoding as given by the headers of the connection.\n   */\n  const char *encoding;\n\n  /**\n   * Primary boundary (points into encoding string)\n   */\n  const char *boundary;\n\n  /**\n   * Nested boundary (if we have multipart/mixed encoding).\n   */\n  char *nested_boundary;\n\n  /**\n   * Pointer to the name given in disposition.\n   */\n  char *content_name;\n\n  /**\n   * Pointer to the (current) content type.\n   */\n  char *content_type;\n\n  /**\n   * Pointer to the (current) filename.\n   */\n  char *content_filename;\n\n  /**\n   * Pointer to the (current) encoding.\n   */\n  char *content_transfer_encoding;\n\n  /**\n   * Value data left over from previous iteration.\n   */\n  char xbuf[2];\n\n  /**\n   * Size of our buffer for the key.\n   */\n  size_t buffer_size;\n\n  /**\n   * Current position in the key buffer.\n   */\n  size_t buffer_pos;\n\n  /**\n   * Current position in @e xbuf.\n   */\n  size_t xbuf_pos;\n\n  /**\n   * Current offset in the value being processed.\n   */\n  uint64_t value_offset;\n\n  /**\n   * strlen(boundary) -- if boundary != NULL.\n   */\n  size_t blen;\n\n  /**\n   * strlen(nested_boundary) -- if nested_boundary != NULL.\n   */\n  size_t nlen;\n\n  /**\n   * Do we have to call the 'ikvi' callback when processing the\n   * multipart post body even if the size of the payload is zero?\n   * Set to #MHD_YES whenever we parse a new multiparty entry header,\n   * and to #MHD_NO the first time we call the 'ikvi' callback.\n   * Used to ensure that we do always call 'ikvi' even if the\n   * payload is empty (but not more than once).\n   */\n  bool must_ikvi;\n\n  /**\n   * Set if we still need to run the unescape logic\n   * on the key allocated at the end of this struct.\n   */\n  bool must_unescape_key;\n\n  /**\n   * State of the parser.\n   */\n  enum PP_State state;\n\n  /**\n   * Side-state-machine: skip CRLF (or just LF).\n   * Set to 0 if we are not in skip mode.  Set to 2\n   * if a CRLF is expected, set to 1 if a CR should\n   * be skipped if it is the next character.\n   */\n  enum RN_State skip_rn;\n\n  /**\n   * If we are in skip_rn with \"dash\" mode and\n   * do find 2 dashes, what state do we go into?\n   */\n  enum PP_State dash_state;\n\n  /**\n   * Which headers are global? (used to tell which\n   * headers were only valid for the nested multipart).\n   */\n  enum NE_State have;\n\n}\n...\nenum PP_State\n{\n  /* general states */\n  PP_Error,\n  PP_Done,\n  PP_Init,\n  PP_NextBoundary,\n\n  /* url encoding-states */\n  PP_ProcessKey,\n  PP_ProcessValue,\n  PP_Callback,\n\n  /* post encoding-states  */\n  PP_ProcessEntryHeaders,\n  PP_PerformCheckMultipart,\n  PP_ProcessValueToBoundary,\n  PP_PerformCleanup,\n\n  /* nested post-encoding states */\n  PP_Nested_Init,\n  PP_Nested_PerformMarking,\n  PP_Nested_ProcessEntryHeaders,\n  PP_Nested_ProcessValueToBoundary,\n  PP_Nested_PerformCleanup\n\n}\n</additional code>\nJudge whether the above process_value_to_boundary code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If pp->buffer_pos is less than newline + 4 + blen, the call to memcmp at line 'if (0 != memcmp (&buf[newline + 4], boundary, blen))' accesses memory beyond the bounds of buf because the code attempts to read blen bytes starting at buf[newline + 4] without ensuring the buffer has enough data. This can lead to out-of-bounds access if buffer_pos is not properly checked or updated.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Assuming definitions for enums and constants used */\n\nenum PP_State\n{\n  PP_Error,\n  PP_Done,\n  PP_Init,\n  PP_NextBoundary,\n  PP_ProcessKey,\n  PP_ProcessValue,\n  PP_Callback,\n  PP_ProcessEntryHeaders,\n  PP_PerformCheckMultipart,\n  PP_ProcessValueToBoundary,\n  PP_PerformCleanup,\n  PP_Nested_Init,\n  PP_Nested_PerformMarking,\n  PP_Nested_ProcessEntryHeaders,\n  PP_Nested_ProcessValueToBoundary,\n  PP_Nested_PerformCleanup\n};\n\nenum RN_State { RN_Dash };\n\n#define MHD_NO 0\n#define MHD_YES 1\n\ntypedef int (*MHD_PostDataIterator)(void *, int, char *, char *, char *, char *, char *, uint64_t, size_t);\n\nstruct MHD_PostProcessor {\n  void *cls;\n  MHD_PostDataIterator ikvi;\n  char *content_name;\n  char *content_filename;\n  char *content_type;\n  char *content_transfer_encoding;\n  size_t buffer_size;\n  size_t buffer_pos;\n  uint64_t value_offset;\n  bool must_ikvi;\n  enum PP_State state;\n  enum RN_State skip_rn;\n  enum PP_State dash_state;\n};\n\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  FILE *log = fopen(\"/tmp/logs/679.txt\", \"a\");\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  fprintf(log, \"Start process_value_to_boundary: buffer_pos=%zu\\n\", pp->buffer_pos);\n\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline], '\\r', pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        fprintf(log, \"memchr returned NULL, newline set to %zu\\n\", newline);\n        break;\n      }\n      newline = (size_t) (r - buf);\n      fprintf(log, \"memchr found '\\r' at %zu\\n\", newline);\n      if (0 == memcmp (\"\\r\\n--\", &buf[newline], 4))\n        break;\n      newline++;\n    }\n\n    fprintf(log, \"Checked for boundary start, newline=%zu, buffer_pos=%zu, blen=%zu\\n\", newline, pp->buffer_pos, blen);\n\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      fprintf(log, \"Enough buffer to check boundary\\n\");\n      if (0 != memcmp (&buf[newline + 4], boundary, blen))\n      {\n        fprintf(log, \"Boundary not found at position %zu\\n\", newline);\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        fprintf(log, \"Boundary found, setting states and breaking\\n\");\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      fprintf(log, \"Not enough buffer to check full boundary. newline=%zu, buffer_pos=%zu, required=%zu\\n\",\n              newline, pp->buffer_pos, newline + blen + 4);\n      if ((0 == newline) && (pp->buffer_pos == pp->buffer_size))\n      {\n        fprintf(log, \"Buffer full with no content processed, setting error state\\n\");\n        pp->state = PP_Error;\n        fclose(log);\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n\n  if ((((pp->must_ikvi) || (0 != newline)) &&\n       (MHD_NO == pp->ikvi(pp->cls, 0, pp->content_name, pp->content_filename, pp->content_type, pp->content_transfer_encoding, buf, pp->value_offset, newline))))\n  {\n    fprintf(log, \"ikvi callback returned MHD_NO, setting error state\\n\");\n    pp->state = PP_Error;\n    fclose(log);\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n\n  fprintf(log, \"Processed successfully: value_offset=%llu, ioffptr=%zu\\n\", (unsigned long long)pp->value_offset, *ioffptr);\n  fclose(log);\n  return MHD_YES;\n}\n"
}