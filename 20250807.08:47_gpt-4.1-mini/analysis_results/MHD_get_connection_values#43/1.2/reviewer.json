{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function MHD_get_connection_values uses the compiler-specific extension __attribute__((visibility(\"default\"))) as part of the _MHD_EXTERN macro definition. This attribute is a GNU C language extension that is not part of the standard C language and is explicitly documented as a language extension in GCC and compatible compilers.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  FILE *log_file = fopen(\"/tmp/logs/344.txt\", \"a\");\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection) {\n    if (log_file != NULL) {\n      fprintf(log_file, \"MHD_get_connection_values: connection is NULL, returning -1\\n\");\n      fclose(log_file);\n    }\n    return -1;\n  }\n  if (log_file != NULL) {\n    fprintf(log_file, \"MHD_get_connection_values: starting header iteration\\n\");\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next) {\n    if (log_file != NULL) {\n      fprintf(log_file, \"Checking header: %s with kind %d against requested kind %d\\n\", pos->header, (int)pos->kind, (int)kind);\n    }\n    if (0 != ((int)pos->kind & (int)kind))\n    {\n      ret++;\n      if (log_file != NULL) {\n        fprintf(log_file, \"Header matched. Increment ret to %d\\n\", ret);\n      }\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n      {\n        if (log_file != NULL) {\n          fprintf(log_file, \"Iterator returned MHD_NO, returning ret = %d\\n\", ret);\n          fclose(log_file);\n        }\n        return ret;\n      }\n    }\n  }\n  if (log_file != NULL) {\n    fprintf(log_file, \"Completed header iteration, returning ret = %d\\n\", ret);\n    fclose(log_file);\n  }\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The reported issue concerns the use of the _MHD_EXTERN macro, which is claimed to expand to a compiler-specific extension __attribute__((visibility(\"default\"))). This GCC attribute is indeed a language extension not defined by the standard C language and clearly documented as a language extension in GCC documentation. According to MISRA C 2023 Rule 1.2, language extensions should not be used unless explicitly allowed. Since the given code snippet uses _MHD_EXTERN likely defined with that attribute, it constitutes use of a compiler-specific language extension. The test code failing to compile is irrelevant to the correctness of the claim about language extension use; the presence of the attribute alone is sufficient evidence. Therefore, the report by agent A that the code violates MISRA C 2023 Rule 1.2 because of the use of __attribute__((visibility(\"default\"))) is correct."
}