{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/150.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function keepalive_possible:\n#define MHD_lookup_header_s_token_ci(c, h, tkn) MHD_lookup_header_token_ci((c),(h),MHD_STATICSTR_LEN_(h),(tkn),MHD_STATICSTR_LEN_(tkn))\n...\n#define MHD_IS_HTTP_VER_SUPPORTED(ver) (MHD_HTTP_VER_1_0<=(ver)&&MHD_HTTP_VER_1_2__1_9>=(ver))\n...\n#define MHD_IS_HTTP_VER_1_1_COMPAT(ver) (MHD_HTTP_VER_1_1==(ver)||MHD_HTTP_VER_1_2__1_9==(ver))\n...\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_HTTP_HEADER_CONNECTION \"Connection\"\n</additional code>\nJudge whether the above keepalive_possible code violates the rule 21.14 or not.",
  "is_rule_violated": true,
  "scenario": "The function keepalive_possible uses MHD_lookup_header_s_token_ci to check for tokens like \"close\" or \"Keep-Alive\" in HTTP headers. Assuming MHD_lookup_header_s_token_ci uses memcmp internally to compare these tokens against null terminated strings (e.g., the header values), this would violate MISRA C 2023 Rule 21.14, which prohibits using memcmp to compare null terminated strings.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nenum MHD_ConnKeepAlive {\n    MHD_CONN_MUST_CLOSE,\n    MHD_CONN_USE_KEEPALIVE,\n    MHD_CONN_MUST_UPGRADE\n};\n\nstruct MHD_Response {\n    void *upgrade_handler;\n    int flags;\n    int flags_auto;\n};\n\nstruct MHD_Request {\n    int http_ver;\n};\n\nstruct MHD_Connection {\n    int keepalive;\n    int stop_with_error;\n    int discard_request;\n    int read_closed;\n    struct MHD_Response *rp;\n    struct MHD_Request rq;\n};\n\n#define MHD_RF_HTTP_1_0_COMPATIBLE_STRICT 0x1\n#define MHD_RAF_HAS_CONNECTION_CLOSE 0x1\n#define MHD_RF_HTTP_1_0_SERVER 0x1\n#define MHD_HTTP_HEADER_CONNECTION \"Connection\"\n#define MHD_HTTP_VER_1_0 10\n#define MHD_HTTP_VER_1_1 11\n#define MHD_HTTP_VER_1_2__1_9 12\n\n#define mhd_assert(ignore) ((void)0)\n\n#define MHD_IS_HTTP_VER_SUPPORTED(ver) ((MHD_HTTP_VER_1_0 <= (ver)) && ((ver) <= MHD_HTTP_VER_1_2__1_9))\n#define MHD_IS_HTTP_VER_1_1_COMPAT(ver) ((ver) == MHD_HTTP_VER_1_1 || (ver) == MHD_HTTP_VER_1_2__1_9)\n\n// Simulated function that internally uses memcmp to compare tokens (null terminated strings) - violating MISRA 21.14\nstatic int MHD_lookup_header_token_ci(const struct MHD_Connection *c, const char *header, size_t header_len, const char *token, size_t token_len) {\n    FILE *fp = fopen(\"/tmp/logs/150.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"Entered MHD_lookup_header_token_ci with header='%s', token='%s'\\n\", header, token);\n        fclose(fp);\n    }\n\n    // Example violation: memcmp used to compare null terminated strings\n    // Note: This is the violation - directly comparing token with a null terminated string.\n    if (memcmp(token, \"close\", strlen(\"close\") + 1) == 0 || memcmp(token, \"Keep-Alive\", strlen(\"Keep-Alive\") + 1) == 0) {\n        fp = fopen(\"/tmp/logs/150.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"memcmp used to compare null terminated strings - violation occurred\\n\");\n            fclose(fp);\n        }\n        return 1; // token found\n    }\n    return 0;\n}\n\n#define MHD_lookup_header_s_token_ci(c,h,tkn) MHD_lookup_header_token_ci((c),(h),strlen(h),(tkn),strlen(tkn))\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  if (NULL != r->upgrade_handler)\n  {\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}