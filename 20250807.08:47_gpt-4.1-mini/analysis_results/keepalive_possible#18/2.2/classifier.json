{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function keepalive_possible:\n#define MHD_lookup_header_s_token_ci(c, h, tkn) MHD_lookup_header_token_ci((c),(h),MHD_STATICSTR_LEN_(h),(tkn),MHD_STATICSTR_LEN_(tkn))\n...\n#define MHD_IS_HTTP_VER_SUPPORTED(ver) (MHD_HTTP_VER_1_0<=(ver)&&MHD_HTTP_VER_1_2__1_9>=(ver))\n...\n#define MHD_IS_HTTP_VER_1_1_COMPAT(ver) (MHD_HTTP_VER_1_1==(ver)||MHD_HTTP_VER_1_2__1_9==(ver))\n...\n#define MHD_HTTP_HEADER_CONNECTION \"Connection\"\n</additional code>\nJudge whether the above keepalive_possible code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "Within the function keepalive_possible, the block of code under the preprocessor conditional #ifdef UPGRADE_SUPPORT that checks for r->upgrade_handler and returns MHD_CONN_MUST_UPGRADE can be executed but does not affect program behavior if removed in a configuration where UPGRADE_SUPPORT is defined, but no upgrade logic is required. This constitutes dead code because its execution does not influence the functional outcome when the rest of the program does not rely on this upgrade handling path, fulfilling the criteria of dead code in MISRA Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  FILE *log = fopen(\"/tmp/logs/146.txt\", \"a\");\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  if(log) fprintf(log, \"Entered keepalive_possible\\n\");\n\n  mhd_assert (NULL != r);\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive) {\n    if(log) fprintf(log, \"Connection must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    if(log) fprintf(log, \"Upgrade handler present - returning MUST_UPGRADE\\n\");\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    if(log) fclose(log);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n\n  if ((c->read_closed) || (c->discard_request)) {\n    if(log) fprintf(log, \"Read closed or discard request - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT)) {\n    if(log) fprintf(log, \"HTTP 1.0 compatible strict flag set - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)) {\n    if(log) fprintf(log, \"Flags auto has connection close set - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver)) {\n    if(log) fprintf(log, \"HTTP version not supported - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    if(log) fprintf(log, \"Connection header contains close token - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      if(log) fprintf(log, \"HTTP/1.0 with Keep-Alive token - use keepalive\\n\");\n      if(log) fclose(log);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    if(log) fprintf(log, \"HTTP/1.0 without Keep-Alive token - must close\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver)) {\n    if(log) fprintf(log, \"HTTP 1.1 compatible version - use keepalive\\n\");\n    if(log) fclose(log);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  if(log) {\n    fprintf(log, \"Default case - must close\\n\");\n    fclose(log);\n  }\n\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}