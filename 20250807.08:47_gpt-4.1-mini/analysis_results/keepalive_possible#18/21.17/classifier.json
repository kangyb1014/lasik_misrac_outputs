{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/151.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function keepalive_possible:\n#define MHD_lookup_header_s_token_ci(c, h, tkn) MHD_lookup_header_token_ci((c),(h),MHD_STATICSTR_LEN_(h),(tkn),MHD_STATICSTR_LEN_(tkn))\n...\n#define MHD_IS_HTTP_VER_SUPPORTED(ver) (MHD_HTTP_VER_1_0<=(ver)&&MHD_HTTP_VER_1_2__1_9>=(ver))\n...\n#define MHD_HTTP_HEADER_CONNECTION \"Connection\"\n...\n#define MHD_IS_HTTP_VER_1_1_COMPAT(ver) (MHD_HTTP_VER_1_1==(ver)||MHD_HTTP_VER_1_2__1_9==(ver))\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nJudge whether the above keepalive_possible code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "A violation of MISRA C 2023 Rule 21.17 can occur if the function MHD_lookup_header_s_token_ci is invoked with string arguments whose lengths are not accurately managed, potentially causing the underlying string handling functions in <string.h> to access memory beyond the bounds of the objects referenced by their pointer parameters. For instance, if MHD_lookup_header_s_token_ci or MHD_lookup_header_token_ci uses strlen or similar functions on these strings without proper bounds checking, it can potentially lead to out-of-bounds memory access.",
  "test_code": "static enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  FILE *log = fopen(\"/tmp/logs/151.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"Entering keepalive_possible\\n\");\n    fprintf(log, \"Connection keepalive flag: %d\\n\", c->keepalive);\n  }\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to keepalive flag\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  if (NULL != r->upgrade_handler)\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_UPGRADE due to upgrade_handler\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif\n\n  mhd_assert((! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to read_closed or discard_request\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to HTTP 1.0 strict flag\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to has connection close flag\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to unsupported HTTP version\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE due to Connection close token\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      if (log) fprintf(log, \"Return MHD_CONN_USE_KEEPALIVE due to Connection Keep-Alive token\\n\");\n      if (log) fclose(log);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE for HTTP 1.0 without Keep-Alive\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    if (log) fprintf(log, \"Return MHD_CONN_USE_KEEPALIVE for HTTP 1.1 compatible version\\n\");\n    if (log) fclose(log);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  if (log) fprintf(log, \"Return MHD_CONN_MUST_CLOSE as default case\\n\");\n  if (log) fclose(log);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}