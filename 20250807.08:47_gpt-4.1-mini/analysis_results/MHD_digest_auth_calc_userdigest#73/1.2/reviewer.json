{
  "user_message": "An agent A claimed that the following MHD_digest_auth_calc_userdigest code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_calc_userdigest.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the macro _MHD_EXTERN before the function declaration. If _MHD_EXTERN is defined as a compiler-specific language extension (for example, a storage-class specifier or attribute specific to a particular compiler documented as an extension), then it constitutes the use of a language extension, violating MISRA C 2023 Rule 1.2. Since it is unclear from the provided code whether _MHD_EXTERN expands to such an extension, this scenario represents a potential violation where the use of compiler-specific extensions is introduced via _MHD_EXTERN.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nextern bool digest_init_one_time (struct DigestAlgorithm *da, enum MHD_DigestBaseAlgo algo);\nextern void digest_deinit (struct DigestAlgorithm *da);\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n    FILE *log_file = fopen(\"/tmp/logs/584.txt\", \"a\");\n    if (log_file != NULL)\n    {\n        fprintf(log_file, \"Entered MHD_digest_auth_calc_userdigest\\n\");\n        fprintf(log_file, \"Using _MHD_EXTERN extension for the function declaration\\n\");\n        fclose(log_file);\n    }\n\n    struct DigestAlgorithm da;\n    enum MHD_Result ret;\n\n    if (!digest_init_one_time(&da, get_base_digest_algo(algo3)))\n    {\n        log_file = fopen(\"/tmp/logs/584.txt\", \"a\");\n        if (log_file != NULL) {\n            fprintf(log_file, \"digest_init_one_time returned false, returning MHD_NO\\n\");\n            fclose(log_file);\n        }\n        return MHD_NO;\n    }\n\n    if (digest_get_size(&da) > bin_buf_size)\n    {\n        log_file = fopen(\"/tmp/logs/584.txt\", \"a\");\n        if (log_file != NULL) {\n            fprintf(log_file, \"digest_get_size > bin_buf_size, setting ret = MHD_NO\\n\");\n            fclose(log_file);\n        }\n        ret = MHD_NO;\n    }\n    else\n    {\n        calc_userdigest(&da,\n                        username,\n                        strlen(username),\n                        realm,\n                        strlen(realm),\n                        password,\n                        userdigest_bin);\n        ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n        if (digest_ext_error(&da))\n            ret = MHD_NO;\n#endif\n\n        log_file = fopen(\"/tmp/logs/584.txt\", \"a\");\n        if (log_file != NULL) {\n            fprintf(log_file, \"calc_userdigest executed, ret set to %s\\n\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n            fclose(log_file);\n        }\n    }\n    digest_deinit(&da);\n\n    log_file = fopen(\"/tmp/logs/584.txt\", \"a\");\n    if (log_file != NULL) {\n        fprintf(log_file, \"Returning ret = %s from MHD_digest_auth_calc_userdigest\\n\", (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n        fclose(log_file);\n    }\n\n    return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 1.2 prohibits the use of language extensions\u2014features beyond the standard C language as defined by the compiler documentation. The macro _MHD_EXTERN is used before the function declaration, but the provided code and scenario do not define or show what _MHD_EXTERN expands to. Without knowing whether _MHD_EXTERN expands to a standard storage-class specifier like 'extern' or to a compiler-specific attribute or extension (e.g., __declspec, __attribute__, or any other non-standard extension), we cannot conclusively determine if it violates Rule 1.2. The fact that the test code failed to compile suggests that the macro might not be set or defined properly during compile time, not necessarily that it is a language extension. Therefore, in the absence of further evidence or a definition indicating that _MHD_EXTERN is a non-standard extension, the claim of violation is unproven. Hence, the report that the function violates Rule 1.2 due to _MHD_EXTERN is not correct based on the information provided."
}