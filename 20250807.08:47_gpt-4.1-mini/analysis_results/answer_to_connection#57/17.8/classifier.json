{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/461.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function answer_to_connection:\nstatic enum MHD_Result\nsend_page (struct MHD_Connection *connection, const char *page)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n\n  response = MHD_create_response_from_buffer_static (strlen (page), page);\n  if (! response)\n    return MHD_NO;\n\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n\n  return ret;\n}\n...\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n...\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n</additional code>\nJudge whether the above answer_to_connection code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "The function answer_to_connection modifies the pointer parameter *req_cls by assigning to it (e.g., *req_cls = (void *) con_info;) within the function body, which violates MISRA C 2023 Rule 17.8 that prohibits modification of function parameters. Although modifying the object pointed to by a pointer parameter is allowed, modifying the pointer parameter itself is not. Here, req_cls is a pointer to a pointer, and *req_cls is modified, effectively modifying the parameter pointer itself.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\n#define POSTBUFFERSIZE 512\n\nenum MHD_Result { MHD_NO=0, MHD_YES=1, MHD_HTTP_OK=200 };\nenum ConnectionType {GET=0, POST=1};\n\nstruct MHD_Connection {};\nstruct MHD_PostProcessor {};\n\nstruct connection_info_struct {\n    void *answerstring;\n    struct MHD_PostProcessor *postprocessor;\n    enum ConnectionType connectiontype;\n};\n\n// Dummy implementations\nstruct MHD_PostProcessor *\nMHD_create_post_processor(struct MHD_Connection *connection,\n                         size_t buffer_size,\n                         void *iterate_post,\n                         void *iter_cls) { return (struct MHD_PostProcessor*)1; }\n\nint MHD_post_process(struct MHD_PostProcessor *pp, const char *post_data, size_t post_data_len) { return MHD_YES; }\n\nint send_page(struct MHD_Connection *connection, const char *page) { return MHD_YES; }\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n    FILE *log = fopen(\"/tmp/logs/461.txt\",\"a\");\n    if (log == NULL) return MHD_NO;\n\n    fprintf(log, \"Entering answer_to_connection\\n\");\n    fprintf(log, \"Initial *req_cls: %p\\n\", *req_cls);\n\n    (void) cls; (void) url; (void) version;\n\n    if (NULL == *req_cls)\n    {\n        struct connection_info_struct *con_info;\n\n        con_info = malloc(sizeof(struct connection_info_struct));\n        if (NULL == con_info)\n        {\n            fprintf(log, \"malloc failed\\n\");\n            fclose(log);\n            return MHD_NO;\n        }\n        con_info->answerstring = NULL;\n\n        if (0 == strcmp(method, \"POST\"))\n        {\n            con_info->postprocessor = MHD_create_post_processor(connection, POSTBUFFERSIZE, NULL, (void *)con_info);\n            \n            if (NULL == con_info->postprocessor)\n            {\n                free(con_info);\n                fprintf(log, \"postprocessor creation failed\\n\");\n                fclose(log);\n                return MHD_NO;\n            }\n            con_info->connectiontype = POST;\n        }\n        else\n            con_info->connectiontype = GET;\n\n        fprintf(log, \"Before modifying *req_cls: %p\\n\", *req_cls);\n        *req_cls = (void *) con_info; // Violation: modifying parameter *req_cls\n        fprintf(log, \"After modifying *req_cls: %p\\n\", *req_cls);\n\n        fclose(log);\n        return MHD_YES;\n    }\n\n    fprintf(log, \"No modification to *req_cls needed, current value: %p\\n\", *req_cls);\n    fclose(log);\n\n    if (0 == strcmp(method, \"GET\"))\n    {\n        return send_page(connection, \"askpage\");\n    }\n\n    if (0 == strcmp(method, \"POST\"))\n    {\n        struct connection_info_struct *con_info = *req_cls;\n\n        if (*upload_data_size != 0)\n        {\n            if (MHD_YES != MHD_post_process(con_info->postprocessor, upload_data, *upload_data_size))\n                return MHD_NO;\n            *upload_data_size = 0;\n\n            return MHD_YES;\n        }\n        else if (NULL != con_info->answerstring)\n            return send_page(connection, con_info->answerstring);\n    }\n\n    return send_page(connection, \"errorpage\");\n}\n"
}