{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function answer_to_connection modifies the pointer parameter *req_cls by assigning to it (e.g., *req_cls = (void *) con_info;) within the function body, which violates MISRA C 2023 Rule 17.8 that prohibits modification of function parameters. Although modifying the object pointed to by a pointer parameter is allowed, modifying the pointer parameter itself is not. Here, req_cls is a pointer to a pointer, and *req_cls is modified, effectively modifying the parameter pointer itself.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum ConnectionType {GET=0, POST=1};\nstruct MHD_Connection {};\nstruct MHD_PostProcessor {};\nstruct MHD_PostProcessor *\nMHD_create_post_processor(struct MHD_Connection *connection,\n                         size_t buffer_size,\n                         void *iterate_post,\n                         void *iter_cls) { return (struct MHD_PostProcessor*)1; }\nint MHD_post_process(struct MHD_PostProcessor *pp, const char *post_data, size_t post_data_len) { return MHD_YES; }\n\nint send_page(struct MHD_Connection *connection, const char *page) { return MHD_YES; }\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n    FILE *log = fopen(\"/tmp/logs/461.txt\",\"a\");\n    if (log == NULL) return MHD_NO;\n\n    fprintf(log, \"Entering answer_to_connection\\n\");\n    fprintf(log, \"Initial *req_cls: %p\\n\", *req_cls);\n\n    (void) cls; (void) url; (void) version;\n\n    if (NULL == *req_cls)\n    {\n        struct connection_info_struct *con_info;\n\n        con_info = malloc(sizeof(struct connection_info_struct));\n        if (NULL == con_info)\n        {\n            fprintf(log, \"malloc failed\\n\");\n            fclose(log);\n            return MHD_NO;\n        }\n        con_info->answerstring = NULL;\n\n        if (0 == strcmp(method, \"POST\"))\n        {\n            con_info->postprocessor = MHD_create_post_processor(connection, POSTBUFFERSIZE, NULL, (void *)con_info);\n\n            if (NULL == con_info->postprocessor)\n            {\n                free(con_info);\n                fprintf(log, \"postprocessor creation failed\\n\");\n                fclose(log);\n                return MHD_NO;\n            }\n            con_info->connectiontype = POST;\n        }\n        else\n            con_info->connectiontype = GET;\n\n        fprintf(log, \"Before modifying *req_cls: %p\\n\", *req_cls);\n        *req_cls = (void *) con_info;\n        fprintf(log, \"After modifying *req_cls: %p\\n\", *req_cls);\n\n        fclose(log);\n        return MHD_YES;\n    }\n\n    fprintf(log, \"No modification to *req_cls needed, current value: %p\\n\", *req_cls);\n    fclose(log);\n\n    if (0 == strcmp(method, \"GET\"))\n    {\n        return send_page(connection, \"askpage\");\n    }\n\n    if (0 == strcmp(method, \"POST\"))\n    {\n        struct connection_info_struct *con_info = (struct connection_info_struct *)*req_cls;\n\n        if (*upload_data_size != 0)\n        {\n            if (MHD_YES != MHD_post_process(con_info->postprocessor, upload_data, *upload_data_size))\n                return MHD_NO;\n            *upload_data_size = 0;\n\n            return MHD_YES;\n        }\n        else if (NULL != con_info->answerstring)\n            return send_page(connection, con_info->answerstring);\n    }\n\n    return send_page(connection, \"errorpage\");\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter should not be modified. However, modifying the object pointed to by a pointer parameter is permitted, while modifying the pointer parameter itself (i.e., the pointer variable passed by value) is not. In the provided code, the parameter 'req_cls' is a pointer to a pointer (void **req_cls). The code modifies '*req_cls', that is, the object pointed to by the pointer parameter, not the pointer parameter 'req_cls' itself. Modifying '*req_cls' changes the data the caller's pointer refers to, but the parameter pointer 'req_cls' itself (the pointer variable local to the function) is not modified. Therefore, this is allowed by the rule. Agent A's interpretation appears to conflate modifying the pointer parameter itself (which is not done) with modifying the object pointed to by the pointer parameter (which is done and allowed). Consequently, the report that this code violates Rule 17.8 is incorrect."
}