{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                     enum MHD_ValueKind kind,\n                     const char *header,\n                     size_t header_len,\n                     const char *content,\n                     size_t content_len)\n{\n  FILE *log = fopen(\"/tmp/logs/727.txt\", \"w\");\n  if (log == NULL) return false;\n\n  if (NULL == response) {\n    fprintf(log, \"response is NULL\\n\");\n    fclose(log);\n    return false;\n  }\n\n  fprintf(log, \"header_len = %zu\\n\", header_len);\n  fprintf(log, \"content_len = %zu\\n\", content_len);\n\n  if (0 == header_len) {\n    fprintf(log, \"header_len is zero\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (0 == content_len) {\n    fprintf(log, \"content_len is zero\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\t', header_len)) {\n    fprintf(log, \"Found '\\t' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, ' ', header_len)) {\n    fprintf(log, \"Found ' ' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\r', header_len)) {\n    fprintf(log, \"Found '\\r' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\n', header_len)) {\n    fprintf(log, \"Found '\\n' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (content, '\\r', content_len)) {\n    fprintf(log, \"Found '\\r' in content\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (content, '\\n', content_len)) {\n    fprintf(log, \"Found '\\n' in content\\n\");\n    fclose(log);\n    return false;\n  }\n\n  fprintf(log, \"Passing arguments to MHD_add_response_entry_no_check_\\n\");\n  fclose(log);\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpklxcr7fr/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nstruct MHD_Response;\n\nenum MHD_ValueKind {\n    MHD_KIND_GET,\n    MHD_KIND_POST,\n    // other kinds as needed\n};\n\n// Dummy declaration for MHD_add_response_entry_no_check_\nbool MHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                    enum MHD_ValueKind kind,\n                                    const char *header,\n                                    size_t header_len,\n                                    const char *content,\n                                    size_t content_len);\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                     enum MHD_ValueKind kind,\n                     const char *header,\n                     size_t header_len,\n                     const char *content,\n                     size_t content_len)\n{\n  FILE *log = fopen(\"/tmp/logs/727.txt\", \"w\");\n  if (log == NULL) return false;\n\n  if (NULL == response) {\n    fprintf(log, \"response is NULL\\n\");\n    fclose(log);\n    return false;\n  }\n\n  fprintf(log, \"header_len = %zu\\n\", header_len);\n  fprintf(log, \"content_len = %zu\\n\", content_len);\n\n  if (0 == header_len) {\n    fprintf(log, \"header_len is zero\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (0 == content_len) {\n    fprintf(log, \"content_len is zero\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\t', header_len)) {\n    fprintf(log, \"Found '\\t' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, ' ', header_len)) {\n    fprintf(log, \"Found ' ' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\r', header_len)) {\n    fprintf(log, \"Found '\\r' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (header, '\\n', header_len)) {\n    fprintf(log, \"Found '\\n' in header\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (content, '\\r', content_len)) {\n    fprintf(log, \"Found '\\r' in content\\n\");\n    fclose(log);\n    return false;\n  }\n\n  if (NULL != memchr (content, '\\n', content_len)) {\n    fprintf(log, \"Found '\\n' in content\\n\");\n    fclose(log);\n    return false;\n  }\n\n  fprintf(log, \"Passing arguments to MHD_add_response_entry_no_check_\\n\");\n  fclose(log);\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n",
  "explanation": "The main issue was missing declarations and includes, which would prevent the code from compiling. I added necessary includes, namely <stdio.h>, <stdbool.h>, and <string.h> for memchr and size_t. I added forward declarations of the struct MHD_Response and the enum MHD_ValueKind with placeholder values to satisfy type requirements. I also declared a prototype for the function MHD_add_response_entry_no_check_ since it was used but not defined or declared in the original snippet. No changes were made to the internal logic of add_response_entry_n, preserving all original checks and behavior. This ensures the given function compiles successfully when integrated into a project."
}