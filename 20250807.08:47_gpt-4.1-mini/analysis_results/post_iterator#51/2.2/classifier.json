{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/410.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of post_iterator as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function post_iterator:\nstruct Request\n{\n\n  /**\n   * Associated session.\n   */\n  struct Session *session;\n\n  /**\n   * Post processor handling form data (IF this is\n   * a POST request).\n   */\n  struct MHD_PostProcessor *pp;\n\n  /**\n   * URL to serve in response to this POST (if this request\n   * was a 'POST')\n   */\n  const char *post_url;\n\n}\n...\nstruct Session\n{\n  /**\n   * We keep all sessions in a linked list.\n   */\n  struct Session *next;\n\n  /**\n   * Unique ID for this session.\n   */\n  char sid[33];\n\n  /**\n   * Reference counter giving the number of connections\n   * currently using this session.\n   */\n  unsigned int rc;\n\n  /**\n   * Time when this session was last active.\n   */\n  time_t start;\n\n  /**\n   * String submitted via form.\n   */\n  char value_1[64];\n\n  /**\n   * Another value submitted via form.\n   */\n  char value_2[64];\n\n}\n...\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n</additional code>\nJudge whether the above post_iterator code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code contains operations that are executed but whose removal would not affect program behavior. Specifically, the sequence of casting unused parameters to void ((void) kind; (void) filename; (void) content_type; (void) transfer_encoding;) are effectively dead code since they serve only to silence compiler warnings without impacting program logic or behavior.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nenum MHD_Result\n{\n  MHD_NO = 0,\n  MHD_YES = 1\n};\n\nstruct Session\n{\n  char sid[33];\n  char value_1[64];\n  char value_2[64];\n};\n\nstruct Request\n{\n  struct Session *session;\n};\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_Result kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n\n  FILE *log = fopen(\"/tmp/logs/410.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"post_iterator called with key='%s', off=%llu, size=%zu\\n\", key, (unsigned long long)off, size);\n  }\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  if (log != NULL) fprintf(log, \"(void) kind; executed\\n\");\n  (void) filename;          /* Unused. Silent compiler warning. */\n  if (log != NULL) fprintf(log, \"(void) filename; executed\\n\");\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  if (log != NULL) fprintf(log, \"(void) content_type; executed\\n\");\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  if (log != NULL) fprintf(log, \"(void) transfer_encoding; executed\\n\");\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    if (log != NULL) fprintf(log, \"Branch DONE taken\\n\");\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    if (log != NULL) fprintf(log, \"Exiting with MHD_YES\\n\");\n    if (log != NULL) fclose(log);\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (log != NULL) fprintf(log, \"Branch v1 taken\\n\");\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      if (log != NULL) fprintf(log, \"Discard extra data for v1; Exiting with MHD_YES\\n\");\n      if (log != NULL) fclose(log);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    if (log != NULL) fprintf(log, \"Copied data to value_1; Exiting with MHD_YES\\n\");\n    if (log != NULL) fclose(log);\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (log != NULL) fprintf(log, \"Branch v2 taken\\n\");\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      if (log != NULL) fprintf(log, \"Discard extra data for v2; Exiting with MHD_YES\\n\");\n      if (log != NULL) fclose(log);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    if (log != NULL) fprintf(log, \"Copied data to value_2; Exiting with MHD_YES\\n\");\n    if (log != NULL) fclose(log);\n    return MHD_YES;\n  }\n\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  if (log != NULL) fprintf(log, \"Unsupported form value; Exiting with MHD_YES\\n\");\n  if (log != NULL) fclose(log);\n  return MHD_YES;\n}\n"
}