{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/143.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_SocketAddrFromString_Impl code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "When calling inet_pton, the function could write beyond the bounds of the buffer pointed to by 'addrbuffer' if 'string' is too large or inappropriate, especially if the internal implementation of inet_pton does not correctly handle buffer sizes. Since 'addrbuffer' points to 'sin_addr' or 'sin6_addr' which are of fixed sizes, passing a malformed or overly long 'string' could potentially lead to buffer overflow if inet_pton does not handle bounds correctly.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <arpa/inet.h>\n\n// Log file pointer\nstatic FILE *log_file = NULL;\n\n// Logging function\nvoid log_event(const char *event)\n{\n    if (!log_file)\n    {\n        log_file = fopen(\"/tmp/logs/143.txt\", \"a\");\n    }\n    if (log_file)\n    {\n        fprintf(log_file, \"%s\\n\", event);\n        fflush(log_file);\n    }\n}\n\n// Modified function with logging\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void * addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            log_event(\"AF_INET case: addrbuffer set to &Accessor->sa_in.sin_addr\");\n            break;\n        #ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            log_event(\"AF_INET6 case: addrbuffer set to &Accessor->sa_in6.sin6_addr\");\n            break;\n        #endif\n        default:\n            log_event(\"Default case: unsupported sa_family\");\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    int result = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n    if (result != 1)\n    {\n        log_event(\"inet_pton failed to parse address string\");\n        return OS_ERROR;\n    }\n    log_event(\"inet_pton succeeded, address stored successfully\");\n    return OS_SUCCESS;\n}\n"
}