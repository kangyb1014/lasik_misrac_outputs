{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/137.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketAddrFromString_Impl:\n#define OS_ERR_BAD_ADDRESS (-34)\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nJudge whether the above OS_SocketAddrFromString_Impl code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The function contains a default case in the switch statement that returns OS_ERR_BAD_ADDRESS, which may be considered unreachable if all os_sockaddr_t struct variants are properly handled and the 'sa_family' field only takes known values. If the 'sa_family' can only be AF_INET or AF_INET6, then the default case is unreachable, violating MISRA C 2023 Rule 2.1.",
  "test_code": "#include <stdio.h>\n#include <arpa/inet.h>\n\n// Existing code of OS_SocketAddrFromString_Impl, with added logging\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    FILE *logfile = fopen(\"/tmp/logs/137.txt\", \"a\");\n    if(logfile == NULL) return -1; // fail to open log file\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            fprintf(logfile, \"Path: AF_INET branch reached\\n\");\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            fprintf(logfile, \"Path: AF_INET6 branch reached\\n\");\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            fprintf(logfile, \"Warning: Default case reached with sa_family=%d\\n\", Accessor->sa.sa_family);\n            fclose(logfile);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        fprintf(logfile, \"inet_pton failed for family=%d, string=%s\\n\", Accessor->sa.sa_family, string);\n        fclose(logfile);\n        return OS_ERROR;\n    }\n\n    fprintf(logfile, \"Function success path\\n\");\n    fclose(logfile);\n    return OS_SUCCESS;\n}"
}