{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_MutSemTake_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/120.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemTake_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake_Impl:\n```c\nint32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** Lock the mutex\n    */\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemTake_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n</additional code>\nJudge whether the above OS_MutSemTake_Impl code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses 'pthread_mutex_lock', which is a compiler extension specific to POSIX. If the compiler or platform being used supports POSIX extensions explicitly and this support is not declared as a standard language feature, then this constitutes a language extension usage.",
  "test_code": "int32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /* Log the current control path before locking */\n    FILE *logfile = fopen(\"/tmp/logs/120.txt\", \"a\");\n    if (logfile != NULL)\n    {\n        fprintf(logfile, \"Attempting to lock mutex for token: %p\\n\", (void*)token);\n        fclose(logfile);\n    }\n\n    /* Lock the mutex using pthread (POSIX extension) */\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        /* Log failure to lock */\n        logfile = fopen(\"/tmp/logs/120.txt\", \"a\");\n        if (logfile != NULL)\n        {\n            fprintf(logfile, \"Failed to lock mutex for token: %p, error: %d\\n\", (void*)token, status);\n            fclose(logfile);\n        }\n        return OS_SEM_FAILURE;\n    }\n\n    /* Log success that mutex was locked */\n    logfile = fopen(\"/tmp/logs/120.txt\", \"a\");\n    if (logfile != NULL)\n    {\n        fprintf(logfile, \"Mutex locked for token: %p\\n\", (void*)token);\n        fclose(logfile);\n    }\n\n    return OS_SUCCESS;\n}"
}