{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/57.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nJudge whether the above OS_TaskRegister_Impl code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The function contains a code path where the `pthread_setcancelstate` and `pthread_setcanceltype` functions are called, but in case of an exception or error before these calls or after, the code may jump to a point where the function ends without executing these calls, rendering certain parts unreachable depending on control flow modifications, or assuming the functions always succeed. This could lead to unreachable or dead code paths if error handling or exceptions are introduced that bypass these statements.",
  "test_code": "```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    FILE *log_file = fopen(\"/tmp/logs/57.txt\", \"w\");\n    if (log_file == NULL) return OS_ERROR;\n\n    int32 return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int old_state;\n    int old_type;\n\n    fprintf(log_file, \"Entering OS_TaskRegister_Impl - setting cancel state.\\n\");\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    fprintf(log_file, \"Cancel state set, old_state=%d\\n\", old_state);\n\n    fprintf(log_file, \"Setting cancel type.\\n\");\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n    fprintf(log_file, \"Cancel type set, old_type=%d\\n\", old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    arg.id = global_task_id;\n\n    int ret = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    fprintf(log_file, \"pthread_setspecific returned %d\\n\", ret);\n    if (ret == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        fprintf(log_file, \"Error in pthread_setspecific: %s\\n\", strerror(ret));\n        return_code = OS_ERROR;\n    }\n\n    fclose(log_file);\n    return return_code;\n}\n```"
}