{
  "user_message": "An agent A claimed that the following OS_SymbolLookup_Static code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of OS_SymbolLookup_Static.\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_SymbolLookup_Static modifies the pointer parameter *SymbolAddress by assigning a value to it, which violates MISRA C 2023 Rule 17.8 that states a function parameter should not be modified if it is a pointer parameter.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32 return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;\n\n    FILE *log_file = fopen(\"/tmp/logs/85.txt\", \"w\");\n    if (log_file == NULL) {\n        return return_code;\n    }\n\n    while (StaticSym != NULL) {\n        fprintf(log_file, \"Entered loop, StaticSym: %p, Name: %s, Module: %s\\n\", (void*)StaticSym, StaticSym->Name, StaticSym->Module);\n        if (StaticSym->Name == NULL) {\n            fprintf(log_file, \"End of list reached, setting return_code to OS_ERROR\\n\");\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0)) {\n            fprintf(log_file, \"Match found, assigning to *SymbolAddress\\n\");\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            fprintf(log_file, \"*SymbolAddress set to: %p\\n\", (void*)(*SymbolAddress));\n            return_code = OS_SUCCESS;\n            break;\n        }\n        ++StaticSym;\n    }\n\n    fclose(log_file);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SymbolLookup_Static. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The original code modifies the content pointed to by the parameter 'SymbolAddress', which is a pointer parameter. According to MISRA C 2023 Rule 17.8, a function parameter that is a pointer should not be modified (i.e., the pointer itself should not be changed), but the object it points to can be. Since the function assigns to '*SymbolAddress', it is modifying the object pointed to by the parameter. Given this, the agent's claim that the function violates Rule 17.8 is correct."
}