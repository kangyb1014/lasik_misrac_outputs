{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/194.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleLoad_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n...\n#define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n</additional code>\nJudge whether the above OS_ModuleLoad_Static code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "A loop that always executes without an exit condition or with a condition that never becomes false, preventing code after the loop from executing, thus dead code.",
  "test_code": "void Log_ControlPathAndState(const char *message); \n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32 return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            Log_ControlPathAndState(\"End of list reached without match\");\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            return_code = OS_SUCCESS;\n            Log_ControlPathAndState(\"Matching module found\");\n            break;\n        }\n        ++StaticSym;\n    }\n\n    Log_ControlPathAndState(\"Function exited\");\n    return return_code;\n}"
}