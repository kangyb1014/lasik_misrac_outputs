{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/118.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketAddrGetPort_Impl:\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n</additional code>\nJudge whether the above OS_SocketAddrGetPort_Impl code violates the rule 21.14 or not.",
  "is_rule_violated": true,
  "scenario": "The function OS_SocketAddrGetPort_Impl uses memcmp to compare the sa_family field of the socket address, which can be a null-terminated string in some contexts, or is potentially being compared using memcmp, violating MISRA C 2023 Rule 21.14.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <arpa/inet.h>\n#include <stdint.h>\n\ntypedef int32_t int32;\ntypedef uint16_t uint16;\ntypedef int OS_ERR;\n#define OS_ERR_BAD_ADDRESS -1\n#define OS_SUCCESS 0\n\ntypedef struct {\n    unsigned char AddrData[128]; // simplified placeholder\n} OS_SockAddr_t;\n\ntypedef struct {\n    union {\n        struct {\n            unsigned short sa_family;\n            struct {\n                unsigned short sin_port;\n                struct {\n                    unsigned int sin_addr;\n                } sin_addr;\n            } sa_in;\n        } sa;\n        struct {\n            unsigned short sa_family;\n            struct {\n                unsigned short sin6_port;\n            } sin6_addr;\n        } sa_in6;\n    } data;\n} OS_SockAddr_Accessor_t;\n\n// Function to test the use of memcmp\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    size_t family_offset = offsetof(OS_SockAddr_t, AddrData);\n    const void *ptr = (const void *)Addr->AddrData;\n    const OS_SockAddr_Accessor_t *Accessor = (const OS_SockAddr_Accessor_t *)ptr;\n    \n    unsigned short expected_family = 0;\n    size_t family_offset_in_access = offsetof(OS_SockAddr_Accessor_t, sa.sa_family);\n    // Log the control path\n    FILE *logfile = fopen(\"/tmp/logs/118.txt\", \"a\");\n    if (logfile != NULL) {\n        fprintf(logfile, \"Entered OS_SocketAddrGetPort_Impl with addr at %p\\n\", (void*)Addr);\n        fprintf(logfile, \"Accessor sa_family: %u\\n\", Accessor->sa.sa_family);\n        fclose(logfile);\n    }\n    \n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            *PortNum = ntohs(Accessor->sa_in.sin_port);\n            break;\n        case AF_INET6:\n            *PortNum = ntohs(Accessor->sa_in6.sin6_port);\n            break;\n        default:\n            return OS_ERR_BAD_ADDRESS;\n    }\n    return OS_SUCCESS;\n}\n"
}