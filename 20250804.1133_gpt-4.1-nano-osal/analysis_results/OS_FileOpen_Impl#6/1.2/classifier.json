{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/48.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_FileOpen_Impl code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses the open() function which is a system call, and depending on the compiler and platform, it may be implemented with language extensions or inline assembly, especially if certain compiler-specific attributes or features are used in the environment. If the compiler documentation explicitly states that open() is a language extension, then this violates MISRA C 2023 Rule 1.2.",
  "test_code": "// This scenario demonstrates the use of open() which may be considered a language extension depending on the compiler.\n// The log will record the control path entering the open function call.\n\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\n// Assuming required headers and types are included and available\n\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int os_perm;\n    int os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    static FILE *log_file = NULL;\n    if (!log_file) {\n        log_file = fopen(\"/tmp/logs/48.txt\", \"a\");\n    }\n\n    fprintf(log_file, \"Entering OS_FileOpen_Impl with path: %s\\n\", local_path);\n\n    switch (access_mode) {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            fprintf(log_file, \"Invalid access_mode: %d\\n\", access_mode);\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE) {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE) {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n    fprintf(log_file, \"open() called with path: %s, perm: %d, mode: %d, returned fd: %d\\n\", local_path, os_perm, os_mode, impl->fd);\n\n    if (impl->fd < 0) {\n        fprintf(log_file, \"Failed to open file: %s, error: %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n    fprintf(log_file, \"File opened successfully, fd: %d\\n\", impl->fd);\n\n    return OS_SUCCESS;\n}\n"
}