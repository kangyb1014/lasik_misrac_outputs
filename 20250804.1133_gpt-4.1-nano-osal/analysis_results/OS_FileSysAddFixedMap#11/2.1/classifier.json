{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FileSysAddFixedMap:\nvoid OS_ObjectIdTransactionFinish(OS_object_token_t *token, const osal_id_t *final_id)\n{\n    OS_common_record_t *record;\n\n    if (token->lock_mode == OS_LOCK_MODE_NONE)\n    {\n        /* nothing to do */\n        return;\n    }\n\n    record = OS_ObjectIdGlobalFromToken(token);\n\n    /* re-acquire global table lock to adjust refcount */\n    if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE || token->lock_mode == OS_LOCK_MODE_REFCOUNT)\n    {\n        OS_Lock_Global(token);\n    }\n\n    if (record->refcount > 0)\n    {\n        --record->refcount;\n    }\n\n    /*\n     * at this point the global mutex is always held, either\n     * from re-acquiring it above or it is still held from\n     * the original lock when using OS_LOCK_MODE_GLOBAL.\n     *\n     * If an ID update was pending (i.e. for a create/delete op)\n     * then do the ID update now while holding the mutex.\n     */\n    if (final_id != NULL)\n    {\n        record->active_id = *final_id;\n    }\n    else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n    {\n        /*\n         * If the lock type was EXCLUSIVE, it means that the ID in the record\n         * was reset to OS_OBJECT_ID_RESERVED.  This must restore the original\n         * object ID from the token.\n         */\n        record->active_id = token->obj_id;\n    }\n\n    /* always unlock (this also covers OS_LOCK_MODE_GLOBAL case) */\n    OS_Unlock_Global(token);\n\n    /*\n     * Setting to \"NONE\" indicates that this token has been\n     * released, and should not be released again.\n     */\n    token->lock_mode = OS_LOCK_MODE_NONE;\n}\n...\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n</additional code>\nJudge whether the above OS_FileSysAddFixedMap code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The function contains an early exit or a code path that is never reached due to condition checks. For example, if OS_CHECK_POINTER or OS_CHECK_STRING macros cause an immediate return on invalid input, then any code after these checks within the same function that assumes valid input might be unreachable.",
  "test_code": "/* Modified code to add logging for control flow and detection of unreachable code */\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    FILE *logfile = fopen(\"/tmp/logs/89.txt\", \"w\");\n    if (logfile == NULL)\n    {\n        return -1; /* Fail if log cannot be created */\n    }\n\n    OS_filesys_internal_record_t *filesys;\n    int32 return_code;\n    OS_object_token_t token;\n    const char *dev_name;\n\n    /* Validate inputs with logs */\n    fprintf(logfile, \"Checking filesys_id pointer.\\n\");\n    OS_CHECK_POINTER(filesys_id);\n    fprintf(logfile, \"Checking phys_path string.\\n\");\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    fprintf(logfile, \"Checking virt_path.\\n\");\n    OS_CHECK_PATHNAME(virt_path);\n\n    fprintf(logfile, \"Generating dev_name.\\n\");\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n        fprintf(logfile, \"No slash found, dev_name set to phys_path.\\n\");\n    }\n    else\n    {\n        ++dev_name;\n        fprintf(logfile, \"Slash found, dev_name points to %s.\\n\", dev_name);\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        fprintf(logfile, \"dev_name too long.\\n\");\n        fclose(logfile);\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    fprintf(logfile, \"Allocating object ID.\\n\");\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        fprintf(logfile, \"Object ID allocated. Initializing record.\\n\");\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /* mark the entry that it is a fixed disk */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /* \"mount\" implementation */\n        fprintf(logfile, \"Starting volume.\\n\");\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            fprintf(logfile, \"Mounted volume.\\n\");\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Finalize the object ID creation */\n        fprintf(logfile, \"Finalizing object id.\\n\");\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    fclose(logfile);\n    return return_code;\n}"
}